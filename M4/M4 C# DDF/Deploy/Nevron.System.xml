<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Nevron.System</name>
  </assembly>
  <members>
    <member name="T:Nevron.NTickDateTimeUnit">
      <summary>
            Represents the tick date time unit.
            </summary>
    </member>
    <member name="T:Nevron.NDateTimeUnit">
      <summary>
            Represents a date/time unit
            </summary>
    </member>
    <member name="T:Nevron.Serialization.INSurrogateSerializable">
      <summary>
            Implemented by objects that use surrogate serialization
            </summary>
    </member>
    <member name="P:Nevron.Serialization.INSurrogateSerializable.SurrogateSerializer">
      <summary>
            Gets the surrogate serializer for this object
            </summary>
    </member>
    <member name="M:Nevron.NDateTimeUnit.Add(System.DateTime,System.Int64)">
      <summary>
            Add the unitCount to the dateTime.
            </summary>
      <param name="dateTime">
      </param>
      <param name="unitCount">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.NDateTimeUnit.ToString">
      <summary>
            Returns the string representation of this date time unit
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.NDateTimeUnit.Clone">
      <summary>
            Creates an identical copy of this objects
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.NDateTimeUnit.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Serializes this measurement unit.
            </summary>
      <param name="info">
      </param>
      <param name="context">
      </param>
    </member>
    <member name="M:Nevron.NDateTimeUnit.FromName(System.String)">
      <summary>
            Returns the date unit corresponding to the specified unit name
            </summary>
      <param name="name">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.NDateTimeUnit.GetFromEnum(Nevron.DateTimeUnit)">
      <summary>
            Returns the NDateTimeUnit object corresponding to the date time unit enum value
            </summary>
      <param name="dateTimeUnit">
      </param>
      <returns>
      </returns>
    </member>
    <member name="F:Nevron.NDateTimeUnit.Century">
      <summary>
            The century unit.  
            </summary>
    </member>
    <member name="F:Nevron.NDateTimeUnit.Decade">
      <summary>
            The decade unit.  
            </summary>
    </member>
    <member name="F:Nevron.NDateTimeUnit.Year">
      <summary>
            The year unit.  
            </summary>
    </member>
    <member name="F:Nevron.NDateTimeUnit.HalfYear">
      <summary>
            Half year unit. 
            </summary>
    </member>
    <member name="F:Nevron.NDateTimeUnit.Quarter">
      <summary>
            The quarter of a year.  
            </summary>
    </member>
    <member name="F:Nevron.NDateTimeUnit.Month">
      <summary>
            A month.
            </summary>
    </member>
    <member name="F:Nevron.NDateTimeUnit.Week">
      <summary>
            A week.  
            </summary>
    </member>
    <member name="F:Nevron.NDateTimeUnit.Day">
      <summary>
            A day.  
            </summary>
    </member>
    <member name="F:Nevron.NDateTimeUnit.HalfDay">
      <summary>
            Half of a day.  
            </summary>
    </member>
    <member name="F:Nevron.NDateTimeUnit.Hour">
      <summary>
            An hour
            </summary>
    </member>
    <member name="F:Nevron.NDateTimeUnit.Minute">
      <summary>
            A minute.  
            </summary>
    </member>
    <member name="F:Nevron.NDateTimeUnit.Second">
      <summary>
            A second
            </summary>
    </member>
    <member name="F:Nevron.NDateTimeUnit.Millisecond">
      <summary>
            A millisecond. 
            </summary>
    </member>
    <member name="F:Nevron.NDateTimeUnit.Tick">
      <summary>
            A tick
            </summary>
    </member>
    <member name="P:Nevron.NDateTimeUnit.Ticks">
      <summary>
            Returns the number of ticks in this date time unit
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.NDateTimeUnit.IsRegular">
      <summary>
            Returns true if the unit is regular (e.g. always expressed with a fixed number of ticks)
            </summary>
    </member>
    <member name="P:Nevron.NDateTimeUnit.DateTimeUnit">
      <summary>
            The date/time unit enum value.
            </summary>
    </member>
    <member name="P:Nevron.NDateTimeUnit.SurrogateSerializer">
      <summary>
            Returns the surrogate serializer for this type
            </summary>
    </member>
    <member name="M:Nevron.NTickDateTimeUnit.Add(System.DateTime,System.Int64)">
      <summary>
            Add the unitCount to the dateTime.
            </summary>
      <param name="dateTime">
      </param>
      <param name="unitCount">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.NTickDateTimeUnit.ToTimSpan">
      <summary>
            Returns the time span equivalent of this date/time unit
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.NTickDateTimeUnit.Ticks">
      <summary>
            Returns the number of ticks in this date time unit
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.NTickDateTimeUnit.DateTimeUnit">
      <summary>
            The date/time unit enum value.
            </summary>
    </member>
    <member name="T:Nevron.NDecadeDateTimeUnit">
      <summary>
            Represents the decade day date time unit (10 years).
            </summary>
    </member>
    <member name="M:Nevron.NDecadeDateTimeUnit.Add(System.DateTime,System.Int64)">
      <summary>
            Add the unitCount to the dateTime.
            </summary>
      <param name="dateTime">
      </param>
      <param name="unitCount">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.NDecadeDateTimeUnit.Ticks">
      <summary>
            Returns the number of ticks in this date time unit
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.NDecadeDateTimeUnit.IsRegular">
      <summary>
            Returns true if the unit is regular (e.g. always expressed with a fixed number of ticks)
            </summary>
    </member>
    <member name="P:Nevron.NDecadeDateTimeUnit.DateTimeUnit">
      <summary>
            The date/time unit enum value.
            </summary>
    </member>
    <member name="T:Nevron.NLicenseManager">
      <summary>
            Manages Nevron License keys.
            </summary>
    </member>
    <member name="M:Nevron.NLicenseManager.ClearLicense">
      <summary>
            Clears the license contained in the manager and reverts to evaluation mode.
            </summary>
    </member>
    <member name="M:Nevron.NLicenseManager.SetLicense(Nevron.NLicense)">
      <summary>
            Sets a license to the license manager and disables evaluation mode.
            </summary>
      <param name="license">
      </param>
    </member>
    <member name="F:Nevron.NLicenseManager.Instance">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.NLicenseManager.License">
      <summary>
            Gets the current license
            </summary>
    </member>
    <member name="P:Nevron.NLicenseManager.LockLicense">
      <summary>
            Locks the current license from modification.
            </summary>
    </member>
    <member name="T:Nevron.NLicenseKey">
      <summary>
            Represents a license key.
            </summary>
    </member>
    <member name="M:Nevron.NLicenseKey.CompareTo(System.Object)">
      <summary>
            Compares this instance to a specified object and returns an indication of their relative values. 
            </summary>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.NLicenseKey.Clone">
      <summary>
            Creates an exact replica of this object
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.NLicenseKey.ToString">
      <summary>
            Returns the string representation of this object
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.NLicenseKey.Equals(System.Object)">
      <summary>
            Returns true if the object are equal
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.NLicenseKey.GetHashCode">
      <summary>
            Returns the hash code
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.NLicenseKey.Value">
      <summary>
            The string representation of this license key.
            </summary>
    </member>
    <member name="P:Nevron.NLicenseKey.Bytes">
      <summary>
            Gets the bytes of the key
            </summary>
    </member>
    <member name="M:Nevron.Licensing.NLicenseKeyInfo.CreateInfoFromBytes(System.Byte[])">
      <summary>
      </summary>
      <param name="keyBytes">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.Licensing.NLicenseKeyInfo.VersionId">
      <summary>
            The version of Id of the license
            </summary>
    </member>
    <member name="P:Nevron.Licensing.NLicenseKeyInfo.Subscription">
      <summary>
            Whether the license includes subscription
            </summary>
    </member>
    <member name="P:Nevron.Licensing.NLicenseKeyInfo.EditionType">
      <summary>
            Gets the edition type
            </summary>
    </member>
    <member name="P:Nevron.Licensing.NLicenseKeyInfo.MachineIdInfo">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.Licensing.NLicenseKeyInfo.MachineId">
      <summary>
            Gets a hashed code of the current CPU id
            </summary>
    </member>
    <member name="P:Nevron.Licensing.NLicenseKeyInfo.Description">
      <summary>
            Gets the info description
            </summary>
    </member>
    <member name="T:Nevron.INReferenceProvider">
      <summary>
            Implemented by objects, which can be referenced or can provide references to other objects
            </summary>
    </member>
    <member name="M:Nevron.INReferenceProvider.ProvideReference(System.Type)">
      <summary>
            Called to provide a reference to the object of the specified type
            </summary>
      <param name="referenceType">type of object for which to obtain a reference</param>
      <returns>reference to an object of the specified type, or null if such reference cannot be provided</returns>
    </member>
    <member name="T:Nevron.Serialization.NBinaryNonSerializedAttribute">
      <summary>
            Used to mark fields as binary non serialized
            </summary>
    </member>
    <member name="T:Nevron.Serialization.INSurrogateSerializer">
      <summary>
            Implemented by surrogate serializers.
            </summary>
    </member>
    <member name="P:Nevron.Serialization.INSurrogateSerializer.Object">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.FormulaEngine.INOperator">
      <summary>
            The INOperator interface is implemented by all operators
            </summary>
    </member>
    <member name="M:Nevron.FormulaEngine.INOperator.Evaluate(Nevron.FormulaEngine.NVariant,Nevron.FormulaEngine.NVariant)">
      <summary>
            Evaluates the operator
            </summary>
      <param name="argument1">argument 1</param>
      <param name="argument2">argument 2, or null if the operator is unary</param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.FormulaEngine.INOperator.Type">
      <summary>
            Gets the operator type
            </summary>
    </member>
    <member name="P:Nevron.FormulaEngine.INOperator.Priority">
      <summary>
            Gets the operator priority
            </summary>
    </member>
    <member name="P:Nevron.FormulaEngine.INOperator.IsUnary">
      <summary>
            Determines whether this is an unary operator
            </summary>
    </member>
    <member name="T:Nevron.FormulaEngine.INFunction">
      <summary>
            The INFunction interface is implemented by all functions, which can be evaluated by the expression engine
            </summary>
    </member>
    <member name="M:Nevron.FormulaEngine.INFunction.Evaluate(Nevron.FormulaEngine.NVariant[])">
      <summary>
            Evaluates the function 
            </summary>
      <param name="arguments">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaEngine.INFunction.GetArgumentsInfo(System.Int32@,System.Int32@)">
      <summary>
      </summary>
      <param name="minCount">
      </param>
      <param name="maxCount">
      </param>
    </member>
    <member name="P:Nevron.FormulaEngine.INFunction.Name">
      <summary>
            Gets the name of the function
            </summary>
    </member>
    <member name="P:Nevron.FormulaEngine.INFunction.Category">
      <summary>
            Gets the category to which the function belongs
            </summary>
    </member>
    <member name="T:Nevron.FormulaEngine.NFunctionElement">
      <summary>
            The NFunctionElement class represents a function
            </summary>
    </member>
    <member name="T:Nevron.FormulaEngine.NFormulaElement">
      <summary>
            The NFormulaElement abstract class serves as base class for all elements, 
            which can reside in the formula expression tree
            </summary>
    </member>
    <member name="M:Nevron.FormulaEngine.NFormulaElement.Evaluate(Nevron.FormulaEngine.NFormulaEngine)">
      <summary>
            Evaluates the formula element
            </summary>
      <param name="engine">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaEngine.NFormulaElement.ToTreeNode">
      <summary>
            Creates a tree node, which represents this element
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaEngine.NFunctionElement.Evaluate(Nevron.FormulaEngine.NFormulaEngine)">
      <summary>
            Evaluates the formula element. Overriden to return the result of the function evaluation. 
            </summary>
      <param name="engine">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaEngine.NFunctionElement.ToTreeNode">
      <summary>
            Creates a tree node which represents this element
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.FormulaEngine.NFunctionElement.Function">
      <summary>
            Gets a reference to the function, which this element represents
            </summary>
    </member>
    <member name="P:Nevron.FormulaEngine.NFunctionElement.Arguments">
      <summary>
            Gets a reference to the list of argument elements
            </summary>
    </member>
    <member name="T:Nevron.Filters.NOrFilter">
      <summary>
            The NOrFilter class is a composite filter, which represents a boolean algebra OR expression between the contained filters
            </summary>
    </member>
    <member name="T:Nevron.Filters.NCompositeFilter">
      <summary>
            Base class for all composite filters
            </summary>
    </member>
    <member name="T:Nevron.Filters.NFilter">
      <summary>
            Base class for all filters
            </summary>
    </member>
    <member name="T:Nevron.Filters.INFilter">
      <summary>
            Implemented by all filters
            </summary>
    </member>
    <member name="M:Nevron.Filters.INFilter.Filter(System.Object)">
      <summary>
            Filters the specified object using the filter criteria
            </summary>
      <param name="obj">object to filter</param>
      <returns>true if the object satisfies the filter criteria, otherwise false</returns>
    </member>
    <member name="M:Nevron.Filters.NFilter.Filter(System.Object)">
      <summary>
            Must override filter method
            </summary>
      <param name="obj">object to filter</param>
      <returns>true if the object satisfies the filter criteria, otherwise false</returns>
    </member>
    <member name="M:Nevron.Filters.NFilter.Clone">
      <summary>
            Creates an identical copy of this instance
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Filters.NCompositeFilter.Add(Nevron.Filters.INFilter)">
      <summary>
            Adds a new filter
            </summary>
      <param name="filter">filter to add</param>
    </member>
    <member name="M:Nevron.Filters.NCompositeFilter.Remove(Nevron.Filters.INFilter)">
      <summary>
            Removes the specified filter
            </summary>
      <param name="filter">filter to remove</param>
    </member>
    <member name="P:Nevron.Filters.NCompositeFilter.Filters">
      <summary>
            Gets/sets the contained filters
            </summary>
    </member>
    <member name="M:Nevron.Filters.NOrFilter.Filter(System.Object)">
      <summary>
            Overriden to return true if at least one of the contained filters returned true
            </summary>
      <param name="obj">object to filter</param>
      <returns>true if at least one of the contained filters returned true, otherwise false</returns>
    </member>
    <member name="T:Nevron.Dom.NElementStateChangeOperation">
      <summary>
            Represents an operation, which is recorded when the entire state or only fields of an element are about to be changed
            </summary>
    </member>
    <member name="T:Nevron.Dom.NOperation">
      <summary>
            The NOperation class represents an atomic history operation and serves as base class for 
            more specialized operations
            </summary>
    </member>
    <member name="M:Nevron.Dom.NOperation.Undo(Nevron.Dom.NElementHistoryService)">
      <summary>
            Undoes the operation
            </summary>
      <remarks>
            This implementation simply calls Execute
            </remarks>
      <param name="service">reference to the history service</param>
    </member>
    <member name="M:Nevron.Dom.NOperation.Redo(Nevron.Dom.NElementHistoryService)">
      <summary>
            Redoes the operation
            </summary>
      <remarks>
            The implementation simply calls Execute
            </remarks>
      <param name="service">reference to the history service</param>
    </member>
    <member name="M:Nevron.Dom.NOperation.Execute(Nevron.Dom.NElementHistoryService)">
      <summary>
            Executes the operation by toggling its state
            </summary>
      <param name="service">reference to the history service</param>
    </member>
    <member name="M:Nevron.Dom.NOperation.ToTreeNode(System.Windows.Forms.TreeNode)">
      <summary>
            Exports information about the operation as a leaf of the specified tree node parent
            </summary>
      <param name="parent">tree node parent</param>
    </member>
    <member name="P:Nevron.Dom.NOperation.Description">
      <summary>
            Gets/sets the operation description
            </summary>
    </member>
    <member name="M:Nevron.Dom.NElementStateChangeOperation.Execute(Nevron.Dom.NElementHistoryService)">
      <summary>
            Overriden to swap the state of the element and the internally stored element state copy
            </summary>
      <param name="service">reference to the history service</param>
    </member>
    <member name="P:Nevron.Dom.NElementStateChangeOperation.ElementUniqueId">
      <summary>
            Unique id used to resolve the element
            </summary>
    </member>
    <member name="P:Nevron.Dom.NElementStateChangeOperation.Hint">
      <summary>
            Optional hint passed to the element in order to recognize the state change
            </summary>
    </member>
    <member name="P:Nevron.Dom.NElementStateChangeOperation.StateChange">
      <summary>
            Indicates whether the operation stored the entire element state or only the state of the specified fields
            </summary>
    </member>
    <member name="P:Nevron.Dom.NElementStateChangeOperation.ElementCopy">
      <summary>
            Element copy in case the StateChange property is true
            </summary>
    </member>
    <member name="P:Nevron.Dom.NElementStateChangeOperation.FieldNames">
      <summary>
            Names of the fields whose values are saved in case the StateChange property is false
            </summary>
    </member>
    <member name="P:Nevron.Dom.NElementStateChangeOperation.FieldValuesCopies">
      <summary>
            Copies of the field values in case the StateChange property is false
            </summary>
    </member>
    <member name="T:Nevron.Dom.NFR">
      <summary>
            Namespace class for resources used by the Nevron.Dom assembly
            </summary>
    </member>
    <member name="F:Nevron.Dom.NFR.ServiceNodeEventSink">
      <summary>
            Name for the node event sink service
            </summary>
    </member>
    <member name="F:Nevron.Dom.NFR.ServiceElementHistory">
      <summary>
            Name for the element history service
            </summary>
    </member>
    <member name="F:Nevron.Dom.NFR.HistoryOperationInsertElement">
      <summary>
            Description for the insert element operation
            </summary>
    </member>
    <member name="F:Nevron.Dom.NFR.HistoryOperationRemoveElement">
      <summary>
            Description for the remove element operation
            </summary>
    </member>
    <member name="F:Nevron.Dom.NFR.HistoryOperationSetElementIndex">
      <summary>
            Description for the set element index operation
            </summary>
    </member>
    <member name="F:Nevron.Dom.NFR.HistoryTransactionRemoveAllElements">
      <summary>
            Description for the remove all elements transaction
            </summary>
    </member>
    <member name="F:Nevron.Dom.NFR.HistoryTransactionRemoveElement">
      <summary>
            Description for the remove element transaction
            </summary>
    </member>
    <member name="F:Nevron.Dom.NFR.HistoryFormatElementPropertyChange">
      <summary>
            Format string for element property changes 
            </summary>
    </member>
    <member name="F:Nevron.Dom.NFR.HistoryFormatAttributePropertyChange">
      <summary>
            Format string for attribute property changes 
            </summary>
    </member>
    <member name="T:Nevron.Dom.INIndexedAttributeContainer">
      <summary>
            Implemented by objects holding multiple attribute collections.
            </summary>
    </member>
    <member name="M:Nevron.Dom.INIndexedAttributeContainer.GetAttributeByNameAt(System.String,System.Int32)">
      <summary>
            Gets an an attribute by its name and index
            </summary>
      <param name="attributeName">name of the attribute</param>
      <param name="index">index of the attribute</param>
      <returns>a reference to the attribute</returns>
    </member>
    <member name="M:Nevron.Dom.INIndexedAttributeContainer.GetAttributesAt(System.Int32)">
      <summary>
            Gets the attributes at the specified index.
            </summary>
      <param name="index">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Dom.INIndexedAttributeContainer.GetAttributesCount">
      <summary>
            Gets the count of the contained attributes
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.Collections.NDoubleType">
      <summary>
            Summary description for NDoubleType.
            </summary>
    </member>
    <member name="T:Nevron.Collections.NType">
      <summary>
            Summary description for NType.
            </summary>
    </member>
    <member name="P:Nevron.Collections.NType.ObjectType">
      <summary>
            Returns the object type
            </summary>
    </member>
    <member name="P:Nevron.Collections.NType.DoubleType">
      <summary>
            Returns the object type
            </summary>
    </member>
    <member name="P:Nevron.Collections.NType.Int32Type">
      <summary>
            Returns the object type
            </summary>
    </member>
    <member name="T:Nevron.Collections.NDLLListEnumerator">
      <summary>
            Summary description for NDLLListEnumerator.
            </summary>
    </member>
    <member name="M:Nevron.Collections.NDLLListEnumerator.MoveNext">
      <summary>
            Advances the enumerator to the next element of the collection.  
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Collections.NDLLListEnumerator.Reset">
      <summary>
            Sets the enumerator to its initial position, which is before the first element in the list. 
            </summary>
    </member>
    <member name="P:Nevron.Collections.NDLLListEnumerator.Current">
      <summary>
            Gets the current element in the lists 
            </summary>
    </member>
    <member name="T:Nevron.Collections.BPlusRangeType">
      <summary>
            Summary description for Enumerations.
            </summary>
    </member>
    <member name="T:Nevron.NHalfDayDateTimeUnit">
      <summary>
            Represents the half day date time unit.
            </summary>
    </member>
    <member name="T:Nevron.INTimeSpanConvertable">
      <summary>
            Implemented by date/time units that can be converted to a TimeSpan
            </summary>
    </member>
    <member name="M:Nevron.INTimeSpanConvertable.ToTimSpan">
      <summary>
            Returns the time span equivalent of this date/time unit
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.NHalfDayDateTimeUnit.Add(System.DateTime,System.Int64)">
      <summary>
            Add the unitCount to the dateTime.
            </summary>
      <param name="dateTime">
      </param>
      <param name="unitCount">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.NHalfDayDateTimeUnit.ToTimSpan">
      <summary>
            Returns the time span equivalent of this date/time unit
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.NHalfDayDateTimeUnit.Ticks">
      <summary>
            Returns the number of ticks in this date time unit
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.NHalfDayDateTimeUnit.DateTimeUnit">
      <summary>
            The date/time unit enum value.
            </summary>
    </member>
    <member name="T:Nevron.Serialization.INBinaryStreamable">
      <summary>
            Implemented by objects that can be persisted in binary format
            </summary>
    </member>
    <member name="M:Nevron.Serialization.INBinaryStreamable.StreamToWriter(System.IO.BinaryWriter)">
      <summary>
            Writes the object content to the specified writer
            </summary>
      <param name="writer">
      </param>
    </member>
    <member name="M:Nevron.Serialization.INBinaryStreamable.StreamFromReader(System.IO.BinaryReader)">
      <summary>
            Reads the object content from the specified reader
            </summary>
      <param name="reader">
      </param>
    </member>
    <member name="T:Nevron.Serialization.NPropertyInfo">
      <summary>
            Summary description for NPropertyInfo.
            </summary>
    </member>
    <member name="T:Nevron.Serialization.NStateMemberInfo">
      <summary>
            Summary description for NMember.
            </summary>
    </member>
    <member name="T:Nevron.FormulaEngine.NOperatorElement">
      <summary>
            The NOperatorElement class represents an operator
            </summary>
    </member>
    <member name="M:Nevron.FormulaEngine.NOperatorElement.Evaluate(Nevron.FormulaEngine.NFormulaEngine)">
      <summary>
            Evaluates the formula element. Overriden to return the result of the operator evaluation.
            </summary>
      <param name="engine">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaEngine.NOperatorElement.ToTreeNode">
      <summary>
            Creates a tree node, which represents this element
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.FormulaEngine.NOperatorElement.Operator">
      <summary>
            Gets a reference to the operator, which this element represents
            </summary>
    </member>
    <member name="P:Nevron.FormulaEngine.NOperatorElement.Argument1">
      <summary>
            Gets/sets the first argument
            </summary>
    </member>
    <member name="P:Nevron.FormulaEngine.NOperatorElement.Argument2">
      <summary>
            Gets/sets the first argument (only used if the operator is binary)
            </summary>
    </member>
    <member name="T:Nevron.Dom.NAttributeContainer">
      <summary>
            Namespace class for basic attribute container implementation functions
            </summary>
    </member>
    <member name="M:Nevron.Dom.NAttributeContainer.SetAttributeByName(Nevron.Dom.INAttributeContainer,System.String,Nevron.Dom.INAttribute)">
      <summary>
            Sets a child or descendant attribute by its name
            </summary>
      <param name="attributeContainer">
      </param>
      <param name="attributeName">
      </param>
      <param name="attributeValue">
      </param>
    </member>
    <member name="M:Nevron.Dom.NAttributeContainer.FindAttributeByName(System.String,Nevron.Dom.NAttributeList)">
      <summary>
            Finds the child or descendant attribute specified by its name in the specified list of attributes
            </summary>
      <param name="attributeName">full or local attribute name</param>
      <param name="attributes">attributes in which to look for the specified attribute</param>
      <returns>reference to the attribute if it was found, otherwise null</returns>
    </member>
    <member name="M:Nevron.Dom.NAttributeContainer.GetAttributeNameWithoutLast(System.String)">
      <summary>
            Get the substring of the attribute name before the last dot
            </summary>
      <param name="attributeName">attribute name</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Dom.NAttributeContainer.GetFirstAttributeName(System.String)">
      <summary>
            Get the substring of the attribute name before ther first dot
            </summary>
      <param name="attributeName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.Dom.NService">
      <summary>
            The NService class represents a core INService interface implementation and serves as base class for 
            more specialized services
            </summary>
    </member>
    <member name="T:Nevron.Dom.INService">
      <summary>
            Implemented by all services
            </summary>
    </member>
    <member name="M:Nevron.Dom.INService.Start">
      <summary>
            Starts the service
            </summary>
    </member>
    <member name="M:Nevron.Dom.INService.Stop">
      <summary>
            Stops the service
            </summary>
    </member>
    <member name="M:Nevron.Dom.INService.Pause">
      <summary>
            Pauses the service
            </summary>
    </member>
    <member name="M:Nevron.Dom.INService.Resume">
      <summary>
            Resumes the service
            </summary>
    </member>
    <member name="M:Nevron.Dom.INService.Restart">
      <summary>
            Restarts the service
            </summary>
    </member>
    <member name="P:Nevron.Dom.INService.Name">
      <summary>
            Gets/sets the name of the service
            </summary>
    </member>
    <member name="P:Nevron.Dom.INService.Status">
      <summary>
            Gets the current service status
            </summary>
    </member>
    <member name="T:Nevron.INReferenceHolder">
      <summary>
            Implemented by objects, which can store references to other objects
            </summary>
    </member>
    <member name="M:Nevron.INReferenceHolder.UpdateReferences(Nevron.INReferenceProvider)">
      <summary>
            Updates the references stored by the object
            </summary>
      <remarks>
            The object can query the specified provider for references 
            </remarks>
      <param name="provider">provider from which to obtain references</param>
    </member>
    <member name="M:Nevron.INReferenceHolder.CreateNonSerializedObjects">
      <summary>
            Creates any non serialized objects, which the holder posseses
            </summary>
    </member>
    <member name="M:Nevron.INReferenceHolder.GetReferenceProvider">
      <summary>
            Obtains the reference provider to which the object is currently attached
            </summary>
      <returns>reference provider</returns>
    </member>
    <member name="M:Nevron.Dom.NService.Start">
      <summary>
            Starts the service
            </summary>
    </member>
    <member name="M:Nevron.Dom.NService.Stop">
      <summary>
            Stops the service
            </summary>
    </member>
    <member name="M:Nevron.Dom.NService.Pause">
      <summary>
            Pauses the service
            </summary>
    </member>
    <member name="M:Nevron.Dom.NService.Resume">
      <summary>
            Resumes the service
            </summary>
    </member>
    <member name="M:Nevron.Dom.NService.Restart">
      <summary>
            Restarts the service
            </summary>
    </member>
    <member name="M:Nevron.Dom.NService.ProvideReference(System.Type)">
      <summary>
            Called to provide a reference to the object of the specified type
            </summary>
      <remarks>
            This implementation returns this if this service is an instance of the specified reference type
            </remarks>
      <param name="referenceType">type of object for which to obtain a reference</param>
      <returns>reference to an object of the specified type, or null if such reference cannot be provided</returns>
    </member>
    <member name="M:Nevron.Dom.NService.UpdateReferences(Nevron.INReferenceProvider)">
      <summary>
            Updates the references stored by the object
            </summary>
      <remarks>
            The object can query the specified provider for references 
            </remarks>
      <param name="provider">provider from which to obtain references</param>
    </member>
    <member name="M:Nevron.Dom.NService.CreateNonSerializedObjects">
      <summary>
            Creates any non serialized objects, which the holder posseses
            </summary>
    </member>
    <member name="M:Nevron.Dom.NService.GetReferenceProvider">
      <summary>
            Obtains the reference provider to which the object is currently attached
            </summary>
      <returns>reference provider</returns>
    </member>
    <member name="M:Nevron.Dom.NService.OnStart">
      <summary>
            Called when the service is started
            </summary>
    </member>
    <member name="M:Nevron.Dom.NService.OnStop">
      <summary>
            Called when the service is stopped
            </summary>
    </member>
    <member name="M:Nevron.Dom.NService.OnPause">
      <summary>
            Called when the service is paused
            </summary>
    </member>
    <member name="M:Nevron.Dom.NService.OnResume">
      <summary>
            Called when the service is resumed
            </summary>
    </member>
    <member name="F:Nevron.Dom.NService.m_Provider">
      <summary>
      </summary>
    </member>
    <member name="E:Nevron.Dom.NService.Started">
      <summary>
            Fired when the service was started
            </summary>
    </member>
    <member name="E:Nevron.Dom.NService.Stopped">
      <summary>
            Fired when the service was stopped
            </summary>
    </member>
    <member name="E:Nevron.Dom.NService.Resumed">
      <summary>
            Fired when the service was resumed
            </summary>
    </member>
    <member name="E:Nevron.Dom.NService.Paused">
      <summary>
            Fired when the service was paused
            </summary>
    </member>
    <member name="P:Nevron.Dom.NService.Name">
      <summary>
            Gets/sets the name of the service
            </summary>
    </member>
    <member name="P:Nevron.Dom.NService.Status">
      <summary>
            Gets the current service status
            </summary>
    </member>
    <member name="T:Nevron.Dom.INUniquelyIdentifiable">
      <summary>
            Implemented by uniquely identifiable objects
            </summary>
    </member>
    <member name="P:Nevron.Dom.INUniquelyIdentifiable.UniqueId">
      <summary>
            Gets / sets the unique id of the object.
            </summary>
    </member>
    <member name="T:Nevron.Dom.INHistoryCallback">
      <summary>
            Implemented by elements and attributes, which need to be notified when their state has been changed from history
            </summary>
    </member>
    <member name="M:Nevron.Dom.INHistoryCallback.OnStateChangingFromHistory(System.String)">
      <summary>
            Called when the history is about to modify the object state
            </summary>
      <param name="hint">history hint, which was passed when the state was recorded</param>
    </member>
    <member name="M:Nevron.Dom.INHistoryCallback.OnStateChangedFromHistory(System.String)">
      <summary>
            Called when the history has modified the object state
            </summary>
      <param name="hint">history hint, which was passed when the state was recorded</param>
    </member>
    <member name="M:Nevron.Dom.INHistoryCallback.OnHistoryAction(System.String)">
      <summary>
            Called to perform a history action
            </summary>
      <param name="action">action name, which was passed when the action was recorded</param>
    </member>
    <member name="T:Nevron.Dom.NNodeTreeAttributeConverter">
      <summary>
            Iterates over the attributes in the tree and converts them using the specified set of converters.
            </summary>
    </member>
    <member name="T:Nevron.NCompositeConverter">
      <summary>
            Base class for all composite converters.
            </summary>
    </member>
    <member name="T:Nevron.INObjectConverter">
      <summary>
            Implemented by object converters.
            </summary>
    </member>
    <member name="M:Nevron.INObjectConverter.Convert(System.Object)">
      <summary>
            Converts the object.
            </summary>
      <param name="obj">object to convert</param>
      <returns>converted object</returns>
    </member>
    <member name="M:Nevron.INObjectConverter.CanConvert(System.Type)">
      <summary>
            Determines whether the converter can convert objects of the specified type 
            </summary>
      <param name="type">object type</param>
      <returns>true if objects of this type can be converted, otherwise false</returns>
    </member>
    <member name="P:Nevron.INObjectConverter.Converts">
      <summary>
            Returns an array of types converted by this object.
            </summary>
    </member>
    <member name="M:Nevron.NCompositeConverter.Convert(System.Object)">
      <summary>
            Converts the object.
            </summary>
      <param name="obj">object to convert</param>
      <returns>converted object</returns>
    </member>
    <member name="M:Nevron.NCompositeConverter.CanConvert(System.Type)">
      <summary>
            Determines whether the converter can convert objects of the specified type 
            </summary>
      <param name="type">object type</param>
      <returns>true if objects of this type can be converted, otherwise false</returns>
    </member>
    <member name="F:Nevron.NCompositeConverter.m_Converters">
      <summary>
            An array of contained converters
            </summary>
    </member>
    <member name="P:Nevron.NCompositeConverter.Converters">
      <summary>
            Gets / sets an array of object converters contained by this converter
            </summary>
    </member>
    <member name="P:Nevron.NCompositeConverter.Converts">
      <summary>
            Returns an array of types converted by this object.
            </summary>
    </member>
    <member name="M:Nevron.Dom.NNodeTreeAttributeConverter.Convert(System.Object)">
      <summary>
            Converts the attributes of root and all it's child elements
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.Dom.NNodeTreeAttributeConverter.NodeFilter">
      <summary>
            Gets or sets the node filter for this converter.
            </summary>
    </member>
    <member name="P:Nevron.Dom.NNodeTreeAttributeConverter.AttributeFilter">
      <summary>
            Gets or sets the attribute filter for this converter
            </summary>
    </member>
    <member name="T:Nevron.Collections.NSLList">
      <summary>
            Represents a singly linked list
            </summary>
    </member>
    <member name="M:Nevron.Collections.NSLList.FindNodeIndex(Nevron.Collections.NSLListNode)">
      <summary>
            Returns the index of the node in this list
            </summary>
      <param name="node">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Collections.NSLList.Contains(Nevron.Collections.NSLListNode)">
      <summary>
            Returns true if the list contains the specified node
            </summary>
      <param name="node">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Collections.NSLList.Remove(Nevron.Collections.NSLListNode)">
      <summary>
            Removes the node
            </summary>
      <param name="node">
      </param>
    </member>
    <member name="M:Nevron.Collections.NSLList.Prepend(Nevron.Collections.NSLListNode)">
      <summary>
            Adds a new node at the beginning of the list
            </summary>
      <param name="node">
      </param>
    </member>
    <member name="M:Nevron.Collections.NSLList.Append(Nevron.Collections.NSLListNode)">
      <summary>
            Adds a new node at the end of the list
            </summary>
      <param name="node">
      </param>
    </member>
    <member name="P:Nevron.Collections.NSLList.Count">
      <summary>
            Returns the number of nodes in the list
            </summary>
    </member>
    <member name="P:Nevron.Collections.NSLList.First">
      <summary>
            Returns the first node in the list
            </summary>
    </member>
    <member name="P:Nevron.Collections.NSLList.Last">
      <summary>
            Returns the last node in the list
            </summary>
    </member>
    <member name="T:Nevron.Collections.NInt64List">
      <summary>
            Represents a list of long (Int64) values
            </summary>
    </member>
    <member name="T:Nevron.Collections.NList">
      <summary>
            Base class for all strongly typed lists
            </summary>
    </member>
    <member name="M:Nevron.Collections.NList.GetEnumerator">
      <summary>
            Obtains an enumerator for this list
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Collections.NList.Clear">
      <summary>
            Clears the collection
            </summary>
    </member>
    <member name="M:Nevron.Collections.NList.RemoveAt(System.Int32)">
      <summary>
            Removes the value at the specified index
            </summary>
      <param name="index">index at which to remove</param>
    </member>
    <member name="M:Nevron.Collections.NList.Clone">
      <summary>
            Creates an exact replica of this object.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.Collections.NList.Count">
      <summary>
            Gets the count of objects in this list
            </summary>
    </member>
    <member name="M:Nevron.Collections.NInt64List.Add(System.Int64)">
      <summary>
            Adds the long to the end of the collection
            </summary>
      <param name="value">
      </param>
      <returns>The zero-based index at which the new element is inserted</returns>
    </member>
    <member name="M:Nevron.Collections.NInt64List.AddRange(System.Int64[])">
      <summary>
            Copies the elements of a long array to the end of the collection.
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:Nevron.Collections.NInt64List.AddRange(Nevron.Collections.NInt64List)">
      <summary>
            Copies the elements of an int64 list to the end of the collection.
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:Nevron.Collections.NInt64List.Contains(System.Int64)">
      <summary>
            Determines whether the specified long is in the collection
            </summary>
      <param name="value">
      </param>
      <returns>if value is found in the collection otherwise, false</returns>
    </member>
    <member name="M:Nevron.Collections.NInt64List.CopyTo(System.Int64[],System.Int32)">
      <summary>
            Copies the entire collection values to a one-dimensional array of longs, starting at the specified index of the target array.
            </summary>
      <param name="array">The one-dimensional array of longs that is the destination of the elements copied from collection. The Array must have zero-based indexing</param>
      <param name="index">The zero-based index in array at which copying begins.</param>
    </member>
    <member name="M:Nevron.Collections.NInt64List.IndexOf(System.Int64)">
      <summary>
            Searches for the specified long value and returns the zero-based index of the first occurrence within the collection
            </summary>
      <param name="value">the long value to locate</param>
      <returns>index of the long value</returns>
    </member>
    <member name="M:Nevron.Collections.NInt64List.Insert(System.Int32,System.Int64)">
      <summary>
            Inserts the long value at the specified index
            </summary>
      <param name="index">index at which value is inserted</param>
      <param name="value">long value</param>
    </member>
    <member name="M:Nevron.Collections.NInt64List.Remove(System.Int64)">
      <summary>
            Removes the first occurrence of a specific long value from the collection
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:Nevron.Collections.NInt64List.Max">
      <summary>
            Gets the max long value in the list
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Collections.NInt64List.Min">
      <summary>
            Gets the min long value in the list
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Collections.NInt64List.ToArray">
      <summary>
            Converts the int64 list to a system array
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Collections.NInt64List.Clone">
      <summary>
            Creates an exact replica of this object.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.Collections.NInt64List.Sum">
      <summary>
            Gets the sum of all items in the list
            </summary>
    </member>
    <member name="T:Nevron.Serialization.INStringToTypeResolver">
      <summary>
            Implemented by object that can translate a type name to actual type
            </summary>
    </member>
    <member name="M:Nevron.Serialization.INStringToTypeResolver.Resolve(System.String)">
      <summary>
            Returns the type corresponding to the specified type name
            </summary>
      <param name="type">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.Serialization.INXmlStreamable">
      <summary>
            Implemented by objects that can be serialized in an Xml node
            </summary>
    </member>
    <member name="M:Nevron.Serialization.INXmlStreamable.StreamToNode(System.Xml.XmlNode)">
      <summary>
      </summary>
      <param name="xmlNode">
      </param>
    </member>
    <member name="M:Nevron.Serialization.INXmlStreamable.StreamFromNode(System.Xml.XmlNode)">
      <summary>
      </summary>
      <param name="xmlNode">
      </param>
    </member>
    <member name="T:Nevron.Reflection.NReflector">
      <summary>
            Namespace class for commonly used reflection routines
            </summary>
    </member>
    <member name="M:Nevron.Reflection.NReflector.DeepClone(System.Object)">
      <summary>
            Performs the most common deep clone of the specified object
            </summary>
      <remarks>
            This method will simply call DeepClone with all fields included by default and explicitly excluded reference and delegate fields.
            </remarks>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Reflection.NReflector.DeepClone(System.Object,Nevron.Reflection.l111llI,Nevron.Reflection.l111llI)">
      <summary>
            Performs a deep clone of the specified object
            </summary>
      <remarks>
            The method creates a new instance of the object type via the default type constructor. 
            It then performs a deep copy of all fields, which satisfy the included/excluded criteria.
            </remarks>
      <param name="obj">
      </param>
      <param name="included">
      </param>
      <param name="excluded">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Reflection.NReflector.UpdateReferences(System.Object,Nevron.INReferenceProvider)">
      <summary>
            Calls the UpdateReferences method of all object fields, which implement INReferenceHolder, but are not references
            </summary>
      <param name="obj">
      </param>
      <param name="provider">
      </param>
    </member>
    <member name="M:Nevron.Reflection.NReflector.CreateNonSerializedObjects(System.Object)">
      <summary>
            Calls the CreateNonSerializedObjects method of all object fields, which implement INReferenceHolder, but are not references
            </summary>
      <param name="obj">
      </param>
    </member>
    <member name="M:Nevron.Reflection.NReflector.GetPropertyValue(System.Object,System.String)">
      <summary>
      </summary>
      <param name="obj">
      </param>
      <param name="propertyName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Reflection.NReflector.GetPropertyValueCopy(System.Object,System.String)">
      <summary>
            Returns a copy of the value of the specified field in the obj object
            </summary>
      <param name="obj">
      </param>
      <param name="propertyName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Reflection.NReflector.ReplacePropertyValue(System.Object,System.String,System.Object)">
      <summary>
            Replaces the field with the specified value and returns a copy of the old one
            </summary>
      <param name="obj">
      </param>
      <param name="propertyName">
      </param>
      <param name="newValue">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Reflection.NReflector.GetFieldValue(System.Object,System.String)">
      <summary>
            Returns a the value of the specified field in the obj object
            </summary>
      <param name="obj">
      </param>
      <param name="fieldName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Reflection.NReflector.GetFieldValueCopy(System.Object,System.String)">
      <summary>
            Returns a copy of the value of the specified field in the obj object
            </summary>
      <param name="obj">
      </param>
      <param name="fieldName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Reflection.NReflector.ReplaceFieldValue(System.Object,System.String,System.Object)">
      <summary>
            Replaces the field with the specified value and returns a copy of the old one
            </summary>
      <param name="obj">
      </param>
      <param name="fieldName">
      </param>
      <param name="newValue">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Reflection.NReflector.DeepCopyField(System.Object,System.Object,System.Reflection.FieldInfo)">
      <summary>
            Deeply copies a field from the source to the target object
            </summary>
      <param name="source">
      </param>
      <param name="target">
      </param>
      <param name="fi">
      </param>
    </member>
    <member name="M:Nevron.Reflection.NReflector.DeepCopyFieldValue(System.Object)">
      <summary>
            Deeply copies a field value
            </summary>
      <param name="val">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Reflection.NReflector.DeepCopyFields(System.Object,System.Object,System.Type,Nevron.Reflection.l111llI,Nevron.Reflection.l111llI)">
      <summary>
      </summary>
      <param name="source">
      </param>
      <param name="target">
      </param>
      <param name="type">optional type of both source and target objects (better speed performance)</param>
      <param name="included">
      </param>
      <param name="excluded">
      </param>
    </member>
    <member name="M:Nevron.Reflection.NReflector.DeepCopyFields(System.Object,System.Object,System.Type,Nevron.Reflection.l111llI,Nevron.Reflection.l111llI,System.Boolean)">
      <summary>
      </summary>
      <param name="source">
      </param>
      <param name="target">
      </param>
      <param name="type">optional type of both source and target objects (better speed performance)</param>
      <param name="included">
      </param>
      <param name="excluded">
      </param>
      <param name="declaredFieldsOnly">when set to true only fiels declared in type will be considered</param>
    </member>
    <member name="M:Nevron.Reflection.NReflector.GetFields(System.Type,Nevron.Reflection.l111llI,Nevron.Reflection.l111llI,System.Boolean)">
      <summary>
            Returns the fields for the specified mask that pass through the included and excluded field masks.
            </summary>
      <param name="type">
      </param>
      <param name="included">
      </param>
      <param name="excluded">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Reflection.NReflector.IsFieldReference(System.Reflection.FieldInfo)">
      <summary>
      </summary>
      <param name="fi">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Reflection.NReflector.IsFieldReferenceHolder(System.Reflection.FieldInfo)">
      <summary>
      </summary>
      <param name="fi">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Reflection.NReflector.IsFieldNonSerialized(System.Reflection.FieldInfo)">
      <summary>
      </summary>
      <param name="fi">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Reflection.NReflector.IsFieldDelegate(System.Reflection.FieldInfo)">
      <summary>
      </summary>
      <param name="fi">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Reflection.NReflector.IsTypeDelegate(System.Type)">
      <summary>
      </summary>
      <param name="type">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Reflection.NReflector.IsTypeOfType(System.Type,System.Type)">
      <summary>
      </summary>
      <param name="type">
      </param>
      <param name="typeOf">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Reflection.NReflector.ShouldSerializeObject(System.Object)">
      <summary>
      </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.Reflection.NObfuscatorVisibleAttribute">
      <summary>
            Specifies whether a type is visible by the obfuscator.
            This allows for a type to be explicitly excluded from obfuscation process.
            </summary>
    </member>
    <member name="P:Nevron.Reflection.NObfuscatorVisibleAttribute.Visible">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.Interop.Win32.NUxTheme">
      <summary>
            Summary description for NUxTheme.
            </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUxTheme.UXTHEME_DLL_NAME">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUxTheme.PropTextColor">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUxTheme.STAP_ALLOW_NONCLIENT">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.Interop.Win32.NUxTheme.GetCurrentThemeName(System.Text.StringBuilder,System.Int32,System.Text.StringBuilder,System.Int32,System.Text.StringBuilder,System.Int32)">
      <summary>
      </summary>
      <param name="pszThemeFileName">
      </param>
      <param name="dwMaxNameChars">
      </param>
      <param name="pszColorBuff">
      </param>
      <param name="cchMaxColorChars">
      </param>
      <param name="pszSizeBuff">
      </param>
      <param name="cchMaxSizeChars">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUxTheme.CloseThemeData(System.IntPtr)">
      <summary>
      </summary>
      <param name="hTheme">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUxTheme.OpenThemeData(System.IntPtr,System.String)">
      <summary>
      </summary>
      <param name="hWnd">
      </param>
      <param name="classList">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUxTheme.GetThemeRect(System.IntPtr,System.Int32,System.Int32,System.Int32,Nevron.Interop.Win32.NGdi32@)">
      <summary>
      </summary>
      <param name="hTheme">
      </param>
      <param name="part">
      </param>
      <param name="state">
      </param>
      <param name="type">
      </param>
      <param name="rect">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUxTheme.GetThemeColor(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32@)">
      <summary>
      </summary>
      <param name="hTheme">
      </param>
      <param name="part">
      </param>
      <param name="state">
      </param>
      <param name="propId">
      </param>
      <param name="COLORREF">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUxTheme.GetThemeFont(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.IntPtr@)">
      <summary>
      </summary>
      <param name="hTheme">
      </param>
      <param name="hdc">
      </param>
      <param name="part">
      </param>
      <param name="state">
      </param>
      <param name="propId">
      </param>
      <param name="hFont">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUxTheme.SetWindowTheme(System.IntPtr,System.String,System.String)">
      <summary>
      </summary>
      <param name="hwnd">
      </param>
      <param name="appName">
      </param>
      <param name="clsid">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUxTheme.SetThemeAppProperties(System.Int32)">
      <summary>
      </summary>
      <param name="props">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUxTheme.DrawThemeBackground(Nevron.Interop.Win32.WindowClass,System.Drawing.Graphics,System.Int32,System.Int32,System.Drawing.Rectangle)">
      <summary>
      </summary>
      <param name="cls">
      </param>
      <param name="g">
      </param>
      <param name="part">
      </param>
      <param name="state">
      </param>
      <param name="r">
      </param>
    </member>
    <member name="M:Nevron.Interop.Win32.NUxTheme.DrawThemeBackground(System.IntPtr,System.Drawing.Graphics,System.Int32,System.Int32,System.Drawing.Rectangle)">
      <summary>
      </summary>
      <param name="hTheme">
      </param>
      <param name="g">
      </param>
      <param name="part">
      </param>
      <param name="state">
      </param>
      <param name="r">
      </param>
    </member>
    <member name="M:Nevron.Interop.Win32.NUxTheme.DrawThemeParentBackground(System.Windows.Forms.Control,System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
      </summary>
      <param name="parent">
      </param>
      <param name="g">
      </param>
      <param name="r">
      </param>
    </member>
    <member name="M:Nevron.Interop.Win32.NUxTheme.GetThemeColor(Nevron.Interop.Win32.WindowClass,System.Int32,System.Int32,System.Int32)">
      <summary>
      </summary>
      <param name="cls">
      </param>
      <param name="part">
      </param>
      <param name="state">
      </param>
      <param name="propID">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUxTheme.GetThemePartSize(System.Drawing.Graphics,Nevron.Interop.Win32.WindowClass,System.Int32,System.Int32)">
      <summary>
      </summary>
      <param name="g">
      </param>
      <param name="cls">
      </param>
      <param name="part">
      </param>
      <param name="state">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUxTheme.DrawThemeText(System.Drawing.Color,System.Drawing.Font,Nevron.Interop.Win32.WindowClass,System.Drawing.Graphics,System.Int32,System.Int32,System.String,System.Int32,System.Boolean,System.Drawing.Rectangle)">
      <summary>
      </summary>
      <param name="c">
      </param>
      <param name="font">
      </param>
      <param name="cls">
      </param>
      <param name="g">
      </param>
      <param name="part">
      </param>
      <param name="state">
      </param>
      <param name="text">
      </param>
      <param name="flags">
      </param>
      <param name="grayed">
      </param>
      <param name="r">
      </param>
    </member>
    <member name="M:Nevron.Interop.Win32.NUxTheme.GetThemeMargins(Nevron.Interop.Win32.WindowClass,System.Int32,System.Int32,System.Int32)">
      <summary>
      </summary>
      <param name="cls">
      </param>
      <param name="part">
      </param>
      <param name="state">
      </param>
      <param name="propId">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.Interop.Win32.NUxTheme.SystemThemeName">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.Interop.Win32.NUxTheme.MARGINS">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.Interop.Win32.WindowClass">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.WindowClass.BUTTON">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.WindowClass.CLOCK">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.WindowClass.COMBOBOX">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.WindowClass.EDIT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.WindowClass.EXPLORERBAR">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.WindowClass.GLOBALS">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.WindowClass.HEADER">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.WindowClass.LISTVIEW">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.WindowClass.MENU">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.WindowClass.MENUBAND">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.WindowClass.PAGE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.WindowClass.PROGRESS">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.WindowClass.REBAR">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.WindowClass.SCROLLBAR">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.WindowClass.SPIN">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.WindowClass.STARTPANEL">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.WindowClass.STATUS">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.WindowClass.TAB">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.WindowClass.TASKBAND">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.WindowClass.TASKBAR">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.WindowClass.TOOLBAR">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.WindowClass.TOOLTIP">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.WindowClass.TRACKBAR">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.WindowClass.TRAYNOTIFY">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.WindowClass.TREEVIEW">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.WindowClass.WINDOW">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.Collections.NDLList">
      <summary>
            Represents a doubly - linked list
            </summary>
    </member>
    <member name="M:Nevron.Collections.NDLList.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection. 
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Collections.NDLList.Add(System.Object)">
      <summary>
            Adds an item to the list
            </summary>
      <param name="item">
      </param>
    </member>
    <member name="M:Nevron.Collections.NDLList.Clear">
      <summary>
            Removes all items from the list
            </summary>
    </member>
    <member name="M:Nevron.Collections.NDLList.Contains(System.Object)">
      <summary>
            Determines whether the list contains a specific object. 
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Collections.NDLList.IndexOf(System.Object)">
      <summary>
            Determines the specific index of an object in the list. 
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Collections.NDLList.Insert(System.Int32,System.Object)">
      <summary>
            Inserts an object into the list at the specified position. 
            </summary>
      <param name="index">
      </param>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Collections.NDLList.Contains(Nevron.Collections.NDLListNode)">
      <summary>
            Returns true if the list contains the specified node
            </summary>
      <param name="node">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Collections.NDLList.CopyTo(System.Array,System.Int32)">
      <summary>
            Copies the elements of the list to an Array, starting at a particular Array index. 
            </summary>
      <param name="array">
      </param>
      <param name="index">
      </param>
    </member>
    <member name="M:Nevron.Collections.NDLList.Remove(System.Object)">
      <summary>
            Removes the first occurrence of a specific object from the ICollection. 
            </summary>
      <param name="obj">
      </param>
    </member>
    <member name="M:Nevron.Collections.NDLList.RemoveAt(System.Int32)">
      <summary>
            Removes the element at the specified index of the list
            </summary>
      <param name="index">
      </param>
    </member>
    <member name="M:Nevron.Collections.NDLList.MoveFirst(Nevron.Collections.NDLListNode)">
      <summary>
            Moves the node to the start of the list
            </summary>
      <param name="node">
      </param>
    </member>
    <member name="M:Nevron.Collections.NDLList.PrependNode(Nevron.Collections.NDLListNode)">
      <summary>
            Adds a new node at the beginning of the list
            </summary>
      <param name="node">
      </param>
    </member>
    <member name="M:Nevron.Collections.NDLList.AppendNode(Nevron.Collections.NDLListNode)">
      <summary>
            Adds a new node at the end of the list
            </summary>
      <param name="node">
      </param>
    </member>
    <member name="M:Nevron.Collections.NDLList.InsertNode(System.Int32,Nevron.Collections.NDLListNode)">
      <summary>
            Inserts the node at the specified index in the list
            </summary>
      <param name="index">
      </param>
      <param name="node">
      </param>
    </member>
    <member name="M:Nevron.Collections.NDLList.RemoveNode(Nevron.Collections.NDLListNode)">
      <summary>
            Removes the first occurrence of a specific object from the ICollection. 
            </summary>
      <param name="node">
      </param>
    </member>
    <member name="M:Nevron.Collections.NDLList.ContainsNode(Nevron.Collections.NDLListNode)">
      <summary>
            Returns true if the list contains the specified node
            </summary>
      <param name="node">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Collections.NDLList.GetNodeAt(System.Int32)">
      <summary>
            Returns the node at the specified index
            </summary>
      <param name="index">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.Collections.NDLList.FirstNode">
      <summary>
            Returns the first node in the list
            </summary>
    </member>
    <member name="P:Nevron.Collections.NDLList.LastNode">
      <summary>
            Returns the last node in the list
            </summary>
    </member>
    <member name="P:Nevron.Collections.NDLList.Count">
      <summary>
            Returns the number of nodes in the list
            </summary>
    </member>
    <member name="P:Nevron.Collections.NDLList.IsReadonly">
      <summary>
            Gets a value indicating whether the ICollection is read-only.
            </summary>
    </member>
    <member name="P:Nevron.Collections.NDLList.IsSynchronized">
      <summary>
            Returns false.
            </summary>
    </member>
    <member name="P:Nevron.Collections.NDLList.SyncRoot">
      <summary>
            Returns a reference to this
            </summary>
    </member>
    <member name="P:Nevron.Collections.NDLList.IsFixedSize">
      <summary>
            Returns false.
            </summary>
    </member>
    <member name="P:Nevron.Collections.NDLList.IsReadOnly">
      <summary>
            Returns false.
            </summary>
    </member>
    <member name="T:Nevron.NOrdinalValueProvider">
      <summary>
            Represents an ordinal value provider.
            </summary>
      <remarks>
            The key passed to the ProvideValue function will be converted to its integer equivalent
            that will be later used to index the array of values stored in the provider.
            </remarks>
    </member>
    <member name="T:Nevron.NValueProvider">
      <summary>
            Implemented by value providers
            </summary>
    </member>
    <member name="M:Nevron.NValueProvider.ProvideValue(System.Object)">
      <summary>
            Returns the value corresponding to the specified key
            </summary>
      <param name="key">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.NOrdinalValueProvider.ProvideValue(System.Object)">
      <summary>
            Returns the value corresponding to the specified key
            </summary>
      <param name="key">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.NCenturyDateTimeUnit">
      <summary>
            Represents the century day date time unit (100 years).
            </summary>
    </member>
    <member name="M:Nevron.NCenturyDateTimeUnit.Add(System.DateTime,System.Int64)">
      <summary>
            Add the unitCount to the dateTime.
            </summary>
      <param name="dateTime">
      </param>
      <param name="unitCount">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.NCenturyDateTimeUnit.Ticks">
      <summary>
            Returns the number of ticks in this date time unit
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.NCenturyDateTimeUnit.IsRegular">
      <summary>
            Returns true if the unit is regular (e.g. always expressed with a fixed number of ticks)
            </summary>
    </member>
    <member name="P:Nevron.NCenturyDateTimeUnit.DateTimeUnit">
      <summary>
            The date/time unit enum value.
            </summary>
    </member>
    <member name="T:Nevron.Serialization.INSerializationFilter">
      <summary>
            Implemented by serialization filters
            </summary>
    </member>
    <member name="T:Nevron.Serialization.INMetaDataFilter">
      <summary>
            Implemented by metadata filters.
            </summary>
    </member>
    <member name="M:Nevron.Serialization.INMetaDataFilter.FilterType(System.Type)">
      <summary>
            Returns true if the type is filtered.
            </summary>
      <param name="type">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Serialization.INMetaDataFilter.FilterMemberInfo(System.Reflection.MemberInfo)">
      <summary>
            Returns true if the member info is filtered.
            </summary>
      <param name="memberInfo">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.Reflection.NIconInfo">
      <summary>
            Represent an Icon stored in the assembly resources.
            </summary>
    </member>
    <member name="M:Nevron.Reflection.NIconInfo.CreateIcon">
      <summary>
            Creates an icon from the assembly resources
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Globalization.NDictionary.Add(System.String,System.String)">
      <summary>
            Adds a new entry to the dictionary.
            </summary>
      <param name="key">
      </param>
      <param name="value">
      </param>
    </member>
    <member name="M:Nevron.Globalization.NDictionary.Clear">
      <summary>
            Clears all strings from the dictionary.
            </summary>
    </member>
    <member name="M:Nevron.Globalization.NDictionary.CombineWith(Nevron.Globalization.NDictionary)">
      <summary>
            Adds all entries from the specified dictionary to the current one.
            </summary>
      <param name="dictionary">
      </param>
    </member>
    <member name="M:Nevron.Globalization.NDictionary.SyncWith(Nevron.Globalization.NDictionary)">
      <summary>
            Syncronizes the current dictionary with the specified one, adding all entries from the
            specified dictionary that are not in the curent one, and removing all entries from the
            current dictionary that are not in the specified one.
            </summary>
      <param name="dictionary">The dictionary to syncronize with.</param>
    </member>
    <member name="M:Nevron.Globalization.NDictionary.Translate(System.String)">
      <summary>
            Returns the translation of the given value. Returns the value itself if no
            translation was found or the translation is an empty string or null.
            </summary>
      <param name="value">The value to translate.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Globalization.NDictionary.Translate(System.String,System.String@)">
      <summary>
            Translates the given string and returns true if the translation was successful.
            Returns false if it wasn't (i.e. if the value is not found in the dictionary or
            its translation is null or empty string). In this case the out string parameter is set to null.
            </summary>
      <param name="value">
      </param>
      <param name="translation">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Globalization.NDictionary.GetEnumerator">
      <summary>
            Gets an enumerator that iterates through all key/value pairs in this dictionary.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Globalization.NDictionary.Save(System.String)">
      <summary>
            Saves the dictionary to a file.
            </summary>
      <param name="fileName">
      </param>
    </member>
    <member name="M:Nevron.Globalization.NDictionary.Save(System.Xml.XmlWriter)">
      <summary>
            Saves the dictionary to the given xml writer.
            </summary>
      <param name="xmlWriter">
      </param>
    </member>
    <member name="M:Nevron.Globalization.NDictionary.Load(System.String)">
      <summary>
            Loads the dictionary from a file.
            </summary>
      <param name="fileName">
      </param>
    </member>
    <member name="M:Nevron.Globalization.NDictionary.Load(System.Xml.XmlReader)">
      <summary>
            Loads the dictionary from the given xml reader.
            </summary>
      <param name="xmlReader">
      </param>
    </member>
    <member name="P:Nevron.Globalization.NDictionary.Count">
      <summary>
            Gets the number of entries in the dictionary.
            </summary>
    </member>
    <member name="P:Nevron.Globalization.NDictionary.Name">
      <summary>
            Gets/Sets the name of this dictionary.
            </summary>
    </member>
    <member name="T:Nevron.FormulaEngine.NVariableElement">
      <summary>
            The NVariableElement class represents a variable
            </summary>
    </member>
    <member name="M:Nevron.FormulaEngine.NVariableElement.Evaluate(Nevron.FormulaEngine.NFormulaEngine)">
      <summary>
            Evaluates the formula element. Overriden to return the variable value
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaEngine.NVariableElement.ToTreeNode">
      <summary>
            Creates a tree node which represents this element
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.NDateTimeSpan">
      <summary>
            Represents a date time span as a pair of date/time unit and unit count.
            </summary>
    </member>
    <member name="M:Nevron.NDateTimeSpan.Add(System.DateTime)">
      <summary>
            Adds the span to the specified date time
            </summary>
      <param name="dateTime">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.NDateTimeSpan.Substract(System.DateTime)">
      <summary>
            Substracts the span from the specified date time
            </summary>
      <param name="dateTime">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.NDateTimeSpan.AddMultiplied(System.DateTime,System.Int64)">
      <summary>
            Adds this span to the specified date time multiplied by the specified amount
            </summary>
      <param name="dateTime">
      </param>
      <param name="multiplier">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.NDateTimeSpan.SusbstractMultiplied(System.DateTime,System.Int64)">
      <summary>
            Substracts the date time span from the specified DateTime multiplied by the specified multiplier.
            </summary>
      <param name="dateTime">
      </param>
      <param name="multiplier">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.NDateTimeSpan.Equals(System.Object)">
      <summary>
            Returns true if the objects are equal
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.NDateTimeSpan.GetHashCode">
      <summary>
            Gets the hash code of the date time span. 
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.NDateTimeSpan.ToString">
      <summary>
            Returns the string representation of this date/time span
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.NDateTimeSpan.Parse(System.String)">
      <summary>
            Creates a NDateTimeSpan from its string representation
            </summary>
      <param name="s">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.NDateTimeSpan.Units">
      <summary>
            Gets / sets the units of this span
            </summary>
    </member>
    <member name="P:Nevron.NDateTimeSpan.Ticks">
      <summary>
            Returns the numer of tick in this date time span
            </summary>
    </member>
    <member name="P:Nevron.NDateTimeSpan.DateTimeUnit">
      <summary>
            Gets / sets the date/time unit of this span
            </summary>
    </member>
    <member name="T:Nevron.NSecondDateTimeUnit">
      <summary>
            Represents the second date time unit.
            </summary>
    </member>
    <member name="M:Nevron.NSecondDateTimeUnit.Add(System.DateTime,System.Int64)">
      <summary>
            Add the unitCount to the dateTime.
            </summary>
      <param name="dateTime">
      </param>
      <param name="unitCount">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.NSecondDateTimeUnit.ToTimSpan">
      <summary>
            Returns the time span equivalent of this date/time unit
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.NSecondDateTimeUnit.Ticks">
      <summary>
            Returns the number of ticks in this date time unit
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.NSecondDateTimeUnit.DateTimeUnit">
      <summary>
            The date/time unit enum value.
            </summary>
    </member>
    <member name="T:Nevron.NMath">
      <summary>
            Static class for commonly used mathematical routines.
            </summary>
    </member>
    <member name="F:Nevron.NMath.Rad2Degree">
      <summary>
            Radians to degrees convertion constant
            </summary>
    </member>
    <member name="F:Nevron.NMath.Rad2Grad">
      <summary>
            Radians to grads convertion constant
            </summary>
    </member>
    <member name="F:Nevron.NMath.Degree2Rad">
      <summary>
            Degrees to radians convertion constant
            </summary>
    </member>
    <member name="F:Nevron.NMath.Degree2Grad">
      <summary>
            Degrees to grads convertion constant
            </summary>
    </member>
    <member name="F:Nevron.NMath.Grad2Degree">
      <summary>
            Grads to degrees convertion constant
            </summary>
    </member>
    <member name="F:Nevron.NMath.Grad2Rad">
      <summary>
            Grads to degrees convertion constant
            </summary>
    </member>
    <member name="F:Nevron.NMath.PI">
      <summary>
            The PI constant
            </summary>
    </member>
    <member name="F:Nevron.NMath.PI2">
      <summary>
            The PI * 2 constant
            </summary>
    </member>
    <member name="F:Nevron.NMath.PIHalf">
      <summary>
            The PI / 2 constant
            </summary>
    </member>
    <member name="F:Nevron.NMath.PIQuarter">
      <summary>
            The PI / 4 constant
            </summary>
    </member>
    <member name="M:Nevron.NMath.ToDouble(System.Object)">
      <summary>
            Converts the specified object to double value
            </summary>
      <remarks>
            The object must either be a double value or implement the IConvertible interface
            </remarks>
      <param name="obj">object to convert</param>
      <returns>double value</returns>
    </member>
    <member name="M:Nevron.NMath.Round(System.Double)">
      <summary>
            Rounds the specified value to the nearest int value
            </summary>
      <param name="dValue">value to round</param>
      <returns>rounded value</returns>
    </member>
    <member name="M:Nevron.NMath.Round(System.Single)">
      <summary>
            Rounds the specified value to the nearest int value
            </summary>
      <param name="fValue">value to round</param>
      <returns>rounded value</returns>
    </member>
    <member name="M:Nevron.NMath.ToFDot3(System.Single)">
      <summary>
            Fixes the float point for six digit precision
            </summary>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.NMath.RoundRectangle(System.Drawing.RectangleF@)">
      <summary>
            Rounds the specified rectangle 
            </summary>
      <param name="rcRect">rectangle to round</param>
      <returns>rounded rectangle</returns>
    </member>
    <member name="M:Nevron.NMath.GetMostRoundedNumber(System.Double,System.Double)">
      <summary>
            Gets the most rounded number (i.e. the number with most ending zeroes) between a and b excluding them both.
            </summary>
      <param name="a">The exclusive first number.</param>
      <param name="b">The exclusive second number.</param>
      <remarks>The function returns 0 if one of the parameters is less than or equal
            to 0 and the other is positive.</remarks>
      <example>If a = 367 and b = 1400 then the result will be 1000.</example>
      <returns>The most rounded number between a and b.</returns>
    </member>
    <member name="M:Nevron.NMath.Logarithm(System.Double,System.Double)">
      <summary>
            Computes the logarithm of the specified value with the specified base.
            </summary>
      <param name="logbase">Log base.</param>
      <param name="value">Value which logarightm to compute.</param>
      <returns>Logarithm of the specified value with the specified base.</returns>
    </member>
    <member name="M:Nevron.NMath.SafeAsin(System.Double)">
      <summary>
            Returns the angle which sine is the specified number.
            </summary>
      <param name="d">A number representing a sine.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.NMath.SafeAcos(System.Double)">
      <summary>
            Returns the angle which cosine is the specified number.
            </summary>
      <param name="d">A number representing a cosine.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.NMath.SafeAtan2(System.Double,System.Double)">
      <summary>
            Returns the angle whose tangent is the quotient of two specified numbers.
            </summary>
      <param name="n">
      </param>
      <param name="d">
      </param>
      <returns>The arctangent of (n,d) or 0 if the operands are insignificant (+/- 1e-50)</returns>
    </member>
    <member name="M:Nevron.NMath.SafeSqrt(System.Double)">
      <summary>
            Computes the square root of a value, returning 0 if the value is negative.
            </summary>
      <param name="d">The number which square root to compute.</param>
      <returns>The square root of d or 0 if d is negative.</returns>
    </member>
    <member name="M:Nevron.NMath.NormalizeRadians(System.Single)">
      <summary>
            Normalizes an angle specified in radians to be in the range [0: PI2)
            </summary>
      <param name="radians">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.NMath.NormalizeDirectionRadians(System.Single)">
      <summary>
            Normalizes an angle specified in radians to be in the range [0: PI)
            </summary>
      <param name="radians">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.NMath.NormalizeDegrees(System.Single)">
      <summary>
            Normalizes an angle specified in degrees to be in the range [0: 360)
            </summary>
      <param name="degrees">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.NMath.NormalizeGrads(System.Single)">
      <summary>
            Normalizes an angle specified in grads to be in the range [0: 400)
            </summary>
      <param name="grads">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.NMath.NormalizeDirectionDegrees(System.Single)">
      <summary>
            Normalizes an angle specified in degrees to be in the range [0: 180)
            </summary>
      <param name="degrees">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.NMath.Atan2Normalized(System.Single,System.Single)">
      <summary>
            Returns the angle (in radians), which a vector with y and x coordinates forms with the X-axis
            </summary>
      <param name="y">
      </param>
      <param name="x">
      </param>
      <returns>angle in range [0, PI * 2)</returns>
    </member>
    <member name="M:Nevron.NMath.SnapToNearestAngle(System.Single,System.Single[])">
      <summary>
            Snaps the angle to the nearest angle
            </summary>
      <param name="angle">
      </param>
      <param name="angles">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.NMath.GetSweepAngle(System.Single,System.Single,System.Boolean)">
      <summary>
            Returns the sweep angle between start and end in the clockwise or counterclockwise direction
            </summary>
      <param name="start">in degrees</param>
      <param name="end">in degrees</param>
      <param name="clockWise">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.NMath.AbsAngleDiff(System.Single,System.Single)">
      <summary>
            Returns the absolute difference of the two angles
            </summary>
      <param name="angle1">in radians</param>
      <param name="angle2">in radians</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.NMath.AngleDiff(System.Single,System.Single)">
      <summary>
            Returns the difference of the two angles
            </summary>
      <param name="angle1">in radians</param>
      <param name="angle2">in radians</param>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.Serialization.INRepository">
      <summary>
            Implemented by objects that can read/write objects from a repository (file, cache etc.)
            </summary>
    </member>
    <member name="M:Nevron.Serialization.INRepository.Load(System.Object)">
      <summary>
            Loads the object from the repository using the specified key.
            </summary>
      <param name="key">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Serialization.INRepository.Save">
      <summary>
            Saves the object in the repository and returns a key for it.
            </summary>
    </member>
    <member name="T:Nevron.Interop.Win32.NUser32">
      <summary>
            User32 binding for .NET
            </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_NULL">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_CREATE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_DESTROY">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_MOVE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_SIZE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_ACTIVATE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_SETFOCUS">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_KILLFOCUS">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_ENABLE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_SETREDRAW">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_SETTEXT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_GETTEXT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_GETTEXTLENGTH">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_PAINT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_CLOSE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_QUIT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_ERASEBKGND">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_SYSCOLORCHANGE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_SHOWWINDOW">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_WININICHANGE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_DEVMODECHANGE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_ACTIVATEAPP">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_FONTCHANGE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_TIMECHANGE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_CANCELMODE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_SETCURSOR">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_MOUSEACTIVATE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_CHILDACTIVATE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_QUEUESYNC">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_GETMINMAXINFO">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_PAINTICON">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_ICONERASEBKGND">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_NEXTDLGCTL">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_SPOOLERSTATUS">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_DRAWITEM">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_MEASUREITEM">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_DELETEITEM">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_VKEYTOITEM">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_CHARTOITEM">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_SETFONT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_GETFONT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_SETHOTKEY">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_GETHOTKEY">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_QUERYDRAGICON">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_COMPAREITEM">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_GETOBJECT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_COMPACTING">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_COMMNOTIFY">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_WINDOWPOSCHANGING">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_WINDOWPOSCHANGED">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_POWER">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.GWL_WNDPROC">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.GWL_HINSTANCE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.GWL_HWNDPARENT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.GWL_STYLE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.GWL_EXSTYLE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.GWL_USERDATA">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.GWL_ID">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WS_OVERLAPPED">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WS_POPUP">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WS_CHILD">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WS_MINIMIZE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WS_VISIBLE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WS_DISABLED">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WS_CLIPSIBLINGS">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WS_CLIPCHILDREN">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WS_MAXIMIZE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WS_CAPTION">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WS_BORDER">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WS_DLGFRAME">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WS_VSCROLL">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WS_HSCROLL">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WS_SYSMENU">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WS_THICKFRAME">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WS_GROUP">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WS_TABSTOP">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WS_MINIMIZEBOX">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WS_MAXIMIZEBOX">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WS_TILED">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WS_ICONIC">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WS_SIZEBOX">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WS_OVERLAPPEDWINDOW">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WS_EX_DLGMODALFRAME">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WS_EX_NOPARENTNOTIFY">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WS_EX_TOPMOST">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WS_EX_ACCEPTFILES">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WS_EX_TRANSPARENT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WS_EX_MDICHILD">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WS_EX_TOOLWINDOW">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WS_EX_WINDOWEDGE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WS_EX_CLIENTEDGE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WS_EX_CONTEXTHELP">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WS_EX_RIGHT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WS_EX_LEFT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WS_EX_RTLREADING">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WS_EX_LTRREADING">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WS_EX_LEFTSCROLLBAR">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WS_EX_RIGHTSCROLLBAR">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WS_EX_CONTROLPARENT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WS_EX_STATICEDGE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WS_EX_APPWINDOW">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WS_EX_OVERLAPPEDWINDOW">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WS_EX_PALETTEWINDOW">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WS_EX_LAYERED">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WS_EX_NOINHERITLAYOUT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WS_EX_LAYOUTRTL">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WS_EX_COMPOSITED">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WS_EX_NOACTIVATE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.CS_VREDRAW">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.CS_HREDRAW">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.CS_DBLCLKS">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.CS_OWNDC">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.CS_CLASSDC">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.CS_PARENTDC">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.CS_NOCLOSE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.CS_SAVEBITS">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.CS_BYTEALIGNCLIENT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.CS_BYTEALIGNWINDOW">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.CS_GLOBALCLASS">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.CS_IME">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.CS_DROPSHADOW">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_MOUSEFIRST">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_MOUSEMOVE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_LBUTTONDOWN">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_LBUTTONUP">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_LBUTTONDBLCLK">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_RBUTTONDOWN">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_RBUTTONUP">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_RBUTTONDBLCLK">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_MBUTTONDOWN">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_MBUTTONUP">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_MBUTTONDBLCLK">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_MOUSEWHEEL">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_XBUTTONDOWN">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_XBUTTONUP">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_XBUTTONDBLCLK">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_MOUSEHOVER">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_MOUSELEAVE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_KEYFIRST">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_KEYDOWN">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_KEYUP">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_CHAR">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_DEADCHAR">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_SYSKEYDOWN">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_SYSKEYUP">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_SYSCHAR">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WM_SYSDEADCHAR">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SWP_NOSIZE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SWP_NOMOVE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SWP_NOZORDER">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SWP_NOREDRAW">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SWP_NOACTIVATE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SWP_FRAMECHANGED">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SWP_SHOWWINDOW">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SWP_HIDEWINDOW">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SWP_NOCOPYBITS">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SWP_NOOWNERZORDER">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SWP_NOSENDCHANGING">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SWP_DRAWFRAME">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SWP_NOREPOSITION">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.HTERROR">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.HTTRANSPARENT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.HTNOWHERE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.HTCLIENT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.HTCAPTION">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.HTSYSMENU">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.HTGROWBOX">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.HTMENU">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.HTHSCROLL">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.HTVSCROLL">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.HTMINBUTTON">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.HTMAXBUTTON">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.HTLEFT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.HTRIGHT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.HTTOP">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.HTTOPLEFT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.HTTOPRIGHT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.HTBOTTOM">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.HTBOTTOMLEFT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.HTBOTTOMRIGHT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.HTBORDER">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.HTOBJECT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.HTCLOSE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.HTHELP">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WMSZ_LEFT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WMSZ_RIGHT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WMSZ_TOP">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WMSZ_TOPLEFT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WMSZ_TOPRIGHT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WMSZ_BOTTOM">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WMSZ_BOTTOMLEFT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WMSZ_BOTTOMRIGHT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SIZE_RESTORED">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SIZE_MINIMIZED">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SIZE_MAXIMIZED">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SIZE_MAXSHOW">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SIZE_MAXHIDE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.PRF_CHECKVISIBLE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.PRF_NONCLIENT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.PRF_CLIENT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.PRF_ERASEBKGND">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.PRF_CHILDREN">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.PRF_OWNED">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SW_HIDE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SW_SHOWNORMAL">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SW_NORMAL">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SW_SHOWMINIMIZED">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SW_SHOWMAXIMIZED">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SW_MAXIMIZE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SW_SHOWNOACTIVATE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SW_SHOW">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SW_MINIMIZE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SW_SHOWMINNOACTIVE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SW_SHOWNA">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SW_RESTORE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SW_SHOWDEFAULT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SW_FORCEMINIMIZE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SW_MAX">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SC_SIZE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SC_MOVE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SC_MINIMIZE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SC_MAXIMIZE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SC_NEXTWINDOW">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SC_PREVWINDOW">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SC_CLOSE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SC_VSCROLL">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SC_HSCROLL">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SC_MOUSEMENU">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SC_KEYMENU">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SC_ARRANGE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SC_RESTORE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SC_TASKLIST">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SC_SCREENSAVE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SC_HOTKEY">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SC_DEFAULT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SC_MONITORPOWER">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SC_CONTEXTHELP">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SC_SEPARATOR">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.MDITILE_VERTICAL">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.MDITILE_HORIZONTAL">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.MDITILE_SKIPDISABLED">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.RDW_INVALIDATE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.RDW_INTERNALPAINT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.RDW_ERASE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.RDW_VALIDATE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.RDW_NOINTERNALPAINT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.RDW_NOERASE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.RDW_NOCHILDREN">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.RDW_ALLCHILDREN">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.RDW_UPDATENOW">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.RDW_ERASENOW">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.RDW_FRAME">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.RDW_NOFRAME">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SW_SCROLLCHILDREN">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SW_INVALIDATE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SW_ERASE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.DCX_WINDOW">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.DCX_CACHE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.DCX_NORESETATTRS">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.DCX_CLIPCHILDREN">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.DCX_CLIPSIBLINGS">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.DCX_PARENTCLIP">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.DCX_EXCLUDERGN">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.DCX_INTERSECTRGN">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.DCX_EXCLUDEUPDATE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.DCX_INTERSECTUPDATE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.DCX_LOCKWINDOWUPDATE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.DCX_VALIDATE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SPI_GETFONTSMOOTHING">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SPI_GETFONTSMOOTHINGCONTRAST">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SPI_GETFONTSMOOTHINGTYPE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SPI_GETKEYBOARDCUES">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SB_HORZ">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SB_VERT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SB_CTL">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SB_BOTH">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SB_LINEUP">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SB_LINELEFT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SB_LINEDOWN">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SB_LINERIGHT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SB_PAGEUP">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SB_PAGELEFT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SB_PAGEDOWN">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SB_PAGERIGHT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SB_THUMBPOSITION">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SB_THUMBTRACK">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SB_TOP">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SB_LEFT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SB_BOTTOM">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SB_RIGHT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.SB_ENDSCROLL">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.TME_HOVER">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.TME_LEAVE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.TME_NONCLIENT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.TME_QUERY">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.TME_CANCEL">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.MA_ACTIVATE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.MA_ACTIVATEANDEAT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.MA_NOACTIVATE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.MA_NOACTIVATEANDEAT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WS_POPUPWINDOW">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NUser32.WS_CHILDWINDOW">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.SetTimer(System.IntPtr,System.Int32,System.Int32,System.IntPtr)">
      <summary>
      </summary>
      <param name="hwnd">
      </param>
      <param name="timerId">
      </param>
      <param name="interval">
      </param>
      <param name="callBack">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.KillTimer(System.IntPtr,System.Int32)">
      <summary>
      </summary>
      <param name="hwnd">
      </param>
      <param name="timerId">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.RegisterWindowMessage(System.String)">
      <summary>
      </summary>
      <param name="messageId">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.SetLayeredWindowAttributes(System.IntPtr,System.Int32,System.Byte,System.Int32)">
      <summary>
      </summary>
      <param name="hWnd">
      </param>
      <param name="colorRef">
      </param>
      <param name="opacity">
      </param>
      <param name="attribute">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.FindWindow(System.String,System.String)">
      <summary>
      </summary>
      <param name="className">
      </param>
      <param name="windowName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.FindWindowEx(System.IntPtr,System.IntPtr,System.String,System.String)">
      <summary>
      </summary>
      <param name="hwndParent">
      </param>
      <param name="hwndChildAfter">
      </param>
      <param name="className">
      </param>
      <param name="windowName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.SystemParametersInfo(System.Int32,System.Int32,System.IntPtr,System.Int32)">
      <summary>
      </summary>
      <param name="Action">
      </param>
      <param name="Param">
      </param>
      <param name="lpParam">
      </param>
      <param name="WinIni">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.ShowScrollBar(System.IntPtr,System.Int32,System.Boolean)">
      <summary>
      </summary>
      <param name="hwnd">
      </param>
      <param name="bars">
      </param>
      <param name="bShow">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.SystemParametersInfo(System.Int32,System.Int32,System.Boolean@,System.Int32)">
      <summary>
      </summary>
      <param name="Action">
      </param>
      <param name="Param">
      </param>
      <param name="pBool">
      </param>
      <param name="WinIni">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.SystemParametersInfo(System.Int32,System.Int32,System.UInt32@,System.Int32)">
      <summary>
      </summary>
      <param name="Action">
      </param>
      <param name="Param">
      </param>
      <param name="pUint">
      </param>
      <param name="WinIni">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.GetWindowRgn(System.IntPtr,System.IntPtr)">
      <summary>
      </summary>
      <param name="hwnd">
      </param>
      <param name="hrgn">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.DefWindowProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
      <summary>
      </summary>
      <param name="hwnd">
      </param>
      <param name="msg">
      </param>
      <param name="wParam">
      </param>
      <param name="lParam">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.CallNextHookEx(System.IntPtr,System.Int32,System.IntPtr,System.Windows.Forms.Message@)">
      <summary>
      </summary>
      <param name="hookHandle">
      </param>
      <param name="code">
      </param>
      <param name="wparam">
      </param>
      <param name="msg">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.CallNextHookEx(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
      <summary>
      </summary>
      <param name="hookHandle">
      </param>
      <param name="code">
      </param>
      <param name="wparam">
      </param>
      <param name="lparam">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.UnregisterClass(System.String,System.IntPtr)">
      <summary>
      </summary>
      <param name="className">
      </param>
      <param name="hInstance">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.CreateWindowEx(System.UInt32,System.String,System.String,System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>
      </summary>
      <param name="dwExStyle">
      </param>
      <param name="lpszClassName">
      </param>
      <param name="lpszWindowName">
      </param>
      <param name="style">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="width">
      </param>
      <param name="height">
      </param>
      <param name="hwndParent">
      </param>
      <param name="hMenu">
      </param>
      <param name="hInst">
      </param>
      <param name="pvParam">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.SetWindowPos(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
      </summary>
      <param name="hWnd">
      </param>
      <param name="hwndAfter">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="width">
      </param>
      <param name="height">
      </param>
      <param name="flags">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.CreateWindowEx(System.UInt32,System.Int32,System.String,System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>
      </summary>
      <param name="dwExStyle">
      </param>
      <param name="atomClassName">
      </param>
      <param name="lpszWindowName">
      </param>
      <param name="style">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="width">
      </param>
      <param name="height">
      </param>
      <param name="hwndParent">
      </param>
      <param name="hMenu">
      </param>
      <param name="hInst">
      </param>
      <param name="pvParam">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.DestroyWindow(System.IntPtr)">
      <summary>
      </summary>
      <param name="hWnd">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.GetWindow(System.IntPtr,System.Int32)">
      <summary>
      </summary>
      <param name="hWnd">
      </param>
      <param name="code">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.MoveWindow(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
      <summary>
      </summary>
      <param name="hWnd">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="width">
      </param>
      <param name="height">
      </param>
      <param name="bRepaint">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.IsWindowVisible(System.IntPtr)">
      <summary>
      </summary>
      <param name="hWnd">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.IsWindow(System.IntPtr)">
      <summary>
      </summary>
      <param name="hWnd">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.InvalidateRect(System.IntPtr,System.Drawing.Rectangle@,System.Boolean)">
      <summary>
      </summary>
      <param name="hWnd">
      </param>
      <param name="rect">
      </param>
      <param name="bErase">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.ValidateRect(System.IntPtr,System.Drawing.Rectangle@)">
      <summary>
      </summary>
      <param name="hWnd">
      </param>
      <param name="rect">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.ValidateRect(System.IntPtr,System.IntPtr)">
      <summary>
      </summary>
      <param name="hWnd">
      </param>
      <param name="lpRect">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.InvalidateRect(System.IntPtr,System.IntPtr,System.Boolean)">
      <summary>
      </summary>
      <param name="hWnd">
      </param>
      <param name="lpRect">
      </param>
      <param name="bErase">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.IsWindowEnabled(System.IntPtr)">
      <summary>
      </summary>
      <param name="hWnd">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.GetWindowLong(System.IntPtr,System.Int32)">
      <summary>
      </summary>
      <param name="hWnd">
      </param>
      <param name="nIndex">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.SetWindowRgn(System.IntPtr,System.IntPtr,System.Boolean)">
      <summary>
      </summary>
      <param name="hwnd">
      </param>
      <param name="hrgn">
      </param>
      <param name="bRedraw">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.DefFrameProc(System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
      <summary>
      </summary>
      <param name="hWnd">
      </param>
      <param name="hWndClient">
      </param>
      <param name="msg">
      </param>
      <param name="wParam">
      </param>
      <param name="lParam">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.DefMDIChildProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
      <summary>
      </summary>
      <param name="hWnd">
      </param>
      <param name="msg">
      </param>
      <param name="wParam">
      </param>
      <param name="lParam">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.SetWindowLong(System.IntPtr,System.Int32,System.IntPtr)">
      <summary>
      </summary>
      <param name="hWnd">
      </param>
      <param name="nIndex">
      </param>
      <param name="newLong">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.SetWindowLong(System.IntPtr,System.Int32,Nevron.Interop.Win32.l11lI1l)">
      <summary>
      </summary>
      <param name="hwnd">
      </param>
      <param name="index">
      </param>
      <param name="wndProc">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.CallWindowProc(System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
      <summary>
      </summary>
      <param name="wndProc">
      </param>
      <param name="hwnd">
      </param>
      <param name="msg">
      </param>
      <param name="wparam">
      </param>
      <param name="lparam">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.SetCursor(System.IntPtr)">
      <summary>
      </summary>
      <param name="hCursor">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.GetClassLong(System.IntPtr,System.Int32)">
      <summary>
      </summary>
      <param name="hWnd">
      </param>
      <param name="nIndex">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.SetClassLong(System.IntPtr,System.Int32,System.Int32)">
      <summary>
      </summary>
      <param name="hWnd">
      </param>
      <param name="nIndex">
      </param>
      <param name="newLong">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.SetFocus(System.IntPtr)">
      <summary>
      </summary>
      <param name="hWnd">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.ShowCaret(System.IntPtr)">
      <summary>
      </summary>
      <param name="hWnd">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.GetParent(System.IntPtr)">
      <summary>
      </summary>
      <param name="hWnd">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.SetParent(System.IntPtr,System.IntPtr)">
      <summary>
      </summary>
      <param name="child">
      </param>
      <param name="parent">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.GetCapture">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.ReleaseCapture">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.GetActiveWindow">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.SetActiveWindow(System.IntPtr)">
      <summary>
      </summary>
      <param name="hwnd">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.AnimateWindow(System.IntPtr,System.Int32,System.Int32)">
      <summary>
      </summary>
      <param name="hWnd">
      </param>
      <param name="time">
      </param>
      <param name="flags">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.RedrawWindow(System.IntPtr,System.IntPtr,System.IntPtr,System.Int32)">
      <summary>
      </summary>
      <param name="hWnd">
      </param>
      <param name="rect">
      </param>
      <param name="hrgn">
      </param>
      <param name="flags">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.GetDesktopWindow">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.UpdateWindow(System.IntPtr)">
      <summary>
      </summary>
      <param name="hwnd">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.GetDC(System.IntPtr)">
      <summary>
      </summary>
      <param name="hWnd">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.GetDCEx(System.IntPtr,System.IntPtr,System.Int32)">
      <summary>
      </summary>
      <param name="hWnd">
      </param>
      <param name="hRgn">
      </param>
      <param name="flags">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.GetWindowDC(System.IntPtr)">
      <summary>
      </summary>
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.ReleaseDC(System.IntPtr,System.IntPtr)">
      <summary>
      </summary>
      <param name="hWnd">
      </param>
      <param name="hDC">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.ShowWindow(System.IntPtr,System.Int32)">
      <summary>
      </summary>
      <param name="hWnd">
      </param>
      <param name="cmdShow">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.GetFocus">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.SetCapture(System.IntPtr)">
      <summary>
      </summary>
      <param name="hwnd">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.GetQueueStatus(System.Int32)">
      <summary>
      </summary>
      <param name="flags">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.IsMenu(System.IntPtr)">
      <summary>
      </summary>
      <param name="hwnd">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.SendMessage(System.IntPtr,System.Int32,System.Int32,System.Int32)">
      <summary>
      </summary>
      <param name="hWnd">
      </param>
      <param name="Msg">
      </param>
      <param name="wParam">
      </param>
      <param name="lParam">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.SendMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
      <summary>
      </summary>
      <param name="hWnd">
      </param>
      <param name="Msg">
      </param>
      <param name="wParam">
      </param>
      <param name="lParam">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.SetWindowsHookEx(System.Int32,Nevron.Interop.Win32.l11lI11,System.IntPtr,System.Int32)">
      <summary>
      </summary>
      <param name="type">
      </param>
      <param name="hook">
      </param>
      <param name="instance">
      </param>
      <param name="threadID">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.SetWindowsHookEx(System.Int32,Nevron.Interop.Win32.l11lI1I,System.IntPtr,System.Int32)">
      <summary>
      </summary>
      <param name="type">
      </param>
      <param name="hook">
      </param>
      <param name="instance">
      </param>
      <param name="threadID">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.SetWindowsHookEx(System.Int32,Nevron.Interop.Win32.l11lIIl,System.IntPtr,System.Int32)">
      <summary>
      </summary>
      <param name="type">
      </param>
      <param name="hook">
      </param>
      <param name="instance">
      </param>
      <param name="threadID">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.SetWindowsHookEx(System.Int32,Nevron.Interop.Win32.l11lII1,System.IntPtr,System.Int32)">
      <summary>
      </summary>
      <param name="type">
      </param>
      <param name="hook">
      </param>
      <param name="instance">
      </param>
      <param name="threadID">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.SetWindowsHookEx(System.Int32,Nevron.Interop.Win32.l11lIII,System.IntPtr,System.Int32)">
      <summary>
      </summary>
      <param name="type">
      </param>
      <param name="hook">
      </param>
      <param name="instance">
      </param>
      <param name="threadID">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.SetWindowsHookEx(System.Int32,Nevron.Interop.Win32.l111lll,System.IntPtr,System.Int32)">
      <summary>
      </summary>
      <param name="type">
      </param>
      <param name="hook">
      </param>
      <param name="instance">
      </param>
      <param name="threadID">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.SetWindowsHookEx(System.Int32,Nevron.Interop.Win32.l111ll1,System.IntPtr,System.Int32)">
      <summary>
      </summary>
      <param name="type">
      </param>
      <param name="hook">
      </param>
      <param name="instance">
      </param>
      <param name="threadID">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.UnhookWindowsHookEx(System.IntPtr)">
      <summary>
      </summary>
      <param name="hookHandle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.PostMessage(System.IntPtr,System.Int32,System.Int32,System.Int32)">
      <summary>
      </summary>
      <param name="hwnd">
      </param>
      <param name="msg">
      </param>
      <param name="lParam">
      </param>
      <param name="wParam">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.PostMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
      <summary>
      </summary>
      <param name="hwnd">
      </param>
      <param name="msg">
      </param>
      <param name="lParam">
      </param>
      <param name="wParam">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.PostQuitMessage(System.Int32)">
      <summary>
      </summary>
      <param name="code">
      </param>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.EnumThreadWindows(System.Int32,Nevron.Interop.Win32.EnumThreadWindowsCallback,System.IntPtr)">
      <summary>
      </summary>
      <param name="dwThreadId">
      </param>
      <param name="lpfn">
      </param>
      <param name="lParam">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.HideCaret(System.IntPtr)">
      <summary>
      </summary>
      <param name="hWnd">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.WaitMessage">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.MsgWaitForMultipleObjects(System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32)">
      <summary>
      </summary>
      <param name="nCount">
      </param>
      <param name="pHandles">
      </param>
      <param name="fWaitAll">
      </param>
      <param name="dwMilliseconds">
      </param>
      <param name="dwWakeMask">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.EnableWindow(System.IntPtr,System.Boolean)">
      <summary>
      </summary>
      <param name="hwnd">
      </param>
      <param name="bEnable">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.LoadImage(System.IntPtr,System.String,System.UInt32,System.Int32,System.Int32,System.UInt32)">
      <summary>
      </summary>
      <param name="hinst">
      </param>
      <param name="lpszName">
      </param>
      <param name="uType">
      </param>
      <param name="cxDesired">
      </param>
      <param name="cyDesired">
      </param>
      <param name="fuLoad">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.OpenClipboard(System.IntPtr)">
      <summary>
      </summary>
      <param name="hWndNewOwner">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.EmptyClipboard">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.SetClipboardData(System.UInt32,System.IntPtr)">
      <summary>
      </summary>
      <param name="uFormat">
      </param>
      <param name="hMem">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.CloseClipboard">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.LowOrder(System.Int32)">
      <summary>
      </summary>
      <param name="param">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.HighOrder(System.Int32)">
      <summary>
      </summary>
      <param name="param">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.MakeLong(System.Int32,System.Int32)">
      <summary>
      </summary>
      <param name="low">
      </param>
      <param name="high">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.GetRValue(System.UInt32)">
      <summary>
      </summary>
      <param name="color">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.GetGValue(System.UInt32)">
      <summary>
      </summary>
      <param name="color">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.GetBValue(System.UInt32)">
      <summary>
      </summary>
      <param name="color">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.RGB(System.Int32,System.Int32,System.Int32)">
      <summary>
      </summary>
      <param name="r">
      </param>
      <param name="g">
      </param>
      <param name="b">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.CanHaveShadow">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.BringToFront(System.IntPtr,System.Boolean)">
      <summary>
      </summary>
      <param name="hwnd">
      </param>
      <param name="activate">
      </param>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.SendNCCalcSize(System.IntPtr,System.Boolean)">
      <summary>
      </summary>
      <param name="hwnd">
      </param>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.NCInvalidate(System.IntPtr)">
      <summary>
      </summary>
      <param name="hwnd">
      </param>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.SetTopMost(System.IntPtr,System.Boolean)">
      <summary>
      </summary>
      <param name="hwnd">
      </param>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.GetBitsPerPixel">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.SetSize(System.IntPtr,System.Drawing.Size)">
      <summary>
      </summary>
      <param name="hwnd">
      </param>
      <param name="sz">
      </param>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.HasHScrollBar(System.IntPtr)">
      <summary>
      </summary>
      <param name="hwnd">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NUser32.InvalidateDesktop(System.Drawing.Rectangle,System.Boolean)">
      <summary>
      </summary>
      <param name="invalid">
      </param>
      <param name="update">
      </param>
    </member>
    <member name="T:Nevron.Interop.Win32.NUser32.ICONINFO">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.Interop.Win32.NUser32.TRACKMOUSEEVENT">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.Interop.Win32.NUser32.HELPINFO">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.Interop.Win32.NUser32.PAINTSTRUCT">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.Interop.Win32.NUser32.BLENDFUNCTION">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.Interop.Win32.NUser32.MSG">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.Interop.Win32.NUser32.WNDCLASS">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.Interop.Win32.NUser32.CLIENTCREATESTRUCT">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.Interop.Win32.NUser32.WINDOWPLACEMENT">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.Interop.Win32.NHdcWrapper">
      <summary>
            Summary description for NHdcWrapper.
            </summary>
    </member>
    <member name="M:Nevron.Interop.Win32.NHdcWrapper.GetHdc">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NHdcWrapper.Dispose">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.Filters.NInstanceOfTypeFilter">
      <summary>
            Filters objects, which are instances of the specified target type 
            </summary>
    </member>
    <member name="T:Nevron.Filters.NObjectTypeFilter">
      <summary>
            Base class for all filters, which filter objects based on their type
            </summary>
    </member>
    <member name="F:Nevron.Filters.NObjectTypeFilter.m_TargetType">
      <summary>
            The target type
            </summary>
    </member>
    <member name="P:Nevron.Filters.NObjectTypeFilter.TargetType">
      <summary>
            Gets/sets the target type of the object type filter
            </summary>
    </member>
    <member name="M:Nevron.Filters.NInstanceOfTypeFilter.Filter(System.Object)">
      <summary>
            Overriden to return true if the specified object is an instance of the target type
            </summary>
      <param name="obj">object to filter</param>
      <returns>true if the specified object is an instance of the target type, otherwise false</returns>
    </member>
    <member name="T:Nevron.Filters.NExactTypeMatchFilter">
      <summary>
            Filters objects, whose type is the specified target type
            </summary>
    </member>
    <member name="M:Nevron.Filters.NExactTypeMatchFilter.Filter(System.Object)">
      <summary>
            Overriden to return true if the specified object type is the target type
            </summary>
      <param name="obj">object to filter</param>
      <returns>true if the specified object type is the target type, otherwise false</returns>
    </member>
    <member name="T:Nevron.Dom.NAttributePropertyChangeOperation">
      <summary>
            Represents an operation, which is recorded when a property of an element attribute is about to be changed
            </summary>
    </member>
    <member name="M:Nevron.Dom.NAttributePropertyChangeOperation.Execute(Nevron.Dom.NElementHistoryService)">
      <summary>
            Overriden to swap the value of the attribute property and the internally stored value
            </summary>
      <param name="service">reference to the history service</param>
    </member>
    <member name="P:Nevron.Dom.NAttributePropertyChangeOperation.ElementUniqueId">
      <summary>
            Unique id used to resolve the element
            </summary>
    </member>
    <member name="P:Nevron.Dom.NAttributePropertyChangeOperation.AttributeName">
      <summary>
            Full name of the element attribute
            </summary>
    </member>
    <member name="P:Nevron.Dom.NAttributePropertyChangeOperation.PropertyName">
      <summary>
            Attribute property name
            </summary>
    </member>
    <member name="P:Nevron.Dom.NAttributePropertyChangeOperation.PropertyValueCopy">
      <summary>
            Internally stored copy of the property value
            </summary>
    </member>
    <member name="T:Nevron.Dom.NDateTimeValueFormatter">
      <summary>
            Represents a Date-Time values formatter
            </summary>
    </member>
    <member name="T:Nevron.Dom.NValueFormatter">
      <summary>
            The NValueFormatter class servers as base class for all value formatters
            </summary>
      <remarks>
            An instance of this class is used to control the formatting of values 
            displayed by the component. It can be used to format numeric, datetime, 
            currency, time and scientific values.
            </remarks>
    </member>
    <member name="T:Nevron.Dom.NAttribute">
      <summary>
            The NAttribute class serves as base class for all attributes
            </summary>
    </member>
    <member name="T:Nevron.Dom.INAttribute">
      <summary>
            Implemented by attributes
            </summary>
    </member>
    <member name="P:Nevron.Dom.INAttribute.AttributeName">
      <summary>
            Gets the attribute name
            </summary>
    </member>
    <member name="P:Nevron.Dom.INAttribute.FullAttributeName">
      <summary>
            Gets the full attribute name
            </summary>
    </member>
    <member name="P:Nevron.Dom.INAttribute.AttributeContainer">
      <summary>
            Obtains a reference to the attribute container
            </summary>
    </member>
    <member name="M:Nevron.Dom.NAttribute.Clone">
      <summary>
            Creates an identical copy of this attribute
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Dom.NAttribute.ProvideReference(System.Type)">
      <summary>
            Called to provide a reference to the object of the specified type
            </summary>
      <param name="parentType">type of object for which to obtain a reference</param>
      <returns>reference to an object of the specified type, or null if such reference cannot be provided</returns>
    </member>
    <member name="M:Nevron.Dom.NAttribute.UpdateReferences(Nevron.INReferenceProvider)">
      <summary>
            Called to update the references stored by the object
            </summary>
      <remarks>
            The object can query the specified provider for references 
            </remarks>
      <param name="provider">provider from which to obtain references</param>
    </member>
    <member name="M:Nevron.Dom.NAttribute.CreateNonSerializedObjects">
      <summary>
            Called to create any non serialized objects, which the holder posseses
            </summary>
    </member>
    <member name="M:Nevron.Dom.NAttribute.GetReferenceProvider">
      <summary>
            Obtains the reference provider to which the object is currently attached
            </summary>
      <returns>reference provider</returns>
    </member>
    <member name="M:Nevron.Dom.NAttribute.OnStateChangingFromHistory(System.String)">
      <summary>
            Called by history when the object state is about to be changed from history
            </summary>
      <param name="hint">hint used when the state was recorded</param>
    </member>
    <member name="M:Nevron.Dom.NAttribute.OnStateChangedFromHistory(System.String)">
      <summary>
            Called by history when the object state has changed from history
            </summary>
      <param name="hint">hint used when the state was recorded</param>
    </member>
    <member name="M:Nevron.Dom.NAttribute.OnHistoryAction(System.String)">
      <summary>
            Called to perform a history action
            </summary>
      <param name="action">action name, which was passed when the action was recorded</param>
    </member>
    <member name="M:Nevron.Dom.NAttribute.OnPropertyChanging(System.String,System.Object)">
      <summary>
            General property changing handler
            </summary>
      <remarks>
            This implementation will call the OnAttributePropertyChanging method of the AttributeContainer
            </remarks>
      <param name="propertyName">name of the property which is chaning</param>
      <param name="newValue">new property value</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Dom.NAttribute.OnPropertyChanged(System.String)">
      <summary>
            General property changed handler
            </summary>
      <remarks>
            This implementation will call the OnAttributePropertyChanged method of the AttributeContainer
            </remarks>
      <param name="propertyName">name of the property which has chaned</param>
    </member>
    <member name="M:Nevron.Dom.NAttribute.OnChanged">
      <summary>
            Called when this attribute has changed 
            </summary>
      <remarks>
            This implementation will call the OnAttributeChanged method of the AttributeContainer
            </remarks>
    </member>
    <member name="M:Nevron.Dom.NAttribute.StartTransaction(System.String)">
      <summary>
            Starts a new transaction
            </summary>
      <remarks>
            Safely calls the StartTransaction method of the history service (if attached to history service)
            </remarks>
      <param name="description">transaction description</param>
    </member>
    <member name="M:Nevron.Dom.NAttribute.Commit">
      <summary>
            Commits the current transaction
            </summary>
      <remarks>
            Safely calls the Commit method of the history service (if attached to history service)
            </remarks>
    </member>
    <member name="M:Nevron.Dom.NAttribute.Rollback">
      <summary>
            Rolls back the current transaction
            </summary>
      <remarks>
            Safely calls the Rollback method of the history service (if attached to history service)
            </remarks>
    </member>
    <member name="M:Nevron.Dom.NAttribute.RecordOperation(Nevron.Dom.NOperation)">
      <summary>
            Safely records a custom operation in the history service to which the attribute is connected
            </summary>
      <param name="operation">operation to record</param>
    </member>
    <member name="M:Nevron.Dom.NAttribute.RecordProperty(System.String)">
      <summary>
            Records the state of the specified property before it is changed
            </summary>
      <remarks>
            Safely calls the RecordNestedPropertyChange method of the history service (if attached to history service)
            </remarks>
      <param name="propertyName">property name</param>
    </member>
    <member name="M:Nevron.Dom.NAttribute.StartProperty(System.String)">
      <summary>
            Records the state of the specified property before it is changed and locks the history service. Pair it with the EndProperty method.
            </summary>
      <remarks>
            Safely calls the RecordNestedPropertyChange method of the history service (if attached to history service) and locks the history service.
            </remarks>
      <param name="propertyName">
      </param>
    </member>
    <member name="M:Nevron.Dom.NAttribute.EndProperty">
      <summary>
            Unlocks the history service. Pair it with the StartProperty method
            </summary>
    </member>
    <member name="M:Nevron.Dom.NAttribute.RecordState(System.String,System.String)">
      <summary>
            Records the entire state of the attribute
            </summary>
      <remarks>
            Safely calls the RecordAttributeStateChange method of the history service (if attached to history service).
            When this operation is undone or redone from history, the history will call the 
            OnStateChangingFromHistory and OnStateChangedFromHistory methods of the attribute
            </remarks>
      <param name="description">human readable operation description</param>
      <param name="hint">hint which the attribute must receive when the operation is undone or redone from history</param>
    </member>
    <member name="M:Nevron.Dom.NAttribute.RecordState(System.String,System.String[],System.String)">
      <summary>
            Records the state of the specified attribute fields
            </summary>
      <remarks>
            Safely calls the RecordAttributeStateChange method of the history service (if attached to history service).
            When this operation is undone or redone from history, the history will call the 
            OnStateChangingFromHistory and OnStateChangedFromHistory methods of the attribute
            </remarks>
      <param name="description">human readable operation description</param>
      <param name="fields">fields to record</param>
      <param name="hint">hint which the attribute must receive when the operation is undone or redone from history</param>
    </member>
    <member name="M:Nevron.Dom.NAttribute.RecordAction(System.String)">
      <summary>
            Records an action
            </summary>
      <remarks>
            When the operation is undone or redone history will call the OnHistoryAction method of the attribute 
            </remarks>
      <param name="description">human readable operation description</param>
    </member>
    <member name="M:Nevron.Dom.NAttribute.PauseHistoryService">
      <summary>
            Safely pauses the history service
            </summary>
    </member>
    <member name="M:Nevron.Dom.NAttribute.ResumeHistoryService">
      <summary>
            Safely resumes the history service
            </summary>
    </member>
    <member name="P:Nevron.Dom.NAttribute.AttributeName">
      <summary>
            Gets the attribute name
            </summary>
    </member>
    <member name="P:Nevron.Dom.NAttribute.FullAttributeName">
      <summary>
            Gets the full attribute name
            </summary>
    </member>
    <member name="P:Nevron.Dom.NAttribute.AttributeContainer">
      <summary>
            Obtains a reference to the attribute container
            </summary>
    </member>
    <member name="P:Nevron.Dom.NAttribute.HistoryService">
      <summary>
            Obtains a reference to the element history service, if the attribute is connected to it
            </summary>
    </member>
    <member name="P:Nevron.Dom.NAttribute.AttributeObserver">
      <summary>
            Obtains a reference to the attribute observer, if such can be provided
            </summary>
    </member>
    <member name="P:Nevron.Dom.NAttribute.OwnerElement">
      <summary>
            Obtains a reference to the element hosting the attribute, if the attribute is hosted by an element
            </summary>
    </member>
    <member name="T:Nevron.INValueFormatter">
      <summary>
            Implemented by objects, which can provide a string representation of a value (format it)
            </summary>
    </member>
    <member name="M:Nevron.INValueFormatter.FormatValue(System.Object)">
      <summary>
            Formats the specified value
            </summary>
      <param name="value">value to format</param>
      <returns>string representation of the value</returns>
    </member>
    <member name="M:Nevron.Dom.NValueFormatter.FormatValue(System.Object)">
      <summary>
            Must override to format the value
            </summary>
      <param name="value">value to format</param>
      <returns>string representation of the value</returns>
    </member>
    <member name="P:Nevron.Dom.NValueFormatter.CultureInfo">
      <summary>
            Allows you to localize the value formatting for a specific language and region.
            </summary>
      <remarks>
            If you do not set an explicit CultureInfo to the NValueFormatter object the current 
            thread culture info will be used.
            </remarks>
      <example>
            The following code formats the numbers of the PrimaryY axis in accordance with the 
            Norwegian-Bokmal locale (uses a ","  instead of "." as a the decimal separator).
            <code lang="VB">
            Imports System.Globalization
            ...
            Dim ci As CultureInfo =  New CultureInfo("nb-NO") 
            NChart.Axis(StandardAxis.PrimaryY).ValueFormat.CultureInfo = ci
            </code><code>
            using System.Globalization;
            ...
            CultureInfo ci = new CultureInfo("nb-NO");
            NChart.Axis(StandardAxis.PrimaryY).ValueFormat.CultureInfo = ci;
            </code></example>
    </member>
    <member name="P:Nevron.Dom.NValueFormatter.FormatSpecifier">
      <summary>
            Specifies a format string.
            </summary>
      <remarks>
            For more information regarding the format specifier that you can use 
            in the custom format string please refer to the following topics:
            <para>
            Visual Studio .NET -&gt; .NET Framework -&gt; Programming with .NET Framework -&gt; 
            Working with Base Types -&gt; Formatting Types -&gt; Numeric Format Strings -&gt; 
            Standard Numeric Format Strings
            </para><para>
            Visual Studio .NET -&gt; .NET Framework -&gt; Programming with .NET Framework -&gt; 
            Working with Base Types -&gt; Formatting Types -&gt; Numeric Format Strings -&gt; 
            Custom Numeric Format Strings
            </para><para>
            Visual Studio .NET -&gt; .NET Framework -&gt; Programming with .NET Framework -&gt; 
            Working with Base Types -&gt; Formatting Types -&gt; Date and Time Format Strings
            </para></remarks>
    </member>
    <member name="M:Nevron.Dom.NDateTimeValueFormatter.Clone">
      <summary>
            Creates an identical copy of this object.
            </summary>
      <returns>identical copy of this object</returns>
    </member>
    <member name="M:Nevron.Dom.NDateTimeValueFormatter.FormatValue(System.Object)">
      <summary>
            Overriden to format the value as a date time value
            </summary>
      <param name="value">value to format</param>
      <returns>date-time string representation of the value</returns>
    </member>
    <member name="T:Nevron.NFilteredValueProvider">
      <summary>
            Represents a value provider associating a filter with a value. The returned value will
            be the first value who's filter returns true
            </summary>
    </member>
    <member name="M:Nevron.NFilteredValueProvider.ProvideValue(System.Object)">
      <summary>
            Provides the value for the first filter that returns true
            </summary>
      <param name="key">
      </param>
      <returns>
      </returns>
    </member>
    <member name="F:Nevron.NFilteredValueProvider.m_FilterValuePairs">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.NMinuteDateTimeUnit">
      <summary>
            Represents the minute date time unit.
            </summary>
    </member>
    <member name="M:Nevron.NMinuteDateTimeUnit.Add(System.DateTime,System.Int64)">
      <summary>
            Add the unitCount to the dateTime.
            </summary>
      <param name="dateTime">
      </param>
      <param name="unitCount">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.NMinuteDateTimeUnit.ToTimSpan">
      <summary>
            Returns the time span equivalent of this date/time unit
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.NMinuteDateTimeUnit.Ticks">
      <summary>
            Returns the number of ticks in this date time unit
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.NMinuteDateTimeUnit.DateTimeUnit">
      <summary>
            The date/time unit enum value.
            </summary>
    </member>
    <member name="T:Nevron.NMillisecondDateTimeUnit">
      <summary>
            Represents the millisecond date time unit.
            </summary>
    </member>
    <member name="M:Nevron.NMillisecondDateTimeUnit.Add(System.DateTime,System.Int64)">
      <summary>
            Add the unitCount to the dateTime.
            </summary>
      <param name="dateTime">
      </param>
      <param name="unitCount">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.NMillisecondDateTimeUnit.ToTimSpan">
      <summary>
            Returns the time span equivalent of this date/time unit
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.NMillisecondDateTimeUnit.Ticks">
      <summary>
            Returns the number of ticks in this date time unit
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.NMillisecondDateTimeUnit.DateTimeUnit">
      <summary>
            The date/time unit enum value.
            </summary>
    </member>
    <member name="T:Nevron.NHourDateTimeUnit">
      <summary>
            Represents the hour date time unit.
            </summary>
    </member>
    <member name="M:Nevron.NHourDateTimeUnit.Add(System.DateTime,System.Int64)">
      <summary>
            Add the unitCount to the dateTime.
            </summary>
      <param name="dateTime">
      </param>
      <param name="unitCount">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.NHourDateTimeUnit.ToTimSpan">
      <summary>
            Returns the time span equivalent of this date/time unit
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.NHourDateTimeUnit.Ticks">
      <summary>
            Returns the number of ticks in this date time unit
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.NHourDateTimeUnit.DateTimeUnit">
      <summary>
            The date/time unit enum value.
            </summary>
    </member>
    <member name="T:Nevron.NDayDateTimeUnit">
      <summary>
            Represents the day date time unit.
            </summary>
    </member>
    <member name="M:Nevron.NDayDateTimeUnit.Add(System.DateTime,System.Int64)">
      <summary>
            Add the unitCount to the dateTime.
            </summary>
      <param name="dateTime">
      </param>
      <param name="unitCount">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.NDayDateTimeUnit.ToTimSpan">
      <summary>
            Returns the time span equivalent of this date/time unit
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.NDayDateTimeUnit.Ticks">
      <summary>
            Returns the number of ticks in this date time unit
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.NDayDateTimeUnit.DateTimeUnit">
      <summary>
            The date/time unit enum value.
            </summary>
    </member>
    <member name="T:Nevron.NKeyValuePair">
      <summary>
            Represents a pair of object key and its value
            </summary>
    </member>
    <member name="F:Nevron.NKeyValuePair.Key">
      <summary>
            The key
            </summary>
    </member>
    <member name="F:Nevron.NKeyValuePair.Value">
      <summary>
            The value
            </summary>
    </member>
    <member name="T:Nevron.INIterator">
      <summary>
            Implemented by iterators
            </summary>
    </member>
    <member name="M:Nevron.INIterator.Reset">
      <summary>
            Resets the iterator (moves it to the first item)
            </summary>
    </member>
    <member name="M:Nevron.INIterator.MoveNext">
      <summary>
            Moves the iterator to the next item, if there is no next item the method returns null
            </summary>
      <returns>next iterator object, or null if there is no such object</returns>
    </member>
    <member name="T:Nevron.Serialization.INTypeInfoCache">
      <summary>
            Summary description for INTypeInfoCache.
            </summary>
    </member>
    <member name="T:Nevron.Serialization.NControlSerializer">
      <summary>
            The base class for control serializers.
            </summary>
    </member>
    <member name="T:Nevron.Serialization.NSerializer">
      <summary>
            Base serializer class.
            </summary>
    </member>
    <member name="M:Nevron.Serialization.NSerializer.SaveToFile(System.Object,System.String,Nevron.Serialization.PersistencyFormat,Nevron.Serialization.INSerializationFilter)">
      <summary>
            Saves the passed object to a file in the specified persistency format.
            </summary>
      <param name="root">
      </param>
      <param name="filePath">
      </param>
      <param name="format">
      </param>
      <param name="filter">
      </param>
    </member>
    <member name="M:Nevron.Serialization.NSerializer.LoadFromFile(System.Type,System.String,Nevron.Serialization.PersistencyFormat,Nevron.Serialization.INSerializationFilter)">
      <summary>
            Loads an object from a file containing the object in the specified persistency format.
            </summary>
      <param name="rootType">
      </param>
      <param name="filePath">
      </param>
      <param name="format">
      </param>
      <param name="filter">
      </param>
    </member>
    <member name="M:Nevron.Serialization.NSerializer.SaveToStream(System.Object,System.IO.Stream,Nevron.Serialization.PersistencyFormat,Nevron.Serialization.INSerializationFilter)">
      <summary>
            Saves the object to the specfied stream.
            </summary>
      <param name="root">
      </param>
      <param name="stream">
      </param>
      <param name="format">
      </param>
      <param name="filter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Serialization.NSerializer.LoadFromStream(System.Type,System.IO.Stream,Nevron.Serialization.PersistencyFormat,Nevron.Serialization.INSerializationFilter)">
      <summary>
            Loads the object to the specfied stream.
            </summary>
      <param name="rootType">
      </param>
      <param name="stream">
      </param>
      <param name="format">
      </param>
      <param name="filter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Serialization.NSerializer.DeepClone(System.Object,Nevron.Serialization.INSerializationFilter)">
      <summary>
            Creates a deep clone filtered copy of the object.
            </summary>
      <param name="root">
      </param>
      <param name="filter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.Serialization.NSerializer.DeserializationConflictResolver">
      <summary>
            Gets or sets the deserialization conflict resolver
            </summary>
    </member>
    <member name="P:Nevron.Serialization.NSerializer.XmlExtraTypes">
      <summary>
            Gets/sets the Xml serialization extra types
            </summary>
      <remarks>
            If you expect to save/load custom types in XML you need to 
            explicitly provide their types via this property so that the XmlSerializer can recognize them
            </remarks>
    </member>
    <member name="P:Nevron.Serialization.NSerializer.XmlAttributeOverrides">
      <summary>
            Allows you to override property, field, and class attributes when you use the Xml serialization.
            </summary>
    </member>
    <member name="P:Nevron.Serialization.NSerializer.Assemblies">
      <summary>
            Gets / sets a list of assemblies defining custom types allowing the custom serialization
            to resolve types contained in them.
            </summary>
    </member>
    <member name="M:Nevron.Serialization.NControlSerializer.SaveControlStateToFile">
      <summary>
            Shows a save file dialog and saves the control state to file.
            </summary>
      <returns>
      </returns>
      <remarks>
            The function returns true if the state was successfully saved. This function may trow a serialization exception.
            </remarks>
    </member>
    <member name="M:Nevron.Serialization.NControlSerializer.LoadControlStateFromFile">
      <summary>
            Shows an open file dialog and loads the control state from the file.
            </summary>
      <returns>
      </returns>
      <remarks>
            The function returns true if the state was successfully loaded. This function may trow a serialization exception.
            </remarks>
    </member>
    <member name="M:Nevron.Serialization.NControlSerializer.SaveControlStateToStream(System.IO.Stream,Nevron.Serialization.PersistencyFormat,Nevron.Serialization.INSerializationFilter)">
      <summary>
            Saves the control state in the passed stream.
            </summary>
      <param name="stream">The stream to load the state from.</param>
      <param name="format">The format of the stream.</param>
      <param name="filter">A serialization filter.</param>
      <remarks>
            You're responsible for the stream creation and closure. The filter parameters is used only when the format is CustomXML or CustomBinary.
            </remarks>
    </member>
    <member name="M:Nevron.Serialization.NControlSerializer.LoadControlStateFromStream(System.IO.Stream,Nevron.Serialization.PersistencyFormat,Nevron.Serialization.INSerializationFilter)">
      <summary>
            Loads the control control state from the passed stream.
            </summary>
      <param name="stream">The stream to save the state to.</param>
      <param name="format">The format of the stream.</param>
      <param name="filter">A serialization filter.</param>
      <remarks>
            You're responsible for the stream creation and closure. The filter parameters is used only when the format is CustomXML or CustomBinary.
            </remarks>
    </member>
    <member name="M:Nevron.Serialization.NControlSerializer.SaveControlStateToFile(System.String,Nevron.Serialization.PersistencyFormat,Nevron.Serialization.INSerializationFilter)">
      <summary>
            Saves the current state of the control control to a file in the specified format.
            </summary>
      <param name="filePath">A relative or absolute path for the output file.</param>
      <param name="format">The format of the file.</param>
      <param name="filter">A serialization filter.</param>
      <remarks>
            The filter parameters is used only when the format is CustomXML or CustomBinary.
            </remarks>
    </member>
    <member name="M:Nevron.Serialization.NControlSerializer.LoadControlStateFromFile(System.String,Nevron.Serialization.PersistencyFormat,Nevron.Serialization.INSerializationFilter)">
      <summary>
            Loads the control state from the specified file.
            </summary>
      <param name="filePath">A relative or absolute path for the input file.</param>
      <param name="format">The format of the file.</param>
      <param name="filter">A serialization filter.</param>
      <remarks>
            The filter parameters is used only when the format is CustomXML or CustomBinary.
            </remarks>
      <example>
            The following example loads a new state and repaints the control:
            <code lang="VB">
            ncontrolControl1.Serializer.LoadControlStateFromFile("c:\control.bin", PersistencyFormat.Binary, Nothing)
            </code><code>
            ncontrolControl1.Serializer.LoadControlStateFromFile("c:\control.bin", PersistencyFormat.Binary, null);
            </code></example>
    </member>
    <member name="T:Nevron.Serialization.NBlankSerializationFilter">
      <summary>
            Summary description for NBlankSerializationFilter.
            </summary>
    </member>
    <member name="M:Nevron.Serialization.NBlankSerializationFilter.FilterMemberInfo(System.Reflection.MemberInfo)">
      <summary>
            True if the member info must be processed.
            </summary>
      <param name="fi">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Serialization.NBlankSerializationFilter.Filter(System.Object)">
      <summary>
            True if the object must be processed.
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Serialization.NBlankSerializationFilter.FilterType(System.Type)">
      <summary>
            True if the type must be processed.
            </summary>
      <param name="type">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Serialization.NBlankSerializationFilter.RebuildCache">
      <summary>
            Called to allow the filter to build it's internal tables (for faster filtering).
            </summary>
    </member>
    <member name="T:Nevron.Reflection.NSkipFieldAttribute">
      <summary>
            Explicitly skips a constant field from enumerating it.
            </summary>
    </member>
    <member name="T:Nevron.Interop.Win32.NSystemInformation">
      <summary>
            Summary description for NSystemInformation.
            </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NSystemInformation.Instance">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.Interop.Win32.NSystemInformation.FontSmoothingEnabled">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.Interop.Win32.NSystemInformation.ClearTypeSmoothing">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.Interop.Win32.NSystemInformation.IsWin2KOrLater">
      <summary>
            Determines whether the current OS is Windows 2000 or later.
            </summary>
    </member>
    <member name="P:Nevron.Interop.Win32.NSystemInformation.IsWinXpOrLater">
      <summary>
            Determines whether the current OS is Windows XP or later.
            </summary>
    </member>
    <member name="P:Nevron.Interop.Win32.NSystemInformation.MenuMnemonicsAlwaysVisible">
      <summary>
            Determines whether the main menu mnemonics are always visible or only when the menu has keyboard focus.
            </summary>
    </member>
    <member name="P:Nevron.Interop.Win32.NSystemInformation.IsWindowsVista">
      <summary>
            Determines whether the current OS is Windows Vista.
            </summary>
    </member>
    <member name="P:Nevron.Interop.Win32.NSystemInformation.IsGlassEnabled">
      <summary>
            Determines whether Glass effect is enabled if OS is Windows Vista.
            </summary>
    </member>
    <member name="T:Nevron.FormulaEngine.NFormulaEngine">
      <summary>
            The NFormulaEngine class is used for the runtime parsing and evaluation of formula expressions.
            </summary>
      <remarks>
            A formula expression is string, which can be evaluated to a single variant value. 
            A valid formula expression is composed by elements of one of the following types.
            <para><list type="bullet"><item><term>Numbers</term><descrption>
            	These are integer and floating point numbers. For example: 12, 0.1, 145.23, 7.5E-17, 8.234E+13 etc.
            	</descrption></item><item><term>Boolean values</term><descrption>
            	These are the true and false boolean constants, which in the expression can be represented by the 
            	following strings: true, false, True, False, TRUE and FALSE
            	</descrption></item><item><term>Strings</term><descrption>
            	In the formula expression, strings must are enclosed in " characters. 
            	For example: "hello", "world" etc.
            	</descrption></item><item><term>Operators</term><descrption>
            	Supported is a common set of binary and unary operators. For example: +, -, *. /, =  etc.
            	</descrption></item><item><term>Parenthesis</term><descrption>
            	The '(' and ')' characters can used to change the operators priviledge. 
            	</descrption></item><item><term>Functions</term><descrption>
            	Supported is a large set of mathematical, logical, string, bitwise and date-time functions. 
            	For example: MIN, MAX, SIN, COS etc. 
            	Function arguments must be enclosed in parenthesis and divided by commas. 
            	</descrption></item><item><term>Variables</term><descrption>
            	The recognized set of variables is defined by the NVariableCollection class accessible from the 
            	Variables property.
            	</descrption></item><item><term>References</term><descrption>
            	Any identifiter, which cannot be classified as a function or variable name, is a potential reference element.
            	Reference elements are identified by the DelegateIsReferenceName delegate for which you must subscribe. 
            	If a token is identified as a reference, its value must be provided by the DelegateGetReferenceValue delegate.
            	</descrption></item></list></para>
            The following example evaluates a formula expression:
            <code>
            // create the formula engine
            NFormulaEngine engine = new NFormulaEngine();
            // define the a and b variables
            engine.Variables.Add("a", new NVariant(10));
            engine.Variables.Add("b", new NVariant(20));
            // evaluate an expression (evaluates to 50)
            NVariant result = engine.ParseAndEvaluate("a + b * 2");
            </code></remarks>
    </member>
    <member name="M:Nevron.FormulaEngine.NFormulaEngine.Parse(System.String)">
      <summary>
            Parses the specified expression and returns the root item of the expression tree
            </summary>
      <param name="expression">expression to parse</param>
      <returns>root of the expression tree, or null if an empty expression was passed</returns>
    </member>
    <member name="M:Nevron.FormulaEngine.NFormulaEngine.ParseAndEvaluate(System.String)">
      <summary>
            Parses the specified expression and returns the result of its evaluation
            </summary>
      <param name="expression">expression to evaluate</param>
      <returns>result of the expression evaluation, or an empty variant if an empty expression was passed</returns>
    </member>
    <member name="M:Nevron.FormulaEngine.NFormulaEngine.Evaluate(Nevron.FormulaEngine.NFormulaElement)">
      <summary>
            Evaluates the specified root formula element 
            </summary>
      <param name="rootElement">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaEngine.NFormulaEngine.IsReferenceName(System.String)">
      <summary>
            Queries whether the specified name is a valid reference name
            </summary>
      <remarks>
            This implementation calls the DelegateIsReferenceName delegate
            </remarks>
      <param name="refName">potention reference name</param>
      <returns>true if refName is a valid reference, otherwise false</returns>
    </member>
    <member name="M:Nevron.FormulaEngine.NFormulaEngine.GetReferenceValue(System.String)">
      <summary>
            Gets the value of the reference with the specified name
            </summary>
      <remarks>
      </remarks>
            This implementation calls the DelegateGetReferenceValue delegate
            <param name="refName">reference name</param><returns>reference value</returns></member>
    <member name="F:Nevron.FormulaEngine.NFormulaEngine.DefaultOperators">
      <summary>
            Default operators container
            </summary>
    </member>
    <member name="F:Nevron.FormulaEngine.NFormulaEngine.DefaultFunctions">
      <summary>
            Default collection of functions
            </summary>
    </member>
    <member name="P:Nevron.FormulaEngine.NFormulaEngine.DelegateIsReferenceName">
      <summary>
            This delegate is called from the IsReferenceName method during parsing and is used to 
            determine whether a specific token is a valid reference name
            </summary>
    </member>
    <member name="P:Nevron.FormulaEngine.NFormulaEngine.DelegateGetReferenceValue">
      <summary>
            This delegate is called from the GetReferenceValue method during evaluation and is used to obtain 
            a valid value for a specific reference.
            </summary>
    </member>
    <member name="P:Nevron.FormulaEngine.NFormulaEngine.Variables">
      <summary>
            Gets a reference to the collection of variables, recognized by the engine
            </summary>
    </member>
    <member name="P:Nevron.FormulaEngine.NFormulaEngine.CustomFunctions">
      <summary>
            Gets/sets the collection of custom functions 
            </summary>
      <remarks>
            By default the value of this property is null, which means that the engine 
            will use the default set of functions. Set this property to a valid NFunctionCollection 
            instance, if you want to override the default function set. 
            </remarks>
    </member>
    <member name="P:Nevron.FormulaEngine.NFormulaEngine.CustomOperators">
      <summary>
            Gets/sets the container of custom operators
            </summary>
      <remarks>
            By default the value of this property is null, which means that the engine 
            will use the default set of operators. Set this property to a valid NOperatorContainer 
            instance, if you want to override the default operators implementation. 
            </remarks>
    </member>
    <member name="P:Nevron.FormulaEngine.NFormulaEngine.UsedFunctions">
      <summary>
            Gets a reference to the collection of functions used by this engine
            </summary>
    </member>
    <member name="P:Nevron.FormulaEngine.NFormulaEngine.UsedOperators">
      <summary>
            Gets a reference to the operators container used by this engine
            </summary>
    </member>
    <member name="T:Nevron.Dom.NAttributeActionOperation">
      <summary>
            Represents an operation, which is recorded when the attribute needs to perform a non history action from history
            </summary>
    </member>
    <member name="M:Nevron.Dom.NAttributeActionOperation.Execute(Nevron.Dom.NElementHistoryService)">
      <summary>
            Overriden to call the element OnHistoryAction method with the specified description string
            </summary>
      <param name="service">reference to the history service</param>
    </member>
    <member name="P:Nevron.Dom.NAttributeActionOperation.ElementUniqueId">
      <summary>
            Unique id used to resolve the element
            </summary>
    </member>
    <member name="P:Nevron.Dom.NAttributeActionOperation.AttributeName">
      <summary>
            Full name of the element attribute
            </summary>
    </member>
    <member name="T:Nevron.Dom.ServiceStatus">
      <summary>
            Enumerates the possible states of a service
            </summary>
    </member>
    <member name="F:Nevron.Dom.ServiceStatus.Started">
      <summary>
            The service is started and is running
            </summary>
    </member>
    <member name="F:Nevron.Dom.ServiceStatus.Paused">
      <summary>
            The service is started, but is temporary paused and is not running
            </summary>
    </member>
    <member name="F:Nevron.Dom.ServiceStatus.Stopped">
      <summary>
            The service is stopped and is not running
            </summary>
    </member>
    <member name="T:Nevron.Dom.TreeTraversalOrder">
      <summary>
            Enumerates the order in which trees can be traversed
            </summary>
    </member>
    <member name="F:Nevron.Dom.TreeTraversalOrder.BreadthFirst">
      <summary>
            Breadth-first traversal order - visits the nodes by levels
            </summary>
    </member>
    <member name="F:Nevron.Dom.TreeTraversalOrder.DepthFirstPostOrder">
      <summary>
            Depth-first Post-order traversal order - visits the children and then visits the parent
            </summary>
    </member>
    <member name="F:Nevron.Dom.TreeTraversalOrder.DepthFirstPreOrder">
      <summary>
            Depth-first Pre-order traversal order - visits the parent and then visits the children
            </summary>
    </member>
    <member name="T:Nevron.Dom.IdentifierType">
      <summary>
            Enumerates the possible identifiers
            </summary>
    </member>
    <member name="F:Nevron.Dom.IdentifierType.Element">
      <summary>
            Element identifier
            </summary>
    </member>
    <member name="F:Nevron.Dom.IdentifierType.Attribute">
      <summary>
            Attribute identifier
            </summary>
    </member>
    <member name="F:Nevron.Dom.IdentifierType.Atom">
      <summary>
            Atom identifier
            </summary>
    </member>
    <member name="F:Nevron.Dom.IdentifierType.Hierarchical">
      <summary>
            Hierarchical identifier
            </summary>
    </member>
    <member name="T:Nevron.Dom.NNodeList">
      <summary>
            The NNodeList class represents a typed list of INNode instances
            </summary>
    </member>
    <member name="M:Nevron.Dom.NNodeList.Add(Nevron.Dom.INNode)">
      <summary>
            Adds the node to the end of the collection
            </summary>
      <param name="value">node to add</param>
      <returns>The zero-based index at which the new node is inserted</returns>
    </member>
    <member name="M:Nevron.Dom.NNodeList.AddRange(Nevron.Dom.INNode[])">
      <summary>
            Copies the elements of a node array to the end of the collection.
            </summary>
      <param name="value">node array</param>
    </member>
    <member name="M:Nevron.Dom.NNodeList.AddRange(Nevron.Dom.NNodeList)">
      <summary>
            Copies the elements of a node list to the end of the collection.
            </summary>
      <param name="value">node list</param>
    </member>
    <member name="M:Nevron.Dom.NNodeList.AddRange(System.Collections.ICollection)">
      <summary>
            Copies the elements of the specified collection to the end of this collection.
            </summary>
      <param name="value">node collection</param>
    </member>
    <member name="M:Nevron.Dom.NNodeList.Contains(Nevron.Dom.INNode)">
      <summary>
            Determines whether the specified node is in the collection
            </summary>
      <param name="value">node</param>
      <returns>true if node is found in the collection, otherwise false</returns>
    </member>
    <member name="M:Nevron.Dom.NNodeList.CopyTo(Nevron.Dom.INNode[],System.Int32)">
      <summary>
            Copies the entire collection values to a one-dimensional array of nodes, starting at the specified index of the target array.
            </summary>
      <param name="array">The one-dimensional array of nodes that is the destination of the elements copied from collection. The Array must have zero-based indexing</param>
      <param name="index">The zero-based index in array at which copying begins.</param>
    </member>
    <member name="M:Nevron.Dom.NNodeList.IndexOf(Nevron.Dom.INNode)">
      <summary>
            Searches for the specified node and returns the zero-based index of the first occurrence within the collection
            </summary>
      <param name="value">the node to locate</param>
      <returns>index of the node</returns>
    </member>
    <member name="M:Nevron.Dom.NNodeList.Insert(System.Int32,Nevron.Dom.INNode)">
      <summary>
            Inserts the node at the specified index
            </summary>
      <param name="index">index at which the node is inserted</param>
      <param name="value">the node to insert</param>
    </member>
    <member name="M:Nevron.Dom.NNodeList.Remove(Nevron.Dom.INNode)">
      <summary>
            Removes the first occurrence of a specific node from the collection
            </summary>
      <param name="value">node to remove</param>
    </member>
    <member name="M:Nevron.Dom.NNodeList.Filter(Nevron.Filters.INFilter)">
      <summary>
            Filters the elements of this list and returns a new list in which all elements satisfy the filter criteria
            </summary>
      <param name="filter">filter to use, or null if no filter should be used</param>
      <returns>filtered list</returns>
    </member>
    <member name="M:Nevron.Dom.NNodeList.FilterCount(Nevron.Filters.INFilter)">
      <summary>
            Determines the count of elements in this array, which satisfy the specified filter
            </summary>
      <param name="filter">filter to apply</param>
      <returns>count on elements which satisfy the filter</returns>
    </member>
    <member name="M:Nevron.Dom.NNodeList.AddNoDuplicates(Nevron.Dom.INNode)">
      <summary>
            Adds a non duplicate node to the list
            </summary>
      <param name="value">node to add</param>
      <returns>The zero-based index at which the new node is inserted, or -1 if it already exists in the list</returns>
    </member>
    <member name="M:Nevron.Dom.NNodeList.AddRangeNoDuplicates(System.Collections.ICollection)">
      <summary>
            Copies the elements of the specified collection to the end of this collection and does not add any duplicate entries
            </summary>
      <param name="value">node collection</param>
    </member>
    <member name="M:Nevron.Dom.NNodeList.Sort(System.Collections.IComparer)">
      <summary>
            Sorts the element of this list with the specified comparer
            </summary>
      <param name="comparer">comparer to use</param>
    </member>
    <member name="M:Nevron.Dom.NNodeList.ToArray(System.Type)">
      <summary>
            Copies the elements of this list to a new array of the specified type.
            </summary>
      <param name="type">he type of array to create and copy elements to.</param>
      <returns>an array of the specified type containing copies of the elements in this list</returns>
    </member>
    <member name="M:Nevron.Dom.NNodeList.RemoveRange(System.Collections.ICollection)">
      <summary>
            Removes the specified range of elements from the collection
            </summary>
      <param name="value">node collection</param>
    </member>
    <member name="M:Nevron.Dom.NNodeList.IntersectsWith(System.Collections.ICollection)">
      <summary>
            Determines whether this and the specified collection have common entries
            </summary>
      <param name="value">node collection</param>
      <returns>true if common entries have been founds, otherwise false</returns>
    </member>
    <member name="M:Nevron.Dom.NNodeList.Clone">
      <summary>
            Creates an exact replica of this object.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.Dom.NBitMatrix">
      <summary>
            Represents a 2D array of boolean values which is similar to a 2D bool
            array with the exception that each value uses 1 bit instead of 1 byte.
            </summary>
    </member>
    <member name="M:Nevron.Dom.NBitMatrix.Clear">
      <summary>
            Sets all bits in this bit matrix to 0 (false).
            </summary>
    </member>
    <member name="M:Nevron.Dom.NBitMatrix.Set(System.Boolean)">
      <summary>
            Sets all bits in this bit matrix to the given value.
            </summary>
      <param name="value">The value to apply on all bits.</param>
    </member>
    <member name="M:Nevron.Dom.NBitMatrix.SetRow(System.Int32,System.Boolean)">
      <summary>
            Sets all bits in the specified row to the given value.
            </summary>
      <param name="rowIndex">
      </param>
      <param name="value">
      </param>
    </member>
    <member name="M:Nevron.Dom.NBitMatrix.SetColumn(System.Int32,System.Boolean)">
      <summary>
            Sets all bits in the specified column to the given value.
            </summary>
      <param name="columnIndex">
      </param>
      <param name="value">
      </param>
    </member>
    <member name="M:Nevron.Dom.NBitMatrix.GetCount(System.Int32,System.Boolean)">
      <summary>
            Gets the number of values equal to the given one in the specified row.
            </summary>
      <param name="rowIndex">
      </param>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Dom.NBitMatrix.GetBit(System.Int32,System.Int32)">
      <summary>
            Gets the bit at the specified location.
            </summary>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Dom.NBitMatrix.SetBit(System.Int32,System.Int32,System.Boolean)">
      <summary>
            Sets the bit at the specified location to the given value and returns
            true if the bit value has been changed (that is if it has a value different
            from the given one).
            </summary>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Dom.NBitMatrix.ToString">
      <summary>
            Returns a System.String that represents the current NBitMatrix.
            </summary>
      <returns>A System.String that represents the current NBitMatrix.</returns>
    </member>
    <member name="P:Nevron.Dom.NBitMatrix.Width">
      <summary>
            Gets the width (the number of columns) in this bit matrix.
            </summary>
    </member>
    <member name="P:Nevron.Dom.NBitMatrix.Height">
      <summary>
            Get the height (the number of rows) in this bit matrix.
            </summary>
    </member>
    <member name="T:Nevron.NYearDateTimeUnit">
      <summary>
            Represents the year date time unit.
            </summary>
    </member>
    <member name="M:Nevron.NYearDateTimeUnit.Add(System.DateTime,System.Int64)">
      <summary>
            Add the unitCount to the dateTime.
            </summary>
      <param name="dateTime">
      </param>
      <param name="unitCount">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.NYearDateTimeUnit.Ticks">
      <summary>
            Returns the number of ticks in this date time unit
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.NYearDateTimeUnit.IsRegular">
      <summary>
            Returns true if the unit is regular (e.g. always expressed with a fixed number of ticks)
            </summary>
    </member>
    <member name="P:Nevron.NYearDateTimeUnit.DateTimeUnit">
      <summary>
            The date/time unit enum value.
            </summary>
    </member>
    <member name="T:Nevron.Threading.NThreadTask">
      <summary>
            Represents a reusable thread task
            </summary>
    </member>
    <member name="M:Nevron.Threading.NThreadTask.DoWork(System.Object)">
      <summary>
      </summary>
      <param name="o">
      </param>
    </member>
    <member name="T:Nevron.NRegistryLicenseWriter">
      <summary>
            Registry license writer
            </summary>
    </member>
    <member name="M:Nevron.NRegistryLicenseWriter.WriteLicense(Nevron.NLicense)">
      <summary>
            Writes the license
            </summary>
      <param name="license">
      </param>
    </member>
    <member name="T:Nevron.NRegistryLicenseReader">
      <summary>
            Registry license reader
            </summary>
    </member>
    <member name="M:Nevron.NRegistryLicenseReader.ReadLicense">
      <summary>
            Reads the license
            </summary>
      <returns>
      </returns>
    </member>
    <member name="F:Nevron.NRegistryLicenseReader.m_LicenseObtained">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.NRegistryLicenseReader.m_License">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.Reflection.NIconAttribute">
      <summary>
            The NIconAttribute is used to assign an icon to a type
            </summary>
    </member>
    <member name="M:Nevron.Reflection.NIconAttribute.GetIconInfoFromType(System.Type,Nevron.Reflection.NIconInfo@)">
      <summary>
      </summary>
      <param name="type">
      </param>
      <param name="iconInfo">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.Reflection.NIconAttribute.IconName">
      <summary>
            Gets the image icon name
            </summary>
    </member>
    <member name="T:Nevron.Interop.Win32.NGdi32">
      <summary>
            Provides support for working with GDI device.
            </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.LPD_TYPE_RGBA">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.LPD_TYPE_COLORINDEX">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.LPD_DOUBLEBUFFER">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.LPD_STEREO">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.LPD_SUPPORT_GDI">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.LPD_SUPPORT_OPENGL">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.LPD_SHARE_DEPTH">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.LPD_SHARE_STENCIL">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.LPD_SHARE_ACCUM">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.LPD_SWAP_EXCHANGE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.LPD_SWAP_COPY">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.LPD_TRANSPARENT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.PFD_TYPE_RGBA">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.PFD_TYPE_COLORINDEX">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.PFD_MAIN_PLANE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.PFD_OVERLAY_PLANE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.PFD_UNDERLAY_PLANE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.PFD_DOUBLEBUFFER">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.PFD_STEREO">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.PFD_DRAW_TO_WINDOW">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.PFD_DRAW_TO_BITMAP">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.PFD_SUPPORT_GDI">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.PFD_SUPPORT_OPENGL">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.PFD_GENERIC_FORMAT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.PFD_NEED_PALETTE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.PFD_NEED_SYSTEM_PALETTE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.PFD_SWAP_EXCHANGE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.PFD_SWAP_COPY">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.PFD_SWAP_LAYER_BUFFERS">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.PFD_GENERIC_ACCELERATED">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.PFD_SUPPORT_DIRECTDRAW">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.PFD_DEPTH_DONTCARE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.PFD_DOUBLEBUFFER_DONTCARE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.PFD_STEREO_DONTCARE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.DM_BITSPERPEL">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.DM_PELSWIDTH">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.DM_PELSHEIGHT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.DM_DISPLAYFLAGS">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.DM_DISPLAYFREQUENCY">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.OUT_TT_PRECIS">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.CLIP_DEFAULT_PRECIS">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.DEFAULT_QUALITY">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.DRAFT_QUALITY">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.PROOF_QUALITY">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.NONANTIALIASED_QUALITY">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.ANTIALIASED_QUALITY">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.CLEARTYPE_QUALITY">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.CLEARTYPE_NATURAL_QUALITY">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.DEFAULT_PITCH">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.FIXED_PITCH">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.VARIABLE_PITCH">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.MONO_FONT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.ANSI_CHARSET">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.DEFAULT_CHARSET">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.SYMBOL_CHARSET">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.SHIFTJIS_CHARSET">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.FF_DONTCARE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.FW_BOLD">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.DIB_RGB_COLORS">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.DIB_PAL_COLORS">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.BI_RGB">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.BI_RLE8">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.BI_RLE4">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.BI_BITFIELDS">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.BI_JPEG">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.BI_PNG">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.BS_SOLID">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.BS_NULL">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.BS_HOLLOW">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.BS_HATCHED">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.BS_PATTERN">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.BS_INDEXED">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.BS_DIBPATTERN">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.BS_DIBPATTERNPT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.BS_PATTERN8X8">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.BS_DIBPATTERN8X8">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.BS_MONOPATTERN">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.SRCCOPY">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.SRCPAINT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.SRCAND">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.SRCINVERT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.SRCERASE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.NOTSRCCOPY">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.NOTSRCERASE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.MERGECOPY">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.MERGEPAINT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.PATCOPY">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.PATPAINT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.PATINVERT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.DSTINVERT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.BLACKNESS">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.WHITENESS">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.DRIVERVERSION">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.TECHNOLOGY">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.HORZSIZE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.VERTSIZE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.HORZRES">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.VERTRES">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.BITSPIXEL">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.PLANES">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.NUMBRUSHES">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.NUMPENS">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.NUMMARKERS">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.NUMFONTS">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.NUMCOLORS">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.PDEVICESIZE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.CURVECAPS">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.LINECAPS">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.POLYGONALCAPS">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.TEXTCAPS">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.CLIPCAPS">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.RASTERCAPS">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.ASPECTX">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.ASPECTY">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.ASPECTXY">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.LOGPIXELSX">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.LOGPIXELSY">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.SIZEPALETTE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.NUMRESERVED">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.COLORRES">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.DT_BOTTOM">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.DT_CALCRECT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.DT_CENTER">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.DT_EDITCONTROL">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.DT_END_ELLIPSIS">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.DT_EXPANDTABS">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.DT_EXTERNALLEADING">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.DT_HIDEPREFIX">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.DT_INTERNAL">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.DT_LEFT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.DT_MODIFYSTRING">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.DT_NOCLIP">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.DT_NOPREFIX">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.DT_PATH_ELLIPSIS">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.DT_PREFIXONLY">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.DT_RIGHT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.DT_RTLREADING">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.DT_SINGLELINE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.DT_TABSTOP">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.DT_TOP">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.DT_VCENTER">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.DT_WORD_ELLIPSIS">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.DT_WORDBREAK">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.TMPF_FIXED_PITCH">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.TMPF_VECTOR">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.TMPF_DEVICE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.TMPF_TRUETYPE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.OBJ_PEN">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.OBJ_BRUSH">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.OBJ_DC">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.OBJ_METADC">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.OBJ_PAL">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.OBJ_FONT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.OBJ_BITMAP">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.OBJ_REGION">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.OBJ_METAFILE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.OBJ_MEMDC">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.OBJ_EXTPEN">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.OBJ_ENHMETADC">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.OBJ_ENHMETAFILE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.OBJ_COLORSPACE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.GM_COMPATIBLE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.GM_ADVANCED">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.MWT_IDENTITY">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.MWT_LEFTMULTIPLY">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.MWT_RIGHTMULTIPLY">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.IMAGE_BITMAP">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.LR_LOADFROMFILE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NGdi32.LR_CREATEDIBSECTION">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.Interop.Win32.NGdi32.Rectangle(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
      </summary>
      <param name="hdc">
      </param>
      <param name="topLeftX">
      </param>
      <param name="topLeftY">
      </param>
      <param name="bottomRightX">
      </param>
      <param name="bottomRightY">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NGdi32.MoveToEx(System.IntPtr,System.Int32,System.Int32,System.IntPtr)">
      <summary>
      </summary>
      <param name="hdc">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="oldPos">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NGdi32.LineTo(System.IntPtr,System.Int32,System.Int32)">
      <summary>
      </summary>
      <param name="hdc">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NGdi32.GetCurrentObject(System.IntPtr,System.Int32)">
      <summary>
      </summary>
      <param name="hdc">
      </param>
      <param name="objCode">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NGdi32.SetGraphicsMode(System.IntPtr,System.Int32)">
      <summary>
      </summary>
      <param name="hdc">
      </param>
      <param name="iMode">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NGdi32.PtInRegion(System.IntPtr,System.Int32,System.Int32)">
      <summary>
      </summary>
      <param name="hRgn">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NGdi32.SaveDC(System.IntPtr)">
      <summary>
      </summary>
      <param name="hDC">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NGdi32.GetRandomRgn(System.IntPtr,System.IntPtr,System.Int32)">
      <summary>
      </summary>
      <param name="hDC">
      </param>
      <param name="hrgn">
      </param>
      <param name="num">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NGdi32.OffsetViewportOrgEx(System.IntPtr,System.Int32,System.Int32,System.Drawing.Point@)">
      <summary>
      </summary>
      <param name="hDC">
      </param>
      <param name="nXOffset">
      </param>
      <param name="nYOffset">
      </param>
      <param name="pt">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NGdi32.GetClipRgn(System.IntPtr,System.IntPtr)">
      <summary>
      </summary>
      <param name="hDC">
      </param>
      <param name="hrgn">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NGdi32.PatBlt(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32)">
      <summary>
      </summary>
      <param name="hDC">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="width">
      </param>
      <param name="height">
      </param>
      <param name="flags">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NGdi32.DeleteDC(System.IntPtr)">
      <summary>
      </summary>
      <param name="hDC">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NGdi32.RestoreDC(System.IntPtr,System.Int32)">
      <summary>
      </summary>
      <param name="hDC">
      </param>
      <param name="savedDC">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NGdi32.DeleteObject(System.IntPtr)">
      <summary>
      </summary>
      <param name="hObject">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NGdi32.CreateCompatibleDC(System.IntPtr)">
      <summary>
      </summary>
      <param name="hDC">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NGdi32.CreateSolidBrush(System.UInt32)">
      <summary>
      </summary>
      <param name="COLORREF">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NGdi32.CreateFont(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
      <summary>
      </summary>
      <param name="height">
      </param>
      <param name="width">
      </param>
      <param name="escapement">
      </param>
      <param name="orientation">
      </param>
      <param name="weight">
      </param>
      <param name="italic">
      </param>
      <param name="underline">
      </param>
      <param name="strikeOut">
      </param>
      <param name="charSet">
      </param>
      <param name="outputPrecision">
      </param>
      <param name="clipPrecision">
      </param>
      <param name="quality">
      </param>
      <param name="pitchAndFamily">
      </param>
      <param name="typeFace">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NGdi32.SelectObject(System.IntPtr,System.IntPtr)">
      <summary>
      </summary>
      <param name="hDC">
      </param>
      <param name="hObject">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NGdi32.CreateCompatibleBitmap(System.IntPtr,System.Int32,System.Int32)">
      <summary>
      </summary>
      <param name="hDC">
      </param>
      <param name="Width">
      </param>
      <param name="Heigth">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NGdi32.CreateBitmap(System.Int32,System.Int32,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>
      </summary>
      <param name="Width">
      </param>
      <param name="Heigth">
      </param>
      <param name="planes">
      </param>
      <param name="bits">
      </param>
      <param name="colorArray">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NGdi32.SetBkMode(System.IntPtr,System.Int32)">
      <summary>
      </summary>
      <param name="hDC">
      </param>
      <param name="mode">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NGdi32.SetTextColor(System.IntPtr,System.UInt32)">
      <summary>
      </summary>
      <param name="hDC">
      </param>
      <param name="colorRef">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NGdi32.SetBkColor(System.IntPtr,System.UInt32)">
      <summary>
      </summary>
      <param name="hDC">
      </param>
      <param name="colorRef">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NGdi32.SelectClipRgn(System.IntPtr,System.IntPtr)">
      <summary>
      </summary>
      <param name="hDC">
      </param>
      <param name="hRgn">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NGdi32.GetDeviceCaps(System.IntPtr,System.Int32)">
      <summary>
      </summary>
      <param name="hDC">
      </param>
      <param name="nIndex">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NGdi32.CreateSolidBrush(System.Int32)">
      <summary>
      </summary>
      <param name="color">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NGdi32.CreatePen(System.Int32,System.Int32,System.Int32)">
      <summary>
      </summary>
      <param name="style">
      </param>
      <param name="width">
      </param>
      <param name="color">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NGdi32.CreateRectRgn(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
      </summary>
      <param name="X1">
      </param>
      <param name="Y1">
      </param>
      <param name="X2">
      </param>
      <param name="Y2">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NGdi32.CombineRgn(System.IntPtr,System.IntPtr,System.IntPtr,System.Int32)">
      <summary>
      </summary>
      <param name="hDestRgn">
      </param>
      <param name="hSrcRgn1">
      </param>
      <param name="hSrcRgn2">
      </param>
      <param name="nCombineMode">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NGdi32.SwapBuffers(System.IntPtr)">
      <summary>
      </summary>
      <param name="deviceContext">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NGdi32.SwapBuffersFast(System.IntPtr)">
      <summary>
      </summary>
      <param name="deviceContext">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NGdi32.SetWindowOrgEx(System.IntPtr,System.Int32,System.Int32,System.Drawing.Point@)">
      <summary>
      </summary>
      <param name="hDC">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="point">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NGdi32.SetViewportOrgEx(System.IntPtr,System.Int32,System.Int32,System.Drawing.Point@)">
      <summary>
      </summary>
      <param name="hDC">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="point">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NGdi32.GetViewportOrgEx(System.IntPtr,System.Drawing.Point@)">
      <summary>
      </summary>
      <param name="hDC">
      </param>
      <param name="point">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NGdi32.BitBlt(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,System.UInt32)">
      <summary>
      </summary>
      <param name="hdcDest">
      </param>
      <param name="nXDest">
      </param>
      <param name="nYDest">
      </param>
      <param name="nWidth">
      </param>
      <param name="nHeight">
      </param>
      <param name="hdcSrc">
      </param>
      <param name="nXSrc">
      </param>
      <param name="nYSrc">
      </param>
      <param name="dwRop">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NGdi32.GetKerningPairs(System.IntPtr,System.Int32,System.IntPtr)">
      <summary>
      </summary>
      <param name="hdc">
      </param>
      <param name="nNumPairs">
      </param>
      <param name="kerningPairs">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NGdi32.DeleteEnhMetaFile(System.IntPtr)">
      <summary>
      </summary>
      <param name="hemf">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NGdi32.CloseEnhMetaFile(System.IntPtr)">
      <summary>
      </summary>
      <param name="hemf">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NGdi32.CopyEnhMetaFile(System.IntPtr,System.String)">
      <summary>
      </summary>
      <param name="hemfSrc">
      </param>
      <param name="lpszFile">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NGdi32.PointInRegion(System.IntPtr,System.Drawing.Point)">
      <summary>
      </summary>
      <param name="hRgn">
      </param>
      <param name="pt">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NGdi32.IsFontTrueType(System.Drawing.Font)">
      <summary>
      </summary>
      <param name="font">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NGdi32.IsFontTrueType(System.Drawing.Font,System.IntPtr)">
      <summary>
      </summary>
      <param name="font">
      </param>
      <param name="hdc">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NGdi32.GetNativeDC(System.Windows.Forms.Message,System.IntPtr)">
      <summary>
            Gets the native device context for drawing, depending on the specified Windows message.
            </summary>
      <param name="m">
      </param>
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.Interop.Win32.NGdi32.RegionFlags">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.Interop.Win32.NGdi32.XFORM">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.Interop.Win32.NGdi32.BITMAPINFOHEADER">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.Interop.Win32.NGdi32.BITMAP">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.Interop.Win32.NGdi32.BITMAPINFO">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.Interop.Win32.NGdi32.LOGBRUSH">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.Interop.Win32.NGdi32.LOGFONT">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.Interop.Win32.NGdi32.POINTFLOAT">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.Interop.Win32.NGdi32.DEVMODE">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.Interop.Win32.NGdi32.GLYPHMETRICSFLOAT">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.Interop.Win32.NGdi32.PIXELFORMATDESCRIPTOR">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.Interop.Win32.NGdi32.TEXTMETRIC">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.Interop.Win32.NGdi32.KERNINGPAIR">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.FormulaEngine.NOperatorContainer">
      <summary>
            The NOperatorContainer class is used to store the operators, which can be involved in an expression. 
            It contains an implementation for each operator (a class instance, which impemenets the INOperator interface).
            </summary>
    </member>
    <member name="T:Nevron.FormulaEngine.NConstantElement">
      <summary>
            The NConstantElement class represents a constant (number, string or boolean constant).
            </summary>
    </member>
    <member name="M:Nevron.FormulaEngine.NConstantElement.Evaluate(Nevron.FormulaEngine.NFormulaEngine)">
      <summary>
            Evaluates the formula element
            </summary>
      <param name="engine">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaEngine.NConstantElement.ToTreeNode">
      <summary>
            Creates a tree node which represents this element
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.FormulaEngine.NConstantElement.Value">
      <summary>
            Gets/sets the constant value
            </summary>
    </member>
    <member name="T:Nevron.Filters.NNotFilter">
      <summary>
            The NNotFilter class represents a boolean algebra NOT expression and is used to invert the result of the filter it contains
            </summary>
      <remarks>
            This filter inverts the result of the one and only filter it contains
            </remarks>
    </member>
    <member name="M:Nevron.Filters.NNotFilter.Filter(System.Object)">
      <summary>
            Overriden to invert the result of the contained filter
            </summary>
      <param name="obj">object to filter</param>
      <returns>true if the contained filter returned false, false if the contained filter returned true</returns>
    </member>
    <member name="P:Nevron.Filters.NNotFilter.ContainedFilter">
      <summary>
            Gets/sets the contained filter
            </summary>
    </member>
    <member name="T:Nevron.Filters.NAndFilter">
      <summary>
            The NAndFilter class is a composite filter, which represents a boolean algebra AND expression between the contained filters
            </summary>
    </member>
    <member name="M:Nevron.Filters.NAndFilter.Filter(System.Object)">
      <summary>
            Overriden to return true if all contained filters return true
            </summary>
      <param name="obj">object to filter</param>
      <returns>true if all contained filters returned true, otherwise false</returns>
    </member>
    <member name="T:Nevron.Dom.NDomHelpers">
      <summary>
            Static DOM helper methods
            </summary>
    </member>
    <member name="T:Nevron.Dom.INNode">
      <summary>
            Implemented by objects residing in hiearchies (trees)
            </summary>
    </member>
    <member name="P:Nevron.Dom.INNode.RootNode">
      <summary>
            Obtains the root node of the hiearchy
            </summary>
    </member>
    <member name="P:Nevron.Dom.INNode.ParentNode">
      <summary>
            Obtains the parent node in the hiearchy
            </summary>
    </member>
    <member name="T:Nevron.Dom.INNamed">
      <summary>
            Implemented by named objects
            </summary>
    </member>
    <member name="P:Nevron.Dom.INNamed.Name">
      <summary>
            Gets / sets the object name
            </summary>
    </member>
    <member name="T:Nevron.Dom.NElementCompositeImpl">
      <summary>
            The NElementCompositeImpl class represents an implementation of the INElementComposite interface, 
            which can be resused and extended
            </summary>
    </member>
    <member name="T:Nevron.Dom.NNodeCompositeImpl">
      <summary>
            The NNodeCompositeImpl class represents an implementation of the INNodeComposite interface, 
            which can be resused and extended
            </summary>
    </member>
    <member name="M:Nevron.Dom.NNodeCompositeImpl.Clone">
      <summary>
            Creates an identical copy of this object
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Dom.NNodeCompositeImpl.ProvideReference(System.Type)">
      <summary>
      </summary>
      <param name="referenceType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Dom.NNodeCompositeImpl.UpdateReferences(Nevron.INReferenceProvider)">
      <summary>
            Updates the references stored by the object
            </summary>
      <remarks>
            The object can query the specified provider for references 
            </remarks>
      <param name="provider">provider from which to obtain references</param>
    </member>
    <member name="M:Nevron.Dom.NNodeCompositeImpl.CreateNonSerializedObjects">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.Dom.NNodeCompositeImpl.GetReferenceProvider">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Dom.NNodeCompositeImpl.AddChild(Nevron.Dom.INNode)">
      <summary>
            Adds a child node
            </summary>
      <param name="node">node to add</param>
    </member>
    <member name="M:Nevron.Dom.NNodeCompositeImpl.InsertChild(System.Int32,Nevron.Dom.INNode)">
      <summary>
            Inserts a child node at the specified index
            </summary>
      <param name="index">index at which to insert the child node</param>
      <param name="node">node to insert</param>
    </member>
    <member name="M:Nevron.Dom.NNodeCompositeImpl.CanInsertChild(System.Int32,Nevron.Dom.INNode)">
      <summary>
            Queries whether the specified node can be inserted at the specified index
            </summary>
      <param name="index">index at which the child node will be inserted</param>
      <param name="node">child node to insert</param>
      <returns>true if the node can be inserted at the specified index, otherwise false</returns>
    </member>
    <member name="M:Nevron.Dom.NNodeCompositeImpl.RemoveChild(Nevron.Dom.INNode)">
      <summary>
            Removes the specified child node from the container children
            </summary>
      <param name="node">child node to remove</param>
    </member>
    <member name="M:Nevron.Dom.NNodeCompositeImpl.RemoveChildAt(System.Int32)">
      <summary>
            Removes the child node at the specified index
            </summary>
      <param name="index">index of child node to remove</param>
    </member>
    <member name="M:Nevron.Dom.NNodeCompositeImpl.RemoveAllChildren">
      <summary>
            Removes all children
            </summary>
    </member>
    <member name="M:Nevron.Dom.NNodeCompositeImpl.CanRemoveChild(Nevron.Dom.INNode)">
      <summary>
            Queries whether the specified child node can be removed
            </summary>
      <param name="node">child node to remove</param>
      <returns>true if the node can be removed, otherwise false</returns>
    </member>
    <member name="M:Nevron.Dom.NNodeCompositeImpl.SetChildIndex(Nevron.Dom.INNode,System.Int32)">
      <summary>
            Sets a new index of the specified child node
            </summary>
      <param name="node">node whose index to change</param>
      <param name="index">new index</param>
      <returns>previous node index</returns>
    </member>
    <member name="M:Nevron.Dom.NNodeCompositeImpl.ChildrenCount(Nevron.Filters.INFilter)">
      <summary>
            Returns the number of child nodes which satisfy the specified filter
            </summary>
      <param name="filter">filter to use, or null if no filter should be applied</param>
      <returns>children count, which satisfy the filter</returns>
    </member>
    <member name="M:Nevron.Dom.NNodeCompositeImpl.Children(Nevron.Filters.INFilter)">
      <summary>
            Obtains the child nodes of this node
            </summary>
      <param name="filter">filter to use, or null if no filter must be applied</param>
      <returns>list of child nodes, which satisfy the filter</returns>
    </member>
    <member name="M:Nevron.Dom.NNodeCompositeImpl.AccumulateChildren(Nevron.Filters.INFilter,Nevron.Dom.NNodeList)">
      <summary>
            Accumulates the children contained in this node, which satisfy the filter to the provided node list
            </summary>
      <param name="filter">filter to use, or null if no filter must be applied</param>
      <param name="list">list to which to append the child nodes, which satisfy the filter</param>
    </member>
    <member name="M:Nevron.Dom.NNodeCompositeImpl.IsDescendant(Nevron.Dom.INNode,System.Int32)">
      <summary>
            Queries whether the specified node is a descendant of this node
            </summary>
      <param name="node">node to look for</param>
      <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
      <returns>true if the node is a descendant node, otherwise false</returns>
    </member>
    <member name="M:Nevron.Dom.NNodeCompositeImpl.DescendantsCount(Nevron.Filters.INFilter,System.Int32)">
      <summary>
            Returns the number of descendant nodes, which satisfy the specified filter
            </summary>
      <param name="filter">filter to use, or null if no filter should be applied</param>
      <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
      <returns>count of descendants, which satisfy the filter</returns>
    </member>
    <member name="M:Nevron.Dom.NNodeCompositeImpl.Descendants(Nevron.Filters.INFilter,System.Int32)">
      <summary>
            Obtains the descentant nodes of this node
            </summary>
      <param name="filter">filter to use, or null if no filter must be applied</param>
      <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
      <returns>list of child nodes, which satisfy the filter</returns>
    </member>
    <member name="M:Nevron.Dom.NNodeCompositeImpl.AccumulateDescendants(Nevron.Filters.INFilter,System.Int32,Nevron.Dom.NNodeList)">
      <summary>
            Accumulates the descendants contained in this node, which satisfy the filter to the provided node list
            </summary>
      <param name="filter">filter to use, or null if no filter must be applied</param>
      <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
      <param name="list">list to which to append the descendant nodes, which satisfy the filter</param>
    </member>
    <member name="M:Nevron.Dom.NNodeCompositeImpl.GetEnumerator(Nevron.Filters.INFilter)">
      <summary>
            Obtains a child node enumerator 
            </summary>
      <param name="filter">filter to use, or null if no filter must be applied</param>
      <returns>node enumerator</returns>
    </member>
    <member name="M:Nevron.Dom.NNodeCompositeImpl.GetFirst(Nevron.Filters.INFilter)">
      <summary>
            Gets the first node in the collection which satisfies the filter criteria
            </summary>
      <param name="filter">filter to use. If null the first node is returned</param>
      <returns>first node in the collection which satisfies the filter criteria, or null if such node does not exist</returns>
    </member>
    <member name="M:Nevron.Dom.NNodeCompositeImpl.GetLast(Nevron.Filters.INFilter)">
      <summary>
            Gets the last node in the collection which satisfies the filter criteria
            </summary>
      <param name="filter">filter to use. If null the last node is returned</param>
      <returns>last node in the collection which satisfies the filter criteria, or null if such node does not exist</returns>
    </member>
    <member name="M:Nevron.Dom.NNodeCompositeImpl.OnInserting(System.Int32,Nevron.Dom.INNode)">
      <summary>
            Called when a node is about to be inserted in the base array list
            </summary>
      <param name="index">index at which the node will be inserted</param>
      <param name="node">node which will be inserted</param>
    </member>
    <member name="M:Nevron.Dom.NNodeCompositeImpl.OnInserted(System.Int32,Nevron.Dom.INNode)">
      <summary>
            Called when a node has been inserted in the base array list
            </summary>
      <remarks>
            This implementation fires the NodeInserted event if the implementation is connected to an event sink service
            </remarks>
      <param name="index">index at which the node was inserted</param>
      <param name="node">node which was inserted</param>
    </member>
    <member name="M:Nevron.Dom.NNodeCompositeImpl.OnRemoving(System.Int32,Nevron.Dom.INNode)">
      <summary>
            Called when a node is about to be removed from the base array list
            </summary>
      <remarks>
            This implementation fires the NodeRemoving event if the implementation is connected to 
            an event sink service.
            </remarks>
      <param name="index">the index of the node to be removed</param>
      <param name="node">node which will be removed</param>
      <returns>true if the node can be removed, otherwise false</returns>
    </member>
    <member name="M:Nevron.Dom.NNodeCompositeImpl.OnRemoved(System.Int32,Nevron.Dom.INNode)">
      <summary>
            Called when a node has been removed from the base array list
            </summary>
      <remarks>
            This implementation fires the NodeRemoved event if the implementation is connected to an event sink service
            </remarks>
      <param name="index">the former node index before it was removed</param>
      <param name="node">node which was removed</param>
    </member>
    <member name="M:Nevron.Dom.NNodeCompositeImpl.OnStartRemoveAll">
      <summary>
            Called before all nodes have been removed from the base array list
            </summary>
    </member>
    <member name="M:Nevron.Dom.NNodeCompositeImpl.OnEndRemoveAll">
      <summary>
            Called after all nodes have been removed from the base array list
            </summary>
    </member>
    <member name="M:Nevron.Dom.NNodeCompositeImpl.OnAbortRemoveAll">
      <summary>
            Called to abort the remove all nodes operation if possible
            </summary>
    </member>
    <member name="M:Nevron.Dom.NNodeCompositeImpl.OnIndexChanging(Nevron.Dom.INNode,System.Int32,System.Int32)">
      <summary>
            Called when the index of the specified node is about to change
            </summary>
      <param name="node">node whose index in the base array is changing</param>
      <param name="curIndex">current node index</param>
      <param name="newIndex">new node index</param>
    </member>
    <member name="M:Nevron.Dom.NNodeCompositeImpl.OnIndexChanged(Nevron.Dom.INNode,System.Int32,System.Int32)">
      <summary>
            Called when the index of the specified node has changed
            </summary>
      <param name="node">node whose index has changed</param>
      <param name="curIndex">current node index</param>
      <param name="oldIndex">old node index</param>
    </member>
    <member name="F:Nevron.Dom.NNodeCompositeImpl.m_Provider">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Dom.NNodeCompositeImpl.m_EventSinkService">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.Dom.NNodeCompositeImpl.OwnerNode">
      <summary>
            Obtains a reference to the node, which reuses this implementation
            </summary>
    </member>
    <member name="P:Nevron.Dom.NNodeCompositeImpl.EventSinkService">
      <summary>
            Obtains a reference to the node event sink service to which the implementation is attached
            </summary>
    </member>
    <member name="M:Nevron.Dom.NElementCompositeImpl.UpdateReferences(Nevron.INReferenceProvider)">
      <summary>
            Overriden to store a reference to the element document
            </summary>
      <param name="provider">
      </param>
    </member>
    <member name="M:Nevron.Dom.NElementCompositeImpl.CanInsertChild(System.Int32,Nevron.Dom.INNode)">
      <summary>
            Overriden to return false if the node is not an element
            </summary>
      <param name="index">
      </param>
      <param name="node">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Dom.NElementCompositeImpl.GetChildFromId(System.Int32)">
      <summary>
            Obtains a child element by its id
            </summary>
      <param name="id">id of the element</param>
      <returns>reference to the element if it was found, otherwise null</returns>
    </member>
    <member name="M:Nevron.Dom.NElementCompositeImpl.GetChildFromUniqueId(System.Guid)">
      <summary>
            Obtains a child element by its unique id
            </summary>
      <param name="uid">unique id of the element</param>
      <returns>reference to the element if it was found, otherwise null</returns>
    </member>
    <member name="M:Nevron.Dom.NElementCompositeImpl.GetDescendantFromId(System.Int32,System.Int32)">
      <summary>
            Obtains a element node by its id
            </summary>
      <param name="id">id of the element</param>
      <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
      <returns>reference to the element if it was found, otherwise null</returns>
    </member>
    <member name="M:Nevron.Dom.NElementCompositeImpl.GetDescendantFromUniqueId(System.Guid,System.Int32)">
      <summary>
            Obtains a child element by its unique id
            </summary>
      <param name="uid">unique id of the element</param>
      <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
      <returns>reference to the element if it was found, otherwise null</returns>
    </member>
    <member name="M:Nevron.Dom.NElementCompositeImpl.OnInserting(System.Int32,Nevron.Dom.INNode)">
      <summary>
            Called when a node is about to be inserted in the base array list
            </summary>
      <remarks>&gt;
            Overriden to record an insert element operation, if the implementation is connected to an element history service and 
            register the element in the document, if the implementation is connected to a document
            </remarks>
      <param name="index">index at which the node will be inserted</param>
      <param name="node">node which will be inserted</param>
    </member>
    <member name="M:Nevron.Dom.NElementCompositeImpl.OnRemoving(System.Int32,Nevron.Dom.INNode)">
      <summary>
            Called when a node is about to be removed from the base array list
            </summary>
      <remarks>
            Overriden to record a remove element operation, if the implementation is connected to an element history service and
            unregister the element from the document, if the implementation is connected to a document. 
            </remarks>
      <param name="index">the index of the node</param>
      <param name="node">node which will be removed</param>
      <returns>true if node can be removed, otherwise false</returns>
    </member>
    <member name="M:Nevron.Dom.NElementCompositeImpl.OnStartRemoveAll">
      <summary>
            Called before all nodes have been removed from the base array list
            </summary>
      <remarks>
            Overriden to start a remove all elements transaction, if the implementation is connected to an element history service
            </remarks>&gt;
        </member>
    <member name="M:Nevron.Dom.NElementCompositeImpl.OnEndRemoveAll">
      <summary>
            Called after all nodes have been removed from the base array list
            </summary>
      <remarks>
            Overriden to commit the last transaction, if the implementation is connected to an element history service
            </remarks>
    </member>
    <member name="M:Nevron.Dom.NElementCompositeImpl.OnAbortRemoveAll">
      <summary>
            Called to abort the remove all nodes operation if possible
            </summary>
      <remarks>
            Overriden to rollback the last transaction, if the implementation is connected to an element history service
            </remarks>&gt;
        </member>
    <member name="M:Nevron.Dom.NElementCompositeImpl.OnIndexChanging(Nevron.Dom.INNode,System.Int32,System.Int32)">
      <summary>
            Called when the index of the specified node is about to change
            </summary>
      <remarks>
            Overriden to record a set element index operation, if the implementation is connected to an element history service 
            </remarks>
      <param name="node">node whose index in the base array is changing</param>
      <param name="curIndex">current node index</param>
      <param name="newIndex">new node index</param>
    </member>
    <member name="P:Nevron.Dom.NElementCompositeImpl.Document">
      <summary>
            Obtains a reference to the document element to which the implementation is attached
            </summary>
    </member>
    <member name="P:Nevron.Dom.NElementCompositeImpl.HistoryService">
      <summary>
            Obtains a reference to the element history service to which the implementation is attached
            </summary>
    </member>
    <member name="T:Nevron.Dom.NIndexedAttributeContainerEnumerator">
      <summary>
            Enumerates the attributes contained in an indexed attribute container.
            </summary>
    </member>
    <member name="M:Nevron.Dom.NIndexedAttributeContainerEnumerator.Reset">
      <summary>
            Sets the enumerator to its initial position, which is before the first attribute in the indexed container
            </summary>
    </member>
    <member name="M:Nevron.Dom.NIndexedAttributeContainerEnumerator.MoveNext">
      <summary>
            Advances the enumerator to the next attribute 
            </summary>
      <returns>true if the enumerator was successfully advanced to the next attribute, false if the enumerator has passed the end of all attributes</returns>
    </member>
    <member name="P:Nevron.Dom.NIndexedAttributeContainerEnumerator.Current">
      <summary>
            Obtains the current attribute
            </summary>
    </member>
    <member name="T:Nevron.Dom.NNumericValueFormatter">
      <summary>
            Represents a numeric values formatter
            </summary>
    </member>
    <member name="M:Nevron.Dom.NNumericValueFormatter.SetPredefinedFormat(Nevron.NumericValueFormat)">
      <summary>
            Sets a predefined format to this value formatter
            </summary>
      <param name="format">
      </param>
    </member>
    <member name="M:Nevron.Dom.NNumericValueFormatter.Clone">
      <summary>
            Creates an identical copy of this object.
            </summary>
      <returns>identical copy of this object</returns>
    </member>
    <member name="M:Nevron.Dom.NNumericValueFormatter.FormatValue(System.Object)">
      <summary>
            Overriden to format the value as a numeric value
            </summary>
      <param name="obj">value to format</param>
      <returns>numeric string representation of the value</returns>
    </member>
    <member name="T:Nevron.Reflection.NConstants">
      <summary>
            Summary description for NConstants.
            </summary>
    </member>
    <member name="M:Nevron.Reflection.NConstants.GetValues(System.Type)">
      <summary>
            Returns the values of the pulbic and static fields for the specified type
            </summary>
      <param name="type">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Reflection.NConstants.GetNames(System.Type)">
      <summary>
            Returns the public and static field names of the specified type
            </summary>
      <param name="type">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Reflection.NConstants.GetNamesAndValues(System.Type)">
      <summary>
            Returns both the field names and values for all public and static field for the specified type
            </summary>
      <param name="type">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.Filters.NInt32InRangeFilter">
      <summary>
            Returns true if the value can be converted to int and is in the range [begin, end].
            </summary>
    </member>
    <member name="M:Nevron.Filters.NInt32InRangeFilter.Filter(System.Object)">
      <summary>
            Returns true if the object is in the specified double range
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="F:Nevron.Filters.NInt32InRangeFilter.m_Begin">
      <summary>
            The begin value
            </summary>
    </member>
    <member name="F:Nevron.Filters.NInt32InRangeFilter.m_End">
      <summary>
            The end value
            </summary>
    </member>
    <member name="T:Nevron.Dom.INElementComposite">
      <summary>
            Implemented by element containers, whose children can be freely modified
            </summary>
    </member>
    <member name="T:Nevron.Dom.INElementContainer">
      <summary>
            Implemented by elements, which can contain other elements (i.e. branch elements)
            </summary>
    </member>
    <member name="T:Nevron.Dom.INElement">
      <summary>
            Implemented by elements - i.e. nodes, which can be identified and whose information is structed in attribures
            </summary>
    </member>
    <member name="T:Nevron.Dom.INIdentifiable">
      <summary>
            Implemented by identifiable objects
            </summary>
    </member>
    <member name="P:Nevron.Dom.INIdentifiable.Id">
      <summary>
            Gets / sets the id of the object
            </summary>
    </member>
    <member name="T:Nevron.Dom.INAttributeContainer">
      <summary>
            Implemented by objects which have attributes
            </summary>
    </member>
    <member name="M:Nevron.Dom.INAttributeContainer.GetAttributeName(Nevron.Dom.INAttribute)">
      <summary>
            Gets the name of the specified child attribute
            </summary>
      <param name="attribute">child attribute</param>
      <returns>name of the attribute</returns>
    </member>
    <member name="M:Nevron.Dom.INAttributeContainer.GetAttributeByName(System.String)">
      <summary>
            Gets a child or descendant attribute by its name
            </summary>
      <param name="attributeName">child attribute name or full attribute name</param>
      <returns>a reference to the attribute</returns>
    </member>
    <member name="M:Nevron.Dom.INAttributeContainer.SetAttributeByName(System.String,Nevron.Dom.INAttribute)">
      <summary>
            Sets a child or descendant attribute by its name
            </summary>
      <param name="attributeName">attribute name</param>
      <param name="attribute">attribute to set</param>
    </member>
    <member name="P:Nevron.Dom.INAttributeContainer.Attributes">
      <summary>
            Gets the list of child attributes of this container
            </summary>
      <returns>attributes of the container</returns>
    </member>
    <member name="T:Nevron.Dom.INAttributeObserver">
      <summary>
            Implemented by objects that must be notified of attribute changes
            </summary>
    </member>
    <member name="M:Nevron.Dom.INAttributeObserver.OnAttributePropertyChanging(System.String,System.String,System.Object)">
      <summary>
            Called by child or descendants attributes when an attribute property is changing
            </summary>
      <param name="attributeFullName">full attribute name</param>
      <param name="propertyName">attribute property</param>
      <param name="newValue">new property value</param>
      <returns>true if the change is acceptable, otherwise false</returns>
    </member>
    <member name="M:Nevron.Dom.INAttributeObserver.OnAttributePropertyChanged(System.String,System.String)">
      <summary>
            Called by child or descendants attributes when an attribute property has changed
            </summary>
      <param name="attributeFullName">full attribute name</param>
      <param name="propertyName">attribute property</param>
    </member>
    <member name="M:Nevron.Dom.INAttributeObserver.OnAttributeChanged(System.String)">
      <summary>
            Called by child or descendants attributes when an attribute has changed
            </summary>
      <param name="attributeFullName">full attribute name</param>
    </member>
    <member name="M:Nevron.Dom.INElement.CloneWithNewUniqueId(System.Collections.Hashtable)">
      <summary>
            Creates an identical copy of the element, which differs only by the element unique id
            </summary>
      <param name="mapUIds">map of unique ids, which must be populated with the made unique id changes</param>
      <returns>cloning which differs by unique Id only</returns>
    </member>
    <member name="M:Nevron.Dom.INElement.ReplaceForeignUniqueIds(System.Collections.Hashtable,System.Boolean)">
      <summary>
            Replaces any foreign Ids (references to other nodes)
            </summary>
      <param name="mapUIds">map of unique ids which is used to find the new foreign unique id value</param>
      <param name="makeNotFoundEmpty">indicates whether the not found foreign unique ids must be set to Guid.Empty</param>
    </member>
    <member name="P:Nevron.Dom.INElement.Tag">
      <summary>
            Gets/sets user defined data associated with the element
            </summary>
    </member>
    <member name="T:Nevron.Dom.INNodeContainer">
      <summary>
            Implemented by nodes, which can contain other nodes (i.e. branch nodes)
            </summary>
    </member>
    <member name="M:Nevron.Dom.INNodeContainer.IndexOfChild(Nevron.Dom.INNode)">
      <summary>
            Gets the index of the specified node in the container
            </summary>
      <param name="node">the node to locate</param>
      <returns>index of the node</returns>
    </member>
    <member name="M:Nevron.Dom.INNodeContainer.GetChildAt(System.Int32)">
      <summary>
            Gets the child node at the specified index
            </summary>
      <param name="index">index</param>
      <returns>node at the specified index</returns>
    </member>
    <member name="M:Nevron.Dom.INNodeContainer.SetChildIndex(Nevron.Dom.INNode,System.Int32)">
      <summary>
            Sets a new index of the specified child node
            </summary>
      <param name="node">node whose index to change</param>
      <param name="index">new index</param>
      <returns>previous node index</returns>
    </member>
    <member name="M:Nevron.Dom.INNodeContainer.IsChild(Nevron.Dom.INNode)">
      <summary>
            Determines whether the specified node is a child node for this container
            </summary>
      <param name="node">node to check</param>
      <returns>true if it is a child node, otherwise false</returns>
    </member>
    <member name="M:Nevron.Dom.INNodeContainer.ChildrenCount(Nevron.Filters.INFilter)">
      <summary>
            Returns the number of child nodes which satisfy the specified filter
            </summary>
      <param name="filter">filter to use, or null if no filter should be applied</param>
      <returns>children count, which satisfy the filter</returns>
    </member>
    <member name="M:Nevron.Dom.INNodeContainer.Children(Nevron.Filters.INFilter)">
      <summary>
            Obtains the child nodes of this node
            </summary>
      <param name="filter">filter to use, or null if no filter must be applied</param>
      <returns>list of child nodes, which satisfy the filter</returns>
    </member>
    <member name="M:Nevron.Dom.INNodeContainer.AccumulateChildren(Nevron.Filters.INFilter,Nevron.Dom.NNodeList)">
      <summary>
            Accumulates the children contained in this node, which satisfy the filter to the provided node list
            </summary>
      <param name="filter">filter to use, or null if no filter must be applied</param>
      <param name="list">list to which to append the child nodes, which satisfy the filter</param>
    </member>
    <member name="M:Nevron.Dom.INNodeContainer.IsDescendant(Nevron.Dom.INNode,System.Int32)">
      <summary>
            Queries whether the specified node is a descendant of this node
            </summary>
      <param name="node">node to look for</param>
      <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
      <returns>true if the node is a descendant node, otherwise false</returns>
    </member>
    <member name="M:Nevron.Dom.INNodeContainer.DescendantsCount(Nevron.Filters.INFilter,System.Int32)">
      <summary>
            Returns the number of descendant nodes, which satisfy the specified filter
            </summary>
      <param name="filter">filter to use, or null if no filter should be applied</param>
      <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
      <returns>count of descendants, which satisfy the filter</returns>
    </member>
    <member name="M:Nevron.Dom.INNodeContainer.Descendants(Nevron.Filters.INFilter,System.Int32)">
      <summary>
            Obtains the descentant nodes of this node
            </summary>
      <param name="filter">filter to use, or null if no filter must be applied</param>
      <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
      <returns>list of child nodes, which satisfy the filter</returns>
    </member>
    <member name="M:Nevron.Dom.INNodeContainer.AccumulateDescendants(Nevron.Filters.INFilter,System.Int32,Nevron.Dom.NNodeList)">
      <summary>
            Accumulates the descendants contained in this node, which satisfy the filter to the provided node list
            </summary>
      <param name="filter">filter to use, or null if no filter must be applied</param>
      <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
      <param name="list">list to which to append the descendant nodes, which satisfy the filter</param>
    </member>
    <member name="M:Nevron.Dom.INNodeContainer.GetEnumerator(Nevron.Filters.INFilter)">
      <summary>
            Obtains a child node enumerator 
            </summary>
      <param name="filter">filter to use, or null if no filter must be applied</param>
      <returns>node enumerator</returns>
    </member>
    <member name="M:Nevron.Dom.INNodeContainer.GetEnumerator">
      <summary>
            Obtains a child node enumerator 
            </summary>
      <returns>node enumerator</returns>
    </member>
    <member name="M:Nevron.Dom.INElementContainer.GetChildFromId(System.Int32)">
      <summary>
            Obtains a child element by its id
            </summary>
      <param name="id">id of the node</param>
      <returns>reference to the element if it was found, otherwise null</returns>
    </member>
    <member name="M:Nevron.Dom.INElementContainer.GetChildFromUniqueId(System.Guid)">
      <summary>
            Obtains a child element by its unique id
            </summary>
      <param name="uid">unique id of the element</param>
      <returns>reference to the element if it was found, otherwise null</returns>
    </member>
    <member name="M:Nevron.Dom.INElementContainer.GetDescendantFromId(System.Int32,System.Int32)">
      <summary>
            Obtains a element node by its id
            </summary>
      <param name="id">id of the element</param>
      <param name="depth">required depth, or -1 if the entire subtree must be explored</param>
      <returns>reference to the element if it was found, otherwise null</returns>
    </member>
    <member name="M:Nevron.Dom.INElementContainer.GetDescendantFromUniqueId(System.Guid,System.Int32)">
      <summary>
            Obtains a child element by its unique id
            </summary>
      <param name="uid">unique id of the node</param>
      <param name="depth">required depth, or -1 if the entire subtree must be explored</param>
      <returns>reference to the element if it was found, otherwise null</returns>
    </member>
    <member name="T:Nevron.Dom.INNodeComposite">
      <summary>
            Implemented by node containers, whose children can be freely modified
            </summary>
    </member>
    <member name="M:Nevron.Dom.INNodeComposite.AddChild(Nevron.Dom.INNode)">
      <summary>
            Adds a child node
            </summary>
      <param name="node">node to add</param>
    </member>
    <member name="M:Nevron.Dom.INNodeComposite.InsertChild(System.Int32,Nevron.Dom.INNode)">
      <summary>
            Inserts a child node at the specified index
            </summary>
      <param name="index">index at which to insert the child node</param>
      <param name="node">node to insert</param>
    </member>
    <member name="M:Nevron.Dom.INNodeComposite.CanInsertChild(System.Int32,Nevron.Dom.INNode)">
      <summary>
            Queries whether the specified node can be inserted at the specified index
            </summary>
      <param name="index">index at which the child node will be inserted</param>
      <param name="node">child node to insert</param>
      <returns>true if the node can be inserted at the specified index, otherwise false</returns>
    </member>
    <member name="M:Nevron.Dom.INNodeComposite.RemoveChild(Nevron.Dom.INNode)">
      <summary>
            Removes the specified child node from the container children
            </summary>
      <param name="node">child node to remove</param>
    </member>
    <member name="M:Nevron.Dom.INNodeComposite.RemoveChildAt(System.Int32)">
      <summary>
            Removes the child node at the specified index
            </summary>
      <param name="index">index of child node to remove</param>
    </member>
    <member name="M:Nevron.Dom.INNodeComposite.RemoveAllChildren">
      <summary>
            Removes all children
            </summary>
    </member>
    <member name="M:Nevron.Dom.INNodeComposite.CanRemoveChild(Nevron.Dom.INNode)">
      <summary>
            Queries whether the specified child node can be removed
            </summary>
      <param name="node">child node to remove</param>
      <returns>true if the node can be removed, otherwise false</returns>
    </member>
    <member name="T:Nevron.Dom.NElementIndex">
      <summary>
            The NElementIndex class represents an implementation of the element indexing abilities exposed 
            by the INDocument interface
            </summary>
    </member>
    <member name="M:Nevron.Dom.NElementIndex.GetElementFromId(System.Int32)">
      <summary>
            Obtains a reference to an element given its id
            </summary>
      <param name="id">id</param>
      <returns>element reference</returns>
    </member>
    <member name="M:Nevron.Dom.NElementIndex.GetElementFromUniqueId(System.Guid)">
      <summary>
            Obtains a reference to an element given its unique id
            </summary>
      <param name="uid">unique id</param>
      <returns>element reference</returns>
    </member>
    <member name="M:Nevron.Dom.NElementIndex.RegisterElement(Nevron.Dom.INElement)">
      <summary>
            Registers the specified element in the index
            </summary>
      <param name="element">
      </param>
      <returns>true if unregistred, otherwise false</returns>
    </member>
    <member name="M:Nevron.Dom.NElementIndex.UnregisterElement(Nevron.Dom.INElement)">
      <summary>
            Unregisters the specified element from the registry
            </summary>
      <param name="element">element to remove</param>
      <returns>true if unregistred, otherwise false</returns>
    </member>
    <member name="M:Nevron.Dom.NElementIndex.ContainsElementWithId(System.Int32)">
      <summary>
            Determines whether the specified id exists in the index
            </summary>
      <param name="id">id to check</param>
      <returns>true if found, false otherwise</returns>
    </member>
    <member name="M:Nevron.Dom.NElementIndex.ContainsElementWithUniqueId(System.Guid)">
      <summary>
            Determines whether the specified unique id exists in the index
            </summary>
      <param name="uid">unique id</param>
      <returns>true if found, false otherwise</returns>
    </member>
    <member name="M:Nevron.Dom.NElementIndex.QueryNextAvailableId">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Dom.NElementIndex.Clear">
      <summary>
            Clears the index
            </summary>
    </member>
    <member name="M:Nevron.Dom.NElementIndex.Rebuild(Nevron.Dom.INElement)">
      <summary>
            Rebuilds the element index from the specified element and its possible descendants
            </summary>
      <remarks>
            This implementation preserves the Ids of the element and its possible descendants
            </remarks>
      <param name="element">
      </param>
    </member>
    <member name="P:Nevron.Dom.NElementIndex.IdIndex">
      <summary>
            Obtains a reference to the id index
            </summary>
    </member>
    <member name="P:Nevron.Dom.NElementIndex.UniqueIdIndex">
      <summary>
            Obtains a reference to the unique id index
            </summary>
    </member>
    <member name="T:Nevron.Dom.NReverseNodeTreeEnumerator">
      <summary>
            The NReverseNodeTreeEnumerator class represents a filtered enumerator, which can be used to 
            reversively traverse a node subtree in PreOrder, PostOrder and BreadthFirst tree traveral order.
            </summary>
    </member>
    <member name="M:Nevron.Dom.NReverseNodeTreeEnumerator.MoveNext">
      <summary>
            Advances the enumerator to the next node in the container (or its descendants)
            </summary>
      <returns>true if the enumerator was successfully advanced to the next node, false if the enumerator has passed the end of the container (or all its descendants)</returns>
    </member>
    <member name="M:Nevron.Dom.NReverseNodeTreeEnumerator.Reset">
      <summary>
            Sets the enumerator to its initial position, which is before the container node argument passed in the constructor
            </summary>
    </member>
    <member name="P:Nevron.Dom.NReverseNodeTreeEnumerator.Current">
      <summary>
            Obtains the current node 
            </summary>
      <remarks>
            This property will throw an InvalidOperationException exception if the enumerator has not been started, 
            or has ended.
            </remarks>
    </member>
    <member name="T:Nevron.Collections.NCollection">
      <summary>
            Base class for all collections, which provide reference integrity support
            </summary>
    </member>
    <member name="M:Nevron.Collections.NCollection.LastIndexOf(System.Object)">
      <summary>
            Searches for the specified Object and returns the zero-based index of the last occurrence within the entire collection.
            </summary>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Collections.NCollection.IndexOf(System.Object)">
      <summary>
            Searches for the specified Object and returns the zero-based index of the first occurrence within the entire collection.
            </summary>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Collections.NCollection.LastIndexOf(System.Object,System.Int32)">
      <summary>
            Searches for the specified Object and returns the zero-based index of the last occurrence within the section of the collection that extends from the first element to the specified index.
            </summary>
      <param name="value">
      </param>
      <param name="startIndex">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Collections.NCollection.LastIndexOf(System.Object,System.Int32,System.Int32)">
      <summary>
            Searches for the specified Object and returns the zero-based index of the last occurrence within the section of the collection that contains the specified number of elements and ends at the specified index.
            </summary>
      <param name="value">
      </param>
      <param name="startIndex">
      </param>
      <param name="count">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Collections.NCollection.CopyTo(System.Array,System.Int32)">
      <summary>
            Copies the elements of the Collection to an Array, starting at a particular Array index.
            </summary>
      <param name="array">
      </param>
      <param name="index">
      </param>
    </member>
    <member name="M:Nevron.Collections.NCollection.GetEnumerator">
      <summary>
            Returns an enumerator that can iterate through a collection.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Collections.NCollection.Clone">
      <summary>
            Creates an identical copy of this object
            </summary>
      <remarks>
            The implementation will create a new instanse of the NCollection derived class.
            For this purpose all NCollection derivates must have a defualt public constructor.
            </remarks>
      <returns>
            The cloned collection
            </returns>
    </member>
    <member name="P:Nevron.Collections.NCollection.Count">
      <summary>
            The number of elements contained in the Collection.
            </summary>
    </member>
    <member name="P:Nevron.Collections.NCollection.IsSynchronized">
      <summary>
            true if access to the ICollection is synchronized (thread-safe); otherwise, false.
            </summary>
    </member>
    <member name="P:Nevron.Collections.NCollection.SyncRoot">
      <summary>
            An object that can be used to synchronize access to the ICollection.
            </summary>
    </member>
    <member name="T:Nevron.NDateTimeRange">
      <summary>
            Represents a date / time range specified by a Begin and End date time
            </summary>
    </member>
    <member name="M:Nevron.NDateTimeRange.Combine(Nevron.NDateTimeRange)">
      <summary>
            Combines the the two ranges. 
            </summary>
      <remarks>
            Both ranges must be normalized.
            </remarks>
      <param name="range">
      </param>
    </member>
    <member name="M:Nevron.NDateTimeRange.GetLength">
      <summary>
            Returns the absolute lenght of this range.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.NDateTimeRange.Contains(System.DateTime)">
      <summary>
            Returns true if the range contains the specified value.
            </summary>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.NDateTimeRange.Normalize">
      <summary>
            Normalizes the range.
            </summary>
      <remarks>
            A normalized  range End value is bigger or equal to the Begin value.
            </remarks>
    </member>
    <member name="M:Nevron.NDateTimeRange.Invert">
      <summary>
            Changes the Begin and End values of this range.
            </summary>
    </member>
    <member name="M:Nevron.NDateTimeRange.IsInverted">
      <summary>
            Returns true if the  range is inverted.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.NDateTimeRange.Intersects(Nevron.NDateTimeRange)">
      <summary>
            Checks if the ranges intersec each other
            </summary>
      <param name="range">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.NDateTimeRange.Intersect(Nevron.NDateTimeRange,Nevron.NDateTimeRange@)">
      <summary>
            Interscects the range with another one
            </summary>
      <returns>True if intersection exists, false otherwise</returns>
      <remarks>Ranges must be normalized</remarks>
    </member>
    <member name="M:Nevron.NDateTimeRange.Equals(System.Object)">
      <summary>
            Returns true if the objects are equal.
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.NDateTimeRange.GetHashCode">
      <summary>
            Returns the hash code of this instance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="F:Nevron.NDateTimeRange.Begin">
      <summary>
            Begin value
            </summary>
    </member>
    <member name="F:Nevron.NDateTimeRange.End">
      <summary>
            End value
            </summary>
    </member>
    <member name="P:Nevron.NDateTimeRange.IsNormalized">
      <summary>
            Returns true if the range is normal.
            </summary>
    </member>
    <member name="P:Nevron.NDateTimeRange.Ticks">
      <summary>
            Gets the number of ticks in the range
            </summary>
    </member>
    <member name="P:Nevron.NDateTimeRange.Days">
      <summary>
            Gets the number of days in the range
            </summary>
    </member>
    <member name="P:Nevron.NDateTimeRange.Hours">
      <summary>
            Gets the number of hours in the range
            </summary>
    </member>
    <member name="P:Nevron.NDateTimeRange.Minutes">
      <summary>
            Gets the number of minutes in the range
            </summary>
    </member>
    <member name="P:Nevron.NDateTimeRange.Seconds">
      <summary>
            Gets the number of seconds in the range
            </summary>
    </member>
    <member name="T:Nevron.NSystemLoadAssemblyType">
      <summary>
            Used to explicitly load the Nevron.System.dll assembly.
            </summary>
    </member>
    <member name="T:Nevron.Serialization.NRuntimeTypeActivator">
      <summary>
            Summary description for NRuntimeTypeActivator.
            </summary>
    </member>
    <member name="T:Nevron.Serialization.NActivator">
      <summary>
            Summary description for NTypeActivator.
            </summary>
    </member>
    <member name="T:Nevron.Globalization.NCultureInfo">
      <summary>
            Namespace class for commonly used CultureInfo routines
            </summary>
    </member>
    <member name="F:Nevron.Globalization.NCultureInfo.EnglishUS">
      <summary>
            The English-US culture info
            </summary>
    </member>
    <member name="T:Nevron.FormulaEngine.NFunctionCollection">
      <summary>
            The NFunctionCollection class represents a collection of functions
            </summary>
    </member>
    <member name="M:Nevron.FormulaEngine.NFunctionCollection.Add(Nevron.FormulaEngine.INFunction)">
      <summary>
            Adds a function
            </summary>
      <param name="func">
      </param>
    </member>
    <member name="M:Nevron.FormulaEngine.NFunctionCollection.Remove(System.String)">
      <summary>
            Removes the function with the specified name
            </summary>
      <param name="name">
      </param>
    </member>
    <member name="M:Nevron.FormulaEngine.NFunctionCollection.Contains(System.String)">
      <summary>
            Determines whether the function with the specified name is contained in this collection
            </summary>
      <param name="name">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaEngine.NFunctionCollection.Clear">
      <summary>
            Removes all functions
            </summary>
    </member>
    <member name="M:Nevron.FormulaEngine.NFunctionCollection.InitWithPredefinedFunctions">
      <summary>
            Initializes the function collection to contain all predefined functions
            </summary>
    </member>
    <member name="M:Nevron.FormulaEngine.NFunctionCollection.UpdateFunctionsTreeView(System.Windows.Forms.TreeView)">
      <summary>
            Updates the specified tree view with the functions in this collection. The functions are grouped by category.
            </summary>
      <param name="treeView">
      </param>
    </member>
    <member name="P:Nevron.FormulaEngine.NFunctionCollection.Names">
      <summary>
            Gets a reference to the collection of names contained in this collection
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.FormulaEngine.NFunctionCollection.Functions">
      <summary>
            Gets a reference to the collection of functions contained in this collection
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.FormulaEngine.NReferenceElement">
      <summary>
            The NReferenceElement class represents a reference to an externally provided value
            </summary>
    </member>
    <member name="M:Nevron.FormulaEngine.NReferenceElement.Evaluate(Nevron.FormulaEngine.NFormulaEngine)">
      <summary>
            Evaluates the formula element. Overriden to return the reference value
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaEngine.NReferenceElement.ToTreeNode">
      <summary>
            Creates a tree node which represents this element
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.FormulaEngine.NReferenceElement.ReferenceName">
      <summary>
            Gets the name of the reference which this element represents
            </summary>
    </member>
    <member name="T:Nevron.Dom.NForwardAttributeIterator">
      <summary>
            Iterates the attributes contained in root object
            </summary>
    </member>
    <member name="M:Nevron.Dom.NForwardAttributeIterator.Reset">
      <summary>
            Resets the iterator (moves it to the first item)
            </summary>
    </member>
    <member name="M:Nevron.Dom.NForwardAttributeIterator.MoveNext">
      <summary>
            Moves the iterator to the next item, if there is no next item the method returns null
            </summary>
      <returns>next iterator object, or null if there is no such object</returns>
    </member>
    <member name="M:Nevron.Dom.NForwardAttributeIterator.PushObject(System.Object)">
      <summary>
      </summary>
      <param name="obj">
      </param>
    </member>
    <member name="M:Nevron.Dom.NForwardAttributeIterator.AddAttributes(Nevron.Dom.NAttributeList)">
      <summary>
      </summary>
      <param name="attributes">
      </param>
    </member>
    <member name="F:Nevron.Dom.NForwardAttributeIterator.m_RootObject">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Dom.NForwardAttributeIterator.m_AttributesToProcess">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.Dom.NForwardAttributeIterator.RootObject">
      <summary>
            Gets/sets the root object whose attributes are iterated
            </summary>
      <remarks>
            The set accessor will reset the iterator
            </remarks>
    </member>
    <member name="T:Nevron.Collections.NInt32Type">
      <summary>
            Summary description for NInt32Type.
            </summary>
    </member>
    <member name="T:Nevron.Collections.NReferenceHolderArrayList">
      <summary>
            Base class for all array lists, which provide reference integrity support
            </summary>
    </member>
    <member name="T:Nevron.Collections.NArrayList">
      <summary>
            Base class for strongly typed arrays 
            </summary>
    </member>
    <member name="M:Nevron.Collections.NArrayList.Clone">
      <summary>
            Creates an identical copy of this instance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Collections.NArrayList.Add(System.Object)">
      <summary>
            Adds a new object to the list.
            </summary>
      <exception cref="T:System.Exception">Thrown if value type is different from array list type</exception>
      <param name="value">object to add</param>
      <returns>index of the added object in the array list</returns>
    </member>
    <member name="M:Nevron.Collections.NArrayList.AddRange(System.Collections.ICollection)">
      <summary>
            Adds the specified collection to the array list.
            </summary>
      <param name="c">collection to add</param>
    </member>
    <member name="M:Nevron.Collections.NArrayList.SetRange(System.Int32,System.Collections.ICollection)">
      <summary>
            Sets a range of object contained in the specified collection and the specified index.
            </summary>
      <param name="index">begin index</param>
      <param name="c">source collection</param>
    </member>
    <member name="M:Nevron.Collections.NArrayList.TransposeObjects(System.Int32,System.Int32)">
      <summary>
            Transposes the objects at the specified indexes in the collection
            </summary>
      <param name="index1">index of the first object</param>
      <param name="index2">index of the second object</param>
    </member>
    <member name="M:Nevron.Collections.NArrayList.LeftShiftItems(System.Int32,System.Int32)">
      <summary>
            Shifts the objects to the left with one position.
            </summary>
      <remarks>
            Shifts the specified number of objects to the left with one position starting from the specified index. 
            </remarks>
      <param name="startIndex">start index for the operation</param>
      <param name="itemCount">number of objects to shift</param>
    </member>
    <member name="M:Nevron.Collections.NArrayList.RightShiftItems(System.Int32,System.Int32)">
      <summary>
            Shifts the objects to the right with one position.
            </summary>
      <remarks>
            Shifts the specified number of objects to the right with one position starting from the specified index. 
            </remarks>
      <param name="startIndex">start index for the operation</param>
      <param name="itemCount">number of objects to shift</param>
    </member>
    <member name="M:Nevron.Collections.NArrayList.CloneContent(Nevron.Collections.NArrayList)">
      <summary>
            Clones the content of this array and inserts it in the specified array
            </summary>
      <param name="arr">
      </param>
    </member>
    <member name="M:Nevron.Collections.NReferenceHolderArrayList.ProvideReference(System.Type)">
      <summary>
            Called to provide a reference to the object of the specified type
            </summary>
      <remarks>
            Can provide a reference to itself or whatever reference its provider can provide
            </remarks>
      <param name="referenceType">type of object for which to obtain a reference</param>
      <returns>reference to an object of the specified type, or null if such reference cannot be provided</returns>
    </member>
    <member name="M:Nevron.Collections.NReferenceHolderArrayList.UpdateReferences(Nevron.INReferenceProvider)">
      <summary>
            Called to update the references stored by the object
            </summary>
      <remarks>
            This implementation will call the UpdateReferences method of all contained objects
            </remarks>
      <param name="provider">provider from which to obtain references</param>
    </member>
    <member name="M:Nevron.Collections.NReferenceHolderArrayList.CreateNonSerializedObjects">
      <summary>
            Called to create any non serialized objects, which the holder posseses
            </summary>
      <remarks>
            This implementation will call the CreateNonSerializedObjects method of all contained objects
            </remarks>
    </member>
    <member name="M:Nevron.Collections.NReferenceHolderArrayList.GetReferenceProvider">
      <summary>
            Obtains the reference provider to which the object is currently attached
            </summary>
      <returns>reference provider</returns>
    </member>
    <member name="M:Nevron.Collections.NReferenceHolderArrayList.Clone">
      <summary>
            Creates an identical copy of this object
            </summary>
      <remarks>
            The implementation will create a new instanse of the NReferenceHolderArrayList derived class.
            For this purpose all NReferenceHolderArrayList derivates must have a defualt public constructor.
            </remarks>
      <returns>
            The cloned collection
            </returns>
    </member>
    <member name="M:Nevron.Collections.NReferenceHolderArrayList.Add(System.Object)">
      <summary>
      </summary>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Collections.NReferenceHolderArrayList.Insert(System.Int32,System.Object)">
      <summary>
      </summary>
      <param name="index">
      </param>
      <param name="value">
      </param>
    </member>
    <member name="M:Nevron.Collections.NReferenceHolderArrayList.InsertRange(System.Int32,System.Collections.ICollection)">
      <summary>
      </summary>
      <param name="index">
      </param>
      <param name="c">
      </param>
    </member>
    <member name="M:Nevron.Collections.NReferenceHolderArrayList.SetRange(System.Int32,System.Collections.ICollection)">
      <summary>
      </summary>
      <param name="index">
      </param>
      <param name="c">
      </param>
    </member>
    <member name="M:Nevron.Collections.NReferenceHolderArrayList.Clear">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.Collections.NReferenceHolderArrayList.Remove(System.Object)">
      <summary>
      </summary>
      <param name="obj">
      </param>
    </member>
    <member name="M:Nevron.Collections.NReferenceHolderArrayList.RemoveAt(System.Int32)">
      <summary>
      </summary>
      <param name="index">
      </param>
    </member>
    <member name="M:Nevron.Collections.NReferenceHolderArrayList.RemoveRange(System.Int32,System.Int32)">
      <summary>
      </summary>
      <param name="index">
      </param>
      <param name="count">
      </param>
    </member>
    <member name="M:Nevron.Collections.NReferenceHolderArrayList.DetachObject(System.Object)">
      <summary>
      </summary>
      <param name="obj">
      </param>
    </member>
    <member name="M:Nevron.Collections.NReferenceHolderArrayList.AttachObject(System.Object)">
      <summary>
      </summary>
      <param name="obj">
      </param>
    </member>
    <member name="M:Nevron.Collections.NReferenceHolderArrayList.OnChanged">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Collections.NReferenceHolderArrayList.m_Provider">
      <summary>
            The reference provider
            </summary>
    </member>
    <member name="T:Nevron.Collections.NBplusTreeEnumerator">
      <summary>
            Represents an enumerator that can iterate on a range in a B+ Tree
            </summary>
    </member>
    <member name="T:Nevron.Collections.INIndexEnumerator">
      <summary>
            Summary description for INIndexEnumerator.
            </summary>
    </member>
    <member name="P:Nevron.Collections.INIndexEnumerator.CurrentKey">
      <summary>
            Gets the current key
            </summary>
    </member>
    <member name="P:Nevron.Collections.INIndexEnumerator.Count">
      <summary>
            Gets the count of the key/value pairs
            </summary>
    </member>
    <member name="P:Nevron.Collections.INIndexEnumerator.FirstKey">
      <summary>
            Returns the first key
            </summary>
    </member>
    <member name="P:Nevron.Collections.INIndexEnumerator.LastKey">
      <summary>
            Returns the last key
            </summary>
    </member>
    <member name="M:Nevron.Collections.NBplusTreeEnumerator.MoveNext">
      <summary>
            Advances the enumerator to the next element of the collection. 
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Collections.NBplusTreeEnumerator.Reset">
      <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection. 
            </summary>
    </member>
    <member name="P:Nevron.Collections.NBplusTreeEnumerator.Current">
      <summary>
            Gets the current element in the collection. 
            </summary>
    </member>
    <member name="P:Nevron.Collections.NBplusTreeEnumerator.CurrentKey">
      <summary>
            Gets the current key
            </summary>
    </member>
    <member name="P:Nevron.Collections.NBplusTreeEnumerator.Count">
      <summary>
            Gets the count of the key/value pairs
            </summary>
    </member>
    <member name="P:Nevron.Collections.NBplusTreeEnumerator.FirstKey">
      <summary>
            Returns the first key
            </summary>
    </member>
    <member name="P:Nevron.Collections.NBplusTreeEnumerator.LastKey">
      <summary>
            Returns the last key
            </summary>
    </member>
    <member name="T:Nevron.NWeekDateTimeUnit">
      <summary>
            Represents the week date time unit.
            </summary>
    </member>
    <member name="M:Nevron.NWeekDateTimeUnit.Add(System.DateTime,System.Int64)">
      <summary>
            Add the unitCount to the dateTime.
            </summary>
      <param name="dateTime">
      </param>
      <param name="unitCount">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.NWeekDateTimeUnit.GetIsoWeekOne(System.Int32)">
      <summary>
            Returns the date time corresponding to first ISO week in the year
            </summary>
      <param name="Year">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.NWeekDateTimeUnit.GetIsoWeekNumer(System.DateTime)">
      <summary>
            Obtains the ISO week number given a DateTime
            </summary>
      <param name="dt">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.NWeekDateTimeUnit.ToTimSpan">
      <summary>
            Returns the time span equivalent of this date/time unit
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.NWeekDateTimeUnit.Ticks">
      <summary>
            Returns the number of ticks in this date time unit
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.NWeekDateTimeUnit.DateTimeUnit">
      <summary>
            The date/time unit enum value.
            </summary>
    </member>
    <member name="T:Nevron.NStatistics">
      <summary>
            Static class for commonly used statistical routines.
            </summary>
    </member>
    <member name="M:Nevron.NStatistics.Median(System.Double[])">
      <summary>
            Computes the median of a given array of numbers.
            </summary>
      <param name="data">An array of numbers</param>
      <returns>The median of the given array of numbers.</returns>
      <remarks>
            The median of a finite list of numbers can be found by arranging all the observations
            from lowest value to highest value and picking the middle one. For example, if a &lt; b &lt; c,
            then the median of the list {a, b, c} is b, and if a &lt; b &lt; c &lt; d, then the median of the
            list {a, b, c, d} is the mean of b and c, i.e. it is (b + c) / 2.
            </remarks>
    </member>
    <member name="M:Nevron.NStatistics.Median(System.Double[],System.Int32,System.Int32)">
      <summary>
            Computes the median of a given array of numbers.
            </summary>
      <param name="data">An array of numbers</param>
      <param name="startIndex">The including start index.</param>
      <param name="count">The number of elements to operate with.</param>
      <returns>The median of the given array of numbers.</returns>
      <remarks>
            The median of a finite list of numbers can be found by arranging all the observations
            from lowest value to highest value and picking the middle one. For example, if a &lt; b &lt; c,
            then the median of the list {a, b, c} is b, and if a &lt; b &lt; c &lt; d, then the median of the
            list {a, b, c, d} is the mean of b and c, i.e. it is (b + c) / 2.
            </remarks>
    </member>
    <member name="M:Nevron.NStatistics.MedianDeviations(System.Double[])">
      <summary>
            Computes the deviation of the given array of numbers from its median value.
            </summary>
      <param name="data">An array of numbers.</param>
      <returns>An array with the deviation of each number from the median.</returns>
    </member>
    <member name="M:Nevron.NStatistics.MedianDeviations(System.Double[],System.Int32,System.Int32)">
      <summary>
            Computes the deviation of the given array of numbers from its median value.
            </summary>
      <param name="data">An array of numbers.</param>
      <param name="startIndex">The including start index.</param>
      <param name="count">The number of elements to operate with.</param>
      <returns>An array with the deviation of each number from the median.</returns>
    </member>
    <member name="T:Nevron.Serialization.NCloneTypeActivator">
      <summary>
            Creates a new instance of the object by cloning a previous instance
            </summary>
    </member>
    <member name="T:Nevron.Serialization.NSerializationFilter">
      <summary>
            Generic serialization filter based on regular expressions
            </summary>
    </member>
    <member name="M:Nevron.Serialization.NSerializationFilter.SetSerializedTypes(System.Collections.ArrayList)">
      <summary>
            Sets the serailized types.
            </summary>
      <param name="serializedTypes">
      </param>
    </member>
    <member name="M:Nevron.Serialization.NSerializationFilter.SetNonSerializedTypes(System.Collections.ArrayList)">
      <summary>
            Sets the non serialized types.
            </summary>
      <param name="nonSerializedTypes">
      </param>
    </member>
    <member name="M:Nevron.Serialization.NSerializationFilter.SetSerializedMembers(System.Collections.ArrayList)">
      <summary>
            Sets the serialized members.
            </summary>
      <param name="serializedMembers">
      </param>
    </member>
    <member name="M:Nevron.Serialization.NSerializationFilter.SetNonSerializedMembers(System.Collections.ArrayList)">
      <summary>
            Sets the non serialized members.
            </summary>
      <param name="nonSerializedMembers">
      </param>
    </member>
    <member name="M:Nevron.Serialization.NSerializationFilter.FilterMemberInfo(System.Reflection.MemberInfo)">
      <summary>
            Returns true if the field should be filtered.
            </summary>
      <param name="mi">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Serialization.NSerializationFilter.Filter(System.Object)">
      <summary>
            Returns true if the object should be filtered.
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Serialization.NSerializationFilter.FilterType(System.Type)">
      <summary>
            Returns true if the type should be filtered.
            </summary>
      <param name="type">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Serialization.NSerializationFilter.InternalFilter(System.String@,System.Collections.Hashtable,System.Collections.Hashtable,System.Collections.ArrayList,System.Collections.ArrayList)">
      <summary>
      </summary>
      <param name="sType">
      </param>
      <param name="hashSerialized">
      </param>
      <param name="hashNonSerialized">
      </param>
      <param name="regexSerialized">
      </param>
      <param name="regexNonSerialized">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Serialization.NSerializationFilter.RebuildCachedTables(System.Collections.ArrayList,System.Collections.Hashtable,System.Collections.ArrayList)">
      <summary>
      </summary>
      <param name="types">
      </param>
      <param name="hashTypes">
      </param>
      <param name="regexTypes">
      </param>
    </member>
    <member name="F:Nevron.Serialization.NSerializationFilter.m_hashSerializedTypes">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Serialization.NSerializationFilter.m_regexSerializedTypes">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Serialization.NSerializationFilter.m_hashNonSerializedTypes">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Serialization.NSerializationFilter.m_regexNonSerializedTypes">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Serialization.NSerializationFilter.m_hashSerializedMembers">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Serialization.NSerializationFilter.m_regexSerializedMembers">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Serialization.NSerializationFilter.m_hashNonSerializedMembers">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Serialization.NSerializationFilter.m_regexNonSerializedMembers">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.Interop.Win32.NWMConstants">
      <summary>
            Summary description for NWMConstants.
            </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_NULL">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_CREATE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_DESTROY">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_MOVE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_SIZE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_ACTIVATE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_SETFOCUS">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_KILLFOCUS">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_ENABLE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_SETREDRAW">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_SETTEXT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_GETTEXT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_GETTEXTLENGTH">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_PAINT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_CLOSE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_QUERYENDSESSION">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_QUIT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_QUERYOPEN">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_ERASEBKGND">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_SYSCOLORCHANGE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_ENDSESSION">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_SHOWWINDOW">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_CTLCOLOR">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_WININICHANGE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_SETTINGCHANGE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_DEVMODECHANGE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_ACTIVATEAPP">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_FONTCHANGE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_TIMECHANGE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_CANCELMODE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_SETCURSOR">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_MOUSEACTIVATE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_CHILDACTIVATE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_QUEUESYNC">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_GETMINMAXINFO">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_PAINTICON">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_ICONERASEBKGND">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_NEXTDLGCTL">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_SPOOLERSTATUS">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_DRAWITEM">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_MEASUREITEM">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_DELETEITEM">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_VKEYTOITEM">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_CHARTOITEM">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_SETFONT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_GETFONT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_SETHOTKEY">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_GETHOTKEY">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_QUERYDRAGICON">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_COMPAREITEM">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_GETOBJECT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_COMPACTING">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_COMMNOTIFY">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_WINDOWPOSCHANGING">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_WINDOWPOSCHANGED">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_POWER">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_COPYDATA">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_CANCELJOURNAL">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_NOTIFY">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_INPUTLANGCHANGEREQUEST">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_INPUTLANGCHANGE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_TCARD">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_HELP">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_USERCHANGED">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_NOTIFYFORMAT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_CONTEXTMENU">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_STYLECHANGING">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_STYLECHANGED">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_DISPLAYCHANGE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_GETICON">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_SETICON">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_NCCREATE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_NCDESTROY">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_NCCALCSIZE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_NCHITTEST">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_NCPAINT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_NCACTIVATE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_GETDLGCODE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_SYNCPAINT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_NCMOUSEMOVE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_NCLBUTTONDOWN">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_NCLBUTTONUP">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_NCLBUTTONDBLCLK">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_NCRBUTTONDOWN">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_NCRBUTTONUP">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_NCRBUTTONDBLCLK">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_NCMBUTTONDOWN">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_NCMBUTTONUP">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_NCMBUTTONDBLCLK">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_KEYDOWN">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_KEYUP">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_CHAR">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_DEADCHAR">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_SYSKEYDOWN">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_SYSKEYUP">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_SYSCHAR">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_SYSDEADCHAR">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_KEYLAST">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_IME_STARTCOMPOSITION">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_IME_ENDCOMPOSITION">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_IME_COMPOSITION">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_IME_KEYLAST">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_INITDIALOG">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_COMMAND">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_SYSCOMMAND">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_TIMER">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_HSCROLL">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_VSCROLL">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_INITMENU">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_INITMENUPOPUP">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_MENUSELECT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_MENUCHAR">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_ENTERIDLE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_MENURBUTTONUP">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_MENUDRAG">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_MENUGETOBJECT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_UNINITMENUPOPUP">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_MENUCOMMAND">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_CTLCOLORMSGBOX">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_CTLCOLOREDIT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_CTLCOLORLISTBOX">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_CTLCOLORBTN">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_CTLCOLORDLG">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_CTLCOLORSCROLLBAR">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_CTLCOLORSTATIC">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_MOUSEMOVE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_LBUTTONDOWN">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_LBUTTONUP">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_LBUTTONDBLCLK">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_RBUTTONDOWN">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_RBUTTONUP">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_RBUTTONDBLCLK">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_MBUTTONDOWN">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_MBUTTONUP">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_MBUTTONDBLCLK">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_MOUSEWHEEL">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_PARENTNOTIFY">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_ENTERMENULOOP">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_EXITMENULOOP">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_NEXTMENU">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_SIZING">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_CAPTURECHANGED">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_MOVING">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_DEVICECHANGE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_MDICREATE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_MDIDESTROY">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_MDIACTIVATE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_MDIRESTORE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_MDINEXT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_MDIMAXIMIZE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_MDITILE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_MDICASCADE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_MDIICONARRANGE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_MDIGETACTIVE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_MDISETMENU">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_ENTERSIZEMOVE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_EXITSIZEMOVE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_DROPFILES">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_MDIREFRESHMENU">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_IME_SETCONTEXT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_IME_NOTIFY">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_IME_CONTROL">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_IME_COMPOSITIONFULL">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_IME_SELECT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_IME_CHAR">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_IME_REQUEST">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_IME_KEYDOWN">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_IME_KEYUP">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_NCMOUSEHOVER">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_MOUSEHOVER">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_NCMOUSELEAVE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_MOUSELEAVE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_CUT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_COPY">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_PASTE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_CLEAR">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_UNDO">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_RENDERFORMAT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_RENDERALLFORMATS">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_DESTROYCLIPBOARD">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_DRAWCLIPBOARD">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_PAINTCLIPBOARD">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_VSCROLLCLIPBOARD">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_SIZECLIPBOARD">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_ASKCBFORMATNAME">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_CHANGECBCHAIN">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_HSCROLLCLIPBOARD">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_QUERYNEWPALETTE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_PALETTEISCHANGING">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_PALETTECHANGED">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_HOTKEY">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_THEMECHANGED">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_PRINT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_PRINTCLIENT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_HANDHELDFIRST">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_HANDHELDLAST">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_AFXFIRST">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_AFXLAST">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_PENWINFIRST">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_PENWINLAST">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_APP">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_USER">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.WM_REFLECT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.OCM__BASE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.OCM_COMMAND">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.OCM_CTLCOLORBTN">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.OCM_CTLCOLOREDIT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.OCM_CTLCOLORDLG">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.OCM_CTLCOLORLISTBOX">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.OCM_CTLCOLORMSGBOX">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.OCM_CTLCOLORSCROLLBAR">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.OCM_CTLCOLORSTATIC">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.OCM_CTLCOLOR">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.OCM_DRAWITEM">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.OCM_MEASUREITEM">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.OCM_DELETEITEM">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.OCM_VKEYTOITEM">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.OCM_CHARTOITEM">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.OCM_COMPAREITEM">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.OCM_HSCROLL">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.OCM_VSCROLL">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.OCM_PARENTNOTIFY">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWMConstants.OCM_NOTIFY">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.Dom.NSetElementIndexOperation">
      <summary>
            Represents an operation, which is recorded when the index of an element inside its composite is about to be changed
            </summary>
    </member>
    <member name="M:Nevron.Dom.NSetElementIndexOperation.Undo(Nevron.Dom.NElementHistoryService)">
      <summary>
            Overriden to restore the old object index inside the collection
            </summary>
      <param name="service">reference to the history service</param>
    </member>
    <member name="M:Nevron.Dom.NSetElementIndexOperation.Redo(Nevron.Dom.NElementHistoryService)">
      <summary>
            Overriden to restore the new object index inside the collection
            </summary>
      <param name="service">reference to the history service</param>
    </member>
    <member name="P:Nevron.Dom.NSetElementIndexOperation.ContainerUniqueId">
      <summary>
            Gets the unique id of the container element in which the element resides
            </summary>
    </member>
    <member name="P:Nevron.Dom.NSetElementIndexOperation.ElementUniqueId">
      <summary>
            Gets the unique id of the element
            </summary>
    </member>
    <member name="P:Nevron.Dom.NSetElementIndexOperation.CurElementIndex">
      <summary>
            Gets the current element index
            </summary>
    </member>
    <member name="P:Nevron.Dom.NSetElementIndexOperation.NewElementIndex">
      <summary>
            Gets the new element index 
            </summary>
    </member>
    <member name="T:Nevron.Dom.NElementActionOperation">
      <summary>
            Represents an operation, which is recorded when the element needs to perform a non history action from history
            </summary>
    </member>
    <member name="M:Nevron.Dom.NElementActionOperation.Execute(Nevron.Dom.NElementHistoryService)">
      <summary>
            Overriden to call the element OnHistoryAction method with the specified description string
            </summary>
      <param name="service">reference to the history service</param>
    </member>
    <member name="P:Nevron.Dom.NElementActionOperation.ElementUniqueId">
      <summary>
            Unique id used to resolve the element
            </summary>
    </member>
    <member name="T:Nevron.Dom.NElementIdentifier">
      <summary>
            Identifies an element
            </summary>
    </member>
    <member name="T:Nevron.Dom.NIdentifier">
      <summary>
            Base for all identifiers
            </summary>
    </member>
    <member name="M:Nevron.Dom.NIdentifier.FromString(System.String)">
      <summary>
            Creates an identifier from its string representation.
            </summary>
      <param name="s">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Dom.NIdentifier.FindInDocument(Nevron.Dom.INDocument)">
      <summary>
            Returns the object represented by this identifier or null if not 
            present in the specified document.
            </summary>
      <param name="document">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Dom.NIdentifier.ToString(System.Globalization.CultureInfo)">
      <summary>
            Converts this identifier to its string representation
            </summary>
      <param name="cultureInfo">
      </param>
      <returns>
      </returns>
    </member>
    <member name="F:Nevron.Dom.NIdentifier.Delimiter">
      <summary>
            Delimiter
            </summary>
    </member>
    <member name="P:Nevron.Dom.NIdentifier.Type">
      <summary>
            Gets the identifier type
            </summary>
    </member>
    <member name="M:Nevron.Dom.NElementIdentifier.ToString">
      <summary>
            Returns the string representation of this identifier
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Dom.NElementIdentifier.FindInDocument(Nevron.Dom.INDocument)">
      <summary>
            Returns the object represented by this identifier or null if not 
            present in the specified document.
            </summary>
      <param name="document">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Dom.NElementIdentifier.ToString(System.Globalization.CultureInfo)">
      <summary>
            Converts this identifier to its string representation
            </summary>
      <param name="cultureInfo">
      </param>
      <returns>
      </returns>
    </member>
    <member name="F:Nevron.Dom.NElementIdentifier.m_ElementId">
      <summary>
            Element id
            </summary>
    </member>
    <member name="P:Nevron.Dom.NElementIdentifier.Type">
      <summary>
            Gets the identifier type
            </summary>
    </member>
    <member name="T:Nevron.Dom.NOperationStack">
      <summary>
            Represents a stack containing history operations
            </summary>
    </member>
    <member name="T:Nevron.Dom.NOperationList">
      <summary>
            The NOperationList class represents a typed list of NOperation instances
            </summary>
    </member>
    <member name="M:Nevron.Dom.NOperationList.Add(Nevron.Dom.NOperation)">
      <summary>
            Adds the operation to the end of the collection
            </summary>
      <param name="value">operation to add</param>
      <returns>The zero-based index at which the new operation is inserted</returns>
    </member>
    <member name="M:Nevron.Dom.NOperationList.AddRange(Nevron.Dom.NOperation[])">
      <summary>
            Copies the elements of a operation array to the end of the collection.
            </summary>
      <param name="value">operation array</param>
    </member>
    <member name="M:Nevron.Dom.NOperationList.AddRange(Nevron.Dom.NOperationList)">
      <summary>
            Copies the elements of a operation list to the end of the collection.
            </summary>
      <param name="value">operation list</param>
    </member>
    <member name="M:Nevron.Dom.NOperationList.AddRange(System.Collections.ICollection)">
      <summary>
            Copies the elements of the specified collection to the end of this collection.
            </summary>
      <param name="value">operation list</param>
    </member>
    <member name="M:Nevron.Dom.NOperationList.Contains(Nevron.Dom.NOperation)">
      <summary>
            Determines whether the specified operation is in the collection
            </summary>
      <param name="value">operation</param>
      <returns>true if operation is found in the collection, otherwise false</returns>
    </member>
    <member name="M:Nevron.Dom.NOperationList.CopyTo(Nevron.Dom.NOperation[],System.Int32)">
      <summary>
            Copies the entire collection values to a one-dimensional array of operations, starting at the specified index of the target array.
            </summary>
      <param name="array">The one-dimensional array of operations that is the destination of the elements copied from collection. The Array must have zero-based indexing</param>
      <param name="index">The zero-based index in array at which copying begins.</param>
    </member>
    <member name="M:Nevron.Dom.NOperationList.IndexOf(Nevron.Dom.NOperation)">
      <summary>
            Searches for the specified operation and returns the zero-based index of the first occurrence within the collection
            </summary>
      <param name="value">the operation to locate</param>
      <returns>index of the operation</returns>
    </member>
    <member name="M:Nevron.Dom.NOperationList.Insert(System.Int32,Nevron.Dom.NOperation)">
      <summary>
            Inserts the operation at the specified index
            </summary>
      <param name="index">index at which the operation is inserted</param>
      <param name="value">the operation to insert</param>
    </member>
    <member name="M:Nevron.Dom.NOperationList.Remove(Nevron.Dom.NOperation)">
      <summary>
            Removes the first occurrence of a specific operation from the collection
            </summary>
      <param name="value">operation to remove</param>
    </member>
    <member name="M:Nevron.Dom.NOperationList.Clone">
      <summary>
            Creates an exact replica of this object.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Dom.NOperationStack.EnforceDepth(System.Int32)">
      <summary>
            Enforces the depth of the stack
            </summary>
      <param name="depth">desired stack depth</param>
    </member>
    <member name="M:Nevron.Dom.NOperationStack.Push(Nevron.Dom.NOperation)">
      <summary>
            Pushes an operation in the stack
            </summary>
      <param name="operation">operation to push</param>
    </member>
    <member name="M:Nevron.Dom.NOperationStack.Pop">
      <summary>
            Pop an operation from the stack
            </summary>
      <returns>poped operation, or null if the stack is empty</returns>
    </member>
    <member name="M:Nevron.Dom.NOperationStack.Peek">
      <summary>
            Gets the operation at the stack peek
            </summary>
      <returns>current stack peek operation, or null if the stack is emtpy</returns>
    </member>
    <member name="T:Nevron.Collections.NStringList">
      <summary>
            Represents a list of string objects
            </summary>
    </member>
    <member name="M:Nevron.Collections.NStringList.Add(System.String)">
      <summary>
            Adds a string to the end of the collection.
            </summary>
      <param name="value">
      </param>
      <returns>The zero-based index at which the new element is inserted</returns>
    </member>
    <member name="M:Nevron.Collections.NStringList.AddRange(System.String[])">
      <summary>
            Copies the elements of a string array to the end of the collection.
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:Nevron.Collections.NStringList.AddRange(Nevron.Collections.NStringList)">
      <summary>
            Copies the elements of a string list to the end of the collection.
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:Nevron.Collections.NStringList.Contains(System.String)">
      <summary>
            Determines whether the specified string is in the collection
            </summary>
      <param name="value">
      </param>
      <returns>if value is found in the collection otherwise, false</returns>
    </member>
    <member name="M:Nevron.Collections.NStringList.CopyTo(System.String[],System.Int32)">
      <summary>
            Copies the entire collection values to a one-dimensional array of strings, starting at the specified index of the target array.
            </summary>
      <param name="array">The one-dimensional array of strings that is the destination of the elements copied from collection. The Array must have zero-based indexing.</param>
      <param name="index">The zero-based index in array at which copying begins.</param>
    </member>
    <member name="M:Nevron.Collections.NStringList.IndexOf(System.String)">
      <summary>
            Searches for the specified string and returns the zero-based index of the first occurrence within the collection.
            </summary>
      <param name="value">the string to locate</param>
      <returns>index of the string</returns>
    </member>
    <member name="M:Nevron.Collections.NStringList.Insert(System.Int32,System.String)">
      <summary>
            Inserts a string at the specified index.
            </summary>
      <param name="index">Index at which the string is inserted.</param>
      <param name="value">The string to insert.</param>
    </member>
    <member name="M:Nevron.Collections.NStringList.Remove(System.String)">
      <summary>
            Removes the first occurrence of a specific string from the collection.
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:Nevron.Collections.NStringList.RemoveRange(System.Int32,System.Int32)">
      <summary>
            Removes a range of elements from the string list.
            </summary>
      <param name="index">The zero-based starting index of the range of elements to remove.</param>
      <param name="count">The number of elements to remove.</param>
    </member>
    <member name="M:Nevron.Collections.NStringList.ToArray">
      <summary>
            Converts the string list to a system array.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Collections.NStringList.Clone">
      <summary>
            Creates an exact replica of this object.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.Collections.NDLListNode">
      <summary>
            Represents a doubly linked list node
            </summary>
    </member>
    <member name="F:Nevron.Collections.NDLListNode.Data">
      <summary>
            The data contained in the node
            </summary>
    </member>
    <member name="F:Nevron.Collections.NDLListNode.Prev">
      <summary>
            A reference to the previous list node
            </summary>
    </member>
    <member name="F:Nevron.Collections.NDLListNode.Next">
      <summary>
            A reference to the next list node
            </summary>
    </member>
    <member name="T:Nevron.Collections.NBPlusTreePointer">
      <summary>
            Summary description for NBPlusTreePointer.
            </summary>
    </member>
    <member name="T:Nevron.Threading.NParallel">
      <summary>
             The class provides support for parallel computations, paralleling loop's iterations.
             </summary>
      <remarks>
        <para>The class allows to parallel loop's iteration computing them in separate threads,
             what allows their simultaneous execution on multiple CPUs/cores.
             </para>
      </remarks>
    </member>
    <member name="P:Nevron.Threading.NParallel.ThreadsCount">
      <summary>
            Number of threads used for parallel computations.
            </summary>
      <remarks>
        <para>
            The property sets how many worker threads are created for paralleling loops' computations.
            </para>
        <para>
            By default the property is set to number of CPU's in the system
            (see <see cref="P:System.Environment.ProcessorCount" />).
            </para>
      </remarks>
    </member>
    <member name="T:Nevron.Threading.NParallel.ForLoopBody">
      <summary>
            Delegate defining for-loop's body.
            </summary>
      <param name="index">Loop's index.</param>
    </member>
    <member name="T:Nevron.DateTimeUnit">
      <summary>
            Enumerates the supported date/time units
            </summary>
    </member>
    <member name="F:Nevron.DateTimeUnit.Century">
      <summary>
            The century unit.  
            </summary>
    </member>
    <member name="F:Nevron.DateTimeUnit.Decade">
      <summary>
            The decade unit.  
            </summary>
    </member>
    <member name="F:Nevron.DateTimeUnit.Year">
      <summary>
            The year unit.  
            </summary>
    </member>
    <member name="F:Nevron.DateTimeUnit.HalfYear">
      <summary>
            Half year unit. 
            </summary>
    </member>
    <member name="F:Nevron.DateTimeUnit.Quarter">
      <summary>
            The quarter of a year.  
            </summary>
    </member>
    <member name="F:Nevron.DateTimeUnit.Month">
      <summary>
            A month.
            </summary>
    </member>
    <member name="F:Nevron.DateTimeUnit.Week">
      <summary>
            A week.  
            </summary>
    </member>
    <member name="F:Nevron.DateTimeUnit.Day">
      <summary>
            A day.  
            </summary>
    </member>
    <member name="F:Nevron.DateTimeUnit.HalfDay">
      <summary>
            Half of a day.  
            </summary>
    </member>
    <member name="F:Nevron.DateTimeUnit.Hour">
      <summary>
            An hour
            </summary>
    </member>
    <member name="F:Nevron.DateTimeUnit.Minute">
      <summary>
            A minute.  
            </summary>
    </member>
    <member name="F:Nevron.DateTimeUnit.Second">
      <summary>
            A second
            </summary>
    </member>
    <member name="F:Nevron.DateTimeUnit.Millisecond">
      <summary>
             A millisecond. 
            </summary>
    </member>
    <member name="F:Nevron.DateTimeUnit.Tick">
      <summary>
            Tick
            </summary>
    </member>
    <member name="T:Nevron.ScopeType">
      <summary>
            Enumerates the product types
            </summary>
    </member>
    <member name="F:Nevron.ScopeType.DotNetChart">
      <summary>
            Nevron Chart for .NET
            </summary>
    </member>
    <member name="F:Nevron.ScopeType.DotNetDiagram">
      <summary>
            Nevron Diagram for .NET
            </summary>
    </member>
    <member name="F:Nevron.ScopeType.DotNetUserInterface">
      <summary>
            Nevron User Interface for .NET
            </summary>
    </member>
    <member name="F:Nevron.ScopeType.RSChart">
      <summary>
            Nevron Chart for Reporting Services
            </summary>
    </member>
    <member name="F:Nevron.ScopeType.RSGauge">
      <summary>
            Nevron Gauge for Reporting Services
            </summary>
    </member>
    <member name="F:Nevron.ScopeType.SHChart">
      <summary>
            Nevron Chart for SharePoint
            </summary>
    </member>
    <member name="F:Nevron.ScopeType.SHGauge">
      <summary>
            Nevron Gauge for SharePoint
            </summary>
    </member>
    <member name="F:Nevron.ScopeType.DotNetVision">
      <summary>
            Dot Net Vision
            </summary>
    </member>
    <member name="T:Nevron.PlatformType">
      <summary>
            Enumerates the platform types.
            </summary>
    </member>
    <member name="F:Nevron.PlatformType.Generic">
      <summary>
            Generic platform
            </summary>
    </member>
    <member name="F:Nevron.PlatformType.WebForms">
      <summary>
            Web Forms
            </summary>
    </member>
    <member name="F:Nevron.PlatformType.WinForm">
      <summary>
            Win Forms
            </summary>
    </member>
    <member name="F:Nevron.PlatformType.ReportingServices">
      <summary>
            RS
            </summary>
    </member>
    <member name="F:Nevron.PlatformType.Invalid">
      <summary>
            Invalid platform
            </summary>
    </member>
    <member name="T:Nevron.HorzAlign">
      <summary>
            Specifies the horizonal alignment of objects within a container.
            </summary>
    </member>
    <member name="F:Nevron.HorzAlign.Center">
      <summary>
            The object is horizontally centered relative to the origin point.
            </summary>
    </member>
    <member name="F:Nevron.HorzAlign.Left">
      <summary>
            The object's left side is aligned with the origin point.
            </summary>
    </member>
    <member name="F:Nevron.HorzAlign.Right">
      <summary>
            The object's right side is aligned with the origin point.
            </summary>
    </member>
    <member name="T:Nevron.VertAlign">
      <summary>
            Specifies the vertical alignment of objects within a container
            </summary>
    </member>
    <member name="F:Nevron.VertAlign.Center">
      <summary>
            The object is vertically centered relative to the origin point.
            </summary>
    </member>
    <member name="F:Nevron.VertAlign.Top">
      <summary>
            The object is below the origin point.
            </summary>
    </member>
    <member name="F:Nevron.VertAlign.Bottom">
      <summary>
            The object is above the origin point.
            </summary>
    </member>
    <member name="T:Nevron.DateTimeValueFormat">
      <summary>
            Defines different formatting modes for DateTime values.
            </summary>
    </member>
    <member name="F:Nevron.DateTimeValueFormat.Date">
      <summary>
            The value is formatted with the default locale short date format
            </summary>
    </member>
    <member name="F:Nevron.DateTimeValueFormat.DateHour">
      <summary>
            The value is formatted with the default locale short date format
            </summary>
    </member>
    <member name="F:Nevron.DateTimeValueFormat.LongDate">
      <summary>
            The value is formatted with the default locale long date format
            </summary>
    </member>
    <member name="F:Nevron.DateTimeValueFormat.Time">
      <summary>
            The value is formatted with the default locale time format
            </summary>
    </member>
    <member name="F:Nevron.DateTimeValueFormat.DateTime">
      <summary>
            The value is formatted with the default locale date time format
            </summary>
    </member>
    <member name="F:Nevron.DateTimeValueFormat.WeekDayFullName">
      <summary>
            The value is formatted with the day of the week full name e.g. Monday, Tuesday etc.
            </summary>
    </member>
    <member name="F:Nevron.DateTimeValueFormat.WeekDayShortName">
      <summary>
            The value is formatted with the day of the week short name e.g. Mon, Tue etc.
            </summary>
    </member>
    <member name="F:Nevron.DateTimeValueFormat.LongDateLongTime24Hour">
      <summary>
            The value is formatted with long date and long time in 24 hour format
            </summary>
    </member>
    <member name="F:Nevron.DateTimeValueFormat.LongDateLongTimeAMPM">
      <summary>
            The value is formatted with long date and time in AM/PM format
            </summary>
    </member>
    <member name="F:Nevron.DateTimeValueFormat.LongDateShortTime24Hour">
      <summary>
            The value if formatted with long date and short time (HH:mm)
            </summary>
    </member>
    <member name="F:Nevron.DateTimeValueFormat.LongDateShortTimeAMPM">
      <summary>
            The value if formatted with long date and short time in AM/PN format
            </summary>
    </member>
    <member name="F:Nevron.DateTimeValueFormat.LongTime24Hour">
      <summary>
            Long time 24 hour format
            </summary>
    </member>
    <member name="F:Nevron.DateTimeValueFormat.MonthFullName">
      <summary>
            The value is formatted by its month full name e.g. January, February etc.
            </summary>
    </member>
    <member name="F:Nevron.DateTimeValueFormat.MonthNameAndDay">
      <summary>
            The value is formatted by its month full name and day 
            </summary>
    </member>
    <member name="F:Nevron.DateTimeValueFormat.MonthNameYear2Digit">
      <summary>
            The value is formatted by its month full name and year with 2 digits
            </summary>
    </member>
    <member name="F:Nevron.DateTimeValueFormat.MonthShortName">
      <summary>
            The value is formatted by its month short name and day e.g Jan 15.
            </summary>
    </member>
    <member name="F:Nevron.DateTimeValueFormat.ShortDateLongTime24Hour">
      <summary>
            The value is formatted by its short date and long time in 24 hour format
            </summary>
    </member>
    <member name="F:Nevron.DateTimeValueFormat.ShortDateLongTimeAMPM">
      <summary>
            The value is formatted by its short date and long time in AM/PM hour format
            </summary>
    </member>
    <member name="F:Nevron.DateTimeValueFormat.ShortDateShortTime24Hour">
      <summary>
            The value is formatted by its short date and short time in 24 hour format
            </summary>
    </member>
    <member name="F:Nevron.DateTimeValueFormat.ShortDateShortTimeAMPM">
      <summary>
            The date is formatted by tis short date and short time in AM/PM hour format
            </summary>
    </member>
    <member name="F:Nevron.DateTimeValueFormat.ShortTime24Hour">
      <summary>
            The value is formatted by its short time 24 hour format.
            </summary>
    </member>
    <member name="F:Nevron.DateTimeValueFormat.ShortTimeAMPM">
      <summary>
            The value is formatted by its short time in AM/PM hour format
            </summary>
    </member>
    <member name="F:Nevron.DateTimeValueFormat.Year4Digit">
      <summary>
            The value is formatted by its year expressed in four digits
            </summary>
    </member>
    <member name="F:Nevron.DateTimeValueFormat.Year2Digit">
      <summary>
            The value is formatted by its year expressed by two digits
            </summary>
    </member>
    <member name="F:Nevron.DateTimeValueFormat.HalfYear">
      <summary>
            The value is formatted by its year half 
            </summary>
    </member>
    <member name="F:Nevron.DateTimeValueFormat.HalfYear2Digit">
      <summary>
            The value is formatted by its year half plus its year expressed by two digits
            </summary>
    </member>
    <member name="F:Nevron.DateTimeValueFormat.QuarterYear2Digit">
      <summary>
            The value is formatted by its quarter and year expressed by two digits
            </summary>
    </member>
    <member name="F:Nevron.DateTimeValueFormat.QuarterYear4Digit">
      <summary>
            The value is formatted by its quarter and year expressed by four digits
            </summary>
    </member>
    <member name="F:Nevron.DateTimeValueFormat.YearAndMonthName">
      <summary>
            The value is formatted by its year and month name
            </summary>
    </member>
    <member name="F:Nevron.DateTimeValueFormat.Week">
      <summary>
            The value is formatted by its week number in ISO 
            </summary>
    </member>
    <member name="F:Nevron.DateTimeValueFormat.WeekYear2Digit">
      <summary>
            The value is formatted by its week number in ISO and year by two digits
            </summary>
    </member>
    <member name="F:Nevron.DateTimeValueFormat.WeekYear4Digit">
      <summary>
            The value is formatted by its week number in ISO and year by four digits
            </summary>
    </member>
    <member name="F:Nevron.DateTimeValueFormat.MinuteSecond">
      <summary>
            The value is formatted by its minute and second (mm:ss)
            </summary>
    </member>
    <member name="F:Nevron.DateTimeValueFormat.SecondMillisecond">
      <summary>
            The value is formatted by its second an millisecond 
            </summary>
    </member>
    <member name="T:Nevron.NumericValueFormat">
      <summary>
            Defines different formatting modes for numeric values.
            </summary>
    </member>
    <member name="F:Nevron.NumericValueFormat.General">
      <summary>
            The value is formatted with the default locale settings
            </summary>
    </member>
    <member name="F:Nevron.NumericValueFormat.LimitedPrecision3">
      <summary>
            The value is formatted using limited precision with up to three decimal places
            </summary>
    </member>
    <member name="F:Nevron.NumericValueFormat.LimitedPrecision6">
      <summary>
            The value is formatted using limited precision with up to six decimal places
            </summary>
    </member>
    <member name="F:Nevron.NumericValueFormat.Currency">
      <summary>
            The value is formatted with the default locale currency format
            </summary>
    </member>
    <member name="F:Nevron.NumericValueFormat.Scientific">
      <summary>
            The value is formatted with the default locale scientific format
            </summary>
    </member>
    <member name="F:Nevron.NumericValueFormat.Percentage">
      <summary>
            The value is formatted as a percentage
            </summary>
    </member>
    <member name="T:Nevron.Serialization.NShellTypeActivator">
      <summary>
            Uses the shell constructor to activate an object
            </summary>
    </member>
    <member name="T:Nevron.Serialization.NConstructorActivator">
      <summary>
            Summary description for NConstructorActivator.
            </summary>
    </member>
    <member name="P:Nevron.Globalization.INLocalizable.LocalizationContextName">
      <summary>
            Gets the name of the localization context for this object.
            </summary>
    </member>
    <member name="T:Nevron.Filters.NDoubleInRangeFilter">
      <summary>
            Returns true if the value can be converted to double and is in the range [begin, end].
            </summary>
    </member>
    <member name="M:Nevron.Filters.NDoubleInRangeFilter.Filter(System.Object)">
      <summary>
            Returns true if the object is in the specified double range
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="F:Nevron.Filters.NDoubleInRangeFilter.m_Begin">
      <summary>
            The begin value
            </summary>
    </member>
    <member name="F:Nevron.Filters.NDoubleInRangeFilter.m_End">
      <summary>
            The end value
            </summary>
    </member>
    <member name="T:Nevron.Filters.NFilterValuePair">
      <summary>
            Represents a pair of a filter and associated value
            </summary>
    </member>
    <member name="F:Nevron.Filters.NFilterValuePair.Filter">
      <summary>
            The filter
            </summary>
    </member>
    <member name="F:Nevron.Filters.NFilterValuePair.Value">
      <summary>
            The value
            </summary>
    </member>
    <member name="T:Nevron.Filters.NTrueFilter">
      <summary>
            A constant TRUE filter
            </summary>
    </member>
    <member name="M:Nevron.Filters.NTrueFilter.Filter(System.Object)">
      <summary>
            Overriden to always return true
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.Dom.INAtomicElement">
      <summary>
            Implemented by elements that can contain atoms
            </summary>
    </member>
    <member name="M:Nevron.Dom.INAtomicElement.GetAtomAt(System.Int32)">
      <summary>
            Returns the atom at the specified index
            </summary>
      <param name="index">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.Dom.INAtomicElement.AtomsCount">
      <summary>
            Returns the number of atoms contained in this atomic element
            </summary>
    </member>
    <member name="T:Nevron.Dom.NNodeEventArgs">
      <summary>
            Used as argument in NodeEventHandler delegates
            </summary>
    </member>
    <member name="F:Nevron.Dom.NNodeEventArgs.Node">
      <summary>
            Node
            </summary>
    </member>
    <member name="T:Nevron.Dom.NNodeCancelEventArgs">
      <summary>
            Used as argument in NodeCancelEventHandler delegates
            </summary>
    </member>
    <member name="F:Nevron.Dom.NNodeCancelEventArgs.Node">
      <summary>
            Node
            </summary>
    </member>
    <member name="T:Nevron.Dom.NNodePropertyEventArgs">
      <summary>
            Used as argument in NodePropertyEventHandler delegates
            </summary>
    </member>
    <member name="F:Nevron.Dom.NNodePropertyEventArgs.PropertyName">
      <summary>
            Property name
            </summary>
    </member>
    <member name="T:Nevron.Dom.NNodePropertyCancelEventArgs">
      <summary>
            Used as argument in NodePropertyCancelEventHandler delegates
            </summary>
    </member>
    <member name="F:Nevron.Dom.NNodePropertyCancelEventArgs.PropertyName">
      <summary>
            Property name
            </summary>
    </member>
    <member name="F:Nevron.Dom.NNodePropertyCancelEventArgs.NewValue">
      <summary>
            New property value
            </summary>
    </member>
    <member name="T:Nevron.Dom.NChildNodeEventArgs">
      <summary>
            Used as argument in ChildNodeEventHandler delegates
            </summary>
    </member>
    <member name="F:Nevron.Dom.NChildNodeEventArgs.Child">
      <summary>
            Child node
            </summary>
    </member>
    <member name="T:Nevron.Dom.NChildNodeCancelEventArgs">
      <summary>
            Used as argument in ChildNodeCancelEventHandler delegates
            </summary>
    </member>
    <member name="F:Nevron.Dom.NChildNodeCancelEventArgs.Child">
      <summary>
            Child node
            </summary>
    </member>
    <member name="T:Nevron.Dom.NNodeAttributeEventArgs">
      <summary>
            Used as argument in NodeAttributeEventHandler delegates
            </summary>
    </member>
    <member name="F:Nevron.Dom.NNodeAttributeEventArgs.AttributeName">
      <summary>
            Attribute full name
            </summary>
    </member>
    <member name="T:Nevron.Dom.NNodeAttributeCancelEventArgs">
      <summary>
            Used as argument in NodeAttributeEventHandler delegates
            </summary>
    </member>
    <member name="F:Nevron.Dom.NNodeAttributeCancelEventArgs.AttributeName">
      <summary>
            Attribute full name
            </summary>
    </member>
    <member name="T:Nevron.Dom.NNodeAttributePropertyEventArgs">
      <summary>
            Used as argument in NodeAttributePropertyEventHandler delegates
            </summary>
    </member>
    <member name="F:Nevron.Dom.NNodeAttributePropertyEventArgs.PropertyName">
      <summary>
            Attribute property name
            </summary>
    </member>
    <member name="T:Nevron.Dom.NNodeAttributePropertyCancelEventArgs">
      <summary>
            Used as argument in NodeAttributePropertyCancelEventHandler delegates
            </summary>
    </member>
    <member name="F:Nevron.Dom.NNodeAttributePropertyCancelEventArgs.PropertyName">
      <summary>
            Attribute property name
            </summary>
    </member>
    <member name="F:Nevron.Dom.NNodeAttributePropertyCancelEventArgs.NewValue">
      <summary>
            New attribute property value
            </summary>
    </member>
    <member name="T:Nevron.Dom.NodeEventHandler">
      <summary>
            Delegate for events, which recieve information about general node actions
            </summary>
    </member>
    <member name="T:Nevron.Dom.NodeCancelEventHandler">
      <summary>
            Delegate for events, which require to have control over general node actions
            </summary>
    </member>
    <member name="T:Nevron.Dom.NodePropertyEventHandler">
      <summary>
            Delegate for events, which recieve information about node property changes
            </summary>
    </member>
    <member name="T:Nevron.Dom.NodePropertyCancelEventHandler">
      <summary>
            Delegate for events, which require to have control over node property changes
            </summary>
    </member>
    <member name="T:Nevron.Dom.ChildNodeCancelEventHandler">
      <summary>
            Delegate for events, which require to have control over child nodes
            </summary>
    </member>
    <member name="T:Nevron.Dom.ChildNodeEventHandler">
      <summary>
            Delegate for events, which require to have information about a child node
            </summary>
    </member>
    <member name="T:Nevron.Dom.NodeAttributePropertyEventHandler">
      <summary>
            Delegate for events, which recieve information about node attribute property changes
            </summary>
    </member>
    <member name="T:Nevron.Dom.NodeAttributePropertyCancelEventHandler">
      <summary>
            Delegate for events, which require to have control over node attribute property changes
            </summary>
    </member>
    <member name="T:Nevron.Dom.NodeAttributeEventHandler">
      <summary>
            Delegate for events, which recieve information about node attribute changes
            </summary>
    </member>
    <member name="T:Nevron.Collections.NSLListNode">
      <summary>
            Represents a singly linked list node
            </summary>
    </member>
    <member name="F:Nevron.Collections.NSLListNode.Data">
      <summary>
            The data contained in the node
            </summary>
    </member>
    <member name="F:Nevron.Collections.NSLListNode.Next">
      <summary>
            A reference to the next object in the list
            </summary>
    </member>
    <member name="T:Nevron.Collections.NSequentialPropertyStorage">
      <summary>
            The NSequencialPropertyContainer class represents an optimized container for property values,
            whose keys are sequential int numbers 
            </summary>
    </member>
    <member name="M:Nevron.Collections.NSequentialPropertyStorage.Clone">
      <summary>
            Overriden to create an identical copy of the storage and the objects, which each bucket may contain
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Collections.NSequentialPropertyStorage.Contains(System.Int32)">
      <summary>
            Determines whether the container contains a value for the specified key
            </summary>
      <param name="key">key</param>
      <returns>true if the container contains a value for this key, othwerwise false</returns>
    </member>
    <member name="M:Nevron.Collections.NSequentialPropertyStorage.GetValue(System.Int32)">
      <summary>
            Gets the value associated with the specified key. If the specified key is not found, it returns a null reference. 
            </summary>
      <param name="key">the key whose value to get</param>
      <returns>value if the operation succeeded, otherwise null</returns>
    </member>
    <member name="M:Nevron.Collections.NSequentialPropertyStorage.GetValue(System.Int32,System.Boolean@)">
      <summary>
            Gets the value associated with the specified key
            </summary>
      <param name="key">the key whose value to get</param>
      <param name="found">resulting parameter indicating whether the key was found</param>
      <returns>value if the operation succeeded or null if the key was not found</returns>
    </member>
    <member name="M:Nevron.Collections.NSequentialPropertyStorage.SetValue(System.Int32,System.Object)">
      <summary>
            Sets the value associated with the specified key. If the key was not found a new entry will be created.
            </summary>
      <param name="key">the key whose value to set</param>
      <param name="value">value to set</param>
    </member>
    <member name="M:Nevron.Collections.NSequentialPropertyStorage.Clear">
      <summary>
            Clears the property container
            </summary>
    </member>
    <member name="M:Nevron.Collections.NSequentialPropertyStorage.Remove(System.Int32)">
      <summary>
            Removes the value for the specified key
            </summary>
      <param name="key">the key of the value to remove</param>
    </member>
    <member name="M:Nevron.Collections.NSequentialPropertyStorage.Equals(System.Object)">
      <summary>
            Determines if the objects are equal
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Collections.NSequentialPropertyStorage.GetHashCode">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.Collections.NSequentialPropertyStorage.IsEmpty">
      <summary>
            Returns true if the storage is empty.
            </summary>
    </member>
    <member name="T:Nevron.Collections.NDelegateStorage">
      <summary>
            The NDelegateStorage class can be used to efficiently store mutlicast delegates, 
            which for speed and memory optimization are referenced by integer keys.
            </summary>
    </member>
    <member name="M:Nevron.Collections.NDelegateStorage.GetDelegate(System.Int32)">
      <summary>
            Gets the delegate for the specified key
            </summary>
      <param name="key">delegate key</param>
      <returns>delegate instance if delegate for the specified key exists, otherwise false</returns>
    </member>
    <member name="M:Nevron.Collections.NDelegateStorage.Contains(System.Int32)">
      <summary>
            Determines whether a delegate for the specified key is contained in the storage
            </summary>
      <param name="key">delegate key</param>
      <returns>true if a delegate for that key is contained, otherwise false</returns>
    </member>
    <member name="M:Nevron.Collections.NDelegateStorage.Clear">
      <summary>
            Clears the storage content
            </summary>
    </member>
    <member name="M:Nevron.Collections.NDelegateStorage.AddDelegate(System.Int32,System.Delegate)">
      <summary>
            Adds a new delegate to the delegate at the specified key
            </summary>
      <param name="key">delegate key</param>
      <param name="delegateToAdd">delegate to add</param>
    </member>
    <member name="M:Nevron.Collections.NDelegateStorage.RemoveDelegate(System.Int32,System.Delegate)">
      <summary>
            Removes a delegate from the delegate at the specified key
            </summary>
      <param name="key">delegate key</param>
      <param name="delegateToRemove">delegateToRemove</param>
    </member>
    <member name="M:Nevron.Collections.NDelegateStorage.IsEmpty">
      <summary>
            Queries whether this storage contains any delegates
            </summary>
    </member>
    <member name="T:Nevron.Collections.NDateTimeList">
      <summary>
            Represents a list of DateTime values
            </summary>
    </member>
    <member name="M:Nevron.Collections.NDateTimeList.Add(System.DateTime)">
      <summary>
            Adds the date time to the end of the collection
            </summary>
      <param name="value">
      </param>
      <returns>The zero-based index at which the new element is inserted</returns>
    </member>
    <member name="M:Nevron.Collections.NDateTimeList.AddRange(System.DateTime[])">
      <summary>
            Copies the elements of a NDateTime array to the end of the collection.
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:Nevron.Collections.NDateTimeList.AddRange(Nevron.Collections.NDateTimeList)">
      <summary>
            Copies the elements of a DateTime list to the end of the collection.
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:Nevron.Collections.NDateTimeList.Contains(System.DateTime)">
      <summary>
            Determines whether the specified DateTime is in the collection
            </summary>
      <param name="value">
      </param>
      <returns>if value is found in the collection otherwise, false</returns>
    </member>
    <member name="M:Nevron.Collections.NDateTimeList.CopyTo(System.DateTime[],System.Int32)">
      <summary>
            Copies the entire collection values to a one-dimensional array of DateTimes, starting at the specified index of the target array.
            </summary>
      <param name="array">The one-dimensional array of DateTimes that is the destination of the elements copied from collection. The Array must have zero-based indexing</param>
      <param name="index">The zero-based index in array at which copying begins.</param>
    </member>
    <member name="M:Nevron.Collections.NDateTimeList.IndexOf(System.DateTime)">
      <summary>
            Searches for the specified DateTime value and returns the zero-based index of the first occurrence within the collection
            </summary>
      <param name="value">the DateTime value to locate</param>
      <returns>index of the DateTime value</returns>
    </member>
    <member name="M:Nevron.Collections.NDateTimeList.Insert(System.Int32,System.DateTime)">
      <summary>
            Inserts the DateTime value at the specified index
            </summary>
      <param name="index">index at which value is inserted</param>
      <param name="value">DateTime value</param>
    </member>
    <member name="M:Nevron.Collections.NDateTimeList.Remove(System.DateTime)">
      <summary>
            Removes the first occurrence of a specific DateTime value from the collection
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:Nevron.Collections.NDateTimeList.Max">
      <summary>
            Gets the max double value in the list
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Collections.NDateTimeList.Min">
      <summary>
            Gets the min double value in the list
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Collections.NDateTimeList.ToArray">
      <summary>
            Converts the DateTime list to a system array
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Collections.NDateTimeList.ToDoubleArray">
      <summary>
            Converts the DateTime list to a system double array using ToOADate
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Collections.NDateTimeList.Clone">
      <summary>
            Creates an exact replica of this object.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.NConstValueProvider">
      <summary>
            Represents a value provider that always returns a constant value
            </summary>
    </member>
    <member name="M:Nevron.NConstValueProvider.ProvideValue(System.Object)">
      <summary>
            Returns the value corresponding to the specified key
            </summary>
      <param name="key">
      </param>
      <returns>
      </returns>
    </member>
    <member name="F:Nevron.NConstValueProvider.m_Value">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.Compiler.CodeLanguage">
      <summary>
            Enumerates code languages
            </summary>
    </member>
    <member name="T:Nevron.Serialization.NNameValuePair">
      <summary>
            Represents a pair of object name and its value
            </summary>
    </member>
    <member name="F:Nevron.Serialization.NNameValuePair.Name">
      <summary>
            The name
            </summary>
    </member>
    <member name="F:Nevron.Serialization.NNameValuePair.Value">
      <summary>
            The value
            </summary>
    </member>
    <member name="T:Nevron.Reflection.NReferenceFieldAttribute">
      <summary>
            Attribute applicable to fields, which must be treated as references
            </summary>
    </member>
    <member name="T:Nevron.Dom.NNameRegistry">
      <summary>
            The NNameRegistry class serves as static registry for names, which can be used as keys in hashtables. 
            </summary>
      <remarks>
            Because string hash code generation is generally slow, containers which use hashtables to store 
            their data can statically (once) obtain a hash code (key) for a specific name and then resuse it.
            </remarks>
    </member>
    <member name="M:Nevron.Dom.NNameRegistry.RegisterName(System.String)">
      <summary>
            Registers the specified name and returns an unique hashcode for this type
            </summary>
      <param name="name">property name</param>
      <returns>hash code</returns>
    </member>
    <member name="M:Nevron.Dom.NNameRegistry.GetNameKey(System.String)">
      <summary>
            Obtains the hash code of the specified name
            </summary>
      <param name="name">property name</param>
      <returns>name hash code</returns>
    </member>
    <member name="M:Nevron.Dom.NNameRegistry.ContainsName(System.String)">
      <summary>
            Queries whether the registry contains a hash code for the specified name
            </summary>
      <param name="name">name</param>
      <returns>true if the registry contains a hash code for the name, otherwise false</returns>
    </member>
    <member name="T:Nevron.Dom.NTransaction">
      <summary>
            Represents a composite operation (transaction), which needs to be processed as a single operation
            </summary>
    </member>
    <member name="M:Nevron.Dom.NTransaction.ToTreeNode(System.Windows.Forms.TreeNode)">
      <summary>
            Overriden to create a new tree node brach under the parent tree node
            </summary>
      <param name="parent">parent tree node</param>
    </member>
    <member name="M:Nevron.Dom.NTransaction.Undo(Nevron.Dom.NElementHistoryService)">
      <summary>
            Overriden to call the Undo method of all contained operations (in reverse order)
            </summary>
      <param name="service">reference to the history service</param>
    </member>
    <member name="M:Nevron.Dom.NTransaction.Redo(Nevron.Dom.NElementHistoryService)">
      <summary>
            Overriden to call the Redo method of all contained operations
            </summary>
      <param name="service">reference to the history service</param>
    </member>
    <member name="P:Nevron.Dom.NTransaction.Operations">
      <summary>
            Obtains the list of operations from which the transaction consists
            </summary>
    </member>
    <member name="T:Nevron.Dom.NRemoveElementOperation">
      <summary>
            Represents an operation, which is recorded when an element is about to be removed from an element composite
            </summary>
    </member>
    <member name="M:Nevron.Dom.NRemoveElementOperation.Undo(Nevron.Dom.NElementHistoryService)">
      <summary>
            Overriden to insert a copy of the element in the composite
            </summary>
      <param name="service">reference to the history service</param>
    </member>
    <member name="M:Nevron.Dom.NRemoveElementOperation.Redo(Nevron.Dom.NElementHistoryService)">
      <summary>
            Overriden to remove the element from the composite to which it was added
            </summary>
      <param name="service">reference to the history service</param>
    </member>
    <member name="P:Nevron.Dom.NRemoveElementOperation.CompositeUniqueId">
      <summary>
            Gets the unique id of the composite element in which the element was inserted
            </summary>
    </member>
    <member name="P:Nevron.Dom.NRemoveElementOperation.ElementIndex">
      <summary>
            Gets the index at which the element was inserted
            </summary>
    </member>
    <member name="P:Nevron.Dom.NRemoveElementOperation.ElementCopy">
      <summary>
            Internally stored copy of the removed element
            </summary>
    </member>
    <member name="T:Nevron.Dom.NNodeEnumerator">
      <summary>
            The NNodeEnumerator class represents an enumerator which can be used to 
            enumerate the chilren of a node container and supports filtering
            </summary>
    </member>
    <member name="M:Nevron.Dom.NNodeEnumerator.MoveNext">
      <summary>
            Advances the enumerator to the next node in the container, which satifies the specified filter
            </summary>
      <returns>true if advance succeeded, false if the end of the container was reached</returns>
    </member>
    <member name="M:Nevron.Dom.NNodeEnumerator.Reset">
      <summary>
            Resets the enumerator (positions it before the first node in the container)
            </summary>
    </member>
    <member name="P:Nevron.Dom.NNodeEnumerator.Current">
      <summary>
            Obtains the current node in the container or throws an exception if the enumerator was not started or has ended
            </summary>
    </member>
    <member name="T:Nevron.Dom.NAttributeContainerEnumerator">
      <summary>
            Enumerates the attributes contained in an attribute container
            </summary>
    </member>
    <member name="M:Nevron.Dom.NAttributeContainerEnumerator.Reset">
      <summary>
            Sets the enumerator to its initial position, which is before the first attribute in the container
            </summary>
    </member>
    <member name="M:Nevron.Dom.NAttributeContainerEnumerator.MoveNext">
      <summary>
            Advances the enumerator to the next attribute 
            </summary>
      <returns>true if the enumerator was successfully advanced to the next attribute, false if the enumerator has passed the end of all attributes</returns>
    </member>
    <member name="P:Nevron.Dom.NAttributeContainerEnumerator.Current">
      <summary>
            Obtains the current attribute
            </summary>
    </member>
    <member name="T:Nevron.Dom.NElementList">
      <summary>
            The NElementList class represents a typed list of INElement instances
            </summary>
    </member>
    <member name="M:Nevron.Dom.NElementList.Add(Nevron.Dom.INElement)">
      <summary>
            Adds the element to the end of the collection
            </summary>
      <param name="value">element to add</param>
      <returns>The zero-based index at which the new element is inserted</returns>
    </member>
    <member name="M:Nevron.Dom.NElementList.AddRange(Nevron.Dom.INElement[])">
      <summary>
            Copies the elements of an element array to the end of the collection.
            </summary>
      <param name="value">element array</param>
    </member>
    <member name="M:Nevron.Dom.NElementList.AddRange(Nevron.Dom.NElementList)">
      <summary>
            Copies the elements of an element list to the end of the collection.
            </summary>
      <param name="value">element list</param>
    </member>
    <member name="M:Nevron.Dom.NElementList.AddRange(System.Collections.ICollection)">
      <summary>
            Copies the elements of the specified collection to the end of this collection.
            </summary>
      <param name="value">node list</param>
    </member>
    <member name="M:Nevron.Dom.NElementList.Contains(Nevron.Dom.INElement)">
      <summary>
            Determines whether the specified element is in the collection
            </summary>
      <param name="value">element</param>
      <returns>true if element is found in the collection, otherwise false</returns>
    </member>
    <member name="M:Nevron.Dom.NElementList.CopyTo(Nevron.Dom.INElement[],System.Int32)">
      <summary>
            Copies the entire collection values to a one-dimensional array of elements, starting at the specified index of the target array.
            </summary>
      <param name="array">The one-dimensional array of elements that is the destination of the elements copied from collection. The Array must have zero-based indexing</param>
      <param name="index">The zero-based index in array at which copying begins.</param>
    </member>
    <member name="M:Nevron.Dom.NElementList.IndexOf(Nevron.Dom.INElement)">
      <summary>
            Searches for the specified element and returns the zero-based index of the first occurrence within the collection
            </summary>
      <param name="value">the element to locate</param>
      <returns>index of the element</returns>
    </member>
    <member name="M:Nevron.Dom.NElementList.Insert(System.Int32,Nevron.Dom.INElement)">
      <summary>
            Inserts the element at the specified index
            </summary>
      <param name="index">index at which element is inserted</param>
      <param name="value">element to insert</param>
    </member>
    <member name="M:Nevron.Dom.NElementList.Remove(Nevron.Dom.INElement)">
      <summary>
            Removes the first occurrence of a specific element from the collection
            </summary>
      <param name="value">element to remove</param>
    </member>
    <member name="M:Nevron.Dom.NElementList.Filter(Nevron.Filters.INFilter)">
      <summary>
            Filters the elements of this list and returns a new list in which all elements satisfy the filter criteria
            </summary>
      <param name="filter">filter to use, or null if no filter should be used</param>
      <returns>filtered list</returns>
    </member>
    <member name="M:Nevron.Dom.NElementList.FilterCount(Nevron.Filters.INFilter)">
      <summary>
            Determines the count of elements in this array, which satisfy the specified filter
            </summary>
      <param name="filter">filter to apply</param>
      <returns>count on elements which satisfy the filter</returns>
    </member>
    <member name="M:Nevron.Dom.NElementList.AddNoDuplicates(Nevron.Dom.INNode)">
      <summary>
            Adds a non duplicate node to the list
            </summary>
      <param name="value">node to add</param>
      <returns>The zero-based index at which the new node is inserted, or -1 if it already exists in the list</returns>
    </member>
    <member name="M:Nevron.Dom.NElementList.AddRangeNoDuplicates(System.Collections.ICollection)">
      <summary>
            Copies the elements of the specified collection to the end of this collection and does not add any duplicate entries
            </summary>
      <param name="value">node collection</param>
    </member>
    <member name="M:Nevron.Dom.NElementList.Sort(System.Collections.IComparer)">
      <summary>
            Sorts the element of this list with the specified comparer
            </summary>
      <param name="comparer">comparer to use</param>
    </member>
    <member name="M:Nevron.Dom.NElementList.ToArray(System.Type)">
      <summary>
            Copies the elements of this list to a new array of the specified type.
            </summary>
      <param name="type">he type of array to create and copy elements to.</param>
      <returns>an array of the specified type containing copies of the elements in this list</returns>
    </member>
    <member name="M:Nevron.Dom.NElementList.RemoveRange(System.Collections.ICollection)">
      <summary>
            Removes the specified range of elements from the collection
            </summary>
      <param name="value">node collection</param>
    </member>
    <member name="M:Nevron.Dom.NElementList.IntersectsWith(System.Collections.ICollection)">
      <summary>
            Determines whether this and the specified collection have common entries
            </summary>
      <param name="value">node collection</param>
      <returns>true if common entries have been founds, otherwise false</returns>
    </member>
    <member name="M:Nevron.Dom.NElementList.Clone">
      <summary>
            Creates an exact replica of this object.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.Compression.BZip2">
      <summary>
            Does all the compress and decompress pre-operation stuff.
            Sets up the streams and file header characters.
            Uses multiply overloaded methods to call for the compress/decompress.
            </summary>
    </member>
    <member name="M:Nevron.Compression.BZip2.Decompress(System.IO.Stream,System.IO.Stream)">
      <summary>
      </summary>
      <param name="instream">
      </param>
      <param name="outstream">
      </param>
    </member>
    <member name="M:Nevron.Compression.BZip2.Compress(System.IO.Stream,System.IO.Stream,System.Int32)">
      <summary>
      </summary>
      <param name="instream">
      </param>
      <param name="outstream">
      </param>
      <param name="blockSize">
      </param>
    </member>
    <member name="T:Nevron.Collections.NObjectType">
      <summary>
            Summary description for NObjectType.
            </summary>
    </member>
    <member name="T:Nevron.NFormattedValueProvider">
      <summary>
            Represents a formatted value provider. 
            </summary>
    </member>
    <member name="M:Nevron.NFormattedValueProvider.ProvideValue(System.Object)">
      <summary>
            Returns the value corresponding to the specified key
            </summary>
      <param name="key">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.NException">
      <summary>
            Base class for all exceptions.
            </summary>
    </member>
    <member name="M:Nevron.NException.GetHtmlFormattedMessage">
      <summary>
            Obtains the HTML formatted message of the exception
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.Serialization.NDefaultTypeActivator">
      <summary>
            Uses the default (parameterless constructor) to active an object
            </summary>
    </member>
    <member name="T:Nevron.Serialization.INShellConstructorParameter">
      <summary>
            When present in the constructor paramater list identifies the this is a shell constructor.
            </summary>
    </member>
    <member name="T:Nevron.Serialization.INControl">
      <summary>
            Implemented by controls
            </summary>
    </member>
    <member name="P:Nevron.Serialization.INControl.Serializer">
      <summary>
            Obtains the control serializer
            </summary>
    </member>
    <member name="T:Nevron.Interop.Win32.NShlwapi">
      <summary>
            Summary description for NShlwapi.
            </summary>
    </member>
    <member name="M:Nevron.Interop.Win32.NShlwapi.SHAutoComplete(System.IntPtr,System.Int32)">
      <summary>
      </summary>
      <param name="hwnd">
      </param>
      <param name="flags">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.Interop.Win32.NKernel32">
      <summary>
            Kernel binding for .NET, implementing Windows-specific kernel functionality.
            </summary>
      <remarks>
            Binds functions and definitions in kernel32.dll.
            </remarks>
    </member>
    <member name="M:Nevron.Interop.Win32.NKernel32.GetLastError">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NKernel32.SetLastError(System.Int32)">
      <summary>
      </summary>
      <param name="dwErrCode">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NKernel32.Beep(System.Int32,System.Int32)">
      <summary>
      </summary>
      <param name="frequency">
      </param>
      <param name="duration">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NKernel32.FreeLibrary(System.IntPtr)">
      <summary>
      </summary>
      <param name="moduleHandle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NKernel32.FindResource(System.IntPtr,System.String,System.String)">
      <summary>
      </summary>
      <param name="moduleHandle">
      </param>
      <param name="name">
      </param>
      <param name="type">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NKernel32.GetDllDirectory(System.Int32,System.Text.StringBuilder)">
      <summary>
      </summary>
      <param name="bufferLength">
      </param>
      <param name="buffer">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NKernel32.GetModuleFileName(System.IntPtr,System.Text.StringBuilder,System.Int32)">
      <summary>
      </summary>
      <param name="module">
      </param>
      <param name="fileName">
      </param>
      <param name="size">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NKernel32.GetModuleHandle(System.String)">
      <summary>
      </summary>
      <param name="moduleName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NKernel32.GetModuleHandle(System.IntPtr)">
      <summary>
      </summary>
      <param name="moduleName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NKernel32.GetProcAddress(System.IntPtr,System.String)">
      <summary>
      </summary>
      <param name="module">
      </param>
      <param name="processName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NKernel32.GetProcessWorkingSetSize(System.IntPtr,System.Int32@,System.Int32@)">
      <summary>
      </summary>
      <param name="process">
      </param>
      <param name="minimumWorkingSetSize">
      </param>
      <param name="maximumWorkingSetSize">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NKernel32.GetSystemDirectory(System.Text.StringBuilder,System.Int32)">
      <summary>
      </summary>
      <param name="buffer">
      </param>
      <param name="size">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NKernel32.GetSystemWindowsDirectory(System.Text.StringBuilder,System.Int32)">
      <summary>
      </summary>
      <param name="buffer">
      </param>
      <param name="size">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NKernel32.GetTickCount">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NKernel32.GetWindowsDirectory(System.Text.StringBuilder,System.Int32)">
      <summary>
      </summary>
      <param name="buffer">
      </param>
      <param name="size">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NKernel32.IsProcessorFeaturePresent(System.Int32)">
      <summary>
      </summary>
      <param name="processorFeature">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NKernel32.LoadLibrary(System.String)">
      <summary>
      </summary>
      <param name="fileName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NKernel32.QueryPerformanceCounter(System.Int64@)">
      <summary>
      </summary>
      <param name="performanceCount">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NKernel32.QueryPerformanceCounterFast(System.Int64@)">
      <summary>
      </summary>
      <param name="performanceCount">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NKernel32.QueryPerformanceFrequency(System.Int64@)">
      <summary>
      </summary>
      <param name="frequency">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NKernel32.SetDllDirectory(System.String)">
      <summary>
      </summary>
      <param name="pathName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NKernel32.SetProcessWorkingSetSize(System.IntPtr,System.Int32,System.Int32)">
      <summary>
      </summary>
      <param name="process">
      </param>
      <param name="minimumWorkingSetSize">
      </param>
      <param name="maximumWorkingSetSize">
      </param>
      <returns>
      </returns>
    </member>
    <member name="F:Nevron.Interop.Win32.NKernel32.RT_BITMAP">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NKernel32.RT_ICON">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.Interop.Win32.NKernel32.MEMORYSTATUS">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.Interop.Win32.NKernel32.SYSTEM_INFO">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.Interop.Win32.NKernel32.SYSTEM_INFO_UNION">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.Interop.Win32.NKernel32.EnumResNameProc">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.Dom.NNodeTree">
      <summary>
            Namespace class for basic node tree navigation
            </summary>
    </member>
    <member name="M:Nevron.Dom.NNodeTree.IsAncestorOfNode(Nevron.Dom.INNode,Nevron.Dom.INNode)">
      <summary>
            Determines whether the specified ancestor is ancestor of the specified node
            </summary>
      <param name="ancestor">ancestor</param>
      <param name="node">node</param>
      <returns>true if ancestor is ancestor of node, otherwise false</returns>
    </member>
    <member name="M:Nevron.Dom.NNodeTree.FirstAncestor(Nevron.Dom.INNode,Nevron.Filters.INFilter)">
      <summary>
      </summary>
      <param name="node">
      </param>
      <param name="filter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Dom.NNodeTree.DepthFromAncestor(Nevron.Dom.INNode,Nevron.Dom.INNode)">
      <summary>
            Determines the depth of the node from the specfified ancestor
            </summary>
      <param name="ancestor">ancestor</param>
      <param name="node">node</param>
      <returns>node depth from ancestor</returns>
    </member>
    <member name="M:Nevron.Dom.NNodeTree.PathFromAncestor(Nevron.Dom.INNode,Nevron.Dom.INNode)">
      <summary>
            Returns the ancsetors chain from the node to the specified ancestor
            </summary>
      <param name="ancestor">ancestor</param>
      <param name="node">node</param>
      <returns>ancestors from node to ancestor</returns>
    </member>
    <member name="M:Nevron.Dom.NNodeTree.IsBranch(Nevron.Dom.INNode)">
      <summary>
            Determines whether the specified node is a branch
            </summary>
      <param name="node">node to test</param>
      <returns>true if it is a branch, otherwise false</returns>
    </member>
    <member name="M:Nevron.Dom.NNodeTree.BranchChildrenCount(Nevron.Dom.INNode,Nevron.Filters.INFilter)">
      <summary>
            Returns the count of branch children, which satisfy the specified filter
            </summary>
      <param name="node">node</param>
      <param name="filter">children filter</param>
      <returns>count of children, which satisfy the filter, or -1 if the node is not a branch</returns>
    </member>
    <member name="M:Nevron.Dom.NNodeTree.BranchChildren(Nevron.Dom.INNode,Nevron.Filters.INFilter)">
      <summary>
            Returns the branch children, which satisfy the specified filter
            </summary>
      <param name="node">node</param>
      <param name="filter">children filter</param>
      <returns>children, which satisfy the filter and depth parameters, or null if the node is not a branch</returns>
    </member>
    <member name="M:Nevron.Dom.NNodeTree.BranchDescendants(Nevron.Dom.INNode,Nevron.Filters.INFilter,System.Int32)">
      <summary>
            Returns the branch descendants, which satisfy the specified filter
            </summary>
      <param name="node">node</param>
      <param name="filter">filter</param>
      <param name="depth">depth in which to explore the branch subtree, or -1 to explore the whole tree</param>
      <returns>descendants, which satisfy the filter and depth parameters, or null if the node is not a branch</returns>
    </member>
    <member name="M:Nevron.Dom.NNodeTree.BranchDepth(Nevron.Dom.INNode,Nevron.Filters.INFilter)">
      <summary>
            Returns the depth of the filtered branch subtree
            </summary>
      <param name="node">node</param>
      <param name="filter">branch subtree filter</param>
      <returns>depth of filtered branch subtree, or -1 if the node is not a branch</returns>
    </member>
    <member name="M:Nevron.Dom.NNodeTree.NextNode(Nevron.Dom.INNode,Nevron.Filters.INFilter)">
      <summary>
            Obtains the next node in the node tree satisfying the specified filter
            </summary>
      <param name="node">
      </param>
      <param name="filter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Dom.NNodeTree.PrevNode(Nevron.Dom.INNode,Nevron.Filters.INFilter)">
      <summary>
            Obtains the previous node in the node tree satisfying the specified filter
            </summary>
      <param name="node">
      </param>
      <param name="filter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Dom.NNodeTree.NextNode(Nevron.Dom.INNode)">
      <summary>
            Obtains the next node in the node tree.
            </summary>
      <param name="node">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Dom.NNodeTree.PrevNode(Nevron.Dom.INNode)">
      <summary>
            Obtains the previous node in the node tree
            </summary>
      <param name="node">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.Dom.NAttributeTree">
      <summary>
            Namespace class for basic attribute tree navigation
            </summary>
    </member>
    <member name="M:Nevron.Dom.NAttributeTree.RootContainer(Nevron.Dom.INAttribute)">
      <summary>
            Obtains the last ancestor attribute container in the attribute containers chain
            </summary>
      <param name="attribute">attribute for which to obtain the root container</param>
      <returns>reference to root container if attribute is contained, otherwise null</returns>
    </member>
    <member name="M:Nevron.Dom.NAttributeTree.IsDescendantAttribute(System.String)">
      <summary>
            Determines whether the attribute is a descendant of another attribute
            </summary>
      <param name="fullAttributeName">full attribute name</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Dom.NAttributeTree.AccumulateChildAttributes(Nevron.Dom.INAttributeContainer,Nevron.Filters.INFilter,Nevron.Dom.NAttributeList)">
      <summary>
            Accumulates the child attributes of the attribute container, which satisfy the provided filter
            </summary>
      <param name="container">attribute container</param>
      <param name="filter">filter to use</param>
      <param name="list">list to which to append the child attributes, which satisfy the filter</param>
    </member>
    <member name="M:Nevron.Dom.NAttributeTree.AccumulateDescendantAttributes(Nevron.Dom.INAttributeContainer,Nevron.Filters.INFilter,System.Int32,Nevron.Dom.NAttributeList)">
      <summary>
            Accumulates the descendant attributes of the attribute container, which satisfy the filter to the provided node list
            </summary>
      <param name="container">attribute container</param>
      <param name="filter">filter to use, or null if no filter must be applied</param>
      <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
      <param name="list">list to which to append the descendant attributes, which satisfy the filter</param>
    </member>
    <member name="T:Nevron.Dom.NElementPropertyChangeOperation">
      <summary>
            Represents an operation, which is recorded when a property of an element is about to be changed
            </summary>
    </member>
    <member name="M:Nevron.Dom.NElementPropertyChangeOperation.Execute(Nevron.Dom.NElementHistoryService)">
      <summary>
            Overriden to swap the value of the element property and the internally stored property value copy
            </summary>
      <param name="service">reference to the history service</param>
    </member>
    <member name="P:Nevron.Dom.NElementPropertyChangeOperation.ElementUniqueId">
      <summary>
            Unique id used to resolve the element
            </summary>
    </member>
    <member name="P:Nevron.Dom.NElementPropertyChangeOperation.PropertyName">
      <summary>
            Element property name
            </summary>
    </member>
    <member name="P:Nevron.Dom.NElementPropertyChangeOperation.PropertyValueCopy">
      <summary>
            Internally stored copy of the element property value
            </summary>
    </member>
    <member name="T:Nevron.Dom.INServiceProvider">
      <summary>
            Implemented by reference providers, which can provide references to services
            </summary>
    </member>
    <member name="M:Nevron.Dom.INServiceProvider.GetServiceOfType(System.Type)">
      <summary>
            Gets a reference to a service of the specified type
            </summary>
      <param name="serviceType">service type</param>
      <returns>service instance or null if a service of this type cannot be located</returns>
    </member>
    <member name="T:Nevron.Dom.INAtom">
      <summary>
            Implemented by atoms.
            </summary>
    </member>
    <member name="T:Nevron.Collections.NBPlusTreeRange">
      <summary>
            Summary description for NBPlusTreeRange.
            </summary>
    </member>
    <member name="T:Nevron.Collections.NBPlusTree">
      <summary>
            Summary description for NBPlusTree.
            </summary>
    </member>
    <member name="M:Nevron.Collections.NBPlusTree.IsEmpty">
      <summary>
            Returns true if the tree is empty
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Collections.NBPlusTree.Clear">
      <summary>
            Clears the tree
            </summary>
    </member>
    <member name="M:Nevron.Collections.NBPlusTree.Add(System.Object,System.Object)">
      <summary>
            Adds a new key value pair to the tree
            </summary>
      <param name="key">
      </param>
      <param name="value">
      </param>
    </member>
    <member name="M:Nevron.Collections.NBPlusTree.Contains(System.Object)">
      <summary>
            Returns true of the tree contains the specified key
            </summary>
      <param name="key">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Collections.NBPlusTree.Remove(System.Object)">
      <summary>
            Removes the key / value pair associated with the specified key
            </summary>
      <param name="key">
      </param>
    </member>
    <member name="M:Nevron.Collections.NBPlusTree.Remove(System.Object,System.Object)">
      <summary>
            Removes a key object pair
            </summary>
      <param name="key">
      </param>
      <param name="value">
      </param>
    </member>
    <member name="M:Nevron.Collections.NBPlusTree.GetKeyRange(System.Object,Nevron.Collections.BPlusRangeType,Nevron.Collections.NBPlusTreeRange@)">
      <summary>
            Obtains a pointer for the specified key
            </summary>
      <param name="key">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Collections.NBPlusTree.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection. 
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.Collections.NBPlusTree.AllowDuplicateKeys">
      <summary>
            Gets or sets whether the tree accepts duplicate key values
            </summary>
    </member>
    <member name="P:Nevron.Collections.NBPlusTree.KeyType">
      <summary>
            Gets or sets the key type
            </summary>
      <remarks>
            The tree must be empty if you want to change the key type
            </remarks>
    </member>
    <member name="P:Nevron.Collections.NBPlusTree.ObjectType">
      <summary>
            Gets or sets the object type
            </summary>
      <remarks>
            The tree must be empty if you want to change the object type
            </remarks>
    </member>
    <member name="P:Nevron.Collections.NBPlusTree.MinKey">
      <summary>
            Returns the minimum key contained in the tree
            </summary>
    </member>
    <member name="P:Nevron.Collections.NBPlusTree.MaxKey">
      <summary>
            Returns the max key contained in the tree
            </summary>
    </member>
    <member name="T:Nevron.NHalfYearDateTimeUnit">
      <summary>
            Represents the half year date time unit.
            </summary>
    </member>
    <member name="M:Nevron.NHalfYearDateTimeUnit.Add(System.DateTime,System.Int64)">
      <summary>
            Add the unitCount to the dateTime.
            </summary>
      <param name="dateTime">
      </param>
      <param name="unitCount">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.NHalfYearDateTimeUnit.Ticks">
      <summary>
            Returns the number of ticks in this date time unit
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.NHalfYearDateTimeUnit.IsRegular">
      <summary>
            Returns true if the unit is regular (e.g. always expressed with a fixed number of ticks)
            </summary>
    </member>
    <member name="P:Nevron.NHalfYearDateTimeUnit.DateTimeUnit">
      <summary>
            The date/time unit enum value.
            </summary>
    </member>
    <member name="T:Nevron.NExpectedException">
      <summary>
            Represents an expected exception
            </summary>
    </member>
    <member name="M:Nevron.NExpectedException.GetHtmlFormattedMessage">
      <summary>
            Obtains the HTML formatted message of the exception
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.NExpectedException.GetHtmlFormattedMessage(System.String,System.String,System.String)">
      <summary>
      </summary>
      <param name="exception">
      </param>
      <param name="cause">
      </param>
      <param name="resolution">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.Globalization.NLocalizationManager">
      <summary>
            A singleton class that manages the localization of all Nevron assemblies.
            </summary>
    </member>
    <member name="M:Nevron.Globalization.NLocalizationManager.AddDictionary(Nevron.Globalization.NDictionary)">
      <summary>
            Adds a new dictionary to the localization manager.
            </summary>
      <param name="dictionary">
      </param>
    </member>
    <member name="M:Nevron.Globalization.NLocalizationManager.RemoveDictionary(System.String)">
      <summary>
            Removes the dictionary with the specified name.
            </summary>
      <param name="name">
      </param>
    </member>
    <member name="M:Nevron.Globalization.NLocalizationManager.SyncDictionary(Nevron.Globalization.NDictionary)">
      <summary>
            Synchronizes a dictionary that has the same name of the given one with it. If there's
            no such dictionary, then it is added to the license manager.
            </summary>
      <param name="dictionary">
      </param>
    </member>
    <member name="M:Nevron.Globalization.NLocalizationManager.Clear">
      <summary>
            Clears all dictionaries from the localizer and empties the global dictionary.
            </summary>
    </member>
    <member name="M:Nevron.Globalization.NLocalizationManager.Translate(System.String)">
      <summary>
            Returns the translation of the given value using the global dictionary. Returns the value
            itself if no translation is found.
            </summary>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Globalization.NLocalizationManager.Translate(System.String,System.String)">
      <summary>
            Returns the translation of the given value for the specified context. Returns the value
            itself if no translation is found.
            </summary>
      <param name="value">
      </param>
      <param name="contextName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Globalization.NLocalizationManager.Translate(System.String,System.String,System.String@)">
      <summary>
            Returns true if the given value is successfully translated.
            </summary>
      <param name="value">
      </param>
      <param name="contextName">
      </param>
      <param name="translation">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Globalization.NLocalizationManager.GetEnumerator">
      <summary>
            Gets an enumerator that iterates through all dictionaries in the localization manager.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Globalization.NLocalizationManager.GetDictionary(System.String)">
      <summary>
            Returns the dictionary with the specified name or null if no such dictionary exists.
            </summary>
      <param name="name">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Globalization.NLocalizationManager.CombineWith(System.String)">
      <summary>
            Appends the localization data from the specified file to the localization manager.
            </summary>
      <param name="fileName">
      </param>
    </member>
    <member name="M:Nevron.Globalization.NLocalizationManager.SyncWith(System.String)">
      <summary>
            Synchronizes the current license manager with a one saved to a file, removing all dictionaries
            and entries that are not found in the file.
            </summary>
      <param name="fileName">
      </param>
    </member>
    <member name="M:Nevron.Globalization.NLocalizationManager.Save(System.String)">
      <summary>
            Saves the localization data to the given file.
            </summary>
      <param name="fileName">
      </param>
    </member>
    <member name="M:Nevron.Globalization.NLocalizationManager.Load(System.String)">
      <summary>
            Loads localization data from the given file.
            </summary>
      <param name="fileName">
      </param>
    </member>
    <member name="F:Nevron.Globalization.NLocalizationManager.Instance">
      <summary>
            The only instance of the NLocalizationManager singleton class.
            </summary>
    </member>
    <member name="P:Nevron.Globalization.NLocalizationManager.Enabled">
      <summary>
            Gets or sets a value indicating whether the localization manager is enabled.
            </summary>
    </member>
    <member name="P:Nevron.Globalization.NLocalizationManager.GlobalDictionary">
      <summary>
            Gets the global dictionary.
            </summary>
    </member>
    <member name="T:Nevron.Interop.Win32.NShell32">
      <summary>
            Summary description for NShell32.
            </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NShell32.ABM_NEW">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NShell32.ABM_REMOVE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NShell32.ABM_QUERYPOS">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NShell32.ABM_SETPOS">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NShell32.ABM_GETSTATE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NShell32.ABM_GETTASKBARPOS">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NShell32.ABM_ACTIVATE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NShell32.ABM_GETAUTOHIDEBAR">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NShell32.ABM_SETAUTOHIDEBAR">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NShell32.ABM_WINDOWPOSCHANGED">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NShell32.ABM_SETSTATE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NShell32.ABS_AUTOHIDE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NShell32.ABS_ALWAYSONTOP">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NShell32.ABN_STATECHANGE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NShell32.ABN_POSCHANGED">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NShell32.ABN_FULLSCREENAPP">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NShell32.ABN_WINDOWARRANGE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NShell32.SHELL32_NATIVE_LIBRARY">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.Interop.Win32.NShell32.IsTaskBarTopMost">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NShell32.GetTaskBarDockEdge">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NShell32.GetTaskBarDockEdge(System.Int32)">
      <summary>
      </summary>
      <param name="uEdge">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NShell32.GetTaskBarBounds">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NShell32.StartProcess(System.String,System.Boolean)">
      <summary>
            Starts a process using the 
            </summary>
      <param name="fileName">
      </param>
      <param name="useOpenWidthDialog">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NShell32.SHGetImageList(System.Int32,System.Guid@,System.IntPtr@)">
      <summary>
      </summary>
      <param name="id">
      </param>
      <param name="guid">
      </param>
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.Interop.Win32.NShell32.APPBARDATA">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.FormulaEngine.NVariant">
      <summary>
            The NVariant class represents a value-type pair, which facilitates the type convertion of values, 
            as well as mathematical and logical operations with values of different type.
            </summary>
    </member>
    <member name="M:Nevron.FormulaEngine.NVariant.Clone">
      <summary>
            Creates an exact copy of this variant
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaEngine.NVariant.GetTypeCode">
      <summary>
            Returns the TypeCode for this instance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaEngine.NVariant.ToBoolean(System.IFormatProvider)">
      <summary>
            Converts the value of this instance to an equivalent Boolean value using the specified culture-specific formatting information.
            </summary>
      <param name="provider">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaEngine.NVariant.ToByte(System.IFormatProvider)">
      <summary>
            Converts the value of this instance to an equivalent 8-bit unsigned integer using the specified culture-specific formatting information
            </summary>
      <param name="provider">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaEngine.NVariant.ToChar(System.IFormatProvider)">
      <summary>
            Converts the value of this instance to an equivalent Unicode character using the specified culture-specific formatting information.
            </summary>
      <param name="provider">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaEngine.NVariant.ToDateTime(System.IFormatProvider)">
      <summary>
            Converts the value of this instance to an equivalent DateTime using the specified culture-specific formatting information.
            </summary>
      <param name="provider">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaEngine.NVariant.ToDecimal(System.IFormatProvider)">
      <summary>
            Converts the value of this instance to an equivalent Decimal number using the specified culture-specific formatting information.
            </summary>
      <param name="provider">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaEngine.NVariant.ToDouble(System.IFormatProvider)">
      <summary>
            Converts the value of this instance to an equivalent Double number using the specified culture-specific formatting information.
            </summary>
      <param name="provider">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaEngine.NVariant.ToInt16(System.IFormatProvider)">
      <summary>
            Converts the value of this instance to an equivalent Int16 number using the specified culture-specific formatting information.
            </summary>
      <param name="provider">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaEngine.NVariant.ToInt32(System.IFormatProvider)">
      <summary>
            Converts the value of this instance to an equivalent Int32 number using the specified culture-specific formatting information.
            </summary>
      <param name="provider">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaEngine.NVariant.ToInt64(System.IFormatProvider)">
      <summary>
            Converts the value of this instance to an equivalent Int64 number using the specified culture-specific formatting information.
            </summary>
      <param name="provider">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaEngine.NVariant.ToSByte(System.IFormatProvider)">
      <summary>
            Converts the value of this instance to an equivalent SByte number using the specified culture-specific formatting information.
            </summary>
      <param name="provider">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaEngine.NVariant.ToSingle(System.IFormatProvider)">
      <summary>
            Converts the value of this instance to an equivalent Single number using the specified culture-specific formatting information.
            </summary>
      <param name="provider">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaEngine.NVariant.ToString(System.IFormatProvider)">
      <summary>
            Converts the value of this instance to an equivalent String number using the specified culture-specific formatting information.
            </summary>
      <param name="provider">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaEngine.NVariant.ToType(System.Type,System.IFormatProvider)">
      <summary>
            Converts the value of this instance to an Object of the specified Type that has an equivalent value, using the specified culture-specific formatting information
            </summary>
      <param name="conversionType">
      </param>
      <param name="provider">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaEngine.NVariant.ToUInt16(System.IFormatProvider)">
      <summary>
            Converts the value of this instance to an equivalent 16-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
      <param name="provider">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaEngine.NVariant.ToUInt32(System.IFormatProvider)">
      <summary>
            Converts the value of this instance to an equivalent 32-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
      <param name="provider">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaEngine.NVariant.ToUInt64(System.IFormatProvider)">
      <summary>
            Converts the value of this instance to an equivalent 64-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
      <param name="provider">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaEngine.NVariant.ToTimeSpan(System.IFormatProvider)">
      <summary>
            Converts the value of this instance to an equivalent 64-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
      <param name="provider">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaEngine.NVariant.CompareTo(System.Object)">
      <summary>
            Compares this variant with another variant
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaEngine.NVariant.ToString">
      <summary>
            Overriden to return the value string representation, according to the English-US culture info
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaEngine.NVariant.Equals(System.Object)">
      <summary>
            Overriden because == operator was overriden
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaEngine.NVariant.GetHashCode">
      <summary>
            Overriden because Equals was overriden
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaEngine.NVariant.GetFirst">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaEngine.NVariant.GetFirst(System.Boolean)">
      <summary>
            Gets the first value in the variant. 
            In case of a simple variant this is the variant itself.
            In case of an array of variants this is the first variant in array.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaEngine.NVariant.GetLast">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaEngine.NVariant.GetLast(System.Boolean)">
      <summary>
            Gets the last value in the variant. 
            In case of a simple variant this is the variant itself.
            In case of an array of variants this is the last variant in array.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaEngine.NVariant.GetAt(System.Int32)">
      <summary>
            Gets the value at the specified index. 
            In case of an array of variants this is the variant at the specified index.
            In case of a single variant throws an exception.
            </summary>
      <param name="index">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaEngine.NVariant.Parse(System.String,Nevron.FormulaEngine.VariantType)">
      <summary>
            Creates a new variant object from the specified string and with the specified type 
            (engines the string according to the English-US culture info)
            </summary>
      <param name="str">
      </param>
      <param name="type">
      </param>
      <returns>
      </returns>
    </member>
    <member name="F:Nevron.FormulaEngine.NVariant.Empty">
      <summary>
            The empty variant
            </summary>
    </member>
    <member name="F:Nevron.FormulaEngine.NVariant.True">
      <summary>
            The true variant
            </summary>
    </member>
    <member name="F:Nevron.FormulaEngine.NVariant.False">
      <summary>
            The false variant
            </summary>
    </member>
    <member name="P:Nevron.FormulaEngine.NVariant.Type">
      <summary>
            Gets the variant type
            </summary>
    </member>
    <member name="P:Nevron.FormulaEngine.NVariant.Value">
      <summary>
            Gets the variant value
            </summary>
    </member>
    <member name="P:Nevron.FormulaEngine.NVariant.IsEmpty">
      <summary>
            Determines whether this is the empty variant
            </summary>
    </member>
    <member name="P:Nevron.FormulaEngine.NVariant.IsArray">
      <summary>
            Determines whether this is an array variant
            </summary>
    </member>
    <member name="P:Nevron.FormulaEngine.NVariant.IsString">
      <summary>
            Determines whether the type of this variant is String
            </summary>
    </member>
    <member name="P:Nevron.FormulaEngine.NVariant.IsNumeric">
      <summary>
            Determines whether the type of this variant is Number
            </summary>
    </member>
    <member name="P:Nevron.FormulaEngine.NVariant.IsSignedNumeric">
      <summary>
            Determines whether the type of this variant is Signed Number
            </summary>
    </member>
    <member name="P:Nevron.FormulaEngine.NVariant.IsIntegerNumeric">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.FormulaEngine.NVariant.IsDateTime">
      <summary>
            Determines whether the type of this variant is DateTime
            </summary>
    </member>
    <member name="P:Nevron.FormulaEngine.NVariant.IsTimeSpan">
      <summary>
            Determines whether the type of this variant is TimeSpan
            </summary>
    </member>
    <member name="T:Nevron.FormulaEngine.IsReferenceName">
      <summary>
            Delegate for the Is Refrence Name query
            </summary>
    </member>
    <member name="T:Nevron.FormulaEngine.GetReferenceValue">
      <summary>
            Delegate for the Get Reference Value query
            </summary>
    </member>
    <member name="T:Nevron.Filters.NFalseFilter">
      <summary>
            A constant FALSE filter
            </summary>
    </member>
    <member name="M:Nevron.Filters.NFalseFilter.Filter(System.Object)">
      <summary>
            Overriden to constantly return false
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.Dom.NElementHistoryService">
      <summary>
            The NElementHistoryService class represents a service, which is used to provide elements with history support 
            and serves as base class for history services, which can provide element reference resolving (through the element UniqueId)
            </summary>
    </member>
    <member name="M:Nevron.Dom.NElementHistoryService.DumpToListBoxes(System.Windows.Forms.ListBox,System.Windows.Forms.ListBox)">
      <summary>
            Dumps the state of the undo and redo stacks in the specified ListBox instances
            </summary>
      <param name="undoList">undo list box</param>
      <param name="redoList">redo list box</param>
    </member>
    <member name="M:Nevron.Dom.NElementHistoryService.DumpToTrees(System.Windows.Forms.TreeView,System.Windows.Forms.TreeView)">
      <summary>
            Dumps the state of the undo and redo stacks in the specified TreeView instances
            </summary>
      <param name="undoTree">undo tree view</param>
      <param name="redoTree">redo tree view</param>
    </member>
    <member name="M:Nevron.Dom.NElementHistoryService.CanRedo">
      <summary>
            Determines whether the user can perform Redo
            </summary>
      <returns>true if redo can be executed, otherwise false</returns>
    </member>
    <member name="M:Nevron.Dom.NElementHistoryService.CanUndo">
      <summary>
            Determines whether the user can perform Undo
            </summary>
      <returns>true if undo can be executed, otherwise false</returns>
    </member>
    <member name="M:Nevron.Dom.NElementHistoryService.CanRecord">
      <summary>
            Determines whether a new operation can be recorded
            </summary>
      <returns>true if a new operation can be recorded, otherwise false</returns>
    </member>
    <member name="M:Nevron.Dom.NElementHistoryService.Undo">
      <summary>
            Undoes the last operation in the undo stack
            </summary>
      <returns>true if undoing succeeded, otherwise false</returns>
    </member>
    <member name="M:Nevron.Dom.NElementHistoryService.Redo">
      <summary>
            Redoes the last operation in the redo stack
            </summary>
      <returns>true if redoing succeeded, otherwise false</returns>
    </member>
    <member name="M:Nevron.Dom.NElementHistoryService.RecordElementPropertyChange(System.String,Nevron.Dom.INElement,System.String)">
      <summary>
            Records an element property change operation
            </summary>
      <param name="desc">operation description</param>
      <param name="element">element</param>
      <param name="propertyName">element property name, whose value to record</param>
    </member>
    <member name="M:Nevron.Dom.NElementHistoryService.RecordElementStateChange(System.String,Nevron.Dom.INElement,System.String)">
      <summary>
            Records an element state change operation (records the entire state of the element)
            </summary>
      <param name="desc">operation description</param>
      <param name="element">element</param>
      <param name="hint">optional hint, which the element can receive when this operation is redone or undone</param>
    </member>
    <member name="M:Nevron.Dom.NElementHistoryService.RecordElementStateChange(System.String,Nevron.Dom.INElement,System.String[],System.String)">
      <summary>
            Records an element state change operation (records only the state of the specified fields)
            </summary>
      <param name="desc">operation description</param>
      <param name="element">element</param>
      <param name="fieldNames">element field names, whose values to record</param>
      <param name="hint">optional hint, which the element can receive when this operation is redone or undone</param>
    </member>
    <member name="M:Nevron.Dom.NElementHistoryService.RecordElementAction(System.String,Nevron.Dom.INElement)">
      <summary>
            Records an element action operation (records only the state of the specified fields)
            </summary>
      <param name="desc">operation description</param>
      <param name="element">element</param>
    </member>
    <member name="M:Nevron.Dom.NElementHistoryService.RecordAttributePropertyChange(System.String,Nevron.Dom.INElement,System.String,System.String)">
      <summary>
            Records an element attribute property change operation
            </summary>
      <param name="desc">operation description</param>
      <param name="element">element to which the attribute belongs</param>
      <param name="attributeName">full name of the attribute</param>
      <param name="propertyName">attribute property name, whose value to record</param>
    </member>
    <member name="M:Nevron.Dom.NElementHistoryService.RecordAttributeStateChange(System.String,Nevron.Dom.INElement,System.String,System.String)">
      <summary>
            Records an element attribute state change operation (records the entire state of the element attribute)
            </summary>
      <param name="desc">operation description</param>
      <param name="element">element to which the attribute belongs</param>
      <param name="attributeName">full name of the attribute</param>
      <param name="hint">optional hint, which the attribute can receive when this operation is redone or undone</param>
    </member>
    <member name="M:Nevron.Dom.NElementHistoryService.RecordAttributeStateChange(System.String,Nevron.Dom.INElement,System.String,System.String[],System.String)">
      <summary>
            Records an element attribute state change operation (records the only the state of the specified element attribute fields)
            </summary>
      <param name="desc">operation description</param>
      <param name="element">element to which the attribute belongs</param>
      <param name="attributeName">full name of the attribute</param>
      <param name="fieldNames">element attribute field names, whose values to record</param>
      <param name="hint">optional hint, which the attribute can receive when this operation is redone or undone</param>
    </member>
    <member name="M:Nevron.Dom.NElementHistoryService.RecordAttributeAction(System.String,Nevron.Dom.INElement,System.String)">
      <summary>
            Records an attribute action operation 
            </summary>
      <param name="desc">operation description</param>
      <param name="element">element to which the attribute belongs</param>
      <param name="attributeName">full name of the attribute</param>
    </member>
    <member name="M:Nevron.Dom.NElementHistoryService.RecordInsertElement(System.String,Nevron.Dom.INElementComposite,Nevron.Dom.INElement,System.Int32)">
      <summary>
            Records an insert element operation
            </summary>
      <param name="desc">operation description</param>
      <param name="composite">composite in which the element will be inserted</param>
      <param name="element">element which will be inserted in the composite</param>
      <param name="index">index at which the element will be inserted</param>
    </member>
    <member name="M:Nevron.Dom.NElementHistoryService.RecordRemoveElement(System.String,Nevron.Dom.INElementComposite,Nevron.Dom.INElement)">
      <summary>
            Records a remove element operation
            </summary>
      <param name="desc">operation description</param>
      <param name="composite">composite from which the element will be removed</param>
      <param name="element">element which will be removed</param>
    </member>
    <member name="M:Nevron.Dom.NElementHistoryService.RecordSetElementIndex(System.String,Nevron.Dom.INElementContainer,Nevron.Dom.INElement,System.Int32)">
      <summary>
            Records a set element index operation
            </summary>
      <param name="desc">operation description</param>
      <param name="container">container in which the element resides</param>
      <param name="element">element whose index will be set</param>
      <param name="newIndex">new element index</param>
    </member>
    <member name="M:Nevron.Dom.NElementHistoryService.RecordOperation(Nevron.Dom.NOperation)">
      <summary>
            Records the specified operation in the Undo stack
            </summary>
      <param name="operation">operation to record</param>
    </member>
    <member name="M:Nevron.Dom.NElementHistoryService.StartTransaction(System.String)">
      <summary>
            Starts a new history transaction
            </summary>
      <param name="desc">transaction description</param>
    </member>
    <member name="M:Nevron.Dom.NElementHistoryService.Commit">
      <summary>
            Commits the last started transaction
            </summary>
      <returns>true if the transaction was commited (recorded), otherwise false</returns>
    </member>
    <member name="M:Nevron.Dom.NElementHistoryService.Rollback">
      <summary>
            Rolls back the currently started transaction and undoes the effect of the operations recorded in it
            </summary>
    </member>
    <member name="M:Nevron.Dom.NElementHistoryService.AbortTransaction">
      <summary>
            Aborts (discards) the currently started transaction
            </summary>
    </member>
    <member name="M:Nevron.Dom.NElementHistoryService.GetElementFromUniqueId(System.Guid)">
      <summary>
            Obtains a reference to the element, which corresponds to the specified uid
            </summary>
      <param name="uid">element uid to resolve</param>
      <returns>reference to element</returns>
    </member>
    <member name="M:Nevron.Dom.NElementHistoryService.OnOperationRecordingRequested">
      <summary>
            Called when an attempt was made to record an operation in the undo stack
            </summary>
      <remarks>
            This method is called even when the service is not running (is stopped or paused) 
            This implementation fires the OperationRecordingRequested event
            </remarks>
    </member>
    <member name="M:Nevron.Dom.NElementHistoryService.OnOperationRecorded">
      <summary>
            Called whenever an operation has been recored in the undo stack
            </summary>
    </member>
    <member name="M:Nevron.Dom.NElementHistoryService.OnUndoExecuted">
      <summary>
            Called when an operation has been successfully undone
            </summary>
    </member>
    <member name="M:Nevron.Dom.NElementHistoryService.OnRedoExecuted">
      <summary>
            Called when an operation has been successfully redone
            </summary>
    </member>
    <member name="M:Nevron.Dom.NElementHistoryService.OnStartTransaction">
      <summary>
            Called when a transaction has been started
            </summary>
    </member>
    <member name="M:Nevron.Dom.NElementHistoryService.OnCommit">
      <summary>
            Called when a transaction has been commited
            </summary>
    </member>
    <member name="M:Nevron.Dom.NElementHistoryService.OnRollback">
      <summary>
            Called when the last started transaction has been rolled back
            </summary>
    </member>
    <member name="M:Nevron.Dom.NElementHistoryService.OnAbortTransaction">
      <summary>
            Called when the last started transaction has been aborted
            </summary>
    </member>
    <member name="M:Nevron.Dom.NElementHistoryService.OnStop">
      <summary>
            Overriden to clear the state of the history service
            </summary>
    </member>
    <member name="E:Nevron.Dom.NElementHistoryService.OperationRecordingRequested">
      <summary>
            Fired when an attempt was made to record an operation
            </summary>
    </member>
    <member name="E:Nevron.Dom.NElementHistoryService.OperationRecorded">
      <summary>
            Fired when a new operation has been recorded
            </summary>
    </member>
    <member name="E:Nevron.Dom.NElementHistoryService.UndoExecuted">
      <summary>
            Fired when undo is execuded
            </summary>
    </member>
    <member name="E:Nevron.Dom.NElementHistoryService.RedoExecuted">
      <summary>
            Fired when redo is execuded
            </summary>
    </member>
    <member name="E:Nevron.Dom.NElementHistoryService.TransactionStarted">
      <summary>
            Fired when a transaction has been started
            </summary>
    </member>
    <member name="E:Nevron.Dom.NElementHistoryService.TransactionRolledback">
      <summary>
            Fired when a transaction has been rolled back
            </summary>
    </member>
    <member name="E:Nevron.Dom.NElementHistoryService.TransactionCommited">
      <summary>
            Fired when a transaction has been commited
            </summary>
    </member>
    <member name="E:Nevron.Dom.NElementHistoryService.TransactionAborted">
      <summary>
            Fired when a transaction has been aborted
            </summary>
    </member>
    <member name="P:Nevron.Dom.NElementHistoryService.MaxUndoLevels">
      <summary>
            Controls the depth of the undo stack
            </summary>
      <remarks>
            Setting the property will automatically clear the extra operations in the undo stack. By default set to 100
            </remarks>
    </member>
    <member name="P:Nevron.Dom.NElementHistoryService.UndoStack">
      <summary>
            Obtains a reference to the Undo operations stack
            </summary>
    </member>
    <member name="P:Nevron.Dom.NElementHistoryService.RedoStack">
      <summary>
            Obtains a reference to the Redo operations stack
            </summary>
    </member>
    <member name="P:Nevron.Dom.NElementHistoryService.TransactionStack">
      <summary>
            Obtains a reference to the currently started transactions stack
            </summary>
    </member>
    <member name="P:Nevron.Dom.NElementHistoryService.IsUndoing">
      <summary>
            Determines whether the history service is currently undoing an operation
            </summary>
    </member>
    <member name="P:Nevron.Dom.NElementHistoryService.IsRedoing">
      <summary>
            Determines whether the history service is currently redoing an operation
            </summary>
    </member>
    <member name="P:Nevron.Dom.NElementHistoryService.IsUndoingOrRedoing">
      <summary>
            Determines whether the history service is currently undoing or redoing an operation
            </summary>
    </member>
    <member name="T:Nevron.Dom.NNodeEventSinkService">
      <summary>
            The NNodeEventSinkService class represent a service, which provides nodes with a centrilized mechanizm to fire events
            </summary>
      <remarks>
            You can subscribe for the node events routed to this service in two ways:
            <list type="bullet"><item><term>Subscribe for a broadcased event</term><description>
            This is achieved by adding an event handler for one of the node events exposed by the service. For example:
            <code>
            ...
            // subscribe for a broadcasted event
            nodeEventSinkService.NodePropertyChanged += new NodePropertyEventHandler(OnAnyNodePropertyChanged);
            ...
            private void OnAnyNodePropertyChanged(NNodePropertyEventArgs args)
            {
            }
            </code>
            The OnAnyNodePropertyChanged method will be called when a property of any of the nodes, which are connected 
            to this service has changed. This is particularly useful if you do not want to hook/unhook the events of all nodes residing 
            in the node scene.
            </description></item><item><term>Install a node event listener</term><description>
            This is achieved with the help of the AddNodeEventListener method. For example:
            <code>
            ...
            // install node event listener for the NodePropertyChanged event
            nodeEventSinkService.AddNodeEventListener("NodePropertyChanged", node1, new NodePropertyEventHandler(OnNode1PropertyChanged));
            ...
            ...
            private void OnNode1PropertyChanged(NNodePropertyEventArgs args)
            {
            }
            </code>
            The OnNode1PropertyChanged method will only be called when a property of node1 has changed. 
            This method for event subscription is usefull if you want to monitor only the events of a particular node.
            </description></item></list><para>
            From a nodes' point of view it is enough to only call the respective FireXXX method in order to update all 
            listeners and broadcasted event subscribers. By design the service first invokes the event handlers of the registered node 
            listeners and then invokes the broadcasted event handlers.
            </para><para>
            You can also specify a node event filter. This is achieved with the help of the NodeFilter property. 
            If a node filter is specified (the NodeFilter property is not null), then a node event will only be fired 
            if the node satisfies the provided filter. This helps you globally block any node event if the node for which 
            it will be fired does not satisfy the filter criteria.
            </para></remarks>
    </member>
    <member name="M:Nevron.Dom.NNodeEventSinkService.FireNodePropertyChanging(Nevron.Dom.INNode,System.String,System.Object)">
      <summary>
            Fires the NodePropertyChanging event
            </summary>
      <param name="node">node whose property is changing</param>
      <param name="propertyName">property name</param>
      <param name="newValue">new proprety value</param>
      <returns>true if the change is acceptable, otherwise false</returns>
    </member>
    <member name="M:Nevron.Dom.NNodeEventSinkService.FireNodePropertyChanged(Nevron.Dom.INNode,System.String)">
      <summary>
            Fires the NodePropertyChanged event
            </summary>
      <param name="node">node whose property has changed</param>
      <param name="propertyName">property name</param>
    </member>
    <member name="M:Nevron.Dom.NNodeEventSinkService.FireNodeInserted(Nevron.Dom.INNode,Nevron.Dom.INNode)">
      <summary>
            Fires the NodeInserted event
            </summary>
      <param name="parent">parent in which the node was inserted</param>
      <param name="child">child which has been inserted</param>
    </member>
    <member name="M:Nevron.Dom.NNodeEventSinkService.FireNodeRemoving(Nevron.Dom.INNode,Nevron.Dom.INNode)">
      <summary>
            Fires the NodeRemoving event
            </summary>
      <param name="parent">parent node from which the node is being removed</param>
      <param name="child">child which has to be removed</param>
      <returns>true if child can be removed from parent, otherwise false</returns>
    </member>
    <member name="M:Nevron.Dom.NNodeEventSinkService.FireNodeRemoved(Nevron.Dom.INNode,Nevron.Dom.INNode)">
      <summary>
            Fires the NodeRemoved event
            </summary>
      <param name="parent">parent node from which the node was removed</param>
      <param name="child">child which has been removed</param>
    </member>
    <member name="M:Nevron.Dom.NNodeEventSinkService.FireNodeIndexChanged(Nevron.Dom.INNode,Nevron.Dom.INNode)">
      <summary>
            Fires the NodeIndexChanged event
            </summary>
      <param name="parent">parent node in which node resides</param>
      <param name="child">child node whose index has been changed</param>
    </member>
    <member name="M:Nevron.Dom.NNodeEventSinkService.FireNodeAttributePropertyChanging(Nevron.Dom.INNode,System.String,System.String,System.Object)">
      <summary>
            Fires the NodeAttributePropertyChanging event
            </summary>
      <param name="node">node whose attribute is changing</param>
      <param name="attributeName">full attribute name</param>
      <param name="propertyName">attribute property name</param>
      <param name="newValue">new property value</param>
      <returns>true if the change is acceptable, otherwise false</returns>
    </member>
    <member name="M:Nevron.Dom.NNodeEventSinkService.FireNodeAttributePropertyChanged(Nevron.Dom.INNode,System.String,System.String)">
      <summary>
            Fires the NodeAttributePropertyChanged event
            </summary>
      <param name="node">node whose attribute has changed</param>
      <param name="attributeName">full attribute name</param>
      <param name="propertyName">attribute property name</param>
    </member>
    <member name="M:Nevron.Dom.NNodeEventSinkService.FireNodeAttributeChanged(Nevron.Dom.INNode,System.String)">
      <summary>
            Fires the NodeAttributeChanged event
            </summary>
      <param name="node">node whose attribute has changed</param>
      <param name="attributeName">full attribute name</param>
    </member>
    <member name="M:Nevron.Dom.NNodeEventSinkService.AddNodeEventListener(System.String,Nevron.Dom.INNode,System.Delegate)">
      <summary>
            Adds an event listener for the event of the specified node
            </summary>
      <param name="eventName">event name</param>
      <param name="node">node for which to add the event handler</param>
      <param name="eventHandler">event handler to add</param>
    </member>
    <member name="M:Nevron.Dom.NNodeEventSinkService.AddNodeEventListener(System.Int32,Nevron.Dom.INNode,System.Delegate)">
      <summary>
            Adds an event handler for the event of the specified node
            </summary>
      <param name="eventKey">event key</param>
      <param name="node">node for which to add the event handler</param>
      <param name="eventHandler">event handler to add</param>
    </member>
    <member name="M:Nevron.Dom.NNodeEventSinkService.RemoveNodeEventListener(System.String,Nevron.Dom.INNode,System.Delegate)">
      <summary>
            Removes the event listener for the event of the specified node
            </summary>
      <param name="eventName">event name</param>
      <param name="node">node for which to remove the event handler</param>
      <param name="eventHandler">event handler to remove</param>
    </member>
    <member name="M:Nevron.Dom.NNodeEventSinkService.RemoveNodeEventListener(System.Int32,Nevron.Dom.INNode,System.Delegate)">
      <summary>
            Removes the event handler for the event of the specified node
            </summary>
      <param name="eventKey">event key</param>
      <param name="node">node for which to remove the event handler</param>
      <param name="eventHandler">event handler to remove</param>
    </member>
    <member name="M:Nevron.Dom.NNodeEventSinkService.RemoveAllNodeEventListeners(Nevron.Dom.INNode)">
      <summary>
            Removes all event listerners for the specified node
            </summary>
      <param name="node">
      </param>
    </member>
    <member name="M:Nevron.Dom.NNodeEventSinkService.GetNodeEventListener(System.Int32,Nevron.Dom.INNode)">
      <summary>
            Gets the event delegate which should be used to fire the event
            </summary>
      <param name="eventKey">event key</param>
      <param name="node">node for which the event is fired</param>
      <returns>delegate to invoke</returns>
    </member>
    <member name="F:Nevron.Dom.NNodeEventSinkService.keyNodePropertyChanging">
      <summary>
            Key for the NodePropertyChanging event
            </summary>
    </member>
    <member name="F:Nevron.Dom.NNodeEventSinkService.keyNodePropertyChanged">
      <summary>
            Key for the NodePropertyChanged event
            </summary>
    </member>
    <member name="F:Nevron.Dom.NNodeEventSinkService.keyNodeInserted">
      <summary>
            Key for the NodeInserted event
            </summary>
    </member>
    <member name="F:Nevron.Dom.NNodeEventSinkService.keyNodeRemoving">
      <summary>
            Key for the NodeRemoving event
            </summary>
    </member>
    <member name="F:Nevron.Dom.NNodeEventSinkService.keyNodeRemoved">
      <summary>
            Key for the NodeRemoved event
            </summary>
    </member>
    <member name="F:Nevron.Dom.NNodeEventSinkService.keyNodeIndexChanged">
      <summary>
            Key for the NodeIndexChanged event
            </summary>
    </member>
    <member name="F:Nevron.Dom.NNodeEventSinkService.keyNodeAttributePropertyChanging">
      <summary>
            Key for the NodeAttributePropertyChanging event
            </summary>
    </member>
    <member name="F:Nevron.Dom.NNodeEventSinkService.keyNodeAttributePropertyChanged">
      <summary>
            Key for the NodeAttributePropertyChanged event
            </summary>
    </member>
    <member name="F:Nevron.Dom.NNodeEventSinkService.keyNodeAttributeChanged">
      <summary>
            Key for the NodeAttributeChanged event
            </summary>
    </member>
    <member name="E:Nevron.Dom.NNodeEventSinkService.NodePropertyChanging">
      <summary>
            Fired when a node property is changing
            </summary>
      <remarks>
            You can install a node event listener for this event
            </remarks>
    </member>
    <member name="E:Nevron.Dom.NNodeEventSinkService.NodePropertyChanged">
      <summary>
            Fired when a node property has changed
            </summary>
      <remarks>
            You can install a node event listener for this event
            </remarks>
    </member>
    <member name="E:Nevron.Dom.NNodeEventSinkService.NodeInserted">
      <summary>
            Fired when a node has been inserted in a parent
            </summary>
      <remarks>
            You can install a node event listener for this event
            </remarks>
    </member>
    <member name="E:Nevron.Dom.NNodeEventSinkService.NodeRemoving">
      <summary>
            Fired when a node is about to be removed from a parent
            </summary>
      <remarks>
            You can install a node event listener for this event
            </remarks>
    </member>
    <member name="E:Nevron.Dom.NNodeEventSinkService.NodeRemoved">
      <summary>
            Fired when a node has been removed from a parent
            </summary>
      <remarks>
            You can install a node event listener for this event
            </remarks>
    </member>
    <member name="E:Nevron.Dom.NNodeEventSinkService.NodeIndexChanged">
      <summary>
            Fired when a the index of the node inside its parent has changed
            </summary>
      <remarks>
            You can install a node event listener for this event
            </remarks>
    </member>
    <member name="E:Nevron.Dom.NNodeEventSinkService.NodeAttributePropertyChanging">
      <summary>
            Fired when a node attribute property is changing
            </summary>
      <remarks>
            You can install a node event listener for this event
            </remarks>
    </member>
    <member name="E:Nevron.Dom.NNodeEventSinkService.NodeAttributePropertyChanged">
      <summary>
            Fired when a node attribute property has changed
            </summary>
      <remarks>
            You can install a node event listener for this event
            </remarks>
    </member>
    <member name="E:Nevron.Dom.NNodeEventSinkService.NodeAttributeChanged">
      <summary>
            Fired when a node attribute has changed
            </summary>
      <remarks>
            You can install a node event listener for this event
            </remarks>
    </member>
    <member name="P:Nevron.Dom.NNodeEventSinkService.NodeFilter">
      <summary>
            Gets/sets the node filter used by the service
            </summary>
    </member>
    <member name="P:Nevron.Dom.NNodeEventSinkService.BroadcastedEvents">
      <summary>
            Obtains a reference to the internal delegate storage of the broadcased events 
            </summary>
    </member>
    <member name="P:Nevron.Dom.NNodeEventSinkService.NodeToListenersMap">
      <summary>
            Obtains a reference to the internal hashtable, which maps nodes to a delegate storage for its event listeners
            </summary>
    </member>
    <member name="P:Nevron.Dom.NNodeEventSinkService.NodeEventToKeyMap">
      <summary>
            Obtains a reference to the internal hashtable, which is used to map node event names to the keys which can be used in a delegate storage
            </summary>
    </member>
    <member name="T:Nevron.Dom.NElementAttributeIdentifier">
      <summary>
            Identifies an attribute contained in an element.
            </summary>
    </member>
    <member name="M:Nevron.Dom.NElementAttributeIdentifier.ToString">
      <summary>
            Returns the string representation of this identifier
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Dom.NElementAttributeIdentifier.FindInDocument(Nevron.Dom.INDocument)">
      <summary>
            Returns the object represented by this identifier or null if not 
            present in the specified document.
            </summary>
      <param name="document">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Dom.NElementAttributeIdentifier.ToString(System.Globalization.CultureInfo)">
      <summary>
            Converts this identifier to its string representation
            </summary>
      <param name="cultureInfo">
      </param>
      <returns>
      </returns>
    </member>
    <member name="F:Nevron.Dom.NElementAttributeIdentifier.m_ElementId">
      <summary>
            Element id
            </summary>
    </member>
    <member name="P:Nevron.Dom.NElementAttributeIdentifier.Type">
      <summary>
            Gets the identifier type
            </summary>
    </member>
    <member name="T:Nevron.Dom.NAttributeList">
      <summary>
            The NAttributeList class represents a typed list of INAttribute instances
            </summary>
    </member>
    <member name="M:Nevron.Dom.NAttributeList.AddNoNull(Nevron.Dom.INAttribute)">
      <summary>
            Adds a non null attribute to the end of the collection
            </summary>
      <param name="value">attribute to add</param>
      <returns>The zero-based index at which the new attribute is inserted</returns>
    </member>
    <member name="M:Nevron.Dom.NAttributeList.Add(Nevron.Dom.INAttribute)">
      <summary>
            Adds the attribute to the end of the collection
            </summary>
      <param name="value">attribute to add</param>
      <returns>The zero-based index at which the new attribute is inserted</returns>
    </member>
    <member name="M:Nevron.Dom.NAttributeList.AddRange(Nevron.Dom.INAttribute[])">
      <summary>
            Copies the elements of a attribute array to the end of the collection.
            </summary>
      <param name="value">attribute array</param>
    </member>
    <member name="M:Nevron.Dom.NAttributeList.AddRange(Nevron.Dom.NAttributeList)">
      <summary>
            Copies the elements of a attribute list to the end of the collection.
            </summary>
      <param name="value">attribute list</param>
    </member>
    <member name="M:Nevron.Dom.NAttributeList.AddRange(System.Collections.ICollection)">
      <summary>
            Copies the elements of the specified collection to the end of this collection.
            </summary>
      <param name="value">attribute list</param>
    </member>
    <member name="M:Nevron.Dom.NAttributeList.Contains(Nevron.Dom.INAttribute)">
      <summary>
            Determines whether the specified attribute is in the collection
            </summary>
      <param name="value">attribute</param>
      <returns>true if attribute is found in the collection, otherwise false</returns>
    </member>
    <member name="M:Nevron.Dom.NAttributeList.CopyTo(Nevron.Dom.INAttribute[],System.Int32)">
      <summary>
            Copies the entire collection values to a one-dimensional array of attributes, starting at the specified index of the target array.
            </summary>
      <param name="array">The one-dimensional array of attributes that is the destination of the elements copied from collection. The Array must have zero-based indexing</param>
      <param name="index">The zero-based index in array at which copying begins.</param>
    </member>
    <member name="M:Nevron.Dom.NAttributeList.IndexOf(Nevron.Dom.INAttribute)">
      <summary>
            Searches for the specified attribute and returns the zero-based index of the first occurrence within the collection
            </summary>
      <param name="value">the attribute to locate</param>
      <returns>index of the attribute</returns>
    </member>
    <member name="M:Nevron.Dom.NAttributeList.Insert(System.Int32,Nevron.Dom.INAttribute)">
      <summary>
            Inserts the attribute at the specified index
            </summary>
      <param name="index">index at which the attribute is inserted</param>
      <param name="value">the attribute to insert</param>
    </member>
    <member name="M:Nevron.Dom.NAttributeList.Remove(Nevron.Dom.INAttribute)">
      <summary>
            Removes the first occurrence of a specific attribute from the collection
            </summary>
      <param name="value">attribute to remove</param>
    </member>
    <member name="M:Nevron.Dom.NAttributeList.Clone">
      <summary>
            Creates an exact replica of this object.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.Collections.NFilterValuePairList">
      <summary>
            Summary description for NFilterValueList.
            </summary>
    </member>
    <member name="M:Nevron.Collections.NFilterValuePairList.Add(Nevron.Filters.NFilterValuePair)">
      <summary>
            Adds the date time to the end of the collection
            </summary>
      <param name="value">
      </param>
      <returns>The zero-based index at which the new element is inserted</returns>
    </member>
    <member name="M:Nevron.Collections.NFilterValuePairList.AddRange(Nevron.Filters.NFilterValuePair[])">
      <summary>
            Copies the elements of a NFilterValuePair array to the end of the collection.
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:Nevron.Collections.NFilterValuePairList.AddRange(Nevron.Collections.NFilterValuePairList)">
      <summary>
            Copies the elements of a NFilterValuePair list to the end of the collection.
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:Nevron.Collections.NFilterValuePairList.Contains(System.DateTime)">
      <summary>
            Determines whether the specified NFilterValuePair is in the collection
            </summary>
      <param name="value">
      </param>
      <returns>if value is found in the collection otherwise, false</returns>
    </member>
    <member name="M:Nevron.Collections.NFilterValuePairList.CopyTo(System.DateTime[],System.Int32)">
      <summary>
            Copies the entire collection values to a one-dimensional array of DateTimes, starting at the specified index of the target array.
            </summary>
      <param name="array">The one-dimensional array of DateTimes that is the destination of the elements copied from collection. The Array must have zero-based indexing</param>
      <param name="index">The zero-based index in array at which copying begins.</param>
    </member>
    <member name="M:Nevron.Collections.NFilterValuePairList.IndexOf(System.DateTime)">
      <summary>
            Searches for the specified DateTime value and returns the zero-based index of the first occurrence within the collection
            </summary>
      <param name="value">the DateTime value to locate</param>
      <returns>index of the int value</returns>
    </member>
    <member name="M:Nevron.Collections.NFilterValuePairList.Insert(System.Int32,System.DateTime)">
      <summary>
            Inserts the DateTime value at the specified index
            </summary>
      <param name="index">index at which value is inserted</param>
      <param name="value">DateTime value</param>
    </member>
    <member name="M:Nevron.Collections.NFilterValuePairList.Remove(System.DateTime)">
      <summary>
            Removes the first occurrence of a specific DateTime value from the collection
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:Nevron.Collections.NFilterValuePairList.ToArray">
      <summary>
            Converts the DateTime list to a system array
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Collections.NFilterValuePairList.Clone">
      <summary>
            Creates an exact replica of this object.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.Collections.NDoubleList">
      <summary>
            Represents a list of double values
            </summary>
    </member>
    <member name="M:Nevron.Collections.NDoubleList.Add(System.Double)">
      <summary>
            Adds the int to the end of the collection
            </summary>
      <param name="value">
      </param>
      <returns>The zero-based index at which the new element is inserted</returns>
    </member>
    <member name="M:Nevron.Collections.NDoubleList.AddRange(System.Double[])">
      <summary>
            Copies the elements of a double array to the end of the collection.
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:Nevron.Collections.NDoubleList.AddRange(Nevron.Collections.NDoubleList)">
      <summary>
            Copies the elements of a double list to the end of the collection.
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:Nevron.Collections.NDoubleList.Contains(System.Double)">
      <summary>
            Determines whether the specified double is in the collection
            </summary>
      <param name="value">
      </param>
      <returns>if value is found in the collection otherwise, false</returns>
    </member>
    <member name="M:Nevron.Collections.NDoubleList.CopyTo(System.Double[],System.Int32)">
      <summary>
            Copies the entire collection values to a one-dimensional array of doubles, starting at the specified index of the target array.
            </summary>
      <param name="array">The one-dimensional array of doubles that is the destination of the elements copied from collection. The Array must have zero-based indexing</param>
      <param name="index">The zero-based index in array at which copying begins.</param>
    </member>
    <member name="M:Nevron.Collections.NDoubleList.IndexOf(System.Double)">
      <summary>
            Searches for the specified double value and returns the zero-based index of the first occurrence within the collection
            </summary>
      <param name="value">the double value to locate</param>
      <returns>index of the int value</returns>
    </member>
    <member name="M:Nevron.Collections.NDoubleList.Insert(System.Int32,System.Double)">
      <summary>
            Inserts the double value at the specified index
            </summary>
      <param name="index">index at which value is inserted</param>
      <param name="value">double value</param>
    </member>
    <member name="M:Nevron.Collections.NDoubleList.Remove(System.Double)">
      <summary>
            Removes the first occurrence of a specific double value from the collection
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:Nevron.Collections.NDoubleList.Max">
      <summary>
            Gets the max double value in the list
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Collections.NDoubleList.Min">
      <summary>
            Gets the min double value in the list
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Collections.NDoubleList.ToArray">
      <summary>
            Converts the double list to a system array
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Collections.NDoubleList.Clone">
      <summary>
            Creates an exact replica of this object.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.Collections.NDoubleList.Sum">
      <summary>
            Gets the sum of all items in the list
            </summary>
    </member>
    <member name="P:Nevron.Collections.NDoubleList.DecimalSum">
      <summary>
            Gets the sum of all items in the list in decimal format
            </summary>
    </member>
    <member name="T:Nevron.NQuarterDateTimeUnit">
      <summary>
            Represents the quarter date time unit (3 months).
            </summary>
    </member>
    <member name="M:Nevron.NQuarterDateTimeUnit.Add(System.DateTime,System.Int64)">
      <summary>
            Add the unitCount to the dateTime.
            </summary>
      <param name="dateTime">
      </param>
      <param name="unitCount">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.NQuarterDateTimeUnit.Ticks">
      <summary>
            Returns the number of ticks in this date time unit
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.NQuarterDateTimeUnit.IsRegular">
      <summary>
            Returns true if the unit is regular (e.g. always expressed with a fixed number of ticks)
            </summary>
    </member>
    <member name="P:Nevron.NQuarterDateTimeUnit.DateTimeUnit">
      <summary>
            The date/time unit enum value.
            </summary>
    </member>
    <member name="T:Nevron.NDateTimeUnitSerializer">
      <summary>
            Serializes date / time units
            </summary>
    </member>
    <member name="M:Nevron.NDateTimeUnitSerializer.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Provided for serialization support
            </summary>
      <param name="info">
      </param>
      <param name="context">
      </param>
    </member>
    <member name="M:Nevron.NDateTimeUnitSerializer.GetRealObject(System.Runtime.Serialization.StreamingContext)">
      <summary>
            Overriden to return an instance of a datetime unit
            </summary>
      <param name="context">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.NDateTimeUnitSerializer.Object">
      <summary>
            Returns the object represented by this surrogate serializer
            </summary>
    </member>
    <member name="T:Nevron.Dom.NServiceManager">
      <summary>
            The NServiceManager class is used to maintain a collection of services
            </summary>
      <remarks>
            The NServiceManager can hold only one service of a specific type. 
            </remarks>
    </member>
    <member name="M:Nevron.Dom.NServiceManager.UpdateReferences(Nevron.INReferenceProvider)">
      <summary>
            Updates the references stored by the object
            </summary>
      <remarks>
            The object can query the specified provider for references 
            </remarks>
      <param name="provider">provider from which to obtain references</param>
    </member>
    <member name="M:Nevron.Dom.NServiceManager.CreateNonSerializedObjects">
      <summary>
            Creates any non serialized objects, which the holder posseses
            </summary>
    </member>
    <member name="M:Nevron.Dom.NServiceManager.GetReferenceProvider">
      <summary>
            Obtains the reference provider to which the object is currently attached
            </summary>
      <returns>reference provider</returns>
    </member>
    <member name="M:Nevron.Dom.NServiceManager.ProvideReference(System.Type)">
      <summary>
            Can provide a reference to itself or any of the services it contains
            </summary>
      <param name="referenceType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Dom.NServiceManager.GetServiceOfType(System.Type)">
      <summary>
            Gets a reference to a service of the specified type
            </summary>
      <param name="serviceType">service type</param>
      <returns>service instance or null if a service of this type cannot be located</returns>
    </member>
    <member name="M:Nevron.Dom.NServiceManager.AddService(Nevron.Dom.INService)">
      <summary>
            Adds the specified service
            </summary>
      <remarks>
            The method will check whether a service of this type already exists and if so will throw an exception. 
            It will then add the service and call the OnServiceAdded method.
            </remarks>
      <param name="service">service to add</param>
    </member>
    <member name="M:Nevron.Dom.NServiceManager.RemoveService(Nevron.Dom.INService)">
      <summary>
            Removes the specified service
            </summary>
      <remarks>
            The method will check whether the service exists and if it does not will throw an exception. 
            It will then add the service and call the OnServiceAdded method.
            </remarks>
      <param name="service">service to remove</param>
    </member>
    <member name="M:Nevron.Dom.NServiceManager.ContainsServiceOfType(System.Type)">
      <summary>
            Determines whether the document contains a service from the specified type
            </summary>
      <param name="serviceType">service type</param>
      <returns>true if a service of this type is contained, otherwise false</returns>
    </member>
    <member name="M:Nevron.Dom.NServiceManager.StartAllServices">
      <summary>
            Starts all services
            </summary>
    </member>
    <member name="M:Nevron.Dom.NServiceManager.StopAllServices">
      <summary>
            Stops all services
            </summary>
    </member>
    <member name="M:Nevron.Dom.NServiceManager.PauseAllServices">
      <summary>
            Pauses all services
            </summary>
    </member>
    <member name="M:Nevron.Dom.NServiceManager.ResumeAllServices">
      <summary>
            Resumes all services
            </summary>
    </member>
    <member name="M:Nevron.Dom.NServiceManager.RestartServices">
      <summary>
            Restarts all services
            </summary>
    </member>
    <member name="M:Nevron.Dom.NServiceManager.StopServices">
      <summary>
            Stops all services
            </summary>
    </member>
    <member name="M:Nevron.Dom.NServiceManager.PauseServices">
      <summary>
            Pauses all services
            </summary>
    </member>
    <member name="M:Nevron.Dom.NServiceManager.StartServices">
      <summary>
            Starts all services
            </summary>
    </member>
    <member name="M:Nevron.Dom.NServiceManager.OnServiceAdded(Nevron.Dom.INService)">
      <summary>
            Called when the specified service has been added to the manager
            </summary>
      <param name="service">
      </param>
    </member>
    <member name="M:Nevron.Dom.NServiceManager.OnServiceRemoved(Nevron.Dom.INService)">
      <summary>
            Called when the specified service has been removed from the manager
            </summary>
      <param name="service">
      </param>
    </member>
    <member name="M:Nevron.Dom.NServiceManager.OnServicesChanged">
      <summary>
            Called when the services maintained by the manager have changed
            </summary>
    </member>
    <member name="E:Nevron.Dom.NServiceManager.ServicesChanged">
      <summary>
            Fired when the services contained by the manager have changed
            </summary>
    </member>
    <member name="P:Nevron.Dom.NServiceManager.Services">
      <summary>
            Obtains an array containing all registered services
            </summary>
    </member>
    <member name="T:Nevron.Collections.NSystemArray">
      <summary>
            Summary description for NSystemArray.
            </summary>
    </member>
    <member name="M:Nevron.Collections.NSystemArray.Add(System.Object)">
      <summary>
            Adds the object after the last item
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:Nevron.Collections.NSystemArray.Clear">
      <summary>
            Clears the array
            </summary>
    </member>
    <member name="M:Nevron.Collections.NSystemArray.Insert(System.Int32,System.Object)">
      <summary>
            Inserts the object at the specified index
            </summary>
      <param name="index">
      </param>
      <param name="value">
      </param>
    </member>
    <member name="M:Nevron.Collections.NSystemArray.RemoveAt(System.Int32)">
      <summary>
            Removes the item at the specified index
            </summary>
      <param name="index">
      </param>
    </member>
    <member name="M:Nevron.Collections.NSystemArray.IndexOf(System.Object)">
      <summary>
            Returns the index of the specified object in the array
            </summary>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Collections.NSystemArray.IndexOf(System.Int32,System.Object)">
      <summary>
            Returns the index of the specified object in the array
            </summary>
      <param name="startIndex">
      </param>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Collections.NSystemArray.CopyTo(Nevron.Collections.NSystemArray@,System.Int32,System.Int32,System.Int32)">
      <summary>
      </summary>
      <param name="array">
      </param>
      <param name="startIndex">
      </param>
      <param name="count">
      </param>
    </member>
    <member name="P:Nevron.Collections.NSystemArray.Capacity">
      <summary>
            Gets or sets the capacity of the array
            </summary>
    </member>
    <member name="T:Nevron.Collections.NSingleList">
      <summary>
            Represents a list of float (single) values
            </summary>
    </member>
    <member name="M:Nevron.Collections.NSingleList.Add(System.Single)">
      <summary>
            Adds the int to the end of the collection
            </summary>
      <param name="value">
      </param>
      <returns>The zero-based index at which the new element is inserted</returns>
    </member>
    <member name="M:Nevron.Collections.NSingleList.AddRange(System.Single[])">
      <summary>
            Copies the elements of a float array to the end of the collection.
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:Nevron.Collections.NSingleList.AddRange(Nevron.Collections.NSingleList)">
      <summary>
            Copies the elements of a single list to the end of the collection.
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:Nevron.Collections.NSingleList.Contains(System.Single)">
      <summary>
            Determines whether the specified float is in the collection
            </summary>
      <param name="value">
      </param>
      <returns>if value is found in the collection otherwise, false</returns>
    </member>
    <member name="M:Nevron.Collections.NSingleList.CopyTo(System.Single[],System.Int32)">
      <summary>
            Copies the entire collection values to a one-dimensional array of floats, starting at the specified index of the target array.
            </summary>
      <param name="array">The one-dimensional array of floats that is the destination of the elements copied from collection. The Array must have zero-based indexing</param>
      <param name="index">The zero-based index in array at which copying begins.</param>
    </member>
    <member name="M:Nevron.Collections.NSingleList.IndexOf(System.Single)">
      <summary>
            Searches for the specified float value and returns the zero-based index of the first occurrence within the collection
            </summary>
      <param name="value">the float value to locate</param>
      <returns>index of the int value</returns>
    </member>
    <member name="M:Nevron.Collections.NSingleList.Insert(System.Int32,System.Single)">
      <summary>
            Inserts the float value at the specified index
            </summary>
      <param name="index">index at which value is inserted</param>
      <param name="value">float value</param>
    </member>
    <member name="M:Nevron.Collections.NSingleList.Remove(System.Single)">
      <summary>
            Removes the first occurrence of a specific float value from the collection
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:Nevron.Collections.NSingleList.Max">
      <summary>
            Gets the max float value in the list
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Collections.NSingleList.Min">
      <summary>
            Gets the min float value in the list
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Collections.NSingleList.ToArray">
      <summary>
            Converts the single list to a system array
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Collections.NSingleList.Clone">
      <summary>
            Creates an exact replica of this object.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.Collections.NSingleList.Sum">
      <summary>
            Gets the sum of all items in the list
            </summary>
    </member>
    <member name="T:Nevron.Xml.NXmlNodeWriter">
      <summary>
            NXmlNodeWriter builds a tree of XmlNodes based on the XmlWriter methods that are called.
            </summary>
    </member>
    <member name="M:Nevron.Xml.NXmlNodeWriter.Close">
      <summary>
            This auto-closes any open elements and puts the writer in the WriteState.Closed state.
            </summary>
    </member>
    <member name="M:Nevron.Xml.NXmlNodeWriter.Flush">
      <summary>
            This is a noop.
            </summary>
    </member>
    <member name="M:Nevron.Xml.NXmlNodeWriter.LookupPrefix(System.String)">
      <summary>
            Returns the result of GetPrefixOfNamespace on the current node.
            </summary>
      <param name="namespaceURI">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Xml.NXmlNodeWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>
            This method is implemented using Convert.ToBase64String.
            </summary>
    </member>
    <member name="M:Nevron.Xml.NXmlNodeWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>
            This is implementd using a temporary XmlTextWriter to turn the 
            given binary blob into a string, then it calls WriteString with
            the result.
            </summary>
    </member>
    <member name="M:Nevron.Xml.NXmlNodeWriter.WriteCData(System.String)">
      <summary>
            Creates a System.Xml.XmlCDataSection node.
            </summary>
    </member>
    <member name="M:Nevron.Xml.NXmlNodeWriter.WriteCharEntity(System.Char)">
      <summary>
            Writes the given char as a string.  The XmlDocument has no representation for 
            character entities, so the fact that this was called will be lost.
            </summary>
    </member>
    <member name="M:Nevron.Xml.NXmlNodeWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
      <summary>
            Calls WriteString with new string(buffer, index, count).
            </summary>
    </member>
    <member name="M:Nevron.Xml.NXmlNodeWriter.WriteComment(System.String)">
      <summary>
            Creates an System.Xml.XmlComment node.
            </summary>
    </member>
    <member name="M:Nevron.Xml.NXmlNodeWriter.WriteDocType(System.String,System.String,System.String,System.String)">
      <summary>
            Creates an System.Xml.XmlDocumentType node.
            </summary>
    </member>
    <member name="M:Nevron.Xml.NXmlNodeWriter.WriteEndAttribute">
      <summary>
            Closes the previous WriteStartAttribute call.
            </summary>
    </member>
    <member name="M:Nevron.Xml.NXmlNodeWriter.WriteEndDocument">
      <summary>
            Closes any open elements and puts the writer back in the Start state.
            </summary>
    </member>
    <member name="M:Nevron.Xml.NXmlNodeWriter.WriteEndElement">
      <summary>
            Closes the previous WriteStartElement call.
            </summary>
    </member>
    <member name="M:Nevron.Xml.NXmlNodeWriter.WriteEntityRef(System.String)">
      <summary>
            Creates a System.Xml.XmlEntityReference node.
            </summary>
      <param name="name">The name of the entity reference</param>
    </member>
    <member name="M:Nevron.Xml.NXmlNodeWriter.WriteFullEndElement">
      <summary>
            The DOM does not preserve this information, so this is equivalent to WriteEndElement.
            </summary>
    </member>
    <member name="M:Nevron.Xml.NXmlNodeWriter.WriteName(System.String)">
      <summary>
            Calls WriteString if the name is a valid XML name.
            </summary>
    </member>
    <member name="M:Nevron.Xml.NXmlNodeWriter.WriteNmToken(System.String)">
      <summary>
            Calls WriteString if the name is a valid XML NMTOKEN.
            </summary>
    </member>
    <member name="M:Nevron.Xml.NXmlNodeWriter.WriteProcessingInstruction(System.String,System.String)">
      <summary>
            Creates a System.Xml.XmlProcessingInstruction node.
            </summary>
    </member>
    <member name="M:Nevron.Xml.NXmlNodeWriter.WriteQualifiedName(System.String,System.String)">
      <summary>
            Looks up the prefix in scope for the given namespace and calls WriteString
            with the prefix+":"+localName (or just localName if the prefix is the empty string).
            </summary>
    </member>
    <member name="M:Nevron.Xml.NXmlNodeWriter.WriteRaw(System.String)">
      <summary>
            WriteRaw writes out the given string "unescaped", in other words it better be well formed XML markup.
            So for the NXmlNodeWriter we parse this string and build the resulting tree, so it maps to setting the
            InnerXml property.  
            </summary>
      <param name="data">
      </param>
    </member>
    <member name="M:Nevron.Xml.NXmlNodeWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
      <summary>
            Calls WriteRaw(string) with new string(buffer, index, count)
            </summary>
    </member>
    <member name="M:Nevron.Xml.NXmlNodeWriter.WriteStartAttribute(System.String,System.String,System.String)">
      <summary>
            Creates a System.Xml.XmlAttribute node.
            </summary>
    </member>
    <member name="M:Nevron.Xml.NXmlNodeWriter.WriteStartDocument">
      <summary>
            Writes the XmlDeclaration node with a standalone attribute.  This is only allowed when the
            writer is in the Start state, which only happens if the writer was constructed with an
            XmlDocument object.
            </summary>
    </member>
    <member name="M:Nevron.Xml.NXmlNodeWriter.WriteStartDocument(System.Boolean)">
      <summary>
            Writes the XmlDeclaration node with a standalone attribute.  This is only allowed when the
            writer is in the Start state, which only happens if the writer was constructed with an
            XmlDocument object.
            </summary>
      <param name="standalone">If true, standalone attribute has value "yes" otherwise it has the value "no".</param>
    </member>
    <member name="M:Nevron.Xml.NXmlNodeWriter.WriteStartElement(System.String,System.String,System.String)">
      <summary>
            Creates a System.Xml.XmlElement node.
            </summary>
    </member>
    <member name="M:Nevron.Xml.NXmlNodeWriter.WriteString(System.String)">
      <summary>
            Creates a System.Xml.XmlText node.  If the current node is already an XmlText
            node it appends the text to that node.
            </summary>
    </member>
    <member name="M:Nevron.Xml.NXmlNodeWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
      <summary>
            Calls WriteString with the character data.
            </summary>
    </member>
    <member name="M:Nevron.Xml.NXmlNodeWriter.WriteWhitespace(System.String)">
      <summary>
            Create a System.Xml.XmlWhitespace node.
            </summary>
    </member>
    <member name="P:Nevron.Xml.NXmlNodeWriter.WriteState">
      <summary>
            Return the current state of the writer.
            </summary>
    </member>
    <member name="P:Nevron.Xml.NXmlNodeWriter.XmlLang">
      <summary>
            Return the current XmlLang state.  This does not have an efficient implementation, so use at your own risk.
            </summary>
    </member>
    <member name="P:Nevron.Xml.NXmlNodeWriter.XmlSpace">
      <summary>
            Return the current XmlSpace state.  This does not have an efficient implementation, so use at your own risk.
            </summary>
    </member>
    <member name="T:Nevron.NLicense">
      <summary>
            Represents a license to use Nevron components.
            </summary>
    </member>
    <member name="M:Nevron.NLicense.Dispose">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.NLicense.LicenseKey">
      <summary>
            Returns the license key.
            </summary>
    </member>
    <member name="P:Nevron.NLicense.LicenseKeys">
      <summary>
            Returns the license keys associated with this license
            </summary>
    </member>
    <member name="P:Nevron.NLicense.LicenseKeysArray">
      <summary>
            Returns the license keys associated with this license
            </summary>
    </member>
    <member name="T:Nevron.Serialization.NTrueMetadataFilter">
      <summary>
            Blank meta data filter.
            </summary>
    </member>
    <member name="M:Nevron.Serialization.NTrueMetadataFilter.FilterType(System.Type)">
      <summary>
            Returns true if the type is filtered.
            </summary>
      <param name="type">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Serialization.NTrueMetadataFilter.FilterMemberInfo(System.Reflection.MemberInfo)">
      <summary>
            Returns true if the member info is filtered.
            </summary>
      <param name="memberInfo">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.FormulaEngine.NVariableCollection">
      <summary>
            The NVariableCollection class represents a collection in which variable values are identified by their names
            </summary>
      <remarks>
            The NVariableCollection serves as a dictionary, which associates a NVariant value with each variable name, 
            which can appear in an expression.
            </remarks>
    </member>
    <member name="M:Nevron.FormulaEngine.NVariableCollection.Add(System.String,Nevron.FormulaEngine.NVariant)">
      <summary>
            Adds a new variable with the specified value
            </summary>
      <param name="name">
      </param>
      <param name="val">
      </param>
    </member>
    <member name="M:Nevron.FormulaEngine.NVariableCollection.Remove(System.String)">
      <summary>
            Removes the variable with the specified name
            </summary>
      <param name="name">
      </param>
    </member>
    <member name="M:Nevron.FormulaEngine.NVariableCollection.Contains(System.String)">
      <summary>
            Determines whether the variable with the specified name is contained in this collection
            </summary>
      <param name="name">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaEngine.NVariableCollection.Clear">
      <summary>
            Removes all variables
            </summary>
    </member>
    <member name="P:Nevron.FormulaEngine.NVariableCollection.Names">
      <summary>
            Gets a reference to the collection of names contained in this collection
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.FormulaEngine.NVariableCollection.Values">
      <summary>
            Gets a reference to the collection of values contained in this collection
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.FormulaEngine.VariantType">
      <summary>
            Enumerates the possible variant types
            </summary>
    </member>
    <member name="F:Nevron.FormulaEngine.VariantType.Empty">
      <summary>
            Empty
            </summary>
    </member>
    <member name="F:Nevron.FormulaEngine.VariantType.Array">
      <summary>
            An array of variants
            </summary>
    </member>
    <member name="F:Nevron.FormulaEngine.VariantType.Boolean">
      <summary>
            Boolean
            </summary>
    </member>
    <member name="F:Nevron.FormulaEngine.VariantType.Char">
      <summary>
            Char
            </summary>
    </member>
    <member name="F:Nevron.FormulaEngine.VariantType.SByte">
      <summary>
            SByte
            </summary>
    </member>
    <member name="F:Nevron.FormulaEngine.VariantType.Byte">
      <summary>
            Byte
            </summary>
    </member>
    <member name="F:Nevron.FormulaEngine.VariantType.Int16">
      <summary>
            Int16
            </summary>
    </member>
    <member name="F:Nevron.FormulaEngine.VariantType.Int32">
      <summary>
            Int32
            </summary>
    </member>
    <member name="F:Nevron.FormulaEngine.VariantType.Int64">
      <summary>
            Int64
            </summary>
    </member>
    <member name="F:Nevron.FormulaEngine.VariantType.UInt16">
      <summary>
            UInt16
            </summary>
    </member>
    <member name="F:Nevron.FormulaEngine.VariantType.UInt32">
      <summary>
            UInt32
            </summary>
    </member>
    <member name="F:Nevron.FormulaEngine.VariantType.UInt64">
      <summary>
            UInt64
            </summary>
    </member>
    <member name="F:Nevron.FormulaEngine.VariantType.Single">
      <summary>
            Single
            </summary>
    </member>
    <member name="F:Nevron.FormulaEngine.VariantType.Double">
      <summary>
            Double
            </summary>
    </member>
    <member name="F:Nevron.FormulaEngine.VariantType.Decimal">
      <summary>
            Decimal
            </summary>
    </member>
    <member name="F:Nevron.FormulaEngine.VariantType.DateTime">
      <summary>
            Date time
            </summary>
    </member>
    <member name="F:Nevron.FormulaEngine.VariantType.TimeSpan">
      <summary>
            Time span
            </summary>
    </member>
    <member name="F:Nevron.FormulaEngine.VariantType.String">
      <summary>
            String
            </summary>
    </member>
    <member name="T:Nevron.FormulaEngine.OperatorType">
      <summary>
            Enumerates the currently supported set of operators
            </summary>
    </member>
    <member name="F:Nevron.FormulaEngine.OperatorType.UnaryPlus">
      <summary>
            "+" - Unary Plus 
            </summary>
    </member>
    <member name="F:Nevron.FormulaEngine.OperatorType.UnaryMinus">
      <summary>
            "-" - Unary Minus
            </summary>
    </member>
    <member name="F:Nevron.FormulaEngine.OperatorType.Addition">
      <summary>
            "+" - Arithmetic addition
            </summary>
    </member>
    <member name="F:Nevron.FormulaEngine.OperatorType.Subtraction">
      <summary>
            "-" - Arithmetic subtraction
            </summary>
    </member>
    <member name="F:Nevron.FormulaEngine.OperatorType.Multiplication">
      <summary>
            "*" - Arithmetic multiplication
            </summary>
    </member>
    <member name="F:Nevron.FormulaEngine.OperatorType.Division">
      <summary>
            "\" - Arithmetic division
            </summary>
    </member>
    <member name="F:Nevron.FormulaEngine.OperatorType.Exponentiation">
      <summary>
            "^" - Arithmetic exponentiation
            </summary>
    </member>
    <member name="F:Nevron.FormulaEngine.OperatorType.EqualTo">
      <summary>
            "=" - Logical Equal To
            </summary>
    </member>
    <member name="F:Nevron.FormulaEngine.OperatorType.GreaterThan">
      <summary>
            Logical Greater Than
            </summary>
    </member>
    <member name="F:Nevron.FormulaEngine.OperatorType.LessThan">
      <summary>
            Logical Greater Than
            </summary>
    </member>
    <member name="F:Nevron.FormulaEngine.OperatorType.GreaterThanOrEqualTo">
      <summary>
            Logical Greater Than Or Equal To
            </summary>
    </member>
    <member name="F:Nevron.FormulaEngine.OperatorType.LessThanOrEqualTo">
      <summary>
            Logical Less Than Or Equal To
            </summary>
    </member>
    <member name="F:Nevron.FormulaEngine.OperatorType.NotEqualTo">
      <summary>
            Logical Not Equal To
            </summary>
    </member>
    <member name="F:Nevron.FormulaEngine.OperatorType.StringConcatenation">
      <summary>
            String concatenation
            </summary>
    </member>
    <member name="T:Nevron.Dom.INDocument">
      <summary>
            Implemented by root elements (i.e. documents)
            </summary>
    </member>
    <member name="M:Nevron.Dom.INDocument.GetElementFromId(System.Int32)">
      <summary>
            Obtains an element from its id
            </summary>
      <param name="id">element id</param>
      <returns>reference to the element if it was found, otherwise null</returns>
    </member>
    <member name="M:Nevron.Dom.INDocument.GetElementFromUniqueId(System.Guid)">
      <summary>
            Obtains an element from its unique id
            </summary>
      <param name="uid">unique id</param>
      <returns>reference to the element if it was found, otherwise null</returns>
    </member>
    <member name="M:Nevron.Dom.INDocument.RegisterElement(Nevron.Dom.INElement)">
      <summary>
            Registers the specified element in the document
            </summary>
      <param name="element">element to register</param>
    </member>
    <member name="M:Nevron.Dom.INDocument.UnregisterElement(Nevron.Dom.INElement)">
      <summary>
            Unregisters the specified element from the document
            </summary>
      <param name="element">element to unregister</param>
    </member>
    <member name="T:Nevron.Dom.NElementAtomIdentifier">
      <summary>
            Identifies an atom contained in an element.
            </summary>
    </member>
    <member name="M:Nevron.Dom.NElementAtomIdentifier.ToString">
      <summary>
            Returns the string representation of this identifier
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Dom.NElementAtomIdentifier.FindInDocument(Nevron.Dom.INDocument)">
      <summary>
            Returns the object represented by this identifier or null if not 
            present in the specified document.
            </summary>
      <param name="document">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Dom.NElementAtomIdentifier.ToString(System.Globalization.CultureInfo)">
      <summary>
            Converts this identifier to its string representation
            </summary>
      <param name="cultureInfo">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.Dom.NElementAtomIdentifier.Type">
      <summary>
            Gets the identifier type
            </summary>
    </member>
    <member name="T:Nevron.Collections.NDateTimeSpanList">
      <summary>
            Represents a list of date time span values
            </summary>
    </member>
    <member name="M:Nevron.Collections.NDateTimeSpanList.Add(Nevron.NDateTimeSpan)">
      <summary>
            Adds the date time span to the end of the collection
            </summary>
      <param name="value">
      </param>
      <returns>The zero-based index at which the new element is inserted</returns>
    </member>
    <member name="M:Nevron.Collections.NDateTimeSpanList.AddRange(Nevron.NDateTimeSpan[])">
      <summary>
            Copies the elements of a NDateTimeSpan array to the end of the collection.
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:Nevron.Collections.NDateTimeSpanList.AddRange(Nevron.Collections.NDateTimeSpanList)">
      <summary>
            Copies the elements of a NDateTimeSpan list to the end of the collection.
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:Nevron.Collections.NDateTimeSpanList.Contains(Nevron.NDateTimeSpan)">
      <summary>
            Determines whether the specified NDateTimeSpan is in the collection
            </summary>
      <param name="value">
      </param>
      <returns>if value is found in the collection otherwise, false</returns>
    </member>
    <member name="M:Nevron.Collections.NDateTimeSpanList.CopyTo(Nevron.NDateTimeSpan[],System.Int32)">
      <summary>
            Copies the entire collection values to a one-dimensional array of NDateTimeSpans, starting at the specified index of the target array.
            </summary>
      <param name="array">The one-dimensional array of NDateTimeSpans that is the destination of the elements copied from collection. The Array must have zero-based indexing</param>
      <param name="index">The zero-based index in array at which copying begins.</param>
    </member>
    <member name="M:Nevron.Collections.NDateTimeSpanList.IndexOf(Nevron.NDateTimeSpan)">
      <summary>
            Searches for the specified NDateTimeSpan value and returns the zero-based index of the first occurrence within the collection
            </summary>
      <param name="value">the NDateTimeSpan value to locate</param>
      <returns>index of the int value</returns>
    </member>
    <member name="M:Nevron.Collections.NDateTimeSpanList.Insert(System.Int32,Nevron.NDateTimeSpan)">
      <summary>
            Inserts the NDateTimeSpan value at the specified index
            </summary>
      <param name="index">index at which value is inserted</param>
      <param name="value">NDateTimeSpan value</param>
    </member>
    <member name="M:Nevron.Collections.NDateTimeSpanList.Remove(Nevron.NDateTimeSpan)">
      <summary>
            Removes the first occurrence of a specific NDateTimeSpan value from the collection
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:Nevron.Collections.NDateTimeSpanList.ToArray">
      <summary>
            Converts the NDateTimeSpan list to a system array
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Collections.NDateTimeSpanList.GetTimeSpansInTicks">
      <summary>
            Obtains the time spans in ticks
            </summary>
      <returns>null if not all time spans can be converted to ticks</returns>
      <remarks>
            Some date/time units do not have a tick representation. For example the month date time unit because 
            it's number of days may vary from month to month. Other units that do not have a tick representation include year, half year, quarter year, decade and century.
            </remarks>
    </member>
    <member name="M:Nevron.Collections.NDateTimeSpanList.Multiply(System.Int32)">
      <summary>
            Multiplies the date time units contained in the list by a multiplier.
            </summary>
    </member>
    <member name="M:Nevron.Collections.NDateTimeSpanList.AddToDateTime(System.DateTime)">
      <summary>
            Adds the date time spans to the specified DateTime object.
            </summary>
      <param name="dateTime">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Collections.NDateTimeSpanList.AddToDateTimeMultiplied(System.DateTime,System.Int64)">
      <summary>
            Adds the date time spans to the specified DateTime multiplied by the specified multiplier.
            </summary>
      <param name="dateTime">
      </param>
      <param name="multiplier">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Collections.NDateTimeSpanList.SusbstractFromDateTimeMultiplied(System.DateTime,System.Int64)">
      <summary>
            Substracts the date time spans from the specified DateTime multiplied by the specified multiplier.
            </summary>
      <param name="dateTime">
      </param>
      <param name="multiplier">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Collections.NDateTimeSpanList.GetSpanCountInRange(Nevron.NDateTimeRange)">
      <summary>
            Obtains the number of spans that can fit in the specified range. 
            </summary>
      <param name="range">the date/time range</param>
    </member>
    <member name="M:Nevron.Collections.NDateTimeSpanList.Clone">
      <summary>
            Creates an exact replica of this object.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.Collections.NDateTimeSpanList.IsRegular">
      <summary>
            Returns true of the span list consists of regular units
            </summary>
    </member>
    <member name="P:Nevron.Collections.NDateTimeSpanList.Ticks">
      <summary>
            Returns the numer of ticks in this date time span list
            </summary>
    </member>
    <member name="T:Nevron.NMonthDateTimeUnit">
      <summary>
            Represents the month date time unit.
            </summary>
    </member>
    <member name="M:Nevron.NMonthDateTimeUnit.Add(System.DateTime,System.Int64)">
      <summary>
            Add the unitCount to the dateTime.
            </summary>
      <param name="dateTime">
      </param>
      <param name="unitCount">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.NMonthDateTimeUnit.Ticks">
      <summary>
            Returns the number of ticks in this date time unit
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.NMonthDateTimeUnit.IsRegular">
      <summary>
            Returns true if the unit is regular (e.g. always expressed with a fixed number of ticks)
            </summary>
    </member>
    <member name="P:Nevron.NMonthDateTimeUnit.DateTimeUnit">
      <summary>
            The date/time unit enum value.
            </summary>
    </member>
    <member name="T:Nevron.Serialization.NPrimitiveTypeEnumAttribute">
      <summary>
            Summary description for NPrimitiveTypeEnumAttribute.
            </summary>
    </member>
    <member name="F:Nevron.Serialization.NPrimitiveTypeEnumAttribute.OriginType">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Serialization.NPrimitiveTypeEnumAttribute.PrimitiveType">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.Serialization.NTypeActivator">
      <summary>
            Summary description for NTypeActivator.
            </summary>
    </member>
    <member name="T:Nevron.Serialization.NTypeInfo">
      <summary>
            Summary description for NTypeInfo.
            </summary>
    </member>
    <member name="T:Nevron.Serialization.OMObjectType">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Serialization.OMObjectType.IdToTypeTable">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Serialization.OMObjectType.TypeToIdTable">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Serialization.OMObjectType.Element">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Serialization.OMObjectType.AttributeCollection">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Serialization.OMObjectType.Attribute">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Serialization.OMObjectType.Collection">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Serialization.OMObjectType.Item">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Serialization.OMObjectType.PrimitiveItem">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.Serialization.MemberType">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Serialization.MemberType.Field">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Serialization.MemberType.Property">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.Serialization.PersistencyFormat">
      <summary>
            Enumerates the persistency formats
            </summary>
    </member>
    <member name="F:Nevron.Serialization.PersistencyFormat.Binary">
      <summary>
            Binary
            </summary>
    </member>
    <member name="F:Nevron.Serialization.PersistencyFormat.XML">
      <summary>
            XML
            </summary>
    </member>
    <member name="F:Nevron.Serialization.PersistencyFormat.SOAP">
      <summary>
            SOAP
            </summary>
    </member>
    <member name="F:Nevron.Serialization.PersistencyFormat.CustomBinary">
      <summary>
            Custom binary format
            </summary>
    </member>
    <member name="F:Nevron.Serialization.PersistencyFormat.CustomXML">
      <summary>
            Custom XML format
            </summary>
    </member>
    <member name="T:Nevron.Serialization.StoragePartType">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Serialization.StoragePartType.Stream">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Serialization.StoragePartType.Storage">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Serialization.StoragePartType.StorageStream">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.Serialization.PrimitiveType">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Serialization.PrimitiveType.Unknown">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Serialization.PrimitiveType.Boolean">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Serialization.PrimitiveType.Byte">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Serialization.PrimitiveType.Char">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Serialization.PrimitiveType.Color">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Serialization.PrimitiveType.CultureInfo">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Serialization.PrimitiveType.Decimal">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Serialization.PrimitiveType.Double">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Serialization.PrimitiveType.EnumValue">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Serialization.PrimitiveType.Guid">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Serialization.PrimitiveType.Variant">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Serialization.PrimitiveType.Int16">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Serialization.PrimitiveType.Int32">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Serialization.PrimitiveType.Int64">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Serialization.PrimitiveType.Single">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Serialization.PrimitiveType.TimeSpan">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Serialization.PrimitiveType.Type">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Serialization.PrimitiveType.DateTime">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Serialization.PrimitiveType.UInt16">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Serialization.PrimitiveType.UInt32">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Serialization.PrimitiveType.UInt64">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Serialization.PrimitiveType.Null">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Serialization.PrimitiveType.String">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Serialization.PrimitiveType.PointInt32">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Serialization.PrimitiveType.PointF">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Serialization.PrimitiveType.SizeInt32">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Serialization.PrimitiveType.SizeF">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Serialization.PrimitiveType.RectangleInt32">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Serialization.PrimitiveType.RectangleF">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.Interop.Win32.NWin32">
      <summary>
            Common Win32 definitions
            </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWin32.AC_SRC_OVER">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWin32.AC_SRC_ALPHA">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWin32.ULW_COLORKEY">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWin32.ULW_ALPHA">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NWin32.ULW_OPAQUE">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.Interop.Win32.NWin32.STYLESTRUCT">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.Interop.Win32.NWin32.POINT">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.Interop.Win32.NWin32.SIZE">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.Interop.Win32.NWin32.RECT">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.Interop.Win32.NWin32.WINDOWPOS">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.Interop.Win32.NWin32.MOUSEHOOKSTRUCT">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.Interop.Win32.NWin32.MSLLHOOKSTRUCT">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.Interop.Win32.NWin32.CWPSTRUCT">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.Interop.Win32.NWin32.NCCALCSIZE_PARAMS">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.Interop.Win32.NWin32.NMHDR">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.Interop.Win32.NWin32.NMCUSTOMDRAW">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.Interop.Win32.NWin32.NMTVCUSTOMDRAW">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.Interop.Win32.NWin32.NMLVCUSTOMDRAW">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.Interop.Win32.NWin32.TV_ITEM">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.Interop.Win32.NWin32.SCROLLBARINFO">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.Interop.Win32.NWin32.SCROLLINFO">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.Interop.Win32.NComctl32">
      <summary>
            Summary description for NComctl32.
            </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NComctl32.CDDS_PREPAINT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NComctl32.CDDS_POSTPAINT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NComctl32.CDDS_PREERASE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NComctl32.CDDS_POSTERASE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NComctl32.CDDS_ITEM">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NComctl32.CDDS_ITEMPREPAINT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NComctl32.CDDS_ITEMPOSTPAINT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NComctl32.CDDS_ITEMPREERASE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NComctl32.CDDS_ITEMPOSTERASE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NComctl32.CDDS_SUBITEM">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NComctl32.CDDS_SUBITEMPREPAINT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NComctl32.CDRF_DODEFAULT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NComctl32.CDRF_NEWFONT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NComctl32.CDRF_SKIPDEFAULT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NComctl32.CDRF_NOTIFYPOSTPAINT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NComctl32.CDRF_NOTIFYITEMDRAW">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NComctl32.CDRF_NOTIFYSUBITEMDRAW">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NComctl32.CDRF_NOTIFYPOSTERASE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NComctl32.CDIS_SELECTED">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NComctl32.CDIS_GRAYED">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NComctl32.CDIS_DISABLED">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NComctl32.CDIS_CHECKED">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NComctl32.CDIS_FOCUS">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NComctl32.CDIS_DEFAULT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NComctl32.CDIS_HOT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NComctl32.CDIS_MARKED">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NComctl32.CDIS_INDETERMINATE">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NComctl32.TVM_INSERTITEM">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NComctl32.TVM_GETITEM">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NComctl32.TVM_SETITEM">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NComctl32.TVM_EDITLABEL">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NComctl32.TVM_GETISEARCHSTRING">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NComctl32.TVN_SELCHANGING">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NComctl32.TVN_SELCHANGED">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NComctl32.TVN_GETDISPINFO">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NComctl32.TVN_SETDISPINFO">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NComctl32.TVN_ITEMEXPANDING">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NComctl32.TVN_ITEMEXPANDED">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NComctl32.TVN_BEGINDRAG">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NComctl32.TVN_BEGINRDRAG">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NComctl32.TVN_BEGINLABELEDIT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NComctl32.TVN_ENDLABELEDIT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NComctl32.TCM_GETITEM">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NComctl32.TCM_SETITEM">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NComctl32.TCM_INSERTITEM">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NComctl32.TV_FIRST">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NComctl32.TV_INSERTITEM">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NComctl32.TVM_GETVISIBLECOUNT">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NComctl32.TVM_EXPAND">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NComctl32.NM_FIRST">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NComctl32.NM_CUSTOMDRAW">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.Interop.Win32.NComctl32.NM_NCHITTEST">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.Interop.Win32.NComctl32.ImageList_GetIcon(System.IntPtr,System.Int32,System.Int32)">
      <summary>
      </summary>
      <param name="hImgList">
      </param>
      <param name="index">
      </param>
      <param name="flags">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NComctl32.ImageList_AddIcon(System.IntPtr,System.IntPtr)">
      <summary>
      </summary>
      <param name="hImgList">
      </param>
      <param name="hIcon">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NComctl32.ImageList_GetImageCount(System.IntPtr)">
      <summary>
      </summary>
      <param name="hImgList">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Interop.Win32.NComctl32.ImageList_Destroy(System.IntPtr)">
      <summary>
      </summary>
      <param name="hImgList">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.FormulaEngine.NParenthesisElement">
      <summary>
            The NParenthesisElement class represents a formula element enclosed in parenthesis
            </summary>
    </member>
    <member name="M:Nevron.FormulaEngine.NParenthesisElement.Evaluate(Nevron.FormulaEngine.NFormulaEngine)">
      <summary>
            Evaluates the formula element. Overriden to return the result of the embedded element evaluation.
            </summary>
      <param name="engine">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaEngine.NParenthesisElement.ToTreeNode">
      <summary>
            Creates a tree node which represents this element
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.FormulaEngine.NParenthesisElement.Element">
      <summary>
            Gets a reference to the element which is enclosed in parenthesis
            </summary>
    </member>
    <member name="T:Nevron.Filters.NAssignableFromTypeFilter">
      <summary>
            Filters objects, which can be assigned to the specified target type
            </summary>
    </member>
    <member name="M:Nevron.Filters.NAssignableFromTypeFilter.Filter(System.Object)">
      <summary>
            Overriden to return true if the specified object type can be assigned to the target type
            </summary>
      <param name="obj">object to filter</param>
      <returns>true if the specified object type can be assigned to the target type, otherwise false</returns>
    </member>
    <member name="T:Nevron.Filters.NStepRangeFilter">
      <summary>
            Summary description for NStepRangeFilter.
            </summary>
    </member>
    <member name="M:Nevron.Filters.NStepRangeFilter.Filter(System.Object)">
      <summary>
            Filters the specified object
            </summary>
      <param name="obj">object to filter</param>
      <returns>
            true if the object satisfies the filter criteria, otherwise false
            </returns>
    </member>
    <member name="P:Nevron.Filters.NStepRangeFilter.OrderOrigin">
      <summary>
            Gets or sets the order origin
            </summary>
    </member>
    <member name="P:Nevron.Filters.NStepRangeFilter.StepFilterPairs">
      <summary>
            Gets or sets the step filter pairs.
            </summary>
      <value>The step filter pairs.</value>
    </member>
    <member name="T:Nevron.Filters.NStepFilterPair">
      <summary>
            Represents a pair of a range view step and associated range filter
            </summary>
    </member>
    <member name="P:Nevron.Filters.NStepFilterPair.Filter">
      <summary>
            Gets or sets the filter.
            </summary>
      <value>The filter.</value>
    </member>
    <member name="P:Nevron.Filters.NStepFilterPair.Step">
      <summary>
            Gets or sets the range view step.
            </summary>
      <value>The step.</value>
    </member>
    <member name="T:Nevron.Dom.NInsertElementOperation">
      <summary>
            Represents an operation, which is recorded when an element is about to be inserted in an element composite
            </summary>
    </member>
    <member name="M:Nevron.Dom.NInsertElementOperation.Undo(Nevron.Dom.NElementHistoryService)">
      <summary>
            Overriden to remove the element from the composite to which it was added
            </summary>
      <param name="service">reference to the history service</param>
    </member>
    <member name="M:Nevron.Dom.NInsertElementOperation.Redo(Nevron.Dom.NElementHistoryService)">
      <summary>
            Overriden to insert a copy of the the element to the composite
            </summary>
      <param name="service">reference to the history service</param>
    </member>
    <member name="P:Nevron.Dom.NInsertElementOperation.CompositeUniqueId">
      <summary>
            Gets the unique id of the composite element in which the element was inserted
            </summary>
    </member>
    <member name="P:Nevron.Dom.NInsertElementOperation.ElementIndex">
      <summary>
            Gets the index at which the element was inserted
            </summary>
    </member>
    <member name="P:Nevron.Dom.NInsertElementOperation.ElementCopy">
      <summary>
            Internally stored copy of the inserted element
            </summary>
    </member>
    <member name="T:Nevron.Dom.NAttributeStateChangeOperation">
      <summary>
            Represents an operation, which is recorded when the entire state or only fields of an attribute are about to be changed
            </summary>
    </member>
    <member name="M:Nevron.Dom.NAttributeStateChangeOperation.Execute(Nevron.Dom.NElementHistoryService)">
      <summary>
            Overriden to swap the state of the attrubute and the internally stored attrubute state
            </summary>
      <remarks>
            If the attribute implements the INHistoricalAttribute intreface, this method will call the 
            OnStateChangingFromHistory and OnElementStateChangedFromHistory properties with the hint specified in the constructor
            </remarks>
      <param name="service">reference to the history service</param>
    </member>
    <member name="P:Nevron.Dom.NAttributeStateChangeOperation.ElementUniqueId">
      <summary>
            Unique id used to resolve the element
            </summary>
    </member>
    <member name="P:Nevron.Dom.NAttributeStateChangeOperation.AttributeName">
      <summary>
            Full name of the element attribute
            </summary>
    </member>
    <member name="P:Nevron.Dom.NAttributeStateChangeOperation.Hint">
      <summary>
            Optional hint passed to the attribute in order to recognize the state change
            </summary>
    </member>
    <member name="P:Nevron.Dom.NAttributeStateChangeOperation.StateChange">
      <summary>
            Indicates whether the operation stored the entire attribute state or only the state of the specified fields
            </summary>
    </member>
    <member name="P:Nevron.Dom.NAttributeStateChangeOperation.AttributeCopy">
      <summary>
            Attribute copy in case the StateChange property is true
            </summary>
    </member>
    <member name="P:Nevron.Dom.NAttributeStateChangeOperation.FieldNames">
      <summary>
            Names of the fields whose values are saved in case the StateChange property is false
            </summary>
    </member>
    <member name="P:Nevron.Dom.NAttributeStateChangeOperation.FieldValuesCopies">
      <summary>
            Copies of the field values in case the StateChange property is false
            </summary>
    </member>
    <member name="T:Nevron.Dom.NHierarchicalIdentifier">
      <summary>
            Summary description for NHierarchicalIdentifier.
            </summary>
    </member>
    <member name="M:Nevron.Dom.NHierarchicalIdentifier.Copy(Nevron.Dom.NHierarchicalIdentifier,System.Int32)">
      <summary>
            Copies this identifier.
            </summary>
      <param name="id">
      </param>
      <param name="maxLength">
      </param>
    </member>
    <member name="M:Nevron.Dom.NHierarchicalIdentifier.GetCommonLength(Nevron.Dom.NHierarchicalIdentifier)">
      <summary>
            Returns the common length of the identifiers.
            </summary>
      <param name="id">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Dom.NHierarchicalIdentifier.Contains(Nevron.Dom.NHierarchicalIdentifier)">
      <summary>
            Returns true if this identifier contains the specified id.
            </summary>
      <param name="id">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Dom.NHierarchicalIdentifier.ToString">
      <summary>
            Returns the string representation of this identifier.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Dom.NHierarchicalIdentifier.FindInDocument(Nevron.Dom.INDocument)">
      <summary>
            Returns the object represented by this identifier or null if not 
            present in the specified document.
            </summary>
      <param name="document">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Dom.NHierarchicalIdentifier.ToString(System.Globalization.CultureInfo)">
      <summary>
            Converts this identifier to its string representation
            </summary>
      <param name="cultureInfo">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Dom.NHierarchicalIdentifier.CompareTo(System.Object)">
      <summary>
            Compares the current instance with another object of the same type. 
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Dom.NHierarchicalIdentifier.FromNode(Nevron.Dom.INNode)">
      <summary>
      </summary>
      <param name="node">
      </param>
    </member>
    <member name="F:Nevron.Dom.NHierarchicalIdentifier.m_Indices">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.Dom.NHierarchicalIdentifier.Length">
      <summary>
            The legth of this identifier.
            </summary>
    </member>
    <member name="P:Nevron.Dom.NHierarchicalIdentifier.IndexInParent">
      <summary>
            Returns the index in parent for the object represented by this identifier.
            </summary>
    </member>
    <member name="P:Nevron.Dom.NHierarchicalIdentifier.Indices">
      <summary>
            Returns the indices of the node to the root
            </summary>
    </member>
    <member name="P:Nevron.Dom.NHierarchicalIdentifier.Type">
      <summary>
            Gets the identifier type
            </summary>
    </member>
    <member name="T:Nevron.Dom.NNodeTreeEnumerator">
      <summary>
            The NNodeTreeEnumerator class represents a filtered enumerator, which can be used to 
            sequencially traverse a node subtree in PreOrder, PostOrder and BreadthFirst tree traveral order.
            </summary>
    </member>
    <member name="M:Nevron.Dom.NNodeTreeEnumerator.MoveNext">
      <summary>
            Advances the enumerator to the next node in the container (or its descendants)
            </summary>
      <returns>true if the enumerator was successfully advanced to the next node, false if the enumerator has passed the end of the container (or all its descendants)</returns>
    </member>
    <member name="M:Nevron.Dom.NNodeTreeEnumerator.Reset">
      <summary>
            Sets the enumerator to its initial position, which is before the container node argument passed in the constructor
            </summary>
    </member>
    <member name="P:Nevron.Dom.NNodeTreeEnumerator.Current">
      <summary>
            Obtains the current node 
            </summary>
      <remarks>
            This property will throw an InvalidOperationException exception if the enumerator has not been started, 
            or has ended.
            </remarks>
    </member>
    <member name="T:Nevron.Dom.NNodeTreeAttributeEnumerator">
      <summary>
            The NNodeTreeAttributeEnumerator class represents a filtered enumerator, which can be used to 
            sequentially traverse a node subtree in PreOrder, PostOrder and BreadthFirst tree traveral order and enumerate 
            the attributes of the visited nodes.
            </summary>
    </member>
    <member name="M:Nevron.Dom.NNodeTreeAttributeEnumerator.Reset">
      <summary>
            Sets the enumerator to its initial position, which is before the first attribute in the node container tree
            </summary>
    </member>
    <member name="M:Nevron.Dom.NNodeTreeAttributeEnumerator.MoveNext">
      <summary>
            Advances the enumerator to the next attribute in the node tree
            </summary>
      <returns>true if the enumerator was successfully advanced to the next attribute, false if the enumerator has passed the end of all attributes</returns>
    </member>
    <member name="P:Nevron.Dom.NNodeTreeAttributeEnumerator.Current">
      <summary>
            Obtains the current attribute
            </summary>
      <remarks>
            This property will throw an InvalidOperationException exception if the enumerator has not been started, or has ended.
            </remarks>
    </member>
    <member name="T:Nevron.Compression.NCompression">
      <summary>
            Implements compression helpers.
            </summary>
    </member>
    <member name="M:Nevron.Compression.NCompression.CompressStreamToBase64String(System.IO.Stream)">
      <summary>
            Compresses the input string and returns it as a base64 encoded string.
            </summary>
      <param name="stream">input stream to compress.</param>
      <returns>compressed base64 encoded string.</returns>
    </member>
    <member name="M:Nevron.Compression.NCompression.DecompressBase64ToStream(System.String)">
      <summary>
            Decompresses the input string and returns a stream representing it.
            </summary>
      <param name="str">base64 encoded string.</param>
      <returns>uncompressed stream.</returns>
    </member>
    <member name="T:Nevron.Collections.NInt32List">
      <summary>
            Represents a list of int (Int32) values
            </summary>
    </member>
    <member name="M:Nevron.Collections.NInt32List.Add(System.Int32)">
      <summary>
            Adds the int to the end of the collection
            </summary>
      <param name="value">
      </param>
      <returns>The zero-based index at which the new element is inserted</returns>
    </member>
    <member name="M:Nevron.Collections.NInt32List.AddRange(System.Int32[])">
      <summary>
            Copies the elements of a int array to the end of the collection.
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:Nevron.Collections.NInt32List.AddRange(Nevron.Collections.NInt32List)">
      <summary>
            Copies the elements of an int32 list to the end of the collection.
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:Nevron.Collections.NInt32List.Contains(System.Int32)">
      <summary>
            Determines whether the specified int is in the collection
            </summary>
      <param name="value">
      </param>
      <returns>if value is found in the collection otherwise, false</returns>
    </member>
    <member name="M:Nevron.Collections.NInt32List.CopyTo(System.Int32[],System.Int32)">
      <summary>
            Copies the entire collection values to a one-dimensional array of ints, starting at the specified index of the target array.
            </summary>
      <param name="array">The one-dimensional array of ints that is the destination of the elements copied from collection. The Array must have zero-based indexing</param>
      <param name="index">The zero-based index in array at which copying begins.</param>
    </member>
    <member name="M:Nevron.Collections.NInt32List.IndexOf(System.Int32)">
      <summary>
            Searches for the specified int value and returns the zero-based index of the first occurrence within the collection
            </summary>
      <param name="value">the int value to locate</param>
      <returns>index of the int value</returns>
    </member>
    <member name="M:Nevron.Collections.NInt32List.Insert(System.Int32,System.Int32)">
      <summary>
            Inserts the int value at the specified index
            </summary>
      <param name="index">index at which value is inserted</param>
      <param name="value">int value</param>
    </member>
    <member name="M:Nevron.Collections.NInt32List.Remove(System.Int32)">
      <summary>
            Removes the first occurrence of a specific int value from the collection
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:Nevron.Collections.NInt32List.Max">
      <summary>
            Gets the max int value in the list
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Collections.NInt32List.Min">
      <summary>
            Gets the min int value in the list
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Collections.NInt32List.ToArray">
      <summary>
            Converts the int list to a system array
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Collections.NInt32List.Clone">
      <summary>
            Creates an exact replica of this object.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.Collections.NInt32List.Sum">
      <summary>
            Gets the sum of all items in the list
            </summary>
    </member>
    <member name="T:Nevron.Collections.NArray">
      <summary>
            Array helpers
            </summary>
    </member>
    <member name="M:Nevron.Collections.NArray.Add(System.Type,System.Array,System.Object)">
      <summary>
            Adds an object instance to array.
            </summary>
      <param name="elementType">
      </param>
      <param name="array">
      </param>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Collections.NArray.Contains(System.Array,System.Object)">
      <summary>
            Returns true if the array contains the object
            </summary>
      <param name="array">
      </param>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Collections.NArray.IndexOf(System.Array,System.Object)">
      <summary>
            Returns the index of the object inside the array
            </summary>
      <param name="array">
      </param>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Collections.NArray.Insert(System.Type,System.Array,System.Int32,System.Object)">
      <summary>
            Inserts the object at the specified index in the array
            </summary>
      <param name="elementType">
      </param>
      <param name="array">
      </param>
      <param name="index">
      </param>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Collections.NArray.RemoveAt(System.Type,System.Array,System.Int32)">
      <summary>
            Removes the object at the specified index from the array
            </summary>
      <param name="elementType">
      </param>
      <param name="array">
      </param>
      <param name="index">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Collections.NArray.Remove(System.Type,System.Array,System.Object)">
      <summary>
            Removes an object from the array
            </summary>
      <param name="elementType">
      </param>
      <param name="array">
      </param>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Collections.NArray.Sort(System.Type,System.Array)">
      <summary>
            Sorts the array of the specified type
            </summary>
      <param name="elementType">
      </param>
      <param name="array">
      </param>
      <returns>
      </returns>
    </member>
  </members>
</doc>