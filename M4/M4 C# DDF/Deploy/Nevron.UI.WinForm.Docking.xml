<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Nevron.UI.WinForm.Docking</name>
  </assembly>
  <members>
    <member name="T:Nevron.UI.WinForm.Docking.NDockZone">
      <summary>
            Represents a splittable dock zone.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NDockZoneBase">
      <summary>
            Represents the base class for NDockZone objects.
            A dock zone is a logical area which might contains panels or other nested zones.
            This structure allows for creating complex layouts.
            The children zones are arranged according to the orientation of the zone.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.INDockZone">
      <summary>
            Represents a logical area where a dockable object may reside.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.INDockZoneChildContainer">
      <summary>
            Represents a generic container for INDockZoneChild instances.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.INDockZoneChild">
      <summary>
            Represents a generic object which might be parented by INDockZone instances.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INDockZoneChild.OnSizeInfoChanged(System.Object)">
      <summary>
            Notifies this child of a change in its SizeInfo member.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.INDockZoneChild.ParentZone">
      <summary>
            Gets the INDockZone where this object resides.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.INDockZoneChild.RootZone">
      <summary>
            Gets the root INDockZone of the zones tree.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.INDockZoneChild.Index">
      <summary>
            Gets or sets the index of this child in its container collection.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.INDockZoneChild.Bounds">
      <summary>
            Gets or sets the area this child occupies.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.INDockZoneChild.MinimumSize">
      <summary>
            Gets the minimum allowed size for this child.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.INDockZoneChild.SizeInfo">
      <summary>
            Gets or sets an object containing information about how this child should be treated by a layout engine.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.INDockZoneChild.IsEmpty">
      <summary>
            Gets a value indicating whether this child is empty.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INDockZoneChildContainer.RebuildIds">
      <summary>
            Rebuilds own and all children's identifiers.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INDockZoneChildContainer.AddChild(Nevron.UI.WinForm.Docking.INDockZoneChild)">
      <summary>
            Adds a INDockZoneChild object to the container.
            An exception will be thrown if the container cannot accept this child.
            </summary>
      <param name="child">The child to add.</param>
      <returns>The index at which the child was added.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INDockZoneChildContainer.AddChild(Nevron.UI.WinForm.Docking.INDockZoneChild,System.Int32)">
      <summary>
            Adds a INDockZoneChild object to the container at the specified index.
            An exception will be thrown if the container cannot accept this child.
            </summary>
      <param name="child">The specified child.</param>
      <param name="index">The preffered index.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INDockZoneChildContainer.RemoveChild(Nevron.UI.WinForm.Docking.INDockZoneChild)">
      <summary>
            Removes the specified child from the container.
            An exception will be thrown if the child is not parented by this container.
            </summary>
      <param name="child">The child to remove.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INDockZoneChildContainer.RemoveChildren">
      <summary>
            Removes all the currently contained children.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INDockZoneChildContainer.SetChildIndex(Nevron.UI.WinForm.Docking.INDockZoneChild,System.Int32)">
      <summary>
            Sets the index of the specified child within the container.
            </summary>
      <param name="child">The child which index is to be set</param>
      <param name="index">The preffered index.</param>
      <returns>True if operation was successful, false otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INDockZoneChildContainer.CanAcceptChild(Nevron.UI.WinForm.Docking.INDockZoneChild)">
      <summary>
            Checks whether the specified child can be added to the container.
            </summary>
      <param name="child">The child to check for.</param>
      <returns>True if can be added, false otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INDockZoneChildContainer.Contains(Nevron.UI.WinForm.Docking.INDockZoneChild)">
      <summary>
            Checks whether the container or one of its nested containers contains the specified child.
            </summary>
      <param name="child">The child to search for.</param>
      <returns>True if contained, false otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INDockZoneChildContainer.ContainsChildOfType(System.Type)">
      <summary>
            Determines whether a child of the specified type is contained within this container.
            </summary>
      <param name="type">The type to search for.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INDockZoneChildContainer.GetChildOfType(System.Type)">
      <summary>
            Gets any child instance of the specified type.
            </summary>
      <param name="type">The type to search for.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INDockZoneChildContainer.UpdateEmptyState">
      <summary>
            Updates
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.INDockZoneChildContainer.Children">
      <summary>
            Gets the collection of INDockZoneChild objects.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.INLayoutEngine">
      <summary>
            Represents a generic layout engine.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INLayoutEngine.PerformLayout">
      <summary>
            Performs layout logic.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INLayoutEngine.SuspendLayout">
      <summary>
            Suspends any layout.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INLayoutEngine.ResumeLayout(System.Boolean)">
      <summary>
            Resumes layout and optionally performs layout.
            </summary>
      <param name="performLayout">True to perform layout, false otherwise.</param>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.INLayoutEngine.IsSuspended">
      <summary>
            Gets a value whether this layout engine is currently suspended.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.INLayoutEngine.LayoutInfo">
      <summary>
            Gets information about layout operations.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.INUniqueID">
      <summary>
            Represents a simple interface for querying uniquely identifiable object.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.INUniqueID.ID">
      <summary>
            Gets or sets the unique identifier of this object.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INDockZone.Clone(System.Boolean)">
      <summary>
            Creates an exact copy of this instance and optionally assigns it the same id.
            </summary>
      <param name="sameID">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INDockZone.GetAnyParentSuspended">
      <summary>
            Searches up in the tree for a suspended parent.
            </summary>
      <returns>True if a suspended parent is found, false otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INDockZone.UpdateSplitters">
      <summary>
            Updates all the contained children which are splittable.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INDockZone.OnSplitterChange(Nevron.UI.WinForm.Docking.NDragInfo)">
      <summary>
            Gets notified of a splitter change.
            The default implementation updates the SizeInfo object of the contained children.
            </summary>
      <param name="info">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INDockZone.FindZone(System.Guid)">
      <summary>
            Recursively searches for a zone with the specified id.
            </summary>
      <param name="id">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INDockZone.MergeWithZone(Nevron.UI.WinForm.Docking.INDockZone)">
      <summary>
            Merges with the specified zone.
            The default processing will copy all the children from the specified zone to this one.
            </summary>
      <param name="zone">The zone to merge with.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INDockZone.MergeWithZone(Nevron.UI.WinForm.Docking.INDockZone,System.Boolean)">
      <summary>
            Merges with the specified zone and optionally uses its orientation.
            The default processing will copy all the children from the specified zone to this one.
            </summary>
      <param name="zone">The zone to merge with.</param>
      <param name="useZoneOrientation">True to use the specified zone's orientation, false otherwise.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INDockZone.Update">
      <summary>
            Updates the zone's state in the zones tree.
            The default processing will check whether the zone is empty and if so will disposes it.
            The method will recursively call parent's Update method.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INDockZone.CanUpdate">
      <summary>
            Checks whether the zone can be updated.
            For example a zone cannot be updated if it is refereced.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INDockZone.ContainsReferencedChild">
      <summary>
            Checks whether the zone contains referenced child.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INDockZone.CanDispose">
      <summary>
            Checks whether the zone can be disposed.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INDockZone.UpdateFromZone(Nevron.UI.WinForm.Docking.INDockZone)">
      <summary>
            Updates from the specified zone.
            By default this method will copy the SizeInfo and Padding values.
            </summary>
      <param name="zone">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INDockZone.GetLayoutEngine">
      <summary>
            Gets the current layout engine used by this zone.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.INDockZone.Disposing">
      <summary>
            Gets a value whether this zone is in a process of being disposed.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.INDockZone.Orientation">
      <summary>
            Gets or sets the orientation of the engine.
            That is the logic used when performing layout.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.INDockZone.DisplayRectangle">
      <summary>
            Gets the rectangle available for displaying child objects such as panels and nested zones.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.INDockZone.Container">
      <summary>
            Gets the INDockingPanelContainer where this zone resides.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.INDockZone.Referenced">
      <summary>
            Gets or sets a value whether this zone or any of its children is reserved as a
            placeholder for a INDockingPanel object which resides on another container or is hidden.
            If true the zone will not be automatically destroyed when it becomes empty.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.INDockZone.ReferenceCount">
      <summary>
            Gets the count of "Referenced = true" property set.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.INDockZone.Name">
      <summary>
            Gets pr sets the name of the zone. Used by designer serializers.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.INDockZone.LayoutEngine">
      <summary>
            Gets or sets the object responsible for layout operations upon zone's children.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.INDockZone.IsRoot">
      <summary>
            Determines whether this instance is the root for all zones.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZoneBase.Dispose">
      <summary>
            Releases all the resources used by this object.
            This method will recursively dispose all the nested children.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZoneBase.Dispose(System.Boolean)">
      <summary>
            Releases all resources used by this instance.
            </summary>
      <param name="disposing">True to release both managed and unmanaged resources, false otherwise.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZoneBase.PerformDispose">
      <summary>
            Performs the core dispose logic.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZoneBase.Clone">
      <summary>
            Creates an exact copy of this object.
            </summary>
      <returns>The newly created instance.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZoneBase.Clone(System.Boolean)">
      <summary>
            Clones the current instance and optionally assigns the new one the same id.
            </summary>
      <param name="sameID">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZoneBase.PerformLayout">
      <summary>
            Performs layout logic upon all children.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZoneBase.SuspendLayout">
      <summary>
            Suspends any layout logic.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZoneBase.ResumeLayout(System.Boolean)">
      <summary>
            Resumes layout logic and optionally forces the zone to perform layout.
            </summary>
      <param name="performLayout">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZoneBase.OnSplitterChange(Nevron.UI.WinForm.Docking.NDragInfo)">
      <summary>
            Notifies the zone that a splitter change occured.
            </summary>
      <param name="info">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZoneBase.UpdateSplitters">
      <summary>
            Forces the zone to update all splittable children.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZoneBase.FindZone(System.Guid)">
      <summary>
            Recursively searches for a child with the specified id.
            </summary>
      <param name="id">The id to search for.</param>
      <returns>Null if no match was found, the zone with the specified id otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZoneBase.MergeWithZone(Nevron.UI.WinForm.Docking.INDockZone)">
      <summary>
            Merges with the specified zone.
            The default processing will copy all the children from the specified zone to this one.
            </summary>
      <param name="zone">The zone to merge with.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZoneBase.MergeWithZone(Nevron.UI.WinForm.Docking.INDockZone,System.Boolean)">
      <summary>
            Merges with the specified zone and optionally uses its orientation.
            The default processing will copy all the children from the specified zone to this one.
            </summary>
      <param name="zone">The zone to merge with.</param>
      <param name="useZoneOrientation">True to use the specified zone's orientation, false otherwise.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZoneBase.Update">
      <summary>
            Updates the zone's state in the zones tree.
            The default processing will check whether the zone is empty and if so will dispose it.
            The method will recursively call parent's Update method.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZoneBase.CanUpdate">
      <summary>
            Checks whether the zone can be updated.
            For example a zone cannot be updated if it is refereced.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZoneBase.GetAnyParentSuspended">
      <summary>
            Checks whether there is currently any parent that is suspended.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZoneBase.UpdateFromZone(Nevron.UI.WinForm.Docking.INDockZone)">
      <summary>
            Updates from the specified zone.
            By default this method will copy the SizeInfo and Padding values.
            </summary>
      <param name="zone">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZoneBase.CanDispose">
      <summary>
            Checks whether the zone can be disposed.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZoneBase.ContainsReferencedChild">
      <summary>
            Checks whether the zone contains referenced child.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZoneBase.OnSizeInfoChanged(System.Object)">
      <summary>
            Notifies for a change in the SizeInfo object.
            </summary>
      <param name="hint">An optional hint carrying information about the change.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZoneBase.GetSerializationData">
      <summary>
            Gets the serializable representation of the zone.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZoneBase.RebuildIds">
      <summary>
            Recreates the Guid structures of this zone and all its children.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZoneBase.CanAcceptChild(Nevron.UI.WinForm.Docking.INDockZoneChild)">
      <summary>
            Checks whether the specified child might be accepted by this zone.
            </summary>
      <param name="child">The child to examine.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZoneBase.AddChild(Nevron.UI.WinForm.Docking.INDockZoneChild)">
      <summary>
            Adds a child to this zone.
            </summary>
      <param name="child">The specified child.</param>
      <returns>The index at which the child was added.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZoneBase.AddChild(Nevron.UI.WinForm.Docking.INDockZoneChild,System.Int32)">
      <summary>
            Adds a child at the specified index. 
            </summary>
      <param name="child">The child to add.</param>
      <param name="index">The specified index.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZoneBase.RemoveChild(Nevron.UI.WinForm.Docking.INDockZoneChild)">
      <summary>
            Removes the specified child from the zone.
            </summary>
      <param name="child">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZoneBase.RemoveChildren">
      <summary>
            Removes all the children currently contained by the zone.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZoneBase.SetChildIndex(Nevron.UI.WinForm.Docking.INDockZoneChild,System.Int32)">
      <summary>
            Sets the preffered index to the specified child.
            </summary>
      <param name="child">The specified child.</param>
      <param name="index">The desired index.</param>
      <returns>True if the operation was successful, false otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZoneBase.UpdateEmptyState">
      <summary>
            Updates the zone's IsEmpty state.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZoneBase.Contains(Nevron.UI.WinForm.Docking.INDockZoneChild)">
      <summary>
            Checks whether this zone or one of its children contains the specified child.
            </summary>
      <param name="child">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZoneBase.ContainsChildOfType(System.Type)">
      <summary>
            Checks whether a child of the specified type is contained by this zone or one of its children.
            </summary>
      <param name="type">The type to search for. The check is Type.IsInstanceOfType()</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZoneBase.GetChildOfType(System.Type)">
      <summary>
            Gets a child of the specified type.
            </summary>
      <param name="type">The type to search for.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZoneBase.OnPaddingChanged">
      <summary>
            Notifies the zone for a change in its Padding member.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZoneBase.OnChildAdded(Nevron.UI.WinForm.Docking.INDockZoneChild)">
      <summary>
            Called after adding a child was successful.
            The default implementation performs additional tasks like updating the empty state and rebuilding children's indicies.
            </summary>
      <param name="child">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZoneBase.OnChildRemoved(Nevron.UI.WinForm.Docking.INDockZoneChild)">
      <summary>
            Called after removing of a child was successful.
            The default implementation performs additional tasks like updating the empty state and rebuilding children's indicies.
            </summary>
      <param name="child">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZoneBase.GetAnyChildReferenced">
      <summary>
            Gets whether the zone or one of its children contains a referenced child.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZoneBase.GetLayoutEngine">
      <summary>
            Gets the current layout engine to be used.
            If the local member is not null it is used. Otherwise the instance provided by the dock manager is used.
            </summary>
      <returns>The dock zone layout engine to be used for the current layout operation.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZoneBase.SetBounds(System.Drawing.Rectangle)">
      <summary>
            Sets the core bounds of the zone.
            </summary>
      <param name="r">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZoneBase.GetEmpty">
      <summary>
            Gets the core IsEmpty value.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZoneBase.SetEmpty(System.Boolean)">
      <summary>
            Sets the core IsEmpty state to the specified value.
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZoneBase.OnEmptyChanged">
      <summary>
            Called when the IsEmpty value has changed.
            The default implementation performs layout and notifies the parent zone (if any) for this change.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZoneBase.OnBoundsChanged">
      <summary>
            Called when the bounds of the zone has changed.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZoneBase.CheckPreviousParent(Nevron.UI.WinForm.Docking.INDockZoneChild)">
      <summary>
            Checks the previous parent of the specified child.
            This method is called before a child is added to this zone.
            </summary>
      <param name="child">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZoneBase.GetInitialEmpty">
      <summary>
            Gets the initial IsEmpty value for the zone.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockZoneBase.IsSuspended">
      <summary>
            Checks whether the layout operations are suspended.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockZoneBase.LayoutInfo">
      <summary>
            Gets the object containing information about a layout operation.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockZoneBase.Disposing">
      <summary>
            Gets a value whether this zone is in a process of being disposed of.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockZoneBase.IsRoot">
      <summary>
            Gets a value whether this zone is a root one.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockZoneBase.Referenced">
      <summary>
            Gets or sets a value whether this zone is referenced by other object.
            For example when a panel becomes floating it marks it previous parent zone
            as referenced so that the zone is not removed from the tree even if it becomes empty.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockZoneBase.Orientation">
      <summary>
            Gets or sets the orientation of the zone.
            That is the logic that will be applied when performing layout upon children.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockZoneBase.Container">
      <summary>
            Gets the NDockingPanelContainer instance where this zone resides.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockZoneBase.DisplayRectangle">
      <summary>
            Gets a rectangular area which represents the client area for the zone.
            For example the Bounds and DisplayRectangle values are different for a splittable zone.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockZoneBase.ID">
      <summary>
            Gets the Guid structure which identifies this zone.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockZoneBase.LayoutEngine">
      <summary>
            Gets or sets the layout engine which will perform layout logic upon zone's children.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockZoneBase.ParentZone">
      <summary>
            Gets or sets the parent zone for this instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockZoneBase.RootZone">
      <summary>
            Gets the root zone where this zone resides.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockZoneBase.Index">
      <summary>
            Gets or sets the index of this zone in its parent collection.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockZoneBase.SizeInfo">
      <summary>
            Gets or sets the object which contains information about how this instance should be treated by a layout engine.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockZoneBase.Bounds">
      <summary>
            Gets or sets the bounds of the zone.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockZoneBase.MinimumSize">
      <summary>
            Gets the minimum allowed size for the zone.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockZoneBase.IsEmpty">
      <summary>
            Gets a value indicating whether the zone might be considered as empty.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockZoneBase.Children">
      <summary>
            Gets the collection of all children parented by this zone.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockZoneBase.Padding">
      <summary>
            Gets or sets the object containing padding information.
            Padding is the space from zone's edges which should not be included in the DisplayRectangle.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZone.CanAcceptChild(Nevron.UI.WinForm.Docking.INDockZoneChild)">
      <summary>
      </summary>
      <param name="child">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZone.PerformLayout">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZone.Clone(System.Boolean)">
      <summary>
      </summary>
      <param name="sameID">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZone.OnEmptyChanged">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZone.PerformDispose">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZone.OnSplitterChange(Nevron.UI.WinForm.Docking.NDragInfo)">
      <summary>
      </summary>
      <param name="info">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZone.UpdateSplitterBounds">
      <summary>
            Updates the bounds of the splitter.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockZone.DisplayRectangle">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockZone.MinimumSize">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockZone.SplitterSize">
      <summary>
            Get the width(height) of the splitter.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NDocumentStyle">
      <summary>
            Encapsulates common styles and properties for the document section of the framework.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NStyle">
      <summary>
            The base abstract class for all appearance styles.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NStyle.Clone">
      <summary>
            Creates an exact copy of the current style.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NStyle.ToString">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NStyle.SetDefaults">
      <summary>
            Sets the default state of the style.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NStyle.Copy(Nevron.UI.WinForm.Docking.NStyle)">
      <summary>
            Copies all the values from the specified style.
            </summary>
      <param name="style">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NStyle.NotifyChange">
      <summary>
            Notifies that the current style has changed.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NStyle.NotifyPropertyChange(System.String)">
      <summary>
            Notifies that a property of the style has changed.
            </summary>
      <param name="propName">The name of the property that has changed.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NStyle.CreateObjects">
      <summary>
            Creates all the default fields.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NStyle.PropertyPage">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NStyle.ID">
      <summary>
            Gets the id assigned to this style from its parent composite.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NStyle.Description">
      <summary>
            Gets or sets the human readable description of this style.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NStyle.Composite">
      <summary>
            Gets the current style comosite that holds this style.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDocumentStyle.SetDefaults">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDocumentStyle.PerformDispose">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDocumentStyle.Copy(Nevron.UI.WinForm.Docking.NStyle)">
      <summary>
      </summary>
      <param name="style">
      </param>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDocumentStyle.DefaultSelectedDocumentFont">
      <summary>
            Gets the default font to be used when rendering selected document tabs.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDocumentStyle.DefaultDocumentFont">
      <summary>
            Gets the default font to be used when rendering document tabs.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDocumentStyle.DocumentViewEnabled">
      <summary>
            Gets or sets a value whether the document view is enabled.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDocumentStyle.StickyChildren">
      <summary>
            Gets or sets a value whether the NMdiChild instances will be sticky (valid when the document view style is MdiStandard).
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDocumentStyle.StickToMdiClientEdges">
      <summary>
            Gets or sets a value whether the NMdiChild instances will stick to the edges of its MdiClient container.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDocumentStyle.AllowTabReorder">
      <summary>
            Gets or sets a value whether the tabs in a document strip may be re-ordered.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDocumentStyle.DocumentViewBorderStyle">
      <summary>
            Gets or sets the border style for the document view.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDocumentStyle.DocumentBorderStyle">
      <summary>
            Gets or sets the border style for a single document.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDocumentStyle.DocumentViewStyle">
      <summary>
            Gets or sets the style of the document view.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDocumentStyle.StripButtons">
      <summary>
            Gets or sets the strip buttons visibility.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDocumentStyle.Font">
      <summary>
            Gets or sets the Font to be used for documents tabs.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDocumentStyle.SelectedDocumentFont">
      <summary>
            Gets or sets the Font to be used for the currently active document.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDocumentStyle.MaximumTabWidth">
      <summary>
            Gets or sets the maximum allowed tab width.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDocumentStyle.TabAlign">
      <summary>
            Gets or sets the alignment of the document tabs.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDocumentStyle.TabStyle">
      <summary>
            Gets or sets the style of the document tabs.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDocumentStyle.ImageList">
      <summary>
            Gets or sets the image list to be used for the document tabs.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDocumentStyle.DocumentViewBackColor">
      <summary>
            Gets or sets the back color of the document view
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NDockingFrameworkPalette">
      <summary>
            Represents the defaut palette to be used by the docking framework.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingFrameworkPalette.Init">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NDockingPanelContainerData">
      <summary>
            A serializable representation of a docking container.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NDockingFrameworkData">
      <summary>
            Represents the base class for all data representation objects.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingFrameworkData.Manager">
      <summary>
            Gets or sets the manager of the docking framework.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelContainerData.Container">
      <summary>
            Gets or sets the container which state is to be saved/restored.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelContainerData.ID">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelContainerData.Key">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelContainerData.RootZoneData">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NTabbedMdiDocumentData">
      <summary>
            Summary description for NTabbedMdiDocumentData.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NDocumentData">
      <summary>
            Summary description for NDocumentData.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDocumentData.Document">
      <summary>
            Gets or sets the document which data is to be saved/loaded
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDocumentData.Text">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDocumentData.ID">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDocumentData.ImageIndex">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDocumentData.IconData">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDocumentData.SmallIconData">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NTabbedMdiDocumentData.ParentZoneID">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NDockingFrameworkCommand">
      <summary>
            Represents a generic object which may perform action upon other objects.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingFrameworkCommand.Execute(System.Object)">
      <summary>
            Performs a command specific action.
            </summary>
      <param name="param">An additional parameter associated with the method.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingFrameworkCommand.CanExecute">
      <summary>
            Checks whether the specified command might be executed.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingFrameworkCommand.IsShortcutCombination(System.Windows.Forms.Keys)">
      <summary>
            Checks whether the specified keys are associated with the command.
            </summary>
      <param name="keys">The keys to check for.</param>
      <returns>True if the keys are associated with the command, false otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingFrameworkCommand.ExecuteCore(System.Object)">
      <summary>
            Performs the core execution of the command.
            </summary>
      <param name="param">Additional parameter associated with the method.</param>
      <returns>True if execution was successful, false otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingFrameworkCommand.OnExecuting(System.ComponentModel.CancelEventArgs)">
      <summary>
            Raises the <see cref="E:Nevron.UI.WinForm.Docking.NDockingFrameworkCommand.Executing" /> event.
            </summary>
      <param name="e">The event arguments passed to the event. Set the "Cancel" property to true to prevent the command from being executed.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingFrameworkCommand.OnExecuted(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Nevron.UI.WinForm.Docking.NDockingFrameworkCommand.Executed" /> event.
            </summary>
      <param name="e">The event arguments passed to the event.</param>
    </member>
    <member name="E:Nevron.UI.WinForm.Docking.NDockingFrameworkCommand.Executing">
      <summary>
            Fired just before the command is about to be executed. Cancelable.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Docking.NDockingFrameworkCommand.Executed">
      <summary>
            Fired after the command has been executed.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingFrameworkCommand.Name">
      <summary>
            Gets or sets the human readable name of the command.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingFrameworkCommand.ID">
      <summary>
            Gets or sets the unique identifier of this command.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingFrameworkCommand.Tag">
      <summary>
            Gets or sets an additional information associated with the command.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingFrameworkCommand.Shortcuts">
      <summary>
            Gets an arraylist containing all the shortcuts connected with this command.
            This allows for multiple shortcuts per command.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingFrameworkCommand.Manager">
      <summary>
            Gets a reference to the dock manager this command is currently attached to.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NDocumentHostData">
      <summary>
            Summary description for NDocumentHostData.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NDockingPanelHostData">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NDockZoneData">
      <summary>
            A serializable representation of a docking zone.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZoneData.PopulateChildrenData">
      <summary>
            Populates all the children data.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockZoneData.Zone">
      <summary>
            Gets or sets the INDockZone instance which state will be saved/restored
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockZoneData.Children">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockZoneData.ParentZoneID">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockZoneData.ID">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockZoneData.Orientation">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockZoneData.Padding">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockZoneData.SizeInfo">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockZoneData.ReferenceCount">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockZoneData.Index">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockZoneData.TypeString">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelHostData.PopulateChildrenData">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelHostData.SelectedIndex">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDocumentHostData.Active">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NDockStateFilter">
      <summary>
            Summary description for NDockStateFilter.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockStateFilter.Filter(System.Object)">
      <summary>
      </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NCaptionStylePropertyPage">
      <summary>
            Summary description for NTabStylePropertyPage.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NStylePropertyPage">
      <summary>
            Summary description for NTabStylePropertyPage.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NStandardMdiDocumentData">
      <summary>
            Summary description for NStandardMdiDocumentData.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NStandardMdiDocumentData.HostBounds">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NStandardMdiDocumentData.WindowState">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NVisibleFilter">
      <summary>
            Summary description for NVisibleFilter.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NVisibleFilter.Filter(System.Object)">
      <summary>
      </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NGuidFilter">
      <summary>
            Summary description for NGuidFilter.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NGuidFilter.Filter(System.Object)">
      <summary>
      </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NDocumentManagerData">
      <summary>
            Summary description for NDocumentManagerData.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDocumentManagerData.DocumentManager">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDocumentManagerData.ActiveHostID">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDocumentManagerData.Documents">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.BorderType">
      <summary>
            Enumerates the available types of border.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.BorderType.None">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.BorderType.Top">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.BorderType.TopLeft">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.BorderType.TopRight">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.BorderType.Left">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.BorderType.Bottom">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.BorderType.BottomLeft">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.BorderType.BottomRight">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.BorderType.Right">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NBorder">
      <summary>
            Represents a border edge.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NBorder.GetHashCode">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NBorder.Equals(System.Object)">
      <summary>
      </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NBorderCollection">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NDockManagerPropertyPage">
      <summary>
            Summary description for NDockManagerPropertyPage.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NDocumentView">
      <summary>
            Represents a basic class for all document views.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NDockingPanelContainer">
      <summary>
            Represents a container for NDockingPanel objects.
            Each container hosts a tree of INDockZone instances which forms the layout of all dockable panels.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NDockingPanelBase">
      <summary>
            Represents a base class for a NDockingPanel and NDockingPanelContainer instances.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NCaptionPanel">
      <summary>
            Represents a standard Windows Forms Panel control with ability to display caption.
            Base class for the docking panels control.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NDraggablePanel">
      <summary>
            Represents a control which might be dragged with the left mouse button.
            Base class for docking panels.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.INSelectableControl">
      <summary>
            Represents a generic implementation for a selectable control - that is control which may receive focus.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INSelectableControl.SetActive(System.Boolean)">
      <summary>
            Sets the current active state of the control.
            </summary>
      <param name="isActive">The new active state of the control</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INSelectableControl.Activate">
      <summary>
            Activates the control and tries to give focus to a child control.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INSelectableControl.Deactivate">
      <summary>
            Deactivates the control. This will update the caption but the control may still contains focus.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.INSelectableControl.CanActivate">
      <summary>
            Gets a value whether the control can activate. True by default.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.INSelectableControl.IsActive">
      <summary>
            Gets a value whether the control is currently active.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.INSelectableControl.Visible">
      <summary>
            Determines whether the control is visible.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.INDraggableControl">
      <summary>
            Represents a generic control that might be dragged using the left mouse button.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INDraggableControl.CanBeginDrag(System.Windows.Forms.MouseEventArgs)">
      <summary>
            Examines the provided mouse event arguments and checks whether a drag operation can begin.
            </summary>
      <param name="args">The mouse event arguments to examine.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INDraggableControl.EndDrag">
      <summary>
            Ends running drag operation.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INDraggableControl.UpdateDragInfo">
      <summary>
            Updates the drag info during drag operation.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INDraggableControl.CanDrag">
      <summary>
            Determines whether the control is draggable.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.INDraggableControl.AllowDrag">
      <summary>
            Gets or sets a value whether the control might be dragged.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.INDraggableControl.IsDragging">
      <summary>
            Gets a value whether the control is currently being dragged.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.INDraggableControl.DragSize">
      <summary>
            Gets the size of this instance while being dragged.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.INDraggableControl.DragInfo">
      <summary>
            Gets the object containing information about the current drag operation.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.INDraggableControl.DragHandler">
      <summary>
            Gets or sets the INDragHandler instance to be used from this control.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDraggablePanel.CanBeginDrag(System.Windows.Forms.MouseEventArgs)">
      <summary>
            Checks whether the provides mouse arguments are acceptable for a drag operation to begin.
            </summary>
      <param name="e">The specified mouse arguments.</param>
      <returns>True if a drag operation can be started, false otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDraggablePanel.EndDrag">
      <summary>
            Performs end of drag operation.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDraggablePanel.UpdateDragInfo">
      <summary>
            Updates the drag info object during a drag operation.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDraggablePanel.RequestPreview">
      <summary>
            Requests a preview. A NDockingPanel instance overrides this and asks the current dock manager to generate a preview.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDraggablePanel.CanDrag">
      <summary>
            Determines whether the current instance is draggable.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDraggablePanel.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDraggablePanel.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDraggablePanel.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDraggablePanel.CreateDragInfoCore">
      <summary>
            Creates a core NDragInfo instance. Override this method to pass custom instance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDraggablePanel.ApplyDrag">
      <summary>
            Applies a drag operation. That is accepting any change in location, size, parent and so on.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDraggablePanel.CancelDrag">
      <summary>
            Cancels the current drag operation.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDraggablePanel.UpdateDragInfoOnBeginDrag">
      <summary>
            Prepares the current NDragInfo instance for the start of a drag operation.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDraggablePanel.UpdateDragInfoOnDrag">
      <summary>
            Updates the current NDragInfo instance during a drag operation.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDraggablePanel.FitDragLocation(System.Drawing.Point@)">
      <summary>
            Clampes the current drag location to fit the virtual screen.
            </summary>
      <param name="location">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDraggablePanel.GetStartDragBounds">
      <summary>
            Gets the bounds to be used when a drag operation starts (in screen coordinates).
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDraggablePanel.GetDragBounds">
      <summary>
            Gets the bounds to be used while dragging (in screen coordinates).
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDraggablePanel.AllowDrag">
      <summary>
            Gets or sets a value whether the control might be dragged.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDraggablePanel.IsDragging">
      <summary>
            Gets a value whether the control is currently being dragged.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDraggablePanel.DragInfo">
      <summary>
            Gets the object containing information about a drag operation.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDraggablePanel.DragHandler">
      <summary>
            Gets or sets the object that handles drag operations.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDraggablePanel.DragSize">
      <summary>
            Gets the size used to visually indicate dragging.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.INCaptionControl">
      <summary>
            Represents a generic control that has caption.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INCaptionControl.UpdateCaption">
      <summary>
            Performs measure and refresh of the caption bar.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INCaptionControl.RefreshCaption">
      <summary>
            Invalidates the caption area of the control.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INCaptionControl.RefreshCaption(Nevron.UI.WinForm.Docking.CaptionRefreshHint)">
      <summary>
            Invalidates the caption area of the control using the specified hint.
            </summary>
      <param name="hint">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INCaptionControl.Close">
      <summary>
            Closes the control.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INCaptionControl.Display">
      <summary>
            Displays the panel.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INCaptionControl.Maximize">
      <summary>
            Maximizes the control.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INCaptionControl.Restore">
      <summary>
            Restores default size of the control.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INCaptionControl.GetCommandEnabled(System.Int32)">
      <summary>
            Determines whether the command with the specified id is enabled for this instance.
            </summary>
      <param name="commandID">The id to examine.</param>
      <returns>True if enabled, false otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INCaptionControl.GetCommandChecked(System.Int32)">
      <summary>
            Determines whether the command with the specified id is checked for this instance.
            </summary>
      <param name="commandID">The id to examine.</param>
      <returns>True if checked, false otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INCaptionControl.ShowContextMenu(System.Drawing.Point)">
      <summary>
            Displays a context menu aligned to the specified screen location.
            </summary>
      <param name="screenLocation">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INCaptionControl.OnContextMenuCommandClick(Nevron.UI.WinForm.Controls.CommandEventArgs)">
      <summary>
            Notifies this instance that a context menu command has been clicked.
            </summary>
      <param name="args">The CommandEventArgs containing information about the event.</param>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.INCaptionControl.Caption">
      <summary>
            Gets the NCaptionBar object that represents the control caption.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.INCaptionControl.IsCaptionActive">
      <summary>
            Gets a value indicating whether the caption is currently active.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.INCaptionControl.HasCaption">
      <summary>
            Gets or sets a value whether the caption is visible or not
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.INCaptionControl.Text">
      <summary>
            Gets or sets the text to be displayed by the caption
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.INCaptionControl.SizeState">
      <summary>
            Gets the current size state of the control
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.INCaptionControl.ContextMenuCommands">
      <summary>
            Gets an array with all the commands associated with this instance.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Docking.INCaptionControl.CaptionButtonClicked">
      <summary>
            Fired when a caption button has been clicked.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.INCaptionControl.RenderContext">
      <summary>
            Gets or sets the render context to be used when painting caption.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NCaptionPanel.SetActive(System.Boolean)">
      <summary>
      </summary>
      <param name="isActive">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NCaptionPanel.CanBeginDrag(System.Windows.Forms.MouseEventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NCaptionPanel.UpdateCaption">
      <summary>
            Updates the caption's bounds and invalidates them.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NCaptionPanel.RefreshCaption">
      <summary>
            Invalidates caption's bounds.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NCaptionPanel.RefreshCaption(Nevron.UI.WinForm.Docking.CaptionRefreshHint)">
      <summary>
            Invalidates the caption using the specified hint.
            </summary>
      <param name="hint">The hint to be used.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NCaptionPanel.Close">
      <summary>
            Hides panel from the user without destroying it. Use this method rather than the inherited "Hide" one.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NCaptionPanel.Display">
      <summary>
            Displays panel to the user. The panel should be previously closed for the method to have effect.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NCaptionPanel.ShowContextMenu(System.Drawing.Point)">
      <summary>
            Shows a NContextMenu containing commands associated with this instance.
            </summary>
      <param name="screenLocation">The location, in screen coordinates, where the menu should be displayed.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NCaptionPanel.OnContextMenuCommandClick(Nevron.UI.WinForm.Controls.CommandEventArgs)">
      <summary>
            Notifies of a context menu command click.
            </summary>
      <param name="args">An event arguments containing information about the command being clicked.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NCaptionPanel.GetCommandEnabled(System.Int32)">
      <summary>
            Checks whether a command, corresponding to the specified id, is enabled for this instance.
            </summary>
      <param name="commandID">The id to check for.</param>
      <returns>True if enabled, false otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NCaptionPanel.GetCommandChecked(System.Int32)">
      <summary>
            Checks whether a command, corresponding to the specified id, is checked for this instance.
            </summary>
      <param name="commandID">The id to check for.</param>
      <returns>True if checked, false otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NCaptionPanel.Maximize">
      <summary>
            Maximizes the panel. Overriden by dockable panels.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NCaptionPanel.Restore">
      <summary>
            Sets the SizeState of the panel to SizeState.Normal
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NCaptionPanel.OnMaximizing(System.ComponentModel.CancelEventArgs)">
      <summary>
            Notifies that the panel is about to change its size state and become maximized.
            </summary>
      <param name="args">The event arguments associated with this action.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NCaptionPanel.OnMaximized(System.EventArgs)">
      <summary>
            Notifies that the panel has been maximized.
            </summary>
      <param name="args">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NCaptionPanel.OnRestoring(System.ComponentModel.CancelEventArgs)">
      <summary>
            Notifies that the panel's SizeState is about to become SizeState.Normal
            </summary>
      <param name="args">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NCaptionPanel.OnRestored(System.EventArgs)">
      <summary>
            Notifies that the panel's state has been set to SizeState.Normal
            </summary>
      <param name="args">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NCaptionPanel.OnSizeStateChanged(System.EventArgs)">
      <summary>
            Notifies that panel's state has been changed.
            </summary>
      <param name="args">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NCaptionPanel.OnCreateControl">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NCaptionPanel.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NCaptionPanel.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NCaptionPanel.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NCaptionPanel.OnMouseLeave(System.EventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NCaptionPanel.OnTextChanged(System.EventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NCaptionPanel.OnLayout(System.Windows.Forms.LayoutEventArgs)">
      <summary>
      </summary>
      <param name="levent">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NCaptionPanel.OnPaint(System.Windows.Forms.PaintEventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NCaptionPanel.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NCaptionPanel.WndProc(System.Windows.Forms.Message@)">
      <summary>
      </summary>
      <param name="m">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NCaptionPanel.UpdateRenderContext">
      <summary>
            Updates the render context before paint operation with the current state of the panel.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NCaptionPanel.OnCaptionButtonClicked(System.Int32)">
      <summary>
            Allows for specific action to be performed after a caption button has been clicked.
            </summary>
      <param name="buttonID">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NCaptionPanel.OnCaptionDoubleClicked(System.Windows.Forms.MouseEventArgs)">
      <summary>
            Notifies that the caption has been double-clicked.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NCaptionPanel.Measure">
      <summary>
            Measures the bounds of the caption and its text.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NCaptionPanel.UpdateCaptionBounds">
      <summary>
            Updates the bounds of the caption prior a resize event.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NCaptionPanel.CanRespondToCaptionButtonClick">
      <summary>
            Checks whether the panel is responsible to clicks on caption buttons.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NCaptionPanel.CreateRenderContextCore">
      <summary>
            Creates the core instance of the render context. Use this method to pass a new custom instance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NCaptionPanel.GetClientRectangle">
      <summary>
            Retreives the client bounds.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NCaptionPanel.CanShowContextMenu">
      <summary>
            Determines whether a context menu associated with this instance can be displayed.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NCaptionPanel.OnClosing(System.ComponentModel.CancelEventArgs)">
      <summary>
            Notifies that the panel is about to be closed. Cancelable.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NCaptionPanel.OnClosed(System.EventArgs)">
      <summary>
            Notifies that the panel has been closed.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NCaptionPanel.OnDisplaying(System.ComponentModel.CancelEventArgs)">
      <summary>
            Notifies that the panel is about to be displayed. Cancelable.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NCaptionPanel.OnDisplayed(System.EventArgs)">
      <summary>
            Notifies that the panel has been displayed.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NCaptionPanel.InitCaptionButtons">
      <summary>
            Initializes the caption bar with the default set of buttons.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NCaptionPanel.EnableSkinning">
      <summary>
            Gets or sets a value indicating whether the control will use skin logic.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NCaptionPanel.Skin">
      <summary>
            Gets or sets the local NSkin instance to be used when painting this control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NCaptionPanel.CurrentSkin">
      <summary>
            Gets the current skin to be used by this instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NCaptionPanel.Caption">
      <summary>
            Gets the NCaptionBar object that represents the caption of the Control.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Docking.NCaptionPanel.CaptionButtonClicked">
      <summary>
            Fired when the user has clicked a button located on the caption bar.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Docking.NCaptionPanel.ContextMenuCommandClick">
      <summary>
            Notifies for a context menu command click.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NCaptionPanel.IsCaptionActive">
      <summary>
            Gets a value indicating whether the caption is currently active.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NCaptionPanel.RenderContext">
      <summary>
            Gets or sets the render context to be used.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NCaptionPanel.ContextMenuCommands">
      <summary>
            Gets an array of Nevron.UI.WinForm.Controls.NCommand objects associated with this panel.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NCaptionPanel.SizeState">
      <summary>
            Gets the current SizeState of the panel.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NCaptionPanel.HasCaption">
      <summary>
            Gets or sets a value indication whether the panel has caption.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NCaptionPanel.Border">
      <summary>
            Gets the NControlBorder object that manages the border around the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NCaptionPanel.BorderWidth">
      <summary>
            Gets the preffered width of the border.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NCaptionPanel.IsBorderHot">
      <summary>
            Gets a value indicating whether the border should be drawn in its default state (works only if the border is interactive).
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NCaptionPanel.DefaultBorderStyle">
      <summary>
            Gets the default border style for the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NCaptionPanel.DefaultBaseBorderColor">
      <summary>
            Gets the default base color to use when drawing 3D borders.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NCaptionPanel.DefaultSize">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NCaptionPanel.DisplayRectangle">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NCaptionPanel.CaptionHeight">
      <summary>
            Gets the core height of the caption (in pixels).
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NCaptionPanel.CaptionText">
      <summary>
            Gets the core text displayed by the caption.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NCaptionPanel.CaptionFont">
      <summary>
            Gets the core font to render caption text.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NCaptionPanel.ShowCaption">
      <summary>
            Gets a value whether caption is visible or not.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NCaptionPanel.CaptionBounds">
      <summary>
            Gets the preffered bounds for the caption.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NCaptionPanel.Renderer">
      <summary>
            Gets or sets the renderer to be used by the caption panel.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NCaptionPanel.ContextMenuEnabled">
      <summary>
            Gets or sets a value whether the embedded context menu is enabled.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.INDockingPanel">
      <summary>
            Represents a generic dockable panel.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INDockingPanel.CanBeParentedBy(Nevron.UI.WinForm.Docking.INDockingPanelContainer)">
      <summary>
            Determines whether the current instance might be parented by the specified container.
            </summary>
      <param name="container">The container to examine.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INDockingPanel.SaveState">
      <summary>
            Saves the current state of the panel (depending on its DockState value).
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INDockingPanel.Redock">
      <summary>
            Performs redocking. If the panel is floating it will become docked, if docked it will become floating.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INDockingPanel.Float">
      <summary>
            Floats the panel. If the DockState is DockState.Floating nothing is done.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INDockingPanel.Float(System.Drawing.Rectangle)">
      <summary>
            Makes the current instance floating using the specified screen bounds.
            </summary>
      <param name="screenBounds">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INDockingPanel.PerformDock(Nevron.UI.WinForm.Docking.INDockZone)">
      <summary>
            Docks the panel on the specified zone.
            </summary>
      <param name="zone">The zone to dock onto</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INDockingPanel.PerformDock(Nevron.UI.WinForm.Docking.INDockZone,System.Windows.Forms.DockStyle)">
      <summary>
            Docks the current instance at the specified dock zone using the specified dock style.
            </summary>
      <param name="zone">The target zone.</param>
      <param name="dockStyle">The preffered dock style.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INDockingPanel.PerformDock(Nevron.UI.WinForm.Docking.INDockZone,System.Windows.Forms.DockStyle,System.Int32)">
      <summary>
            Docks the current instance at the specified dock zone using the specified dock style at the specified index.
            </summary>
      <param name="zone">The target zone.</param>
      <param name="dockStyle">The preffered dock style.</param>
      <param name="index">The preffered index.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INDockingPanel.AutoHide">
      <summary>
            Makes the panel autohidden onto the container where it currently resides.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INDockingPanel.AutoHide(Nevron.UI.WinForm.Docking.AutoHideLocation)">
      <summary>
            Makes the panel autohidden onto the container where it currently resides using the specified location.
            </summary>
      <param name="location">The preffered autohide location.</param>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.INDockingPanel.ContainerPanel">
      <summary>
            Gets the NDockingPanelContainer object this INDockingPanel resides in.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.INDockingPanel.Manager">
      <summary>
            Gets a reference to the top-level manager of the docking framework.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.INDockingPanel.DockState">
      <summary>
            Gets or sets the current state of the INDockingPanel object.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.INDockingPanel.AutoHideLocation">
      <summary>
            Gets a value indicating on which edge the panel is autohiding.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.INDockingPanel.DockedState">
      <summary>
            Gets the object containing information for previously saved docked state.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.INDockingPanel.FloatingSize">
      <summary>
            Gets or sets the preffered size to be used when the panel becomes floating on its own.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.INDockingPanel.PrefferedState">
      <summary>
            Gets or sets the preffered dockstate to be applied on this instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.INDockingPanel.FloatingState">
      <summary>
            Gets the object containing information for previously saved floating state.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.INDockingPanel.TabInfo">
      <summary>
            Gets or sets the object that contains information how a panel is visualized when in tabbed mode.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.INDockingPanel.IsTabbed">
      <summary>
            Gets a value indicationg whether the panel is displayed as tab.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.INDockingPanel.Key">
      <summary>
            Gets or sets a string that uniquely identifies this instance. Used by serializers.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelBase.Float">
      <summary>
            Makes the panel floating. If there is already a saved floating state this state is restored.
            Otherwise the panel is floated using the preffered floating size and the center parent location.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelBase.Float(System.Drawing.Rectangle)">
      <summary>
            Makes the panel floating using the specified bounds.
            </summary>
      <param name="screenBounds">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelBase.SaveState">
      <summary>
            Saves the current state of the panel.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelBase.Redock">
      <summary>
            Redocks the panel. If the panel is floating
            this operation will make it docked and if docked it will become floating.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelBase.PerformDock(Nevron.UI.WinForm.Docking.INDockZone)">
      <summary>
            Docks the panel at the specified INDockZone instance.
            </summary>
      <param name="zone">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelBase.PerformDock(Nevron.UI.WinForm.Docking.INDockZone,System.Windows.Forms.DockStyle)">
      <summary>
            Docks the panel at the specified INDockZone instance and with the specified dock style.
            </summary>
      <param name="zone">
      </param>
      <param name="style">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelBase.PerformDock(Nevron.UI.WinForm.Docking.INDockZone,System.Windows.Forms.DockStyle,System.Int32)">
      <summary>
            Docks the panel at the specified INDockZone instance, with the specified dock style and at the specified index.
            </summary>
      <param name="zone">
      </param>
      <param name="style">
      </param>
      <param name="index">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelBase.AutoHide">
      <summary>
            Makes the panel autohidden onto the root container.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelBase.AutoHide(Nevron.UI.WinForm.Docking.AutoHideLocation)">
      <summary>
            Makes the panel autohidden onto the root container using the specified location.
            </summary>
      <param name="location">The preffered autohide location.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelBase.CanBeParentedBy(Nevron.UI.WinForm.Docking.INDockingPanelContainer)">
      <summary>
            Checks whether this panel can be parented by the specified container.
            </summary>
      <param name="container">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelBase.Activate">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelBase.Deactivate">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelBase.SetActiveControl">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelBase.CanRespondToCaptionButtonClick">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelBase.OnDisplayed(System.EventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelBase.GetCommandEnabled(System.Int32)">
      <summary>
      </summary>
      <param name="commandID">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelBase.ProcessContextMenuCommandClick(Nevron.UI.WinForm.Controls.CommandEventArgs)">
      <summary>
      </summary>
      <param name="args">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelBase.CanBeginDrag(System.Windows.Forms.MouseEventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelBase.Suspend">
      <summary>
            Suspends any operations/updates for this instance.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelBase.Resume">
      <summary>
            Resumes any previously suspended state.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelBase.Resume(System.Boolean)">
      <summary>
            Resumes any previously suspended state.
            </summary>
      <param name="update">True to perform update, false otherwise.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelBase.GetSerializationData">
      <summary>
            Gets the NSerializationData object containing serializable representation of this instance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelBase.PerformDispose">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelBase.WndProc(System.Windows.Forms.Message@)">
      <summary>
      </summary>
      <param name="m">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelBase.OnCaptionDoubleClicked(System.Windows.Forms.MouseEventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelBase.OnPaint(System.Windows.Forms.PaintEventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelBase.CreateDragInfoCore">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelBase.UpdateDragInfoOnBeginDrag">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelBase.UpdateDragInfoOnDrag">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelBase.EndDrag">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelBase.ApplyDrag">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelBase.Drop">
      <summary>
            Drops the panel after a successful drag operation.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelBase.PerformDrop(Nevron.UI.WinForm.Docking.NDockArea)">
      <summary>
            Performs the core drop action.
            </summary>
      <param name="area">The NDockArea structure containing information about where to drop the panel.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelBase.DoDock(Nevron.UI.WinForm.Docking.INDockZone,System.Int32)">
      <summary>
            Performs the actual dock operation.
            </summary>
      <param name="target">The target zone where to dock the panel.</param>
      <param name="index">The index at which to add the panel.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelBase.CheckCanDock(Nevron.UI.WinForm.Docking.INDockZone,System.Windows.Forms.DockStyle)">
      <summary>
            Checks whether the panel can be docked into the specified dock zone.
            </summary>
      <param name="zone">The INDockZone isntance to check for.</param>
      <param name="style">The preffered dock style.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelBase.CreateNewZone">
      <summary>
            Creates a default new zone.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelBase.UpdateCursorOnDrag">
      <summary>
            Updates the cursor while dragging.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelBase.CreateDockedState">
      <summary>
            Creates a core instance of the object which will store the docked state of the panel.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelBase.CreateFloatingState">
      <summary>
            Creates a core instance of the object which will store the floating state of the panel.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelBase.GetDefaultAutoHideLocation">
      <summary>
            Gets the default autohide location for this panel.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelBase.PerformAutoHide(Nevron.UI.WinForm.Docking.AutoHideLocation)">
      <summary>
            Performs the core autohide operation for this panel.
            </summary>
      <param name="location">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelBase.ValidateAutoHideLocation(Nevron.UI.WinForm.Docking.AutoHideLocation)">
      <summary>
            Validates the specified autohide location and checks whether the panel can be pinned to it.
            </summary>
      <param name="location">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelBase.OnLoad">
      <summary>
            Fired when the panel is about to be displayed for the first time.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelBase.CreateKey">
      <summary>
            Creates the string that uniquely identifies this panel.
            This string value is used during persistency operations.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelBase.GetTargetDockZoneType">
      <summary>
            Gets the type of the INDockZone instance suitable for this panel.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelBase.ID">
      <summary>
            Gets the unique identifier if the panel.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelBase.Key">
      <summary>
            Gets or sets a string that uniquely identifies this panel.
            Used in a serialization process.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelBase.ContainerPanel">
      <summary>
            Gets the container panel that holds this panel. Might be null.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelBase.Manager">
      <summary>
            Gets a reference to the top-level manager of the docking framework.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelBase.FloatingSize">
      <summary>
            Gets or sets the preffered size to be used when the panel becomes floating on its own.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelBase.PrefferedState">
      <summary>
            Gets or sets the preffered dockstate to be applied on this instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelBase.TabInfo">
      <summary>
            Gets or sets the object that contains information how a panel is visualized when in tabbed mode.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelBase.IsTabbed">
      <summary>
            Gets a value indicationg whether the panel is displayed as tab.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelBase.DockState">
      <summary>
            Gets the current dock state of the panel.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelBase.DockedState">
      <summary>
            Gets the object responsible for persisting the docked state of the panel.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelBase.FloatingState">
      <summary>
            Gets the object responsible for persisting the floating state of the panel.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelBase.AutoHideLocation">
      <summary>
            Gets a value indicating on which edge the panel is autohiding.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelBase.CanActivate">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelBase.ShowCaption">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelBase.CaptionHeight">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelBase.ContextMenuCommands">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelBase.EnableSkinning">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelBase.DragHandler">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelBase.DragSize">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelBase.AllowDrag">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelBase.IsSuspended">
      <summary>
            Gets a value whether the panel is currently suspended.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Docking.NDockingPanelBase.BeginDragging">
      <summary>
            Fired just before the panel will be dragged.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Docking.NDockingPanelBase.Dragging">
      <summary>
            Fired while the panel is being dragged. Cancelable.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Docking.NDockingPanelBase.EndDragging">
      <summary>
            Fired when a dragged operation upon this panel is over.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Docking.NDockingPanelBase.Activating">
      <summary>
            Notifies of a panel activation.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Docking.NDockingPanelBase.Activated">
      <summary>
            Notifies that the panel has been activated.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Docking.NDockingPanelBase.Deactivating">
      <summary>
            Notifies that the panel is about to become inactive.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Docking.NDockingPanelBase.Deactivated">
      <summary>
            Fired after the panel has been deactivated.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Docking.NDockingPanelBase.BeforeFloat">
      <summary>
            Fired just befor the panel will become floating. Cancelable.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Docking.NDockingPanelBase.AfterFloat">
      <summary>
            Fired after the panel has become floating.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Docking.NDockingPanelBase.BeforeDock">
      <summary>
            Fired before the panel will be docked. Cancelable.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Docking.NDockingPanelBase.AfterDock">
      <summary>
            Fired after the panel has been docked.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Docking.NDockingPanelBase.BeforeAutoHide">
      <summary>
            Fired before the panel will become autohiding. Cancelable.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Docking.NDockingPanelBase.AfterAutoHide">
      <summary>
            Fired after the panel has been docked.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelBase.Renderer">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.INDockingPanelContainer">
      <summary>
            Represents a container where INDockingPanel instances may reside.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INDockingPanelContainer.CanAcceptPanel(Nevron.UI.WinForm.Docking.INDockingPanel)">
      <summary>
            Checks whether the specified panel can be docked on the container.
            </summary>
      <param name="panel">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.INDockingPanelContainer.Panels">
      <summary>
            Gets the collection of NDockingPanel objects hosted on this container.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.INDockingPanelContainer.ActivePanel">
      <summary>
            Gets the currently active panel. Might be null.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.INDockingPanelContainer.RootZone">
      <summary>
            Gets the root dock zone for the container.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelContainer.CanAcceptPanel(Nevron.UI.WinForm.Docking.INDockingPanel)">
      <summary>
            Checks whether the specified panel can be hosted on this container.
            </summary>
      <param name="panel">The panel instance to check for.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelContainer.UpdateReferences(Nevron.INReferenceProvider)">
      <summary>
      </summary>
      <param name="provider">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelContainer.GetSerializationData">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelContainer.PerformDock(Nevron.UI.WinForm.Docking.INDockZone,System.Windows.Forms.DockStyle,System.Int32)">
      <summary>
      </summary>
      <param name="zone">
      </param>
      <param name="style">
      </param>
      <param name="index">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelContainer.DockFill(Nevron.UI.WinForm.Docking.INDockZone,System.Int32)">
      <summary>
      </summary>
      <param name="zone">
      </param>
      <param name="index">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelContainer.GetTargetDockZoneType">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelContainer.SetActiveControl">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelContainer.ProcessLeave">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelContainer.ProcessEnter">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelContainer.OnVisibleChanged(System.EventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelContainer.PerformDispose">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelContainer.OnLayout(System.Windows.Forms.LayoutEventArgs)">
      <summary>
      </summary>
      <param name="levent">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelContainer.OnControlAdded(System.Windows.Forms.ControlEventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelContainer.Redock">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelContainer.Float(System.Drawing.Rectangle)">
      <summary>
      </summary>
      <param name="screenBounds">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelContainer.Close">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelContainer.Show">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelContainer.OnLoad">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelContainer.ActionOnVisibleChanged">
      <summary>
            Specific action to be performed when the Visible state of the container has changed.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelContainer.CheckDestroy">
      <summary>
            Checks whether this container should be destroyed.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelContainer.NotifyCaptionUpdate">
      <summary>
            Updates captions of all the panels currently hosted on the container.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelContainer.NotifyPaletteChange(Nevron.UI.WinForm.Controls.NPalette)">
      <summary>
            Notifies all the panels hosted on this container for a palette change.
            </summary>
      <param name="palette">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelContainer.NotifyTabStripUpdate">
      <summary>
            Forces all the tabstrips hosted on this container to be updated.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelContainer.UpdateDockPreview(Nevron.UI.WinForm.Docking.NDockArea@)">
      <summary>
            Updates the dock preview rectangle for the specified dock area.
            </summary>
      <param name="area">
      </param>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelContainer.Panels">
      <summary>
            Gets an array with all the panels currently hosted on the container.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelContainer.ActivePanel">
      <summary>
            Gets the currently active panel for this container. Might be null.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelContainer.ContextMenuCommands">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelContainer.CanFocus">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelContainer.MinimumSize">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelContainer.RootZone">
      <summary>
            Gets the root dock zone for this container.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelContainer.DockAreaProviders">
      <summary>
            Gets an array with all the dockarea providers hosted on this container.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelContainer.DockSurface">
      <summary>
            Gets the rectangle which represents the docking surface of this container.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelContainer.IsNested">
      <summary>
            Gets a value whether this container is nested (contained within other container).
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelContainer.MaximumSize">
      <summary>
            Gets or sets the maximum possible size for this container
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelContainer.Sizable">
      <summary>
            Determines whether the container may be resized by the user. Applies on floating containers.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDocumentView.CanAcceptPanel(Nevron.UI.WinForm.Docking.INDockingPanel)">
      <summary>
      </summary>
      <param name="panel">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDocumentView.CreateKey">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDocumentView.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDocumentView.DefaultBorderStyle">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDocumentView.ContextMenuCommands">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDocumentView.BackColor">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDocumentView.MinimumSize">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NDockingPanel">
      <summary>
            Represents a generic dockable panel. A panel resides in a INDockZone instance which
            is hosted on a docking panel container. Each container hosts a tree of docking zones which
            represent the layout of the entire docking framework.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanel.UpdateReferences(Nevron.INReferenceProvider)">
      <summary>
      </summary>
      <param name="provider">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanel.Float(System.Drawing.Rectangle)">
      <summary>
      </summary>
      <param name="screenBounds">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanel.GetDefaultAutoHideLocation">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanel.OnSizeInfoChanged(System.Object)">
      <summary>
            Notifies that the object containing information about how this panel should be handled by a layout engine has changed.
            </summary>
      <param name="hint">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanel.GetSerializationData">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanel.SetActive(System.Boolean)">
      <summary>
      </summary>
      <param name="isActive">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanel.Activate">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanel.UpdateDragInfoOnBeginDrag">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanel.EndDrag">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanel.CanDrag">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanel.UpdateCaption">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanel.RefreshCaption(Nevron.UI.WinForm.Docking.CaptionRefreshHint)">
      <summary>
      </summary>
      <param name="hint">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanel.OnMaximizing(System.ComponentModel.CancelEventArgs)">
      <summary>
      </summary>
      <param name="args">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanel.OnMaximized(System.EventArgs)">
      <summary>
      </summary>
      <param name="args">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanel.OnRestored(System.EventArgs)">
      <summary>
      </summary>
      <param name="args">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanel.GetCommandEnabled(System.Int32)">
      <summary>
      </summary>
      <param name="commandID">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanel.GetCommandChecked(System.Int32)">
      <summary>
      </summary>
      <param name="commandID">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanel.CanShowContextMenu">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanel.OnCaptionButtonClicked(System.Int32)">
      <summary>
      </summary>
      <param name="buttonID">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanel.InitCaptionButtons">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanel.ProcessContextMenuCommandClick(Nevron.UI.WinForm.Controls.CommandEventArgs)">
      <summary>
      </summary>
      <param name="args">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanel.OnClosing(System.ComponentModel.CancelEventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanel.OnClosed(System.EventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanel.OnDisplaying(System.ComponentModel.CancelEventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanel.OnDisplayed(System.EventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanel.DoDock(Nevron.UI.WinForm.Docking.INDockZone,System.Int32)">
      <summary>
      </summary>
      <param name="target">
      </param>
      <param name="index">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanel.GetTargetDockZoneType">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanel.CreateNewZone">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanel.ResetState(Nevron.UI.WinForm.Docking.DockState)">
      <summary>
      </summary>
      <param name="state">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanel.CanRespondToCaptionButtonClick">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanel.PerformDrop(Nevron.UI.WinForm.Docking.NDockArea)">
      <summary>
      </summary>
      <param name="area">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanel.PerformDispose">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanel.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanel.OnValidating(System.ComponentModel.CancelEventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanel.CreateDockedState">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanel.CreateFloatingState">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanel.OnTextChanged(System.EventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanel.ToString">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanel.OnPermissionChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>
            Notfies that the permissons for this panel has changed.
            </summary>
      <param name="args">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanel.OnTabInfoChanged">
      <summary>
            Notifies that the tab info for this instance has changed.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanel.ResetUserAutoHideSize">
      <summary>
            Resets the user-defined size when the panel is pinned to some edge.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanel.PaintBackgroundInDesignMode(System.Windows.Forms.PaintEventArgs)">
      <summary>
            Performs design-time specific painting of the background.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanel.DetachFromDockedState">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanel.TabInfo">
      <summary>
            Gets or sets the object that contains information how the panel will be displayed when in tabbed mode.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanel.IsTabbed">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanel.AutoHideLocation">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanel.ParentZone">
      <summary>
            Gets the INDockZone instance where this panel resides.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanel.RootZone">
      <summary>
            Gets the root zone which hosts the parent zone of this panel.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanel.Index">
      <summary>
            Gets or sets the index of this panels in its parent zone children collection.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanel.SizeInfo">
      <summary>
            Gets the object containing information about how the panel should be treated by layout engines.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanel.MinimumSize">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanel.ContextMenuCommands">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanel.SizeState">
      <summary>
      </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Docking.NDockingPanel.Closing">
      <summary>
            Fired when the panel is about to be closed. Prior to the "Close" method.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Docking.NDockingPanel.Closed">
      <summary>
            Fired when the panel has been closed.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Docking.NDockingPanel.Displaying">
      <summary>
            Fired when the panel is about to be displayed. Prior to the "Display" method.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Docking.NDockingPanel.Displayed">
      <summary>
            Fired when the panel has been displayed.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Docking.NDockingPanel.AutoHideDisplay">
      <summary>
            Notifies for displaying while in auto-hide mode.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Docking.NDockingPanel.AutoHideClose">
      <summary>
            Notifies for a closing while in auto-hide mode.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanel.Text">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanel.Permissions">
      <summary>
            Gets the object responsible for the permissions of the dock panel.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanel.UseEmbeddedContextMenuCommands">
      <summary>
            Determines whether the panel will use embedded (system) command when displaying its context menu.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanel.UserContextMenuCommands">
      <summary>
            Gets the user-definable collection of context menu commands.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanel.CaptionVisibility">
      <summary>
            Gets or sets the visibility of the panel's caption.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NSplitterStyle">
      <summary>
            Controls the appearance of all the splitters in the framework.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NSplitterStyle.SetDefaults">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NSplitterStyle.PropertyPage">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NSplitterStyle.DefaultSize">
      <summary>
            Gets the default size for splitters.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NSplitterStyle.MinSize">
      <summary>
            Gets the minimum allowed size for splitters.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NSplitterStyle.MaxSize">
      <summary>
            Gets the maximum allowed size for splitters.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NSplitterStyle.DefaultGripperStyle">
      <summary>
            Gets the default gripper style for splitters.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NSplitterStyle.GripperStyle">
      <summary>
            Gets or sets the style to be used for splitter grippers.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NSplitterStyle.Size">
      <summary>
            Gets or sets the size to be used by splitters.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NSplitterStyle.HasGrippers">
      <summary>
            Gets or sets a value whether splitters will display grippers.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NDockingFrameworkState">
      <summary>
            Provides support for serializing/deserializing an existing docking framework state.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingFrameworkState.Save">
      <summary>
            Propmts the user to select a file name and performs saving to that file.
            </summary>
      <returns>True if state was successfully saved, false otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingFrameworkState.Save(System.String)">
      <summary>
            Saves the docking framework state to the specified file.
            If the file does not exist a new one will be created.
            </summary>
      <param name="filePath">The specified file path.</param>
      <returns>True if state was successfully saved, false otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingFrameworkState.Save(System.IO.Stream)">
      <summary>
            Saves the docking framework state to the provided stream.
            </summary>
      <param name="stream">The specfied stream to use.</param>
      <returns>True if state was successfully saved, false otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingFrameworkState.SaveCore(System.IO.Stream)">
      <summary>
            Performs the core serialization of the state.
            </summary>
      <param name="stream">The provides stream</param>
      <returns>True if state was successfully saved, false otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingFrameworkState.OnStateSaved(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Nevron.UI.WinForm.Docking.NDockingFrameworkState.StateSaved" /> event.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingFrameworkState.Load">
      <summary>
            Propts the user to select a previously saved state and loads it.
            </summary>
      <returns>True if loading was successful, false otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingFrameworkState.Load(System.String)">
      <summary>
            Loads a previously saved state from a file.
            </summary>
      <param name="fileName">The file where the state was saved.</param>
      <returns>True if loading was successful, false otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingFrameworkState.Load(System.IO.Stream)">
      <summary>
            Loads a state from a stream.
            </summary>
      <param name="stream">The stream to load from.</param>
      <returns>True if loading was successful, false otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingFrameworkState.LoadCore(System.IO.Stream)">
      <summary>
            Performs core loading of a state from stream.
            </summary>
      <param name="stream">The stream containing a previously saved state.</param>
      <returns>True if loading was successful, false otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingFrameworkState.OnStateLoaded(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Nevron.UI.WinForm.Docking.NDockingFrameworkState.StateRestored" /> event.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingFrameworkState.GetXmlExtraTypes">
      <summary>
            Returns extra types (defined in other assemblies)
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingFrameworkState.InitDefault">
      <summary>
            Initializes the default values of the state.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingFrameworkState.PerformDispose">
      <summary>
            Performs an additional release operation.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Docking.NDockingFrameworkState.StateSaved">
      <summary>
            Notifies that a state has been successfully saved.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Docking.NDockingFrameworkState.StateRestored">
      <summary>
            Notifies that a state has been successfully restored.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Docking.NDockingFrameworkState.ResolveDocumentClient">
      <summary>
            Notifies that a document has been deserialized and its client needs to be resolved.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingFrameworkState.Manager">
      <summary>
            Gets or sets the docking manager object which state is to be loaded/persisted.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingFrameworkState.Format">
      <summary>
            Gets or sets the format in which the state is loaded/persisted.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingFrameworkState.PersistStyles">
      <summary>
            Gets or sets a value indicating whether the manager's styles should be serialized also.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingFrameworkState.PersistDocuments">
      <summary>
            Gets or sets a value indicating whether the document manager state should be persisted also.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingFrameworkState.ManagerDataType">
      <summary>
            Gets or sets the type of the dock manager serialization data.
            Needed for the XML formatted persistency when the dock manager data is other than the default one.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NDockHelper">
      <summary>
            Provides static helper methods.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockHelper.AutoHideLocationToDockStyle(Nevron.UI.WinForm.Docking.AutoHideLocation)">
      <summary>
      </summary>
      <param name="location">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockHelper.AutoHideLocationToDirection(Nevron.UI.WinForm.Docking.AutoHideLocation)">
      <summary>
      </summary>
      <param name="location">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockHelper.DockStyleToAutoHideLocation(System.Windows.Forms.DockStyle)">
      <summary>
      </summary>
      <param name="style">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockHelper.DirectionToAutoHideLocation(Nevron.UI.Direction)">
      <summary>
      </summary>
      <param name="dir">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.CaptionVisibility">
      <summary>
            Specifies possible caption visibilities.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.DockingPanelCaptionStyle">
      <summary>
            Specifies the possible caption styles of a NDockingPanel.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.DockingPanelCaptionStyle.PaletteDependent">
      <summary>
            The style depends on the current palette. 
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.DockingPanelCaptionStyle.VS2003">
      <summary>
            Visual Studio 2003 captions.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.DockingPanelCaptionStyle.VSWhidbey">
      <summary>
            Visual Studio Whidbey captions.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.DockingPanelCaptionStyle.VS2005">
      <summary>
            Visual Studio 2005 captions.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.DockingPanelCaptionStyle.Gradient">
      <summary>
            The captions are rendered using gradient fill.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.DockingPanelCaptionStyle.Solid">
      <summary>
            The captions are rendered using solid colors.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.DocumentStripButtons">
      <summary>
            Specifies the visibility of document strip buttons.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.DocumentStripButtons.None">
      <summary>
            No buttons are available.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.DocumentStripButtons.Arrows">
      <summary>
            Only arrow buttons are visible.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.DocumentStripButtons.DropDown">
      <summary>
            Only the drop-down button is visible.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.DocumentStripButtons.Close">
      <summary>
            Only the close button is visible.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.DocumentStripButtons.VS2003">
      <summary>
            Visual Studio 2003 style - arrows + close.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.DocumentStripButtons.VS2005">
      <summary>
            Visual Studio 2005 style - drop-down + close.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.DocumentStripButtons.All">
      <summary>
            All buttons are visible.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.DocumentViewStyle">
      <summary>
            Specifies the avialable document view styles which are supported by the framework.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.DocumentViewStyle.SingleDocument">
      <summary>
            The framework contains only one main document.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.DocumentViewStyle.MdiTabbed">
      <summary>
            Tabbed multiple document interface.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.DocumentViewStyle.MdiStandard">
      <summary>
            Standard multiple document interface.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.DockingStyleID">
      <summary>
            Enumerates the predefined styles registered with the docking framework.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.DockingStyleID.Caption">
      <summary>
            CaptionStyle
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.DockingStyleID.Tabs">
      <summary>
            TabStyle
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.DockingStyleID.Splitters">
      <summary>
            SplitterStyle
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.DockingStyleID.DockingHints">
      <summary>
            DockingHintStyle
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.DockingStyleID.Document">
      <summary>
            DocumentStyle
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.DockingStyleID.AutoHideTabs">
      <summary>
            Style for auto-hide strips
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.DockAreaMask">
      <summary>
            Specifies the available dock areas per INDockArea provider instance.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.DockAreaMask.None">
      <summary>
            No dock area is provided.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.DockAreaMask.Top">
      <summary>
            Top area.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.DockAreaMask.Left">
      <summary>
            Left area.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.DockAreaMask.Bottom">
      <summary>
            Bottom area.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.DockAreaMask.Right">
      <summary>
            Right area.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.DockAreaMask.Fill">
      <summary>
            DockStyle.Fill area.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.DockAreaMask.Edges">
      <summary>
            Top | Left | Bottom | Right areas.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.DockAreaMask.All">
      <summary>
            Fill | Edges areas.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.SizeLogic">
      <summary>
            Specifies how a INDockZoneChild is resized in its parent zone 
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.SizeLogic.AutoSize">
      <summary>
            The layout engine will determine the size.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.SizeLogic.Absolute">
      <summary>
            Absolute size is used.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.SizeLogic.Relative">
      <summary>
            Relative size is used.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.SizeLogic.FillInterior">
      <summary>
            The child fill fill all the avilable interior.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.SizeState">
      <summary>
            Enumerates the possible size state.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.SizeState.Normal">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.SizeState.Maximized">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.DockState">
      <summary>
            Specifies the current state of a INDockingPanel.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.DockState.Unknown">
      <summary>
            Unknown state.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.DockState.Floating">
      <summary>
            The panel is floating.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.DockState.Docked">
      <summary>
            The panel is docked in a container panel.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.DockState.Hidden">
      <summary>
            The panel is hidden.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.AutoHideLocation">
      <summary>
            Specifies the available location for an autohide operation.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.AutoHideLocation.Automatic">
      <summary>
            The location is automatically determined.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.AutoHideLocation.Nowhere">
      <summary>
            Nowhere. The panel cannot be autohidden.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.AutoHideLocation.Top">
      <summary>
            At top.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.AutoHideLocation.Left">
      <summary>
            At left.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.AutoHideLocation.Bottom">
      <summary>
            At bottom.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.AutoHideLocation.Right">
      <summary>
            At right.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.DragHint">
      <summary>
            Specifies the hint used to identify a drag operation.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.DragHint.None">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.DragHint.BeginDrag">
      <summary>
            The drag operation has just begun.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.DragHint.Drag">
      <summary>
            The drag operation is continuing.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.DragHint.EndDrag">
      <summary>
            The drag operation has just ended.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.DockingHint">
      <summary>
            Enumerates the possible dockable hints 
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.DockingHint.ReversibleFrame">
      <summary>
            A reversible frame is drawn on the screen.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.DockingHint.TranslucentFill">
      <summary>
            A rectangular area is filled with semi-transparent color.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.DockingHint.TranslucentClone">
      <summary>
            A semi-transparent image which represents the dragged panel
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.DockingHint.WindowContent">
      <summary>
            The window is dragged real-time.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.CaptionRefreshHint">
      <summary>
            Enumerates the possible hints used when refreshing a caption.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.CaptionRefreshHint.All">
      <summary>
            The entire caption is invalidated and re-painted.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.CaptionRefreshHint.Buttons">
      <summary>
            Only the buttons are invalidated and re-painted.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NDragInfo">
      <summary>
            Contains information about a drag operation.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDragInfo.CommitDrag">
      <summary>
            Gets or sets a value whether to accept the new state when the dragging ends.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDragInfo.DragBounds">
      <summary>
            Gets or sets the dragged bounds (in screen coordinates).
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDragInfo.PreviousBounds">
      <summary>
            Gets the previous dragged bounds (in screen coordinates).
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDragInfo.StartBounds">
      <summary>
            Gets the bounds at the start of dragging (in screen coordinates).
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDragInfo.Hint">
      <summary>
            Gets the hint about the current drag operation.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NVisualTabNavigationCommand">
      <summary>
            Represents a command which displays dialog for visual keyboard navigation.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NDocumentHost">
      <summary>
            Represents a host for document panels.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NDockingPanelHost">
      <summary>
            Represents a predefined control host zone which hosts a NDockingPanelGroup and allows for adding child panels.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NControlHost">
      <summary>
            Represents a generic dock zone which can host controls.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.INDockAreaProvider">
      <summary>
            Represents a generic object which provides NDockArea structures.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INDockAreaProvider.HitTest(System.Drawing.Point)">
      <summary>
            Checks whether the specified point is within any of the dock areas of this provider.
            </summary>
      <param name="client">The Point (in client coordinates) to check for.</param>
      <returns>The specified dock area if successful hit, NDockArea.Empty otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INDockAreaProvider.RectangleToScreen(System.Drawing.Rectangle)">
      <summary>
            Convert the specified rectange to screen coordinates.
            Typically this method calls the parent container's RectangleToScreen method.
            </summary>
      <param name="client">The rectangle in client coordinates to convert.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INDockAreaProvider.UpdateDockAreas">
      <summary>
            Recalculates the dock areas according to the current display rectangle. 
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.INDockAreaProvider.DockSurface">
      <summary>
            Gets the area available for hit-testing.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.INDockAreaProvider.DockAreas">
      <summary>
            Gets an array of all the dock areas provided by this object and all nested ones.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.INDockAreaProvider.LocalDockAreas">
      <summary>
            Gets the dock areas provided by this instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.INDockAreaProvider.DockAreaMask">
      <summary>
            Gets or sets the mask used when hit-testing the provider for a dock area.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NControlHost.HitTest(System.Drawing.Point)">
      <summary>
            Checks whether the specified point (in client coordinates) is contained by any dock area.
            </summary>
      <param name="client">The point to examine.</param>
      <returns>True if contained, false otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NControlHost.UpdateDockAreas">
      <summary>
            Recalculates the dock areas according to the current display rectangle. 
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NControlHost.RectangleToScreen(System.Drawing.Rectangle)">
      <summary>
            Convert the specified rectange to screen coordinates.
            Typically this method calls the parent container's RectangleToScreen method.
            </summary>
      <param name="client">The rectangle in client coordinates to convert.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NControlHost.SetBounds(System.Drawing.Rectangle)">
      <summary>
      </summary>
      <param name="r">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NControlHost.CanAcceptChild(Nevron.UI.WinForm.Docking.INDockZoneChild)">
      <summary>
      </summary>
      <param name="child">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NControlHost.PerformLayout">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NControlHost.SuspendLayout">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NControlHost.ResumeLayout(System.Boolean)">
      <summary>
      </summary>
      <param name="performLayout">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NControlHost.CanUpdate">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NControlHost.Update">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NControlHost.GetSerializationData">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NControlHost.GetEmpty">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NControlHost.GetInitialEmpty">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NControlHost.SetEmpty(System.Boolean)">
      <summary>
      </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NControlHost.PerformDispose">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NControlHost.UseFillDockArea(System.Drawing.Point)">
      <summary>
            Checks whether to use the specified dock area with DockStyle.Fill
            </summary>
      <param name="pt">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NControlHost.CreateControl">
      <summary>
            Creates the core instance of the control which is hosted by this zone.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NControlHost.DockSurface">
      <summary>
            Gets a rectangular area which represets the surface available for docking.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NControlHost.DockAreas">
      <summary>
            Gets an array of all the docking area provided by this instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NControlHost.MinimumSize">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NControlHost.Key">
      <summary>
            Gets or sets a string that uniquely identifies this control host. Used in a serialization process.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NControlHost.Controls">
      <summary>
            Gets the controls collection for the host.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NControlHost.BackColor">
      <summary>
            Gets or sets the back color for the control host.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelHost.UpdateFromZone(Nevron.UI.WinForm.Docking.INDockZone)">
      <summary>
      </summary>
      <param name="zone">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelHost.AddChild(Nevron.UI.WinForm.Docking.INDockZoneChild,System.Int32)">
      <summary>
      </summary>
      <param name="child">
      </param>
      <param name="index">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelHost.CanAcceptChild(Nevron.UI.WinForm.Docking.INDockZoneChild)">
      <summary>
      </summary>
      <param name="child">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelHost.OnChildAdded(Nevron.UI.WinForm.Docking.INDockZoneChild)">
      <summary>
      </summary>
      <param name="child">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelHost.OnChildRemoved(Nevron.UI.WinForm.Docking.INDockZoneChild)">
      <summary>
      </summary>
      <param name="child">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelHost.SetChildIndex(Nevron.UI.WinForm.Docking.INDockZoneChild,System.Int32)">
      <summary>
      </summary>
      <param name="child">
      </param>
      <param name="index">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelHost.ResumeLayout(System.Boolean)">
      <summary>
      </summary>
      <param name="performLayout">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelHost.GetSerializationData">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelHost.OnSizeInfoChanged(System.Object)">
      <summary>
      </summary>
      <param name="hint">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelHost.GetEmpty">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelHost.GetInitialEmpty">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelHost.UpdateEmptyState">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelHost.CreateControl">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelHost.CheckPreviousParent(Nevron.UI.WinForm.Docking.INDockZoneChild)">
      <summary>
      </summary>
      <param name="child">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelHost.UseFillDockArea(System.Drawing.Point)">
      <summary>
      </summary>
      <param name="pt">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelHost.MinimumSize">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelHost.SizeInfo">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelHost.DockSurface">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelHost.SelectedIndex">
      <summary>
            Gets or sets the selected index within the host.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDocumentHost.GetSerializationData">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDocumentHost.CreateControl">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDocumentHost.CanAcceptChild(Nevron.UI.WinForm.Docking.INDockZoneChild)">
      <summary>
      </summary>
      <param name="child">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDocumentHost.PerformDispose">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NHitTestService">
      <summary>
            Represents a service which performs a hit-test logic when a panel is dragged.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NDragOperationDockingService">
      <summary>
            Represents a service which observes a drag operation.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NDockingService">
      <summary>
            Represents a docking framework service.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.INDockingService">
      <summary>
            Provides a simple interface which only gets a reference to the current docking manager.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.INDockingService.Manager">
      <summary>
            Gets the manager of the docking framework this service is attached to.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingService.PerformDispose">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingService.Manager">
      <summary>
            Gets the NDockManager instance this service is attached to.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.INDragOperationObserver">
      <summary>
            Provides methods for an object which should be notified when a drag operation has started/ended.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INDragOperationObserver.OnDragOperationStarted(Nevron.UI.WinForm.Docking.INDragHandler)">
      <summary>
            The instance gets notified about a drag operation being started.
            </summary>
      <param name="notifier">The drag handler which stared the operation.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INDragOperationObserver.OnDragOperationEnded">
      <summary>
            The instance gest notified about a drag operation being ended.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.INDragOperationObserver.DragHandler">
      <summary>
            Gets the drag handler which processes the current drag operation (if any).
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDragOperationDockingService.OnDragOperationStarted(Nevron.UI.WinForm.Docking.INDragHandler)">
      <summary>
            The observer gets notified for a drag operation start.
            </summary>
      <param name="notifier">The drag handler that started the operation.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDragOperationDockingService.OnDragOperationEnded">
      <summary>
            The observer gets notified for a drag operation ended.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDragOperationDockingService.Prepare">
      <summary>
            Prepares for a drag operation.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDragOperationDockingService.Reset">
      <summary>
            Resets after a drag operation.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDragOperationDockingService.PerformDispose">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDragOperationDockingService.DragHandler">
      <summary>
            Gets the current drag handler. Will be null if no drag operation is running.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.INHitTestService">
      <summary>
            Provides a simple method for hittesting for a valid dock area under the specified screen location.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INHitTestService.HitTest(System.Drawing.Point)">
      <summary>
            Searches for all INDockAreaProvider instances under the specified location and selects the most appropriate dock area.
            </summary>
      <param name="screenLocation">The point (in screen coordinates) to examine.</param>
      <returns>NDockArea.Empty if the hittest was not successful.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NHitTestService.HitTest(System.Drawing.Point)">
      <summary>
            Searches for a valid dock area under the specified screen location (typically this is the mouse position).
            </summary>
      <param name="screenLocation">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NHitTestService.Prepare">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NHitTestService.Reset">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NDockingFrameworkRenderer">
      <summary>
            Provides base methods for rendering docking framework elements such as captions, splitters, frames, tabs, etc.
            By default the entire framework shares a single instance of this renderer.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingFrameworkRenderer.DrawCaption(Nevron.UI.WinForm.Docking.NRenderCaptionContext)">
      <summary>
            Renders a caption.
            </summary>
      <param name="context">An object containing information about the current paint operation.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingFrameworkRenderer.DrawCaptionGradient(Nevron.UI.WinForm.Docking.NRenderCaptionContext)">
      <summary>
            Renders a gradient caption.
            </summary>
      <param name="context">An object containing information about the current paint operation.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingFrameworkRenderer.DrawCaptionWinDef(Nevron.UI.WinForm.Docking.NRenderCaptionContext)">
      <summary>
            Renders a windows default caption. If a system theme is applied that theme will be used. Otherwise a standard win 2000 drawing will be applied.
            </summary>
      <param name="context">An object containing information about the current paint operation.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingFrameworkRenderer.DrawCaptionVS2003(Nevron.UI.WinForm.Docking.NRenderCaptionContext,System.Boolean)">
      <summary>
            Renders a standard caption. That is the Visual Studio 2003 style.
            </summary>
      <param name="context">An object containing information about the current paint operation.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingFrameworkRenderer.DrawCaptionText(Nevron.UI.WinForm.Docking.NRenderCaptionContext)">
      <summary>
            Renders caption text.
            </summary>
      <param name="context">An object containing information about the current paint operation.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingFrameworkRenderer.DrawCaptionButtons(Nevron.UI.WinForm.Docking.NRenderCaptionContext)">
      <summary>
            Renders buttons on a caption.
            </summary>
      <param name="context">An object containing information about the current paint operation.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingFrameworkRenderer.DrawCaptionButton(Nevron.UI.WinForm.Docking.NRenderCaptionContext,Nevron.UI.WinForm.Docking.NCaptionButton)">
      <summary>
            Renders a single caption button.
            </summary>
      <param name="context">An object containing information about the current paint operation.</param>
      <param name="button">The button to render.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingFrameworkRenderer.DrawCaptionButtonDefault(Nevron.UI.WinForm.Docking.NRenderCaptionContext,Nevron.UI.WinForm.Docking.NCaptionButton)">
      <summary>
            Renders a default caption button. That is when the current color scheme is neither standard nor windows default.
            </summary>
      <param name="context">An object containing information about the current paint operation.</param>
      <param name="button">The button to render.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingFrameworkRenderer.DrawCaptionButtonWinDef(Nevron.UI.WinForm.Docking.NRenderCaptionContext,Nevron.UI.WinForm.Docking.NCaptionButton)">
      <summary>
            Renders a windows default caption button.
            </summary>
      <param name="context">An object containing information about the current paint operation.</param>
      <param name="button">The button to render.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingFrameworkRenderer.DrawCaptionButtonStandard(Nevron.UI.WinForm.Docking.NRenderCaptionContext,Nevron.UI.WinForm.Docking.NCaptionButton)">
      <summary>
            Renders a standard caption button.
            </summary>
      <param name="context">An object containing information about the current paint operation.</param>
      <param name="button">The button to render.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingFrameworkRenderer.DrawCaptionButtonText(Nevron.UI.WinForm.Docking.NRenderCaptionContext,Nevron.UI.WinForm.Docking.NCaptionButton)">
      <summary>
            Renders the text on a caption button.
            </summary>
      <param name="context">An object containing information about the current paint operation.</param>
      <param name="button">The button which text is to be rendered.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingFrameworkRenderer.DrawFrame(Nevron.UI.WinForm.Docking.NRenderFrameContext)">
      <summary>
            Renders a floating frame.
            </summary>
      <param name="context">An object containing information about the current paint operation.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingFrameworkRenderer.DrawFrameWinDef(Nevron.UI.WinForm.Docking.NRenderFrameContext)">
      <summary>
            Renders a windows default frame.
            </summary>
      <param name="context">An object containing information about the current paint operation.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingFrameworkRenderer.DrawFrameStandard(Nevron.UI.WinForm.Docking.NRenderFrameContext)">
      <summary>
            Renders a standard frame.
            </summary>
      <param name="context">An object containing information about the current paint operation.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingFrameworkRenderer.CreatePaletteCore">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingFrameworkRenderer.Update">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingFrameworkRenderer.GetDockPreviewRegion(Nevron.UI.WinForm.Docking.NDockingPanelDragInfo)">
      <summary>
            Creates a Region object which will be used for generating docking hint during drag operation.
            </summary>
      <param name="info">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NDragHandler">
      <summary>
            Represents an object which handles drag operations.
            All panels delegate their dragging to such an instance.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.INDragHandler">
      <summary>
            Provides interface for implementing drag behavior for draggable objects.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INDragHandler.CanDrag(Nevron.UI.WinForm.Docking.INDraggableControl)">
      <summary>
            Checks whether
            </summary>
      <param name="control">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INDragHandler.BeginDrag(Nevron.UI.WinForm.Docking.INDraggableControl)">
      <summary>
            Starts dragging the specified control.
            The default processing installs a local modal message loop and filters messages which are not for the currently dragged instance.
            </summary>
      <param name="control">The control to drag.</param>
      <returns>True if a drag operation was started successfully, false otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INDragHandler.EndDrag(System.Boolean)">
      <summary>
            Ends currently active drag operation.
            </summary>
      <param name="commit">True to commit the dragging, false otherwise.</param>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.INDragHandler.Dragging">
      <summary>
            Gets a value whether the handler is currently in a process of dragging.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.INDragHandler.DraggedControl">
      <summary>
            Gets the current INDraggableControl instance.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDragHandler.CanDrag(Nevron.UI.WinForm.Docking.INDraggableControl)">
      <summary>
            Checks whether this drag handler can handle the specified INDraggableControl instance.
            </summary>
      <param name="control">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDragHandler.BeginDrag(Nevron.UI.WinForm.Docking.INDraggableControl)">
      <summary>
            Begins a drag operation for the specified INDraggableControl instance.
            </summary>
      <param name="control">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDragHandler.EndDrag(System.Boolean)">
      <summary>
            Ends the drag operation either successfully or not.
            </summary>
      <param name="commit">True to commit the drag operation, false to skip it.</param>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDragHandler.Dragging">
      <summary>
            Gets a value indicating whether there is currently an active drag operation.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDragHandler.DraggedControl">
      <summary>
            Gets the INDraggableControl instance which is currently being dragged.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDragHandler.Hook">
      <summary>
            Gets or sets the hook object that installs modal message loops and filters windows messages.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NDockingStickerTemplate">
      <summary>
            Represents a template for docking stickers.
            Each template contains complete information about the bitmaps to be used when generating docking hints.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingStickerTemplate.CheckCanEdit">
      <summary>
            Checks whether the current instance can be edited.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingStickerTemplate.ToString">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingStickerTemplate.ShouldSerializeHorzImageSize">
      <summary>
            Checks whether the horizontal image size should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingStickerTemplate.ShouldSerializeVertImageSize">
      <summary>
            Checks whether the vertical image size should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingStickerTemplate.Name">
      <summary>
            Gets or sets the human readable name of the template.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingStickerTemplate.IsResource">
      <summary>
            Gets or sets a value indicating how to load the bitmaps - as resources or from files.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingStickerTemplate.Editable">
      <summary>
            Gets or sets a value whether the user can change this template.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingStickerTemplate.HorzImageSize">
      <summary>
            Gets or sets the size of the left and right images.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingStickerTemplate.VertImageSize">
      <summary>
            Gets or sets the size of the top and bottom images.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingStickerTemplate.TopImagePath">
      <summary>
            Gets or sets the path to the image for the top sticker.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingStickerTemplate.LeftImagePath">
      <summary>
            Gets or sets the path to the image for the left sticker.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingStickerTemplate.BottomImagePath">
      <summary>
            Gets or sets the path to the image for the bottom sticker.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingStickerTemplate.RightImagePath">
      <summary>
            Gets or sets the path to the image for the right sticker.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingStickerTemplate.AllImagePath">
      <summary>
            Gets or sets the path to the image for the all sticker.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingStickerTemplate.ResourceAssemblyTypeName">
      <summary>
            Gets or sets a type name (any type) that is declared in the assembly where the resources are located.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NAutoHideStripsData">
      <summary>
            Summary description for NAutoHideStripsData.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NAutoHideStripsData.TopContainerSize">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NAutoHideStripsData.LeftContainerSize">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NAutoHideStripsData.BottomContainerSize">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NAutoHideStripsData.RightContainerSize">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NDocumentsEditor">
      <summary>
            Summary description for NDocumentsList.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NPanelCommand">
      <summary>
            Summary description for NPanelCommand.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NPanelCommand.ExecuteCore(System.Object)">
      <summary>
      </summary>
      <param name="param">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NPanelCommand.OnNextPanel(System.Boolean)">
      <summary>
            Selects the next panel from the dock manager's collection.
            </summary>
      <param name="forward">True to select next, false to select previous.</param>
      <returns>True if execution was successful, false otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NPanelCommand.OnNextPanelTab(System.Boolean)">
      <summary>
            Select the next tab in the currently active panel group.
            </summary>
      <param name="forward">True to select next, false to select previous.</param>
      <returns>True if execution was successful, false otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NPanelCommand.OnClosePanel">
      <summary>
            Closes the currently active panel.
            </summary>
      <returns>True if execution was successful, false otherwise.</returns>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NTabStyle">
      <summary>
            Controls appearance of docking framework tabstrips.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NTabStyle.SetDefaults">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NTabStyle.PerformDispose">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NTabStyle.Copy(Nevron.UI.WinForm.Docking.NStyle)">
      <summary>
      </summary>
      <param name="style">
      </param>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NTabStyle.PropertyPage">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NTabStyle.DefaultTabStyle">
      <summary>
            Gets the default style of tabs.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NTabStyle.DefaultFont">
      <summary>
            Gets the default font for the tabs.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NTabStyle.TabStyle">
      <summary>
            Gets or sets the style of the tabs.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NTabStyle.TabAlign">
      <summary>
            Gets or sets the alignment of the tabs.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NTabStyle.TextOrientation">
      <summary>
            Gets or sets the orientation for the tabs text.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NTabStyle.TextVisibility">
      <summary>
            Gets or sets the TabTextVisibility value to be used for strips.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NTabStyle.Font">
      <summary>
            Gets or sets the Font to be used when rendering tabs.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NTabStyle.AutomaticTabStyle">
      <summary>
            Gets or sets a value whether the tabstyle will be dependant on the current palette.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NSingleDocumentData">
      <summary>
            Summary description for NSingleDocumentData.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NCaptionBar">
      <summary>
            Encapsulates the basic functionality of a caption bar.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NCaptionBar.Measure(Nevron.UI.WinForm.Controls.NMeasureStringInfo)">
      <summary>
            Measures the current text.
            </summary>
      <param name="info">An object containing the measurement parameters.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NCaptionBar.Update(System.Drawing.Rectangle)">
      <summary>
            Updates the caption to fit the specified bounds.
            </summary>
      <param name="bounds">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NCaptionBar.GetButtonsArea">
      <summary>
            Gets the smallest rectangle that contains all the buttons.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NCaptionBar.ButtonsContains(System.Drawing.Point)">
      <summary>
            Checks whether a button contains the specified point.
            </summary>
      <param name="pt">The point to check for.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NCaptionBar.ResetButtons">
      <summary>
            Resets all the buttons to their default state.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NCaptionBar.GetButton(System.Int32)">
      <summary>
            Gets the button with the specififed id.
            </summary>
      <param name="id">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NCaptionBar.LayoutButtons(System.Drawing.Rectangle)">
      <summary>
            Performs layout upon the buttons.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NCaptionBar.SetButtonsVisibility(System.Boolean)">
      <summary>
            Shows/hides all the buttons.
            </summary>
      <param name="visible">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NCaptionBar.ButtonFromPoint(System.Drawing.Point)">
      <summary>
            Gets the button which bounds contains the specified point.
            </summary>
      <param name="point">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NCaptionBar.ButtonSize">
      <summary>
            Gets the single button size.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NCaptionBar.Buttons">
      <summary>
            Gets the collection of all buttons. Buttons are arranged right-to-left
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NCaptionBar.Container">
      <summary>
            Gets the INCaptionControl instance which contains this caption bar.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NCaptionBar.ImageIndex">
      <summary>
            Gets or sets the image index to use from the imagelist.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NCaptionBar.Image">
      <summary>
            Gets or sets the image to be displayed by the caption bar.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NCaptionBar.ImageList">
      <summary>
            Gets or sets the imagelist to be used by the caption bar.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NCaptionBar.ImageSize">
      <summary>
            Gets or sets the size to be used when calculating image bounds.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NCaptionBar.AutomaticTooltips">
      <summary>
            Gets or sets a value indicating whether the tooltips for the internally created buttons will be updated depending on their state.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NCaptionBar.DisplayTooltips">
      <summary>
            Gets or sets a value indicating whether the caption bar will display tooltips.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NCaptionBar.Padding">
      <summary>
            Gets or sets the internal padding of the caption.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NDockStyleFilter">
      <summary>
            Summary description for NDockStyleFilter.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockStyleFilter.Filter(System.Object)">
      <summary>
      </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NTabStylePropertyPage">
      <summary>
            Summary description for NTabStylePropertyPage.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NDockingFrameworkCommander">
      <summary>
            Manages the command model of the docking framework.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingFrameworkCommander.GetCommandById(System.Int32)">
      <summary>
            Gets the command with the specified id.
            </summary>
      <param name="id">The id to search for.</param>
      <returns>A NDockingFrameworkCommand instance if a command with the specified id exists, null otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingFrameworkCommander.GetCommandByName(System.String)">
      <summary>
            Gets the command with the specified name.
            </summary>
      <param name="name">The name to search for.</param>
      <returns>A NDockingFrameworkCommand instance if a command with the specified name exists, null otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingFrameworkCommander.GetCommandByKeys(System.Windows.Forms.Keys)">
      <summary>
            Gets the command which contains a shortcut with the specified keys.
            </summary>
      <param name="keys">The keys to search for.</param>
      <returns>A NDockingFrameworkCommand instance if a command containing a shortcut with the specified keys exists, null otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingFrameworkCommander.RegisterCommand(Nevron.UI.WinForm.Docking.NDockingFrameworkCommand)">
      <summary>
            Registers a command with the commander.
            </summary>
      <param name="command">The command to register.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingFrameworkCommander.UnregisterCommand(Nevron.UI.WinForm.Docking.NDockingFrameworkCommand)">
      <summary>
            Unregister a command from the commander.
            </summary>
      <param name="command">The command to remove.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingFrameworkCommander.ExecuteCommand(System.Int32)">
      <summary>
            Executes a command. The command is searched by the specified id.
            </summary>
      <param name="id">The id to search for.</param>
      <returns>True if a command was successfully executed, false otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingFrameworkCommander.ExecuteCommand(System.Int32,System.Object)">
      <summary>
            Executes a command with an optional parameter. The command is searched by the specified id.
            </summary>
      <param name="id">The id to search for.</param>
      <param name="param">An additional execution parameter.</param>
      <returns>True if a command was successfully executed, false otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingFrameworkCommander.ExecuteCommand(System.String)">
      <summary>
            Executes a command. The command is searched by name.
            </summary>
      <param name="name">The name to search for.</param>
      <returns>True if a command was successfully executed, false otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingFrameworkCommander.ExecuteCommand(System.String,System.Object)">
      <summary>
            Executes a command with an optional parameter. The command is searched by name.
            </summary>
      <param name="name">The name to search for.</param>
      <param name="param">An additional execution parameter.</param>
      <returns>True if a command was successfully executed, false otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingFrameworkCommander.ExecuteCommand(System.Windows.Forms.KeyEventArgs)">
      <summary>
            Executes a command. The commander tries to find a command by keys and if a match is found the command is executed.
            </summary>
      <param name="e">The specified key event arguments.</param>
      <returns>True if a command was found and executed, false otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingFrameworkCommander.ShowKeyboardEditor">
      <summary>
            Displays a dialog to visually edit shortcuts associated with the commands.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingFrameworkCommander.Commands">
      <summary>
            Gets an array of all the commands registered with the commander.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NRenderFrameContext">
      <summary>
            Represents a render context which contains information about how a frame should be rendered.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NRenderCaptionContext">
      <summary>
            Summary description for NRenderCaptionContext.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NRenderContext">
      <summary>
            Provides common render information.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NRenderContext.Reset">
      <summary>
            Resets the context to its infinite state.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.NRenderContext.Bounds">
      <summary>
            The bounds into which painting will occur.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.NRenderContext.ClipBounds">
      <summary>
            The clip bounds.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.NRenderContext.Graphics">
      <summary>
            The graphics object to be used by the drawing operation.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.NRenderContext.CurrentSkin">
      <summary>
            The NSkin instance currently used to visualize GUI elements.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NRenderContext.IsValid">
      <summary>
            Determines whether the context is valid and might be used by a renderer.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NRenderCaptionContext.Reset">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.NRenderCaptionContext.IsActive">
      <summary>
            Specifies whether the caption is active.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.NRenderCaptionContext.DrawGripper">
      <summary>
            Specifies whether to draw grippers.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.NRenderCaptionContext.GripperStyle">
      <summary>
            Specifies the current gripper style to be applied.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.NRenderCaptionContext.Text">
      <summary>
            The text of the caption.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.NRenderCaptionContext.TextSize">
      <summary>
            The text size.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.NRenderCaptionContext.TextBounds">
      <summary>
            The rectangle where the text should be rendered.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.NRenderCaptionContext.CaptionBounds">
      <summary>
            The bounds (in client coordinates) of the caption.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.NRenderCaptionContext.Font">
      <summary>
            The Font object to be used.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.NRenderCaptionContext.Buttons">
      <summary>
            A collection of all the buttons visible on the caption.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.NRenderCaptionContext.HTheme">
      <summary>
            A specific value used to render XP themes.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.NRenderCaptionContext.Image">
      <summary>
            The image to draw on the caption
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.NRenderCaptionContext.ImageRect">
      <summary>
            The rect where to render image.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.NRenderCaptionContext.ButtonsRect">
      <summary>
            The smallest rectangle that contains all the buttons
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.NRenderCaptionContext.Panel">
      <summary>
            Gets the INDockingPanel instance associated with the rendering operation.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.NRenderCaptionContext.IsFloating">
      <summary>
            Determines whether the rendered panel is currently floating.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.NRenderFrameContext.Borders">
      <summary>
            A collection of all the NBorder objects forming the frame.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NControlHostData">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NControlHostData.Key">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NDockManager">
      <summary>
            Represents the top-level manager of the docking framework.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockManager.ApplyPalette(Nevron.UI.WinForm.Controls.NPalette)">
      <summary>
            Applies the specified palette to the entire framework.
            </summary>
      <param name="palette">The palette to apply.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockManager.OnKeyPreview(System.Windows.Forms.KeyEventArgs,System.Windows.Forms.Message@)">
      <summary>
            Gets notified for a keyboard event.
            The default processing examines the event arguments
            and searches for a registered command which has specified the current key combination as a shortcut.
            </summary>
      <param name="e">The keyboard event arguments.</param>
      <param name="m">The Windows message that generated the event.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockManager.Dispose(System.Boolean)">
      <summary>
      </summary>
      <param name="disposing">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockManager.InitDefault">
      <summary>
            Performs default initialization of the manager.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockManager.HookToForm(System.Windows.Forms.Form)">
      <summary>
            Attaches to the root form's events like Activated and Deactivate
            </summary>
      <param name="form">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockManager.UnhookForm">
      <summary>
            Detaches from the current form.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockManager.PerformDispose">
      <summary>
            Performs the core dispose logic.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockManager.CreateDocumentManagerInstance">
      <summary>
            Creates the core document manager instance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockManager.OnFormActivated(System.Object,System.EventArgs)">
      <summary>
            Gets notified that the main form has been activated.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockManager.OnFormDeactivated(System.Object,System.EventArgs)">
      <summary>
            Gets notified that the main form has been deactivated.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockManager.OnFormClosing(System.Object,System.ComponentModel.CancelEventArgs)">
      <summary>
            Gets notified that the main form has is about to be closed.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockManager.CloseAutoHidingPanel">
      <summary>
            Closes the currently displayed panel which state is AutoHide.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockManager.AddContainer(System.Windows.Forms.DockStyle)">
      <summary>
            Registers a container with the framework and sets its dockstyle to the specified one.
            </summary>
      <param name="style">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockManager.FindContainer(System.Guid)">
      <summary>
            Seraches from all registered containers for the one which id is equal to the specified one.
            </summary>
      <param name="id">The id to search for.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockManager.GetContainers(Nevron.UI.WinForm.Docking.DockState)">
      <summary>
            Gets an array of docking containers which match the specified dock state mask.
            </summary>
      <param name="state">The specified state to check for.</param>
      <returns>An arraylist populated with all the matches.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockManager.GetPanels(Nevron.UI.WinForm.Docking.DockState)">
      <summary>
            Gets all the docking panels that have the specified dock state.
            </summary>
      <param name="state">The dock state to search for</param>
      <returns>An array list of INDockingPanel objects.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockManager.GetPanelByKey(System.String)">
      <summary>
      </summary>
      <param name="key">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockManager.GetControlHostByKey(System.String)">
      <summary>
      </summary>
      <param name="key">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockManager.FindZone(System.Guid)">
      <summary>
            Searches for a INDockZone instance with the specified id.
            </summary>
      <param name="id">The id to search for.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockManager.FindPanel(System.Guid)">
      <summary>
            Finds the panel with the specified id.
            </summary>
      <param name="id">The id to search for.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockManager.LockPanels">
      <summary>
            Locks all the panels and does not allow the user to visually reposition them.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockManager.UnlockPanels">
      <summary>
            Unlocks the panels visual functionality.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockManager.GetPanelsLocked">
      <summary>
            Determines whether the panels are currently locked.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockManager.NotifyRefresh">
      <summary>
            Forces an immediate refresh of all containers.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockManager.NotifyPaletteChange">
      <summary>
            Notifies the entire framework that a palette change has occured.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockManager.NotifyCaptionUpdate">
      <summary>
            Forces all the panels which captions are visible to update them.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockManager.NotifyCaptionUpdate(System.Boolean)">
      <summary>
            Forces all the panels which captions are visible to update them and optionally to perform layout.
            </summary>
      <param name="layout">True to perform layout, false otherwise.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockManager.NotifyTabPropertyChange">
      <summary>
            Notifies that a tab property change has occured.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockManager.NotifyAutoHideTabsUpdate">
      <summary>
            Notifies that a tab property change has occured.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockManager.NotifyGroupUpdate">
      <summary>
            Forces all docking panel groups to update their tab strips and borders.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockManager.NotifyDocumentStripsUpdate">
      <summary>
            Forces all the document strips to update their appearance.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockManager.NotifyLayout">
      <summary>
            Forces all the containers to perform layout.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockManager.NotifyTotalUpdate">
      <summary>
            Forces total update. That is caption update, tab strip update and perform layout.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockManager.NotifySplittersUpdate(System.Boolean)">
      <summary>
            Forces all the splitters to update their appearance.
            </summary>
      <param name="layout">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockManager.ResetLayout">
      <summary>
            Resets the current layout to its infinite state.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockManager.SuspendLayout">
      <summary>
            Suspends any layout operations in the containers.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockManager.ResumeLayout(System.Boolean)">
      <summary>
            Resumes layout operations in the containers.
            </summary>
      <param name="performLayout">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockManager.StartBatchOperation">
      <summary>
            Starts and prepares for a batch operation.
            For example a batch operation is redocking a floating container with 5 panels residing in it.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockManager.EndBatchOperation">
      <summary>
            Ends previously started batch operation.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockManager.SuspendPainting">
      <summary>
            Locks any painting operation upon the docking framework.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockManager.ResumePainting(System.Boolean)">
      <summary>
            Resumes previously locked painting.
            </summary>
      <param name="refresh">True to force a refresh, false otherwise.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockManager.ShowEditor">
      <summary>
            Displays a dialog box to visually edit some of the manager's properties.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockManager.QueryService(System.Type)">
      <summary>
            Gets a currently registered service which is an instance of the specified type.
            </summary>
      <param name="serviceType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockManager.RegisterService(System.Type,System.Boolean)">
      <summary>
            Registers a service which is of the specified type.
            </summary>
      <param name="serviceType">The service type.</param>
      <param name="overrideExisting">True to replace an exisiting service of the specified type, false otherwise.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockManager.RegisterDockPanel(Nevron.UI.WinForm.Docking.INDockingPanel)">
      <summary>
            Registers the panel with the manager.
            </summary>
      <param name="panel">The panel to register.</param>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockManager.EnableSkinning">
      <summary>
            Determines whether the skinning logic may be applied on the framework managed by this instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockManager.Skin">
      <summary>
            Gets or sets the local NSkin instance to be used when painting this control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockManager.CurrentSkin">
      <summary>
            Gets the current skin to be used by this instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockManager.Palette">
      <summary>
            Gets or sets the palette used to render docking panels GUI elements
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockManager.PaletteInheritance">
      <summary>
            Gets or sets a bitwise mask specifying local palette inheritance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockManager.PropertyPage">
      <summary>
            Gets the property page used to visually edit this manager.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Docking.NDockManager.PreviewKey">
      <summary>
            Fired before the default processing of keyboard events occurs.
            Set the Handled property of the event arguments to prevent it from the default processing.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Docking.NDockManager.PanelBeginDrag">
      <summary>
            Notifies that a panel drag operation has just started.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Docking.NDockManager.PanelDragging">
      <summary>
            Notifies that a panel is being dragged. Cancelable.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Docking.NDockManager.PanelEndDrag">
      <summary>
            Notifies of a panel drag operation end.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Docking.NDockManager.PanelActivating">
      <summary>
            Notifies of a panel activation.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Docking.NDockManager.PanelActivated">
      <summary>
            Notifies that a panel has been activated.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Docking.NDockManager.PanelDeactivating">
      <summary>
            Notifies of a panel deactivation.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Docking.NDockManager.PanelDeactivated">
      <summary>
            Notifies that a panel has been deactivated.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Docking.NDockManager.BeforePanelFloat">
      <summary>
            Notifies that a panel is about to become floating. Cancelable.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Docking.NDockManager.AfterPanelFloat">
      <summary>
            Notifies that a panel has become floating.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Docking.NDockManager.BeforePanelDock">
      <summary>
            Notifies that a panel is about to become docked. Cancelable.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Docking.NDockManager.AfterPanelDock">
      <summary>
            Notifies that a panel has become docked.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Docking.NDockManager.BeforePanelAutoHide">
      <summary>
            Notifies that a panel is about to become autohiding. Cancelable.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Docking.NDockManager.AfterPanelAutoHide">
      <summary>
            Notifies that a panel has become autohiding.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Docking.NDockManager.PanelClosing">
      <summary>
            Notifies that a panel is about to be closed. Cancelable.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Docking.NDockManager.PanelClosed">
      <summary>
            Notifies that a panel has been closed.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Docking.NDockManager.PanelDisplaying">
      <summary>
            Notifies that a panel is about to be displayed. Cancelable.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Docking.NDockManager.PanelDisplayed">
      <summary>
            Notifies that a panel has been displayed.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Docking.NDockManager.AutoHidePanelDisplay">
      <summary>
            Notifies that an auto-hiding panel is displayed.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Docking.NDockManager.AutoHidePanelClose">
      <summary>
            Notifies that an auto-hiding panel is hidden.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Docking.NDockManager.DocumentTabDoubleClick">
      <summary>
            Notifies that the tab of the NUIDocument was double clicked.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockManager.GroupBorderStyle">
      <summary>
            Gets or sets the default border style for panel's groups.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockManager.CaptionStyle">
      <summary>
            Gets or sets the object that controls caption appearance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockManager.TabStyle">
      <summary>
            Gets or sets the object that controls tabs appearance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockManager.AutoHideTabStyle">
      <summary>
            Gets or sets the object that controls auto-hide tabs appearance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockManager.SplitterStyle">
      <summary>
            Gets or sets the object that controls splitters appearance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockManager.DockingHintStyle">
      <summary>
            Gets or sets the object that controls docking hints appearance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockManager.DocumentStyle">
      <summary>
            Gets or sets the object that controls documents appearance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockManager.StyleComposite">
      <summary>
            Gets the INStyleComposite instance that contains styles.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockManager.Renderer">
      <summary>
            Gets or sets the renderer used to draw ui elements of the framework.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockManager.LayoutEngine">
      <summary>
            Gets or sets the layout engine to be used by the entire framework.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockManager.DragHandler">
      <summary>
            Gets or sets the object that handles panel dragging.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockManager.ImageList">
      <summary>
            Gets or sets the ImageList object to be used by the entire framework.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockManager.Form">
      <summary>
            Specifies the main form of the application. The manager needs it in order to properly react on activate/deactivate of the form.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockManager.Containers">
      <summary>
            Gets an array of all the containers registered by the manager.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockManager.ActivePanel">
      <summary>
            Gets the currently active panel of the framework.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockManager.Panels">
      <summary>
            Gets all the docking panels registered by the framework.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockManager.DockSurface">
      <summary>
            Get the Form's surface which contains all the docking containers.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockManager.RootContainer">
      <summary>
            Gets the root container of the docking framework.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockManager.DocumentManager">
      <summary>
            Get the manager for documents.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockManager.Commander">
      <summary>
            Get or sets the commander of the manager.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockManager.RootContainerZIndex">
      <summary>
            Gets or sets the Z-index of the root container on the form.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockManager.RootContainerDockStyle">
      <summary>
            Gets or sets the dockstyle for the root container which is DockStyle.Fill by default.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockManager.StickyFloatingFrames">
      <summary>
            Gets or sets a value whether the floating frames will stick to each other and to the main form.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockManager.StickToMainForm">
      <summary>
            Gets or sets a value whether the floating frames will stick also to the main form.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockManager.StickToWorkingArea">
      <summary>
            Gets or sets a value whether the floating frames will also stick to the working area of the main form.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockManager.VisualTabEditorMode">
      <summary>
            Gets or sets the visual tab editor mode.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockManager.StickyOptions">
      <summary>
            Gets the options which controls the floating frame sticking.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockManager.UndockToleranceSize">
      <summary>
            Gets/Sets the size of the mouse trip before the draggable docking panel to become floating.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockManager.AllowEditTabText">
      <summary>
            Gets/Sets whether the user can change the text of the document tabs.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockManager.DisposePanelsOnClose">
      <summary>
            Gets/Sets whether the Docking Panels should be disposed when they are closed.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NDockingPanelPermissions">
      <summary>
            Contains all the permissions available for a NDockingPanel instance.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelPermissions.ToString">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelPermissions.Copy(Nevron.UI.WinForm.Docking.NDockingPanelPermissions)">
      <summary>
            Copies fields form the specified permission.
            </summary>
      <param name="permissions">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelPermissions.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>
            Gets notified of a property changed.
            </summary>
      <param name="args">
      </param>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelPermissions.AllowHide">
      <summary>
            Gets or sets a value whether the panel can be hidden.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelPermissions.AllowFloat">
      <summary>
            Gets or sets a value whether the panel can float.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelPermissions.AllowDock">
      <summary>
            Gets or sets a value whether the panel can be docked.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelPermissions.AllowDrag">
      <summary>
            Gets or sets a value whether the panel can be dragged using the left mouse button.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelPermissions.AllowMaximize">
      <summary>
            Gets or sets a value whether the panel can be maximized.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelPermissions.AllowAutoHide">
      <summary>
            Gets or sets a value whether the panel can autohide.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelPermissions.Editable">
      <summary>
            Gets or sets a value whether the user can edit current permissions.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelPermissions.ExposedDockAreas">
      <summary>
            Gets or sets the dock areas exposed by this panel.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelPermissions.AllowedDockAreas">
      <summary>
            Gets or sets the dock areas allowed for this panel to dock to.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NOrientationFilter">
      <summary>
            Summary description for NOrientationFilter.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NOrientationFilter.Filter(System.Object)">
      <summary>
      </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NDockingStickerTemplateCollection">
      <summary>
            Represents a collection of NDockingStickerTemplate objects.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingStickerTemplateCollection.Add(Nevron.UI.WinForm.Docking.NDockingStickerTemplate)">
      <summary>
            Adds a new template to the collection.
            </summary>
      <param name="template">The template to add.</param>
      <returns>The index at which the template was inserted. -1 if an error occured.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingStickerTemplateCollection.Remove(Nevron.UI.WinForm.Docking.NDockingStickerTemplate)">
      <summary>
            Removes the specified template from the collection.
            </summary>
      <param name="template">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingStickerTemplateCollection.Contains(Nevron.UI.WinForm.Docking.NDockingStickerTemplate)">
      <summary>
            Checks whether the specified template is contained within the collection.
            </summary>
      <param name="template">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingStickerTemplateCollection.IndexOf(Nevron.UI.WinForm.Docking.NDockingStickerTemplate)">
      <summary>
            Gets the zero-based index of the specified template in the collection.
            </summary>
      <param name="template">
      </param>
      <returns>-1 if the template is not contained.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingStickerTemplateCollection.OnInsertComplete(System.Int32,System.Object)">
      <summary>
      </summary>
      <param name="index">
      </param>
      <param name="value">
      </param>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NDocumentCommand">
      <summary>
            Summary description for NDocumentCommand.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDocumentCommand.ExecuteCore(System.Object)">
      <summary>
      </summary>
      <param name="param">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDocumentCommand.OnNextDocument(System.Boolean)">
      <summary>
            Selects the next(previous) document.
            </summary>
      <param name="forward">True to select the next, false to select the previous.</param>
      <returns>True if execution was successful, false otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDocumentCommand.OnNextDocumentTab(System.Boolean)">
      <summary>
            Selects the next tab in the document view. Valid when the current view is MdiTabbed.
            </summary>
      <param name="forward">True to select the next tab, false to select the previous.</param>
      <returns>True if execution was successful, false otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDocumentCommand.OnCloseDocument">
      <summary>
            Closes the current active document.
            </summary>
      <returns>True if execution was successful, false otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDocumentCommand.OnCloseAllDocuments">
      <summary>
            Closes all the documents registered with the document manager.
            </summary>
      <returns>True if execution was successful, false otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDocumentCommand.OnMdiLayout(System.Windows.Forms.MdiLayout)">
      <summary>
            Performs StandardMdi specific layout upon all document hosts.
            </summary>
      <param name="layout">The desired MdiLayout value.</param>
      <returns>True if execution was successful, false otherwise.</returns>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NDocumentViewHost">
      <summary>
            Represents a dock zone which will host the document view.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDocumentViewHost.GetSerializationData">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDocumentViewHost.MinimumSize">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NUIWinFormDockingLoadAssemblyType">
      <summary>
            Used to explicitly load the Nevron.UI.WinForm.Docking.dll assembly.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NDocumentManager">
      <summary>
            Represents a top-level manager of all the available documents.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDocumentManager.GetSerializationData">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDocumentManager.ContainsDocument(Nevron.UI.WinForm.Controls.NUIDocument)">
      <summary>
            Determines whether the specified document is contained by the manager.
            </summary>
      <param name="doc">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDocumentManager.AddDocument(Nevron.UI.WinForm.Controls.NUIDocument)">
      <summary>
            Adds the specified document to the framework.
            </summary>
      <param name="doc">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDocumentManager.RemoveDocument(Nevron.UI.WinForm.Controls.NUIDocument)">
      <summary>
            Removes the specified document from the framework.
            </summary>
      <param name="doc">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDocumentManager.GetDocumentById(System.Guid)">
      <summary>
            Seacrhes for a document with the specified id.
            </summary>
      <param name="id">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDocumentManager.GetDocumentByKey(System.String)">
      <summary>
            Searches for a document with the specified key.
            </summary>
      <param name="key">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDocumentManager.GetDocumentByText(System.String)">
      <summary>
            Searches for a document with the specified text.
            </summary>
      <param name="text">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDocumentManager.PerformDispose">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDocumentManager.AddDocument(Nevron.UI.WinForm.Controls.NUIDocument,Nevron.UI.WinForm.Docking.INDockZone)">
      <summary>
            Adds the specified document, using the provided dock zone group.
            </summary>
      <param name="doc">
      </param>
      <param name="group">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDocumentManager.AddDocument(Nevron.UI.WinForm.Controls.NUIDocument,Nevron.UI.WinForm.Docking.INDockZone,System.Int32)">
      <summary>
            Adds the specified document, using the provided dock zone group and at the specified index.
            </summary>
      <param name="doc">
      </param>
      <param name="group">
      </param>
      <param name="index">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDocumentManager.AddDocument(Nevron.UI.WinForm.Controls.NUIDocument,Nevron.UI.WinForm.Docking.INDockZone,System.Windows.Forms.DockStyle)">
      <summary>
            Adds the specified document, using the provided dock zone group and using the specified DockStyle.
            </summary>
      <param name="doc">
      </param>
      <param name="group">
      </param>
      <param name="style">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDocumentManager.AddCore(Nevron.UI.WinForm.Controls.NUIDocument,Nevron.UI.WinForm.Docking.INDockZone,System.Int32,System.Windows.Forms.DockStyle)">
      <summary>
            Performs the core Add action.
            </summary>
      <param name="doc">The document to add.</param>
      <param name="group">The dockzone group to use.</param>
      <param name="index">The index at which the document should be added.</param>
      <param name="style">The preffered dockstyle.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDocumentManager.OnDocumentInserting(Nevron.UI.WinForm.Controls.DocumentCancelEventArgs)">
      <summary>
            Raises the <see cref="E:Nevron.UI.WinForm.Docking.NDocumentManager.DocumentInserting" /> event.
            </summary>
      <param name="e">The arguments associated with the event.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDocumentManager.OnDocumentInserted(Nevron.UI.WinForm.Controls.DocumentEventArgs)">
      <summary>
            Raises the <see cref="E:Nevron.UI.WinForm.Docking.NDocumentManager.DocumentInserted" /> event.
            </summary>
      <param name="e">The arguments associated with the event.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDocumentManager.RemoveCore(Nevron.UI.WinForm.Controls.NUIDocument)">
      <summary>
            Performs the core remove logic.
            </summary>
      <param name="doc">The document to be removed.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDocumentManager.OnDocumentRemoving(Nevron.UI.WinForm.Controls.DocumentCancelEventArgs)">
      <summary>
            Raises the <see cref="E:Nevron.UI.WinForm.Docking.NDocumentManager.DocumentClosing" /> event.
            </summary>
      <param name="e">The arguments associated with the event.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDocumentManager.OnDocumentRemoved(Nevron.UI.WinForm.Controls.DocumentEventArgs)">
      <summary>
            Raises the <see cref="E:Nevron.UI.WinForm.Docking.NDocumentManager.DocumentClosed" /> event.
            </summary>
      <param name="e">The arguments associated with the event.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDocumentManager.LoadCursors">
      <summary>
            Loads the predefined cursors.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDocumentManager.OnDocumentViewStyleChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Nevron.UI.WinForm.Docking.NDocumentManager.DocumentViewStyleChanged" /> event.
            </summary>
      <param name="e">The arguments associated with the event.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDocumentManager.OnActiveDocumentChanged(Nevron.UI.WinForm.Controls.DocumentEventArgs)">
      <summary>
            Raises the <see cref="E:Nevron.UI.WinForm.Docking.NDocumentManager.ActiveDocumentChanged" /> event.
            </summary>
      <param name="e">The arguments associated with the event.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDocumentManager.OnDocumentActivated(Nevron.UI.WinForm.Controls.DocumentEventArgs)">
      <summary>
            Raises the <see cref="E:Nevron.UI.WinForm.Docking.NDocumentManager.DocumentActivated" /> event.
            </summary>
      <param name="e">The arguments associated with the event.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDocumentManager.LayoutMdi(System.Windows.Forms.MdiLayout)">
      <summary>
            Performs a specific layout upon mdi children (works only for standard mdi)
            </summary>
      <param name="layout">The specified layout to apply.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDocumentManager.ShowDocumentsEditor">
      <summary>
            Displays a dialog box listing all the available documents as well as some common commands.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDocumentManager.CloseActiveDocument">
      <summary>
            Closes the active document and activates the next one.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDocumentManager.CloseAllDocuments">
      <summary>
            Closes all the currently added documents.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDocumentManager.CloseAllButActive">
      <summary>
            Closes all but the active document.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDocumentManager.GetDocumentGroup(Nevron.UI.WinForm.Controls.NUIDocument)">
      <summary>
            Gets the parent zone of the specified document.
            Valid when current document style is DocumentViewStyle.MdiTabbed
            </summary>
      <param name="doc">The document which parent zone is to be retreived.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDocumentManager.RedrawFrames">
      <summary>
            Invalidates the frames of all document hosts.
            Valid when current document style is DocumentViewStyle.MdiStandard
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDocumentManager.Suspend">
      <summary>
            Suspends event firing as well as some internal operations. Useful for a batch add of documents.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDocumentManager.Resume">
      <summary>
            Resumes after a previously Suspend call.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDocumentManager.SuspendEvents">
      <summary>
            Suspends any event firing.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDocumentManager.ResumeEvents">
      <summary>
            Resumes event firing.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDocumentManager.ActiveDocument">
      <summary>
            Gets or sets the currently active document of the framework.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Docking.NDocumentManager.DocumentViewStyleChanged">
      <summary>
            Fired when the document style has changed.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Docking.NDocumentManager.DocumentInserting">
      <summary>
            Fired before a document is inserted. Cancelable.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Docking.NDocumentManager.DocumentInserted">
      <summary>
            Fired after a document has been inserted.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Docking.NDocumentManager.DocumentClosing">
      <summary>
            Fired before a document is closed. Cancelable.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Docking.NDocumentManager.DocumentClosed">
      <summary>
            Fired after a document has been closed.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Docking.NDocumentManager.DocumentActivated">
      <summary>
            Notifies that a document has been activated.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Docking.NDocumentManager.ActiveDocumentChanged">
      <summary>
            Notifies that the active document has changed.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDocumentManager.DocumentView">
      <summary>
            Gets the document view of the framework.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDocumentManager.DocumentViewHost">
      <summary>
            Gets the INDockZone instance which hosts the document view.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDocumentManager.Documents">
      <summary>
            Gets an array with all the currently opened documents.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDocumentManager.DocumentGroups">
      <summary>
            Gets an array with all the dock zones which host documents.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDocumentManager.ActiveGroup">
      <summary>
            Gets the currently active group.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NDockingPanelTabInfo">
      <summary>
            Summary description for NDockingPanelTabInfo.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingPanelTabInfo.ToString">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelTabInfo.ImageIndex">
      <summary>
            Gets or sets the image index to be used by the tab representing the panel.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelTabInfo.Text">
      <summary>
            Gets or sets the text displayed by the tab representing the panel.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelTabInfo.TooltipText">
      <summary>
            Gets or sets the tooltip text associated with the panel.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelTabInfo.AutoHideLocation">
      <summary>
            Gets or sets the preffered edge to be used when the panel becomes autohidden.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelTabInfo.AutoHideSize">
      <summary>
            Gets or sets the preferred size a panel will have when autohiding.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelTabInfo.AnimatedAutoHide">
      <summary>
            Gets or sets a value whether the panel will be animated when in auto-hide mode.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NDockingLicenseProvider">
      <summary>
            Summary description for NDockingLicenseProvider.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.DockPanelCommandID">
      <summary>
            Enumerates the possible ids of docking panel command.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.DockPanelCommandID.Maximize">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.DockPanelCommandID.Restore">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.DockPanelCommandID.Hide">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.DockPanelCommandID.AutoHide">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.DockPanelCommandID.Float">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.DockPanelCommandID.Dock">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.DockPanelCommandID.AllowHide">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.DockPanelCommandID.AllowFloat">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.DockPanelCommandID.AllowDock">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.DockPanelCommandID.AllowDrag">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.DockPanelCommandID.AllowMaximize">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.DockPanelCommandID.AllowAutoHide">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NCaptionStyle">
      <summary>
            Contains information about a caption appearance.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NCaptionStyle.PerformDispose">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NCaptionStyle.SetDefaults">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NCaptionStyle.Copy(Nevron.UI.WinForm.Docking.NStyle)">
      <summary>
      </summary>
      <param name="style">
      </param>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NCaptionStyle.PropertyPage">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NCaptionStyle.DefaultHeight">
      <summary>
            Gets the default height for captions.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NCaptionStyle.DefaultFont">
      <summary>
            Gets the default font for captions.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NCaptionStyle.DefaultCaptionstyle">
      <summary>
            Gets the default style to be used by captions.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NCaptionStyle.Font">
      <summary>
            Gets or sets the font to be used when rendering captions
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NCaptionStyle.Height">
      <summary>
            Gets or sets the height to be used for captions
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NCaptionStyle.AutomaticHeight">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NCaptionStyle.GripperVisibility">
      <summary>
            Gets or sets a value specifying the gripper visibility to be applied on captions.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NCaptionStyle.GripperStyle">
      <summary>
            Gets or sets a value specifying the gripper style to be applied on captions.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NDockManagerData">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockManagerData.PopulateDockedContainersData">
      <summary>
            Populates all the docked containers data.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockManagerData.PopulateFloatingContainersData">
      <summary>
            Populates all the floating containers data.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockManagerData.PopulatePanelsData">
      <summary>
            Populates all the floating containers data.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockManagerData.PopulateStyles">
      <summary>
            Populates all the styles data
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockManagerData.PopulateDocumentManagerData">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockManagerData.ClearCurrentLayout">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockManagerData.Suspend">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockManagerData.Resume">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockManagerData.ReloadLayout">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockManagerData.FloatingContainers">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockManagerData.DockedContainers">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockManagerData.Panels">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockManagerData.Styles">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockManagerData.DocumentManagerData">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockManagerData.AutoHideStripsData">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockManagerData.ActivePanelKey">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NDockingFilters">
      <summary>
            Summary description for NFilters.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.NDockingFilters.EmptyFilter">
      <summary>
            A filter which selects only non-empty INDockZoneChild objects.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.NDockingFilters.HorizontalOrientationFilter">
      <summary>
            Selects only non-empty zones with horizontal orientation.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.NDockingFilters.VerticalOrientationFilter">
      <summary>
            Selects only non-empty zones with vertical orientation.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.NDockingFilters.DockAreaProviderFilter">
      <summary>
            Selects objects which are instances of type INDockAreaProvider and are not empty.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.NDockingFilters.DockPanelFilter">
      <summary>
            Selects objects which are instances of type INDockingPanel.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.NDockingFilters.DockZoneFilter">
      <summary>
            Selects any INDockZone instance.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.NDockingFilters.DocumentViewFilter">
      <summary>
            Selects the document view host.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.NDockingFilters.DocumentHostFilter">
      <summary>
            Selects any NDocumentHost instance.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.NDockingFilters.ControlHostFilter">
      <summary>
            Selects an exact match of type NControlHost.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NSplitterStylePropertyPage">
      <summary>
            Summary description for NSplitterStylePropertyPage.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NDockingFrameworkCommands">
      <summary>
            Summary description for NDockingFrameworkCommands.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NFloatingDockingPanelContainerData">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NFloatingDockingPanelContainerData.Bounds">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NDockManagerStyleComposite">
      <summary>
            Represents a composite object which stores all the styles registered with the docking framework.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NStyleComposite">
      <summary>
            Represents a base implementation of the INStyleComposite interface.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.INStyleComposite">
      <summary>
            Represents a generic composite object that contains styles.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INStyleComposite.PopulateList(Nevron.UI.WinForm.Controls.NListBox)">
      <summary>
            Displays all the registered styles in a list box.
            </summary>
      <param name="listBox">The listbox to use.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INStyleComposite.GetStyle(System.Int32)">
      <summary>
            Gets a style with the specified ID.
            </summary>
      <param name="styleID">The style id to search for.</param>
      <returns>A style with the specified id if found, null otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INStyleComposite.GetStyle(System.Type)">
      <summary>
            Gets a style with the specified type.
            </summary>
      <param name="styleType">The type to search for.</param>
      <returns>The first match which is instance of the specified type.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INStyleComposite.AddStyle(System.Int32,Nevron.UI.WinForm.Docking.NStyle)">
      <summary>
            Registers the specified style with the specified id.
            </summary>
      <param name="styleID">The unique id to use.</param>
      <param name="style">The style to register.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INStyleComposite.AddStyle(System.Int32,Nevron.UI.WinForm.Docking.NStyle,System.Boolean)">
      <summary>
            Registers the specified style with the specified id.
            </summary>
      <param name="styleID">The unique id to use.</param>
      <param name="style">The style to register.</param>
      <param name="replaceExisting">True to replace an existing style, registered with the same id, false otherwise.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INStyleComposite.RemoveStyle(System.Int32)">
      <summary>
            Removes the style with the specfied id from the composite.
            </summary>
      <param name="styleID">The style id to search for.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INStyleComposite.RemoveStyle(Nevron.UI.WinForm.Docking.NStyle)">
      <summary>
            Removes the specfied style from the composite.
            </summary>
      <param name="style">The specfied style.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INStyleComposite.Contains(System.Int32)">
      <summary>
            Check whether the composite contains a style with the specfied id.
            </summary>
      <param name="styleID">The id to search for.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INStyleComposite.Contains(Nevron.UI.WinForm.Docking.NStyle)">
      <summary>
            Check whether the specified style is registered with the composite.
            </summary>
      <param name="style">The style to check for.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INStyleComposite.OnStyleChanged(Nevron.UI.WinForm.Docking.NStyle)">
      <summary>
            Receives a notification for a style change.
            </summary>
      <param name="style">The style which has changed.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INStyleComposite.OnStylePropertyChanged(Nevron.UI.WinForm.Docking.NStyle,System.String)">
      <summary>
            Receives a notification for a style property change.
            </summary>
      <param name="style">The style wich was affected.</param>
      <param name="propName">Name of the affected property.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INStyleComposite.LockUpdates">
      <summary>
            Locks all the updates that flow internally in the composite.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INStyleComposite.ResumeUpdates">
      <summary>
            Resumes all updates.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.INStyleComposite.Styles">
      <summary>
            Gets an array of all the styles registered with this composite.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.INStyleComposite.IsLocked">
      <summary>
            Gets a value indicating whether updates in the composite are locked.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NStyleComposite.GetStyle(System.Int32)">
      <summary>
            Gets the style with the specified id.
            </summary>
      <param name="styleID">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NStyleComposite.GetStyle(System.Type)">
      <summary>
            Gets the style with the specified type.
            </summary>
      <param name="styleType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NStyleComposite.AddStyle(System.Int32,Nevron.UI.WinForm.Docking.NStyle)">
      <summary>
            Add a style to the composite and assigns it the specified id.
            If there is already a registered style with the specified id an exeption will be thrown.
            </summary>
      <param name="styleID">
      </param>
      <param name="style">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NStyleComposite.AddStyle(System.Int32,Nevron.UI.WinForm.Docking.NStyle,System.Boolean)">
      <summary>
            Add a style to the composite and assigns it the specified id.
            If replaceExisting is true an exisiting style with the same id will be replaced, otherwise an exception will be thrown.
            </summary>
      <param name="styleID">
      </param>
      <param name="style">
      </param>
      <param name="replaceExisting">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NStyleComposite.RemoveStyle(System.Int32)">
      <summary>
            Removes the style with the specifies id.
            </summary>
      <param name="styleID">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NStyleComposite.RemoveStyle(Nevron.UI.WinForm.Docking.NStyle)">
      <summary>
            Removes the specified style.
            </summary>
      <param name="style">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NStyleComposite.OnStyleChanged(Nevron.UI.WinForm.Docking.NStyle)">
      <summary>
            Gets notified for a style change.
            </summary>
      <param name="style">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NStyleComposite.OnStylePropertyChanged(Nevron.UI.WinForm.Docking.NStyle,System.String)">
      <summary>
            Gets notified for a style change.
            </summary>
      <param name="style">
      </param>
      <param name="propName">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NStyleComposite.Contains(System.Int32)">
      <summary>
            Checks whether a style with the specified id is contained.
            </summary>
      <param name="styleID">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NStyleComposite.Contains(Nevron.UI.WinForm.Docking.NStyle)">
      <summary>
            Checks whether the specified style is contained.
            </summary>
      <param name="style">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NStyleComposite.LockUpdates">
      <summary>
            Locks all updates.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NStyleComposite.ResumeUpdates">
      <summary>
            Resumes updates.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NStyleComposite.PopulateList(Nevron.UI.WinForm.Controls.NListBox)">
      <summary>
            Populates a listbox with all the currently registered styles.
            </summary>
      <param name="list">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NStyleComposite.PerformDispose">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NStyleComposite.Styles">
      <summary>
            Gets an array of all the styles currently contained within the composite.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NStyleComposite.IsLocked">
      <summary>
            Checks whether the composite is currently locked for updates.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockManagerStyleComposite.OnStyleChanged(Nevron.UI.WinForm.Docking.NStyle)">
      <summary>
      </summary>
      <param name="style">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockManagerStyleComposite.OnStylePropertyChanged(Nevron.UI.WinForm.Docking.NStyle,System.String)">
      <summary>
      </summary>
      <param name="style">
      </param>
      <param name="propName">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockManagerStyleComposite.OnTabStylePropertyChanged(Nevron.UI.WinForm.Docking.NStyle,System.String)">
      <summary>
            Performs a default logic when a property in a NTabStyle object has changed.
            </summary>
      <param name="style">
      </param>
      <param name="propName">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockManagerStyleComposite.OnAutoHideTabStylePropertyChanged(Nevron.UI.WinForm.Docking.NStyle,System.String)">
      <summary>
            Performs a default logic when a property in a NTabStyle object has changed.
            </summary>
      <param name="style">
      </param>
      <param name="propName">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockManagerStyleComposite.OnCaptionStylePropertyChanged(Nevron.UI.WinForm.Docking.NStyle,System.String)">
      <summary>
            Performs a default logic when a property in a NCaptionStyle object has changed.
            </summary>
      <param name="style">
      </param>
      <param name="propName">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockManagerStyleComposite.OnSplitterStylePropertyChanged(Nevron.UI.WinForm.Docking.NStyle,System.String)">
      <summary>
            Performs a default logic when a property in a NSplitterStyle object has changed.
            </summary>
      <param name="style">
      </param>
      <param name="propName">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockManagerStyleComposite.OnDocumentStylePropertyChanged(Nevron.UI.WinForm.Docking.NStyle,System.String)">
      <summary>
            Performs a default logic when a property in a NDocumentStyle object has changed.
            </summary>
      <param name="style">
      </param>
      <param name="propName">
      </param>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NDockingHintService">
      <summary>
            Provides methods for generating a hint which displays the proposed bounds a dragged panel will occupy after a successful drag operation.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.INDockingHintService">
      <summary>
            Provides a simple method for generating a preview.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.INDockingHintService.OnPreviewRequested">
      <summary>
            The service gets notified that some object has requested a preview.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingHintService.OnPreviewRequested">
      <summary>
            The service gets notified that a preview is requested and such is generated.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingHintService.UpdateDockPreviewRegion">
      <summary>
            Updates the current dock preview region.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingHintService.UpdateDockPreviewRegionForFloatablePanel">
      <summary>
            Updates the preview region for a floatable panel.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingHintService.UpdateDockPreviewRegionForNonFloatablePanel">
      <summary>
            Updates the preview region for a non-floatable panel.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingHintService.GetPreviewBounds">
      <summary>
            Gets the preview bounds.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingHintService.CalculateDockBounds">
      <summary>
            Performs a fake dock of the dragged panel and calculates the exact bounds it will occupy after the drop.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingHintService.GetPreviewRegion">
      <summary>
            Gets the preview region.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingHintService.GetPreviewRegionForReversibleFrame">
      <summary>
            Gets the preview region for a reversible frame.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingHintService.GetPreviewRegionForTranslucentFill">
      <summary>
            Gets the preview region for a translucent fill.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingHintService.DrawReversibeFrameHint">
      <summary>
            Renders a reversible frame hint.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingHintService.UpdateTranslucentBitmap(System.Drawing.Size,System.Drawing.Region)">
      <summary>
            Updates the translucent bitmap with the specified size and region.
            </summary>
      <param name="sz">
      </param>
      <param name="region">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingHintService.Prepare">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingHintService.Reset">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NCaptionButton">
      <summary>
            Represents a button on a caption.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NCaptionButton.Reset">
      <summary>
            Resets the current state of the button.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NCaptionButton.Copy(Nevron.UI.WinForm.Docking.NCaptionButton)">
      <summary>
            Copies the entire information from the specified button.
            </summary>
      <param name="button">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NCaptionButton.SetState(Nevron.UI.WinForm.Controls.InteractiveState)">
      <summary>
            Sets the current state of the button.
            </summary>
      <param name="state">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NCaptionButton.Render(Nevron.UI.WinForm.Docking.NRenderCaptionContext,Nevron.UI.WinForm.Controls.NUIRenderer)">
      <summary>
            Renders the button using the specified context and renderer.
            </summary>
      <param name="context">
      </param>
      <param name="renderer">
      </param>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NCaptionButton.ID">
      <summary>
            Gets or sets the unique identifier of the button.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NCaptionButton.Visible">
      <summary>
            Gets or sets the visibility of the button.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NCaptionButton.Bounds">
      <summary>
            Gets the bounds of the button.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NCaptionButton.Enabled">
      <summary>
            Gets or sets a value whether the button is enabled.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NCaptionButton.State">
      <summary>
            Gets or sets the current interactive state of the button.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NCaptionButton.Capture">
      <summary>
            Gets a value whether the button has currently captured the mouse.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NCaptionButton.UserPaint">
      <summary>
            Gets or sets a value whether the painting will be handled by the user.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NCaptionButton.TooltipText">
      <summary>
            Gets or sets the tooltip text to be displayed when the user hovers the button.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NCaptionButton.Text">
      <summary>
            Gets or sets the text to be displayed by the button.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.CaptionButtonID">
      <summary>
            Enumerates the predefined caption button ids.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.CaptionButtonID.None">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.CaptionButtonID.Close">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.CaptionButtonID.AutoHide">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.CaptionButtonID.MaximizeRestore">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NDockZoneChildCollection">
      <summary>
            Represents a collection of INDockZoneChild objects.
            The collection itself does not provide add and remove methods.
            Call the AddChild and RemoveChild methods of the parent zone instead.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZoneChildCollection.Contains(Nevron.UI.WinForm.Docking.INDockZoneChild)">
      <summary>
            Checks whether the specified child is contained within the collection.
            </summary>
      <param name="child">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZoneChildCollection.GetNextNonEmptyChild(Nevron.UI.WinForm.Docking.INDockZoneChild,System.Boolean,System.Boolean)">
      <summary>
            Gets the next child (non-empty) in the collection.
            </summary>
      <param name="child">The child to start the search from.</param>
      <param name="forward">True to go forward the specfied child, false to go backwards.</param>
      <param name="wrap">True to wrap(start from the beginning if the final child is reached), false otherwise.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZoneChildCollection.Filter(Nevron.Filters.NFilter,System.Boolean)">
      <summary>
            Performs a filter logic to the collection.
            </summary>
      <param name="filter">The filter to be used.</param>
      <param name="includeNested">True to filter the contained zones (if any).</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZoneChildCollection.IndexOf(Nevron.UI.WinForm.Docking.INDockZoneChild)">
      <summary>
            Gets the index of the specified child.
            </summary>
      <param name="child">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZoneChildCollection.CopyTo(Nevron.UI.WinForm.Docking.INDockZone)">
      <summary>
            Copies the entire collection to the specified dock zone.
            </summary>
      <param name="container">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZoneChildCollection.CopyTo(Nevron.UI.WinForm.Docking.INDockZone,System.Boolean)">
      <summary>
            Copies the entire collection to the specified dock zone.
            </summary>
      <param name="container">The dock zone to copy to.</param>
      <param name="clone">True to clone the collection, false otherwise.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZoneChildCollection.CopyTo(Nevron.UI.WinForm.Docking.INDockZone,System.Int32,System.Boolean)">
      <summary>
            Copies the entire collection to the specified zone.
            </summary>
      <param name="container">The container zone.</param>
      <param name="insertIndex">The specified index at which to start copy.</param>
      <param name="clone">True to clone the collection, false otherwise.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZoneChildCollection.PerformDispose">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZoneChildCollection.OnInsertComplete(System.Int32,System.Object)">
      <summary>
      </summary>
      <param name="index">
      </param>
      <param name="value">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZoneChildCollection.OnRemoveComplete(System.Int32,System.Object)">
      <summary>
      </summary>
      <param name="index">
      </param>
      <param name="value">
      </param>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NLayoutInfo">
      <summary>
            Contains information about a layout operation.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NLayoutInfo.Reset">
      <summary>
            Resets the object to its infinite state.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NLayoutInfo.Copy(Nevron.UI.WinForm.Docking.NLayoutInfo)">
      <summary>
            Copies all information from the specified layout info.
            </summary>
      <param name="info">
      </param>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NLayoutInfo.Targets">
      <summary>
            Gets an arraylist with all the layout targets.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NLayoutInfo.AutoSizable">
      <summary>
            Gets an arraylist with all the targets which are autosizable.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NLayoutInfo.Bounds">
      <summary>
            Gets or sets the current bounds where the layout operation to be applied.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NLayoutInfo.Orientation">
      <summary>
            Gets or sets the orientation to be used by the layout engine.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NLayoutInfo.MaximizedChild">
      <summary>
            Gets the currently maximized child (if any).
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NLayoutInfo.FillInteriorChild">
      <summary>
            Gets the child (if any) which size logic equals to FillInterior.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NLayoutInfo.AvailableAutoSize">
      <summary>
            Gets the available autosize.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NDockZoneLayoutEngine">
      <summary>
            Exposes methods for layout operations on a INDockZone children.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZoneLayoutEngine.Layout(Nevron.UI.WinForm.Docking.NLayoutInfo)">
      <summary>
            Performs layout logic upon the specified layout info.
            </summary>
      <param name="info">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZoneLayoutEngine.LayoutZone(Nevron.UI.WinForm.Docking.INDockZone,System.Collections.ArrayList)">
      <summary>
            Applies layout logic upon the specified INDockZone instance
            </summary>
      <param name="zone">
      </param>
      <param name="children">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZoneLayoutEngine.LayoutHorizontal(Nevron.UI.WinForm.Docking.NLayoutInfo)">
      <summary>
            Performs horizontal layout using the specified layout info.
            </summary>
      <param name="info">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZoneLayoutEngine.LayoutVertical(Nevron.UI.WinForm.Docking.NLayoutInfo)">
      <summary>
            Performs vertical layout using the specified layout info.
            </summary>
      <param name="info">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZoneLayoutEngine.LayoutWithMaximizedChild(Nevron.UI.WinForm.Docking.NLayoutInfo)">
      <summary>
            Applies a specific logic when the layout info contains a maximized target.
            </summary>
      <param name="info">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZoneLayoutEngine.LayoutWithFillInteriorChild(Nevron.UI.WinForm.Docking.NLayoutInfo)">
      <summary>
            Applies a specific logic when somewhere in the layout tree there is a target with size logic set to SizeLogic.FillInterior.
            </summary>
      <param name="info">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZoneLayoutEngine.LayoutWithFillInteriorChildHorizontal(Nevron.UI.WinForm.Docking.NLayoutInfo)">
      <summary>
      </summary>
      <param name="info">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZoneLayoutEngine.LayoutWithFillInteriorChildVertical(Nevron.UI.WinForm.Docking.NLayoutInfo)">
      <summary>
      </summary>
      <param name="info">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZoneLayoutEngine.UpdateLayoutInfo(Nevron.UI.WinForm.Docking.NLayoutInfo)">
      <summary>
            Updates the specifies layout info - that is updating its available autosize, caching a maximized child, etc.
            </summary>
      <param name="info">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZoneLayoutEngine.UpdateLayoutInfoForFillInterior(Nevron.UI.WinForm.Docking.NLayoutInfo)">
      <summary>
            Updates the layout info when there is a target with SizeLogic set to FillInterior
            </summary>
      <param name="info">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZoneLayoutEngine.GetAvailableWidthForChild(Nevron.UI.WinForm.Docking.NLayoutInfo,Nevron.UI.WinForm.Docking.INDockZoneChild,System.Int32)">
      <summary>
            Gets the available width for a child.
            The default processing will exclude all the total min size from the provided available width.
            </summary>
      <param name="info">
      </param>
      <param name="child">
      </param>
      <param name="availableWidth">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZoneLayoutEngine.GetAvailableHeightForChild(Nevron.UI.WinForm.Docking.NLayoutInfo,Nevron.UI.WinForm.Docking.INDockZoneChild,System.Int32)">
      <summary>
            Gets the available height for a child.
            The default processing will exclude all the total min size from the provided available height.
            </summary>
      <param name="info">
      </param>
      <param name="child">
      </param>
      <param name="availableHeight">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZoneLayoutEngine.GetChildWidth(Nevron.UI.WinForm.Docking.NLayoutInfo,Nevron.UI.WinForm.Docking.INDockZoneChild,System.Int32)">
      <summary>
            Gets the width to be applied on a child.
            Default processing will check the current size logic of the child and calculate the appropriate value.
            </summary>
      <param name="info">
      </param>
      <param name="child">
      </param>
      <param name="availableWidth">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZoneLayoutEngine.GetChildHeight(Nevron.UI.WinForm.Docking.NLayoutInfo,Nevron.UI.WinForm.Docking.INDockZoneChild,System.Int32)">
      <summary>
            Gets the height to be applied on a child.
            Default processing will check the current size logic of the child and calculate the appropriate value.
            </summary>
      <param name="info">
      </param>
      <param name="child">
      </param>
      <param name="availableHeight">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZoneLayoutEngine.GetAvailableMaximizeSize(Nevron.UI.WinForm.Docking.NLayoutInfo)">
      <summary>
            Gets the available size to be used when there is a maximized target.
            </summary>
      <param name="info">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockZoneLayoutEngine.AutoSizeTargets(Nevron.UI.WinForm.Docking.NLayoutInfo)">
      <summary>
            Performs a default autosize logic upon all targets which are autosizable.
            The default processing will check for targets with size logic other than autosize, calculate their size and exclude it from the total one.
            Then the remaining size will be distributed even upon all autosizable targets.
            </summary>
      <param name="info">
      </param>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NCaptionButtonCollection">
      <summary>
            Represents a collection of NCaptionButton objects.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NCaptionButtonCollection.Add(Nevron.UI.WinForm.Docking.NCaptionButton)">
      <summary>
      </summary>
      <param name="button">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NCaptionButtonCollection.Remove(System.Int32)">
      <summary>
      </summary>
      <param name="buttonID">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NCaptionButtonCollection.Remove(Nevron.UI.WinForm.Docking.NCaptionButton)">
      <summary>
      </summary>
      <param name="button">
      </param>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NEmptyFilter">
      <summary>
            Summary description for NEmptyFilter.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NEmptyFilter.Filter(System.Object)">
      <summary>
      </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NDockingHintStyle">
      <summary>
            Contains information about how docking hints are visualized.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingHintStyle.SetDefaults">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockingHintStyle.CreateObjects">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingHintStyle.DockingHint">
      <summary>
            Gets or sets the hint to be used when a dock preview is drawn on the screen.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingHintStyle.DockingStickers">
      <summary>
            Gets or sets a value whether docking stickers will be displayed while hittesting for dock area.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingHintStyle.Transparency">
      <summary>
            Gets or sets a value whether docking stickers will be displayed while hittesting for dock area.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingHintStyle.TranslucentColor">
      <summary>
            Gets or sets a value whether docking stickers will be displayed while hittesting for dock area.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingHintStyle.WYSIWYGHints">
      <summary>
            Gets or sets a value whether true WYSIWYG hints will be shown.
            If this is true a preview dock zone tree will be created and the exact bounds of the panel after dock will be shown.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingHintStyle.StickerTemplateIndex">
      <summary>
            Gets or sets the index of the docking sticker template to be used when generating hints.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingHintStyle.StickerTemplates">
      <summary>
            Gets the collection containing docking sticker templates.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NDockingPanelData">
      <summary>
            A serializable representation of a docking panel state.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelData.Panel">
      <summary>
            Gets or sets the panel which state is to be saved/restored.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelData.Key">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelData.ParentZoneID">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelData.ID">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelData.SizeInfo">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelData.State">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelData.DockedState">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelData.FloatingState">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelData.AutoHideLocation">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelData.Index">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NDockingPanelState">
      <summary>
            Summary description for NDockingPanelState.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelState.ContainerID">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelState.ZoneID">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelState.Index">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelState.State">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelState.StateSaved">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NDockingPanelDragInfo">
      <summary>
            Contains information about a panel being dragged.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelDragInfo.DockArea">
      <summary>
            Gets the dock area associated with this info.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockingPanelDragInfo.Panel">
      <summary>
            Gets the panel associated with this info.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.PanelEventHandler">
      <summary>
            Represents a delegate associated with panel event arguments.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.PanelAutoHideEventHandler">
      <summary>
            Represents a delegate associated with panel event arguments.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.PanelCancelEventHandler">
      <summary>
            Represents a delegate associated with panel cancel event arguments.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.DraggingPanelEventHandler">
      <summary>
            Represents a delegate associated with panel drag cancel event arguments.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.EndDragPanelEventHandler">
      <summary>
            Represents a delegate associated with panel event arguments.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.CaptionEventHandler">
      <summary>
            Represents a delegate associated with a caption in a panel.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.ResolveClientEventHandler">
      <summary>
            Represents a delegate associated with resolving a document's client in a persistency operation.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.DocumentTabDoubleClickEventHandler">
      <summary>
            Represent a delegate associated with document event arguments.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.PanelEventArgs">
      <summary>
            Contains information about a panel's event.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.PanelEventArgs.Panel">
      <summary>
            Gets the INDockingPanel object associated with the event data.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.PanelEventArgs.Handled">
      <summary>
            Gets or sets a value whether the event should be bubbled up in the chain.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.PanelAutoHideCancelEventArgs">
      <summary>
            Contains information about a panel's event.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.PanelCancelEventArgs">
      <summary>
            Cancelable panel event arguments.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.PanelCancelEventArgs.Cancel">
      <summary>
            Gets or sets a value whether to cancel the current event,
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.PanelAutoHideCancelEventArgs.AutoHideLocation">
      <summary>
            Gets or sets a value whether the event should be bubbled up in the chain.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.PanelDragEventArgs">
      <summary>
            Contains information about a panel drag event 
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.PanelDragEventArgs.DragInfo">
      <summary>
            Gets the drag information for this event.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.PanelDragCancelEventArgs">
      <summary>
            Cancelable panel drag event arguments.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.PanelDragCancelEventArgs.Cancel">
      <summary>
            Gets or sets a value whether to cancel the current event.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.CaptionEventArgs">
      <summary>
            Contains information about a panel event associated with its caption.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.CaptionEventArgs.Caption">
      <summary>
            Gets the NCaptionBar object associated with the event.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.CaptionEventArgs.ClickedID">
      <summary>
            Gets the ID of the clicked NCaptionButton object.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.CaptionEventArgs.Cancel">
      <summary>
            Determines whether the event should be processed or not.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NRootDockZoneData">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NSizeInfo">
      <summary>
            Contains information about how a single layout target will be treated by a layout engine.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NSizeInfo.ToString">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NSizeInfo.Reset">
      <summary>
            Resets the object to its default state.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NSizeInfo.Copy(Nevron.UI.WinForm.Docking.NSizeInfo)">
      <summary>
            Copies all the information from the specified info.
            </summary>
      <param name="info">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NSizeInfo.CopySizeValues(Nevron.UI.WinForm.Docking.NSizeInfo)">
      <summary>
            Copies only size values - these are absolute size, preffered size and relative size.
            </summary>
      <param name="info">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NSizeInfo.ShouldAutoSize(System.Windows.Forms.Orientation)">
      <summary>
            Checks whether the container of this size info should be autosized by a layout engine.
            For example a child may have SizeLogic set to Absolute but its absolute size to be empty. In this case the child will be also autosized.
            </summary>
      <param name="orientation">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NSizeInfo.SizeLogic">
      <summary>
            Gets or sets the logic used to size the INDockZoneChild object that holds this info.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NSizeInfo.RelativeSize">
      <summary>
            Gets or sets the preffered relative size (varies form 0.0f to 1.0f) to be used. Works only if SizeLogic is SizeLogic.Relative.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NSizeInfo.AbsoluteSize">
      <summary>
            Gets or sets the absolute size to be used. Works only if SizeLogic is SizeLogic.Absolute.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NSizeInfo.MinimumSize">
      <summary>
            Gets or sets the minimum size to be used. Empty by default.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NSizeInfo.PrefferedSize">
      <summary>
            Gets or sets the size to be used when there is a node which fills the interior.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NSizeInfo.SizeState">
      <summary>
            Gets or sets the current size state.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NSizeInfo.AutoSizePercent">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Docking.NDockArea">
      <summary>
            Represents a general area (provided by a INDockAreaProvider instance) where a panel can be docked.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockArea.Reset">
      <summary>
            Resets the structure to its infinite state.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockArea.IsEmpty">
      <summary>
            Gets a value indicating whether the area is empty.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockArea.GetHashCode">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Docking.NDockArea.Equals(System.Object)">
      <summary>
      </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="F:Nevron.UI.WinForm.Docking.NDockArea.Empty">
      <summary>
            The default empty area.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockArea.Bounds">
      <summary>
            Gets the rectangle (in coordinates relative to the provider) occupying this area.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockArea.Dock">
      <summary>
            Gets the dock style of the area.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockArea.Zone">
      <summary>
            Gets the INDockZone instance where this area resides.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Docking.NDockArea.Provider">
      <summary>
            Gets the INDockAreaProvider instance which has provided this area.
            </summary>
    </member>
  </members>
</doc>