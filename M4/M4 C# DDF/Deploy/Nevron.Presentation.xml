<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Nevron.Presentation</name>
  </assembly>
  <members>
    <member name="T:Nevron.UI.WinForm.NSystemImages">
      <summary>
            Summary description for NSystemImages.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.NControlHelper.ControlContainsMouse(System.Windows.Forms.Control,System.Boolean)">
      <summary>
            Determines whether a control contains the current mouse position within its region.
            The method gets the system region used to paint the specified control and checks whether it contains the cursor.
            </summary>
      <param name="c">The control to examine.</param>
      <param name="firstUnder">If this flag is true the method will examine the control only if it is the direct one under the cursor.</param>
      <returns>True if the control's region contains the cursor, false otherwise.</returns>
    </member>
    <member name="T:Nevron.UI.WinForm.NUIElementHost">
      <summary>
            Summary description for NUIElementHost.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.NControl">
      <summary>
            Summary description for NControl.
            </summary>
    </member>
    <member name="T:Nevron.UI.INUINode">
      <summary>
            Summary description for INUINode.
            </summary>
    </member>
    <member name="T:Nevron.UI.INSuspendable">
      <summary>
            Summary description for INSuspendable.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.NControl.GetAttributeByName(System.String)">
      <summary>
            Gets a child or descendant attribute by its name
            </summary>
      <param name="attributeName">child name or full attribute name</param>
      <returns>a reference to the attribute</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.NControl.GetAttributeName(Nevron.Dom.INAttribute)">
      <summary>
            Gets the name of the specified child attribute
            </summary>
      <param name="attribute">child attribute</param>
      <returns>name of the attribute</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.NControl.SetAttributeByName(System.String,Nevron.Dom.INAttribute)">
      <summary>
            Sets a child or descendant attribute by its name
            </summary>
      <param name="attributeName">
      </param>
      <param name="attribute">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.NControl.OnAttributePropertyChanging(System.String,System.String,System.Object)">
      <summary>
            Called by child or descendants attributes when an attribute property is changing
            </summary>
      <param name="attributeFullName">full attribute name</param>
      <param name="propertyName">attribute property</param>
      <param name="newValue">new property value</param>
      <returns>true if the change is acceptable, otherwise false</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.NControl.OnAttributePropertyChanged(System.String,System.String)">
      <summary>
            Called by child or descendants attributes when an attribute property has changed
            </summary>
      <param name="attributeFullName">full attribute name</param>
      <param name="propertyName">attribute property</param>
    </member>
    <member name="M:Nevron.UI.WinForm.NControl.OnAttributeChanged(System.String)">
      <summary>
            Called by child or descendants attributes when an attribute has changed
            </summary>
      <param name="attributeFullName">full attribute name</param>
    </member>
    <member name="M:Nevron.UI.WinForm.NControl.CalculatePreferredSize">
      <summary>
            Calculates the preferred size of the control.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.NControl.ApplyPreferredSize">
      <summary>
            Applies the control's preferred size.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.NControl.ShouldSerializeSizeToContent">
      <summary>
            Determines whether the SizeToContent property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.WinForm.NControl.ParentNode">
      <summary>
            Gets the parent of this node.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.NControl.RootNode">
      <summary>
            Gets the root node of the nodes tree where this node resides.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.NControl.IsSuspended">
      <summary>
            Gets a value whether the control is currently suspended.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.NControl.Attributes">
      <summary>
            Gets an array of the child attributes of this container
            </summary>
      <returns>attributes of the container</returns>
    </member>
    <member name="P:Nevron.UI.WinForm.NControl.TooltipInfo">
      <summary>
            Gets the object which contains information about a tooltip.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.NControl.SizeToContent">
      <summary>
            Gets/sets a value indicating whether the control will size to its content.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.NControl.DefaultSizeToContent">
      <summary>
            Gets the default value for the SizeToContent property.
            </summary>
    </member>
    <member name="T:Nevron.UI.INUIElementHost">
      <summary>
            Represents an instance which hosts ui elements.
            For a Windows Forms app this will be a Control instance.
            </summary>
    </member>
    <member name="M:Nevron.UI.INUIElementHost.OnInvalidateRequested(Nevron.UI.INVisualElement,Nevron.GraphicsCore.NRectangle)">
      <summary>
            Process a request for invalidating the specified bounds.
            </summary>
      <param name="el">The element this requests the invalidation</param>
      <param name="bounds">The bounds to invalidate.</param>
    </member>
    <member name="M:Nevron.UI.INUIElementHost.CanHostElement(Nevron.UI.INUIElement)">
      <summary>
            Determines whether the specified element may be hosted on that host.
            </summary>
      <param name="element">The element to examine.</param>
      <returns>True if element can be hosted, false otherwise.</returns>
    </member>
    <member name="P:Nevron.UI.INUIElementHost.Element">
      <summary>
            Gets/sets the currently hosted element.
            </summary>
    </member>
    <member name="P:Nevron.UI.INUIElementHost.ClientMouse">
      <summary>
            Gets the current mouse position in client coordinates.
            </summary>
    </member>
    <member name="T:Nevron.UI.INThemeProvider">
      <summary>
            Summary description for INThemeProvider.
            </summary>
    </member>
    <member name="P:Nevron.UI.INThemeProvider.Renderer">
      <summary>
            Gets/sets the local renderer value for this instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.INThemeProvider.CurrentRenderer">
      <summary>
            Gets the composed renderer value for this instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.INThemeProvider.Theme">
      <summary>
            Gets/sets the local theme for the current instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.INThemeProvider.CurrentTheme">
      <summary>
            Gets the current theme used by this instance. It may differ from the local value.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.NUIElementHost.GetScreenBounds(Nevron.UI.INUIElement)">
      <summary>
            Coverts the bounds of the specified element in screen coordinates.
            </summary>
      <param name="el">The specified element.</param>
      <returns>The bounds of the element in screen coordinates.</returns>
    </member>
    <member name="P:Nevron.UI.WinForm.NUIElementHost.Element">
      <summary>
            Gets/sets the currently hosted element.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.NUIElementHost.ElementBounds">
      <summary>
            Gets the rectangle to be occupied by the hosted element.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.NUIElementHost.ClientMouse">
      <summary>
            Gets the current mouse position in client coordinates.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.NUIElementHost.Theme">
      <summary>
            Gets/sets the local theme to be used.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.NUIElementHost.CurrentTheme">
      <summary>
            Gets the current theme used by this instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.NUIElementHost.EnableElementTooltips">
      <summary>
            Determines whether element tooltips may be displayed on this host.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NTreeViewEx">
      <summary>
            Represents a generic tree-view which is extremely fast and flexible.
            Optimized for 100 000+ real-time nodes without any lag and/or memory overhead.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NItemsControl">
      <summary>
            Base class for controls like NTreeViewEx, NTreeList, etc.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NScrollableControl">
      <summary>
            Base control for all controls which need scrollable functionality.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NBaseControl">
      <summary>
            Summary description for NBaseControl.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NBaseControl.TooltipInfo">
      <summary>
            Gets the object which contains information about the tooltip associated with this control.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.INPaletteProvider">
      <summary>
            Encapsulates all objects that might provide palette.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.INPaletteProvider.ApplyPalette(Nevron.UI.WinForm.Controls.NPalette)">
      <summary>
            Updates the current palette with the specified one.
            </summary>
      <param name="palette">The palette to update from.</param>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.INPaletteProvider.Palette">
      <summary>
            Gets/sets the NPalette object provided by this instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.INPaletteProvider.PaletteInheritance">
      <summary>
            Gets/sets the palette inheritance for the current instance.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NPaletteControl.ApplyPalette(Nevron.UI.WinForm.Controls.NPalette)">
      <summary>
            Updates from the specified palette and 
            </summary>
      <param name="palette">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NPaletteControl.UpdateFromPalette(Nevron.UI.WinForm.Controls.NPalette)">
      <summary>
            Updates from the specified palette.
            </summary>
      <param name="palette">
      </param>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPaletteControl.Palette">
      <summary>
            Gets/sets the NPalette used to render the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPaletteControl.PaletteInheritance">
      <summary>
            Gets/sets a value which Palette value will be applied on a higher level Palette change.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NScrollableControl.DisplayRectangle">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NScrollableControl.DefaultViewMargins">
      <summary>
            Gets the default value of the ViewMargins property.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NScrollableControl.HScroll">
      <summary>
            Gets the internal NHScrollBar instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NScrollableControl.VScroll">
      <summary>
            Gets the internal NVScrollBar instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NScrollableControl.ScrollMargins">
      <summary>
            Gets/sets the additional space to be added along the X and Y scroll axis.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NScrollableControl.ScrollPosition">
      <summary>
            Gets/sets the current scroll position.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NScrollableControl.MinimumScrollSize">
      <summary>
            Gets/sets the minimum scrolling size.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NScrollableControl.ScrollSize">
      <summary>
            Gets/sets the scrolling size.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NScrollableControl.ViewMargins">
      <summary>
            Gets/sets the margins of the viewable area.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NScrollableControl.ViewRectangle">
      <summary>
            Gets the viewable rectangle of the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NScrollableControl.HScrollVisibility">
      <summary>
            Gets/sets the visibility of the horizontal scrollbar.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NScrollableControl.VScrollVisibility">
      <summary>
            Gets/sets the visibility of the vertical scrollbar.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.INSkinnableControl">
      <summary>
            Summary description for INSkinnableElement.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NItemsControl.CanHostItem(Nevron.UI.WinForm.Controls.NLightUIItem)">
      <summary>
            Determines whether the specified item may be hosted on the control.
            </summary>
      <param name="item">The item to examine.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NItemsControl.GetItemRect(Nevron.UI.WinForm.Controls.NLightUIItem)">
      <summary>
            Gets the bounding rect of the specified item.
            The current scrolling position is applied.
            </summary>
      <param name="item">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NItemsControl.MapRect(Nevron.GraphicsCore.NRectangle,Nevron.UI.WinForm.Controls.NLightUIItem)">
      <summary>
            Converts the specified rectangle from model coordinates to view ones.
            </summary>
      <param name="rect">The rectangle to be converted.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NItemsControl.MapPosition(Nevron.GraphicsCore.NPoint)">
      <summary>
            Converts the specified point from model to view space.
            </summary>
      <param name="pt">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NItemsControl.ItemFromPoint(Nevron.GraphicsCore.NPoint)">
      <summary>
            Gets the item under the specified point (in client coordinates).
            </summary>
      <param name="pt">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NItemsControl.ItemFromPoint(Nevron.GraphicsCore.NPoint,System.Boolean)">
      <summary>
            Gets the item that is under the specified point (in client coordinates).
            </summary>
      <param name="pt">The point to examine.</param>
      <param name="direct">True to get the direct item that is under the point, false to get the first topmost item that contains the point.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NItemsControl.GetClientMouse(System.Boolean)">
      <summary>
            Converts the current cursor position to local coordinates.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NItemsControl.Suspend">
      <summary>
            Suspends any item-related actions.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NItemsControl.Resume">
      <summary>
            Resumes after previous Suspend() call.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NItemsControl.Resume(System.Boolean)">
      <summary>
            Resumes after previous Suspend() call.
            </summary>
      <param name="update">True to perform immediate update, false otherwise.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NItemsControl.ForceUpdate">
      <summary>
            Forces item update.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NItemsControl.ForceUpdate(Nevron.UI.WinForm.Controls.ItemUpdateMask)">
      <summary>
            Forces item update using the specified mask.
            </summary>
      <param name="mask">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NItemsControl.RefreshItem(Nevron.UI.WinForm.Controls.NLightUIItem)">
      <summary>
            Invalidates and re-paints the specified item.
            </summary>
      <param name="item">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NItemsControl.EnsureVisible(Nevron.UI.WinForm.Controls.NLightUIItem)">
      <summary>
            Ensures that the specified item is within the viewable area of the control.
            </summary>
      <param name="item">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NItemsControl.GetItemVisualState(Nevron.UI.WinForm.Controls.NLightUIItem,System.Boolean@)">
      <summary>
            Retrieves the visual state to be used for an item.
            </summary>
      <param name="item">The item whose state is to be retrieved.</param>
      <param name="local">True if a local state exists for the item, false otherwise.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NItemsControl.ClearItemCache(Nevron.UI.WinForm.Controls.NLightUIItem,System.Boolean)">
      <summary>
            Clears the cache of an item.
            Specify null to update all item.
            </summary>
      <param name="item">
      </param>
      <param name="children">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NItemsControl.GetChildBitmap(Nevron.UI.WinForm.Controls.NLightUIItem)">
      <summary>
            Paints the specified child on a bitmap.
            </summary>
      <param name="child">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NItemsControl.ClearSelection">
      <summary>
            Clears all the currently selected items.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NItemsControl.SaveToXml(System.String)">
      <summary>
            Saves the current content to a XML file.
            </summary>
      <param name="xmlFile">
      </param>
      <returns>True if operation was successful, false otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NItemsControl.SaveToXml(System.String,System.Type[])">
      <summary>
            Saves the current content to a XML file.
            </summary>
      <param name="xmlFile">
      </param>
      <param name="extraTypes">A Type array of additional object types to serialize.</param>
      <returns>True if operation was successful, false otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NItemsControl.SaveToXml(System.IO.Stream)">
      <summary>
            Save the current content to the gives stream.
            </summary>
      <param name="stream">
      </param>
      <returns>True if operation was successful, false otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NItemsControl.SaveToXml(System.IO.Stream,System.Type[])">
      <summary>
            Save the current content to the gives stream.
            </summary>
      <param name="stream">
      </param>
      <param name="extraTypes">A Type array of additional object types to serialize.</param>
      <returns>True if operation was successful, false otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NItemsControl.LoadFromXml(System.String)">
      <summary>
            Loads previously saved content from a XML file.
            </summary>
      <param name="xmlFile">
      </param>
      <returns>True if operation was successful, false otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NItemsControl.LoadFromXml(System.String,System.Type[])">
      <summary>
            Loads previously saved content from a XML file.
            </summary>
      <param name="xmlFile">
      </param>
      <param name="extraTypes">A Type array of additional object types to serialize.</param>
      <returns>True if operation was successful, false otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NItemsControl.LoadFromXml(System.IO.Stream)">
      <summary>
            Loads previously saved content from the given stream.
            </summary>
      <param name="stream">
      </param>
      <returns>True if operation was successful, false otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NItemsControl.LoadFromXml(System.IO.Stream,System.Type[])">
      <summary>
            Loads previously saved content from the given stream.
            </summary>
      <param name="stream">
      </param>
      <param name="extraTypes">A Type array of additional object types to serialize.</param>
      <returns>True if operation was successful, false otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NItemsControl.InitDefaultColors">
      <summary>
            Initializes the default colors (if not explicitly set) to be used for filling and stroke.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NItemsControl.EnableSkinning">
      <summary>
            Gets/sets a value indicating whether the control will use skin logic.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NItemsControl.Skin">
      <summary>
            Gets/sets the local NSkin instance to be used when painting this control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NItemsControl.CurrentSkin">
      <summary>
            Gets the current skin to be used by this instance.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NItemsControl.ItemNotify">
      <summary>
            A notification event which is raised before any item-related action is taken.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NItemsControl.ItemDragAction">
      <summary>
            A notification which is raised upon a drag action.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NItemsControl.ItemBeginDrag">
      <summary>
            Occurs when the user begins dragging a node.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NItemsControl.ItemDrag">
      <summary>
            Occurs when the user dragging a node.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NItemsControl.ItemDragComplete">
      <summary>
            Occurs when a drag-and-drop operation is completed.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NItemsControl.BeforePaint">
      <summary>
            Fired before an actual paint operation and after the paint context is created.
            This allows you to directly modify the paint context if needed.
            Note that the EnableBeforePaintEvent flag should be set to true in order to receive the notification.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NItemsControl.ChildrenCount">
      <summary>
            Gets the total count of hosted items including nested containers also.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NItemsControl.EnableBeforePaintEvent">
      <summary>
            Determines whether the BeforePaint event will be fired.
            This is false by default since firing an event before paint operation may slow down performance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NItemsControl.ClientMouse">
      <summary>
            Gets the current mouse position in client coordinates.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NItemsControl.ItemDragDropMode">
      <summary>
            Gets/sets the mode to be used when starting drag-and-drop operation.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NItemsControl.ItemImageSize">
      <summary>
            Gets/sets the size to be used when drawing items' images.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NItemsControl.AllowDragDropClone">
      <summary>
            Determines whether clone of the dragged node will be performed if the Control modifier is pressed.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NItemsControl.EnableItemEdit">
      <summary>
            Determines whether run-time customization of item's text is allowed.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NItemsControl.EnableItemTooltips">
      <summary>
            Determines whether a tooltip will be displayed when the mouse hovers an item.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NItemsControl.EnableHiddenItemTooltips">
      <summary>
            Determines whether tooltip will be displayed when the mouse hovers partially hidden item.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NItemsControl.HideSelection">
      <summary>
            Determines whether selected items will be displayed when the control is not currently focused.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NItemsControl.ShowDragDropHints">
      <summary>
            Determines whether visual hints will be displayed when an item drag-drop operation is running.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NItemsControl.EnableVisualStateComposition">
      <summary>
            Determines whether an item will compose its visual state up in the parent chain.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NItemsControl.MinimumItemSize">
      <summary>
            Gets/sets the minimum size of a child item.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NItemsControl.SelectionMode">
      <summary>
            Gets/sets the selection mode of the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NItemsControl.SelectionButton">
      <summary>
            Gets/sets the mouse button which is used to select items.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NItemsControl.FillInfo">
      <summary>
            Gets the NFillInfo object which describes the filling of the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NItemsControl.StrokeInfo">
      <summary>
            Gets the NStrokeInfo object which describes the border of the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NItemsControl.ImageList">
      <summary>
            Gets/sets the image list of the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NItemsControl.ItemCheckStyle">
      <summary>
            Gets/sets the check style to be applied on all items.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NItemsControl.ItemBackgroundMode">
      <summary>
            Gets/sets the background mode of all items.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NItemsControl.CheckLength">
      <summary>
            Gets/sets the width and height of check box.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NItemsControl.TrackHotState">
      <summary>
            Determines whether the control will track the Hot mouse state of an item.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NItemsControl.EnableDragDropAutoScroll">
      <summary>
            Determines whether auto-scrolling will be performed if an item is dragged near the edges of the viewable area.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NItemsControl.TrackHotSelectedState">
      <summary>
            Determines whether the control will track the Hot mouse state of a selected item.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NItemsControl.AutoUpdateCheckState">
      <summary>
            Determines whether the control will automatically update (upon an item's check state change) all other related items (ancestor and descendants).
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NItemsControl.TrackPressedState">
      <summary>
            Determines whether the control will track the Pressed mouse state of an item.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NItemsControl.ShowFocusedItemCues">
      <summary>
            Determines whether a focused rectangle will be displayed around the currently focused item.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NItemsControl.EnsureFocusedItemVisible">
      <summary>
            Determines whether the focused item will be scrolled into view.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NItemsControl.EnableBatchUpdates">
      <summary>
            Determines whether the control will use batch updates upon item notification.
            For example if this value is true the smart checking will not fire ItemNotify for all internally updated items, just for the item which received the user input.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NItemsControl.ItemTextProcessMode">
      <summary>
            Gets/sets the mode used to process item text.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NItemsControl.NormalState">
      <summary>
            Gets the visual state used to render normal items.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NItemsControl.HotState">
      <summary>
            Gets the visual state used to render hot items.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NItemsControl.PressedState">
      <summary>
            Gets the visual state used to render hot items.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NItemsControl.SelectedState">
      <summary>
            Gets the visual state used to render selected items.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NItemsControl.InactiveSelectedState">
      <summary>
            Gets the visual state used to render selected items when the control is inactive (does not contain focus).
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NItemsControl.HotSelectedState">
      <summary>
            Gets the visual state used to render selected items when they are hot (mouse cursor is above them).
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NItemsControl.FocusedItem">
      <summary>
            Gets the item that contains the logical focus of the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NItemsControl.CheckSize">
      <summary>
            Gets the size of a checkbox per item.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NItemsControl.ItemsViewRectangle">
      <summary>
            Gets the viewable rectangle where items are displayed.
            This may differ from the ViewRectangle since a control may display some adorners.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NItemsControl.ItemsHitTestRectangle">
      <summary>
            Gets the rectangle used to hit-test for items.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NItemsControl.VisibleFilter">
      <summary>
            Gets/sets the INFilter instance which controls the currently visible items.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NItemsControl.DefaultMinimumItemSize">
      <summary>
            Gets the default value of the MinimumItemHeight property.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NItemsControl.DefaultItemBackgroundMode">
      <summary>
            Gets the default value of the ItemBackgroundMode property.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NItemsControl.DefaultItemCheckStyle">
      <summary>
            Gets the default value of the ItemCheckStyle property.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NItemsControl.DefaultItemDragDropMode">
      <summary>
            Gets the default value of the ItemDragDropMode property.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NItemsControl.DefaultCheckLength">
      <summary>
            Gets the default value of the CheckLength property.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NItemsControl.DefaultItemImageSize">
      <summary>
            Gets the default value of the ItemImageSize property.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeViewEx.ExpandAll">
      <summary>
            Expands the entire tree.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeViewEx.CollapseAll">
      <summary>
            Collapses the entire tree.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeViewEx.Expand(System.Int32,System.Boolean)">
      <summary>
            Expands all nodes which are at the specified level in the tree.
            </summary>
      <param name="level">The level(depth) to examine.</param>
      <param name="recursive">True to expand child nodes also, false otherwise.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeViewEx.Collapse(System.Int32,System.Boolean)">
      <summary>
            Collapses all nodes which are at the specified level in the tree.
            </summary>
      <param name="level">The level(depth) to examine.</param>
      <param name="recursive">True to collapse child nodes also, false otherwise.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeViewEx.EnsureParentChain(Nevron.UI.WinForm.Controls.NTreeNode)">
      <summary>
            Forces all ancestors of the specified node to be expanded.
            </summary>
      <param name="node">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeViewEx.GetItemRect(Nevron.UI.WinForm.Controls.NLightUIItem)">
      <summary>
      </summary>
      <param name="item">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeViewEx.VisibleNodeFromY(System.Int32)">
      <summary>
            Gets the visible node which contains the specified Y-coordinate.
            </summary>
      <param name="y">The Y-coordinate to examine.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeViewEx.BoxHitTest(Nevron.GraphicsCore.NPoint)">
      <summary>
            Gets the node which should be expanded when a box containing the specified point is clicked.
            </summary>
      <param name="pt">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeViewEx.NextNode(Nevron.UI.WinForm.Controls.NTreeNode)">
      <summary>
            Gets the next node in the visible tree.
            </summary>
      <param name="anchor">The node to start search from.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeViewEx.PreviousNode(Nevron.UI.WinForm.Controls.NTreeNode)">
      <summary>
            Gets the previous node in the visible tree.
            </summary>
      <param name="anchor">The node to start search from.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeViewEx.SelectRange(Nevron.UI.WinForm.Controls.NTreeNode,Nevron.UI.WinForm.Controls.NTreeNode)">
      <summary>
            Selects range of nodes.
            </summary>
      <param name="node1">The starting node.</param>
      <param name="node2">The ending node.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeViewEx.DisplayXml(System.String)">
      <summary>
      </summary>
      <param name="xmlFile">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeViewEx.DisplayXml(System.IO.Stream)">
      <summary>
      </summary>
      <param name="stream">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeViewEx.DisplayXml(System.Xml.XmlDocument)">
      <summary>
            Populates the control using the specified xml document.
            This operation differs from the LoadFromXml one which restores
            previously saved content while this creates new nodes depending on the document.
            </summary>
      <param name="doc">The XML document to read.</param>
      <returns>True if operation was successful, false otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeViewEx.GetRenderer(Nevron.UI.WinForm.Controls.NTreeViewExPaintContext)">
      <summary>
            Gets the default renderer of the tree-view.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeViewEx.DefaultIndent">
      <summary>
            Gets the default value of the Indent property.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeViewEx.DefaultBoxLength">
      <summary>
            Gets the default value of the BoxLength property.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeViewEx.DefaultIndicatorLength">
      <summary>
            Gets the default value of the IndicatorLength property.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeViewEx.DefaultNodeVerticalSpacing">
      <summary>
            Gets the default value of the NodeVerticalSpacing property.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeViewEx.DefaultLineVisibility">
      <summary>
            Gets the default value for the LineVisibility property.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeViewEx.BoxVisibility">
      <summary>
            Gets/sets the visibility of the expand/collapse boxes.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeViewEx.LineVisibility">
      <summary>
            Gets/sets the visibility of the lines.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeViewEx.Nodes">
      <summary>
            Gets the collection of child nodes for this tree-view.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeViewEx.Indent">
      <summary>
            Gets/sets the indentation of parent-child relation.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeViewEx.BoxLength">
      <summary>
            Gets/sets the width and height of expand-collapse box.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeViewEx.ExpandToRight">
      <summary>
            Determines whether nodes will expand to right to fill the viewable area.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeViewEx.ExpandNodeOnDragOver">
      <summary>
            Determines whether a node will be expanded when the mouse hovers it while drag-and-drop operation is running.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeViewEx.ShowIndicatorBackground">
      <summary>
            Determines whether indicator's background will be painted.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeViewEx.IndicatorStyle">
      <summary>
            Gets/sets the indicator style for the tree-view.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeViewEx.LineColor">
      <summary>
            Gets/sets the color used to draw lines.
            Specify Color.Empty to use the default palette value.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeViewEx.BoxBackColor">
      <summary>
            Gets/sets the color used to draw boxes background.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeViewEx.BoxForeColor">
      <summary>
            Gets/sets the color used to draw boxes foreground such as plus-minus.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeViewEx.BoxBorderColor">
      <summary>
            Gets/sets the color used to draw boxes border.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeViewEx.LineDashStyle">
      <summary>
            Gets/sets the pen dash style used to draw lines.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeViewEx.NodeVerticalSpacing">
      <summary>
            Gets/sets the vertical spacing to be applied among nodes.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeViewEx.IndicatorLength">
      <summary>
            Gets/sets the length of the indicator (if enabled).
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeViewEx.FocusedItemIndicator">
      <summary>
            Gets/sets the indicator used to highlight the currently focused item.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeViewEx.FirstVisibleNode">
      <summary>
            Gets the first visible node in the entire tree.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeViewEx.LastVisibleNode">
      <summary>
            Gets the last visible node in the entire tree.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeViewEx.RightMostVisibleNode">
      <summary>
            Gets the visible node with highest depth.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeViewEx.Renderer">
      <summary>
            Gets/sets the renderer used to measure and paint nodes.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeViewEx.BoxSize">
      <summary>
            Gets the size of a expand/collapse box.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeViewEx.ItemsViewRectangle">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeViewEx.SelectedNodes">
      <summary>
            Gets an array of all the currently selected nodes.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeViewEx.VisibleNodes">
      <summary>
            Gets an array of all the currently visible nodes.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeViewEx.Enumerator">
      <summary>
            Gets/sets the custom enumerator to be used when iterating among tree's nodes.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NSkinManager">
      <summary>
            Provides skinning support for all UI controls.
            </summary>
    </member>
    <member name="T:Nevron.UI.NDefaultInitializableObject">
      <summary>
            Summary description for NDefaultInitializableObject.
            </summary>
    </member>
    <member name="P:Nevron.UI.NDefaultInitializableObject.Initializing">
      <summary>
            Gets a value indicating whether the object is currently in a process of being initialized.
            </summary>
    </member>
    <member name="P:Nevron.UI.NDefaultInitializableObject.IsDefaultInitialized">
      <summary>
            Gets a value indicating whether the object is initialized with its default settings.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NSkinManager.RegisterSkinnableInstance(Nevron.UI.WinForm.Controls.INSkinnableControl)">
      <summary>
            Registers a skinnable control for notifications with the skin manager
            </summary>
      <param name="control">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NSkinManager.UnregisterSkinnableInstance(Nevron.UI.WinForm.Controls.INSkinnableControl)">
      <summary>
            Unregisters a skinnable control for notifications from the skin manager
            </summary>
      <param name="control">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NSkinManager.NotifySkinChange">
      <summary>
            Notifies registered skinnable control for a skin change
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NSkinManager.NotifySkinChange(System.Windows.Forms.Control)">
      <summary>
            Notifies skinnable controls, which have the specified parent for a skin change
            </summary>
      <param name="parent">
      </param>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NSkinManager.Skin">
      <summary>
            Gets/sets the global skin for the UI framework.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NSkinManager.Painter">
      <summary>
            Gets/sets the painter which renders skin states.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NSkinManager.Enabled">
      <summary>
            Gets/sets a value indicating whether the manager is currently operating.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NSkinManager.IsEnabled">
      <summary>
            Determines whether the manager is currently enabled.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NSkinManager.UseGlassIfEnabled">
      <summary>
            Determines whether an NForm instance will let the OS to paint a glass frame under Windows Vista
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NSkinManager.IsGlassEnabled">
      <summary>
            Determines whether the glass effect is currently enabled.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NWaitingBarRenderInfo">
      <summary>
            Summary description for NWaitingBarRenderInfo.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NControlBorderProviderRenderInfo">
      <summary>
            Summary description for NControlBorderProviderRenderInfo.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NControlRenderInfo">
      <summary>
            Summary description for NControlRenderInfo.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NControlRenderInfo.ClientRectangle">
      <summary>
            Gets/sets the client rectangle to render into.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NControlRenderInfo.Bounds">
      <summary>
            Gets/sets the client rectangle to render into.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NControlRenderInfo.Enabled">
      <summary>
            Gets/sets a value indicating whether to render the control enabled.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NControlRenderInfo.ControlHandle">
      <summary>
            Gets/sets the handle of the control onto which surface the rendering occurs.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NControlRenderInfo.Font">
      <summary>
            Gets/sets the Font object used to render the Control's text.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NControlBorderProviderRenderInfo.BorderStyle">
      <summary>
            Gets/sets the border style to be applied on the Bounds.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NControlBorderProviderRenderInfo.BaseBorderColor">
      <summary>
            Gets/sets the base color to be used when drawing border.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NWaitingBarRenderInfo.Properties">
      <summary>
            Gets/sets the object that contains common information about a NWaitingBar control.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NProgressBase">
      <summary>
            Summary description for NProgressBase.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NRendererProviderControl">
      <summary>
            Summary description for NPaletteControl.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.INRendererProvider">
      <summary>
            Provides common property for retreiving a NUIRenderer instance from an object.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.INRendererProvider.Renderer">
      <summary>
            Gets/sets the current renderer for this instance.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NRendererProviderControl.ApplyPalette(Nevron.UI.WinForm.Controls.NPalette)">
      <summary>
            Synchronizes the local palette with the specified one.
            </summary>
      <param name="palette">
      </param>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRendererProviderControl.Renderer">
      <summary>
            Gets/sets the current renderer for the button.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRendererProviderControl.Palette">
      <summary>
            Gets/sets the NPalette used to render the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRendererProviderControl.PaletteInheritance">
      <summary>
            Gets/sets a value which Palette value will be applied on a higher level Palette change.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.INControlBorderProvider">
      <summary>
            Represents a common interface for controls with generic border support
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.INControlBorderProvider.UpdateBorder">
      <summary>
            Updates the border appearance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.INControlBorderProvider.Border">
      <summary>
            Gets the object containing information about current border style.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.INControlBorderProvider.DefaultBorderStyle">
      <summary>
            Gets the preffered border style for this instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.INControlBorderProvider.DefaultBaseBorderColor">
      <summary>
            Gets the preffered base border color for this instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.INControlBorderProvider.IsBorderHot">
      <summary>
            Gets a value whether the border is in hot state - either focused or hovered.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.INControlBorderProvider.BorderWidth">
      <summary>
            Gets the current border width.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.INControlBorderProvider.Enabled">
      <summary>
            Determines whether the current instance is enabled.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NProgressBase.Border">
      <summary>
            Gets the NControlBorder object that manages the border around the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NProgressBase.DefaultBorderStyle">
      <summary>
            Gets the default border style for the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NProgressBase.DefaultBaseBorderColor">
      <summary>
            Gets the default base color to use when drawing 3D borders.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NProgressBase.BorderWidth">
      <summary>
            Gets the preffered width of the border.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NProgressBase.EnableSkinning">
      <summary>
            Gets/sets a value indicating whether the control will use skin logic.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NProgressBase.Skin">
      <summary>
            Gets/sets the local NSkin instance to be used when painting this control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NProgressBase.CurrentSkin">
      <summary>
            Gets the current skin to be used by this instance.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NPaletteUIElementHost">
      <summary>
            Summary description for NPaletteUIElementHost.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NPaletteUIElementHost.ApplyPalette(Nevron.UI.WinForm.Controls.NPalette)">
      <summary>
            Updates from the specified palette and 
            </summary>
      <param name="palette">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NPaletteUIElementHost.UpdateFromPalette(Nevron.UI.WinForm.Controls.NPalette)">
      <summary>
            Updates from the specified palette.
            </summary>
      <param name="palette">
      </param>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPaletteUIElementHost.Palette">
      <summary>
            Gets/sets the NPalette used to render the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPaletteUIElementHost.PaletteInheritance">
      <summary>
            Gets/sets a value which Palette value will be applied on a higher level Palette change.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NDecorator">
      <summary>
            Represents a decorator with filling and stroke.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NDecoratorBase">
      <summary>
            Represents the base implementation for a decorator.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NDecoratorBase.BeginInit">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NDecoratorBase.EndInit">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NDecoratorBase.OnAttributePropertyChanged(System.String,System.String)">
      <summary>
      </summary>
      <param name="attributeFullName">
      </param>
      <param name="propertyName">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NDecoratorBase.BeginPaint(System.Drawing.Graphics)">
      <summary>
            Begins a paint operation.
            Internally a graphics path is prepared and the paint rectangle is calculated.
            </summary>
      <param name="g">The graphics used for the painting.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NDecoratorBase.EndPaint">
      <summary>
            Ends paint operation.
            Internally any GDI object is released.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NDecoratorBase.DoPaint(System.Drawing.Graphics)">
      <summary>
            Performs the core rendering operation.
            </summary>
      <param name="g">The graphics surface to paint onto.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NDecoratorBase.GetRenderRect">
      <summary>
            Gets the rectangle to paint into.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NDecoratorBase.GetRenderPath">
      <summary>
            Gets the GraphicsPath object used for painting.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NDecoratorBase.OnLayoutPropertyChanged(System.Object,Nevron.UI.NPropertyChangedEventArgs)">
      <summary>
            Handles any property change in a member object which may alter the control's layout.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NDecoratorBase.DoCustomLayout">
      <summary>
            Performs custom layout logic
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NDecoratorBase.InitializeDefault">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NDecoratorBase.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NDecoratorBase.ShouldSerializeClientPadding">
      <summary>
            Determines whether the ClientPadding memeber should be serialized by the designer.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDecoratorBase.ElementBounds">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDecoratorBase.DisplayRectangle">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDecoratorBase.ClientPadding">
      <summary>
            Gets/sets the NPadding object which controls the display rectangle of the decorator.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NDecorator.InitializeDefault">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NDecorator.DoPaint(System.Drawing.Graphics)">
      <summary>
      </summary>
      <param name="g">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NDecorator.GetRenderRect">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NDecorator.GetRenderPath">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NDecorator.UpdateFromPalette(Nevron.UI.WinForm.Controls.NPalette)">
      <summary>
      </summary>
      <param name="palette">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NDecorator.RenderFilling(System.Drawing.Graphics)">
      <summary>
            Performs filling render logic.
            </summary>
      <param name="g">The graphics surface to draw onto.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NDecorator.RenderStroke(System.Drawing.Graphics)">
      <summary>
            Performs stroke render logic.
            </summary>
      <param name="g">The graphics surface to draw onto.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NDecorator.InitDefaultColors">
      <summary>
            Initializes the default colors (if not explicitly set) to be used for filling and stroke.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NDecorator.ShouldSerializeFillInfo">
      <summary>
            Determines whether the FillInfo member should be serialized by the designer.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NDecorator.ShouldSerializeStrokeInfo">
      <summary>
            Determines whether the StrokeInfo member should be serialized by the designer.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDecorator.DisplayRectangle">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NUIPalette">
      <summary>
            Represents a Palette for rendering standard GUI objects.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NPalette">
      <summary>
            Represents a base class for storing color schemes.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.INPropertyPageProvider">
      <summary>
            Provides single property to retrieve the user control used to edit this instance visually.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.INPropertyPageProvider.PropertyPage">
      <summary>
            Gets the property page of this instance.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.INUpdateable">
      <summary>
            Provides method for updating one object from another.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.INUpdateable.UpdateFrom(System.Object)">
      <summary>
            Updates one object from another. Both objects must be from same type.
            </summary>
      <param name="from">The object to update from</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NPalette.Dispose">
      <summary>
            Disposes all the resources used by the NPalette.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NPalette.SetColorTable(Nevron.UI.WinForm.Controls.NColorTable)">
      <summary>
            Sets the specified color table as the current one used for rendering.
            </summary>
      <param name="table">The NColorTable to set.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NPalette.Copy(Nevron.UI.WinForm.Controls.NPalette)">
      <summary>
            Copies all values from the specified Palette.
            </summary>
      <param name="palette">The Palette to copy values from.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NPalette.Save">
      <summary>
            Serializes the curent NPalette object to a XML file.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NPalette.Load">
      <summary>
            Loads a NPalette object.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NPalette.FromFile(System.String,System.Type)">
      <summary>
            Loads a NPalette object from the specified file.
            </summary>
      <param name="filePath">The fully qualified path to the specified file.</param>
      <param name="type">The type of the NPalette object requesting the load.</param>
      <returns>The newly created NPalette.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NPalette.ShouldSerializeBlendStyle">
      <summary>
            Determines whether the BlendStyle property needs to be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPalette.PropertyPage">
      <summary>
            Gets the property page for the Palette.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NPalette.PaletteChanged">
      <summary>
            Notify for a global palette change. That is for example when a palette is loaded or initialized from another one.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NPalette.PropertyChanged">
      <summary>
            Notifies for a single property change.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPalette.DefaultScheme">
      <summary>
            Gets the default color scheme to be used. By default this is the value returned by the NUIManager.DefaultColorScheme
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPalette.SuspendEvents">
      <summary>
            Allows suspending of firing events.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPalette.BlendStyle">
      <summary>
            Gets/sets the blending style of the palette.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPalette.Control">
      <summary>
            Gets/sets the control background color.
            Note that setting custom value will automatically change the current colorscheme to custom.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPalette.ControlLight">
      <summary>
            Gets/sets the begin background color.
            Note that setting custom value will automatically change the current colorscheme to custom.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPalette.ControlDark">
      <summary>
            Gets/sets the end background color.
            Note that setting custom value will automatically change the current colorscheme to custom.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPalette.Highlight">
      <summary>
            Gets/sets the highlight color.
            Note that setting custom value will automatically change the current colorscheme to custom.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPalette.HighlightLight">
      <summary>
            Gets/sets the begin hover(select) color.
            Note that setting custom value will automatically change the current colorscheme to custom.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPalette.HighlightDark">
      <summary>
            Gets/sets the end hover(select) color.
            Note that setting custom value will automatically change the current colorscheme to custom.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPalette.PressedLight">
      <summary>
            Gets/sets the begin push color.
            Note that setting custom value will automatically change the current colorscheme to custom.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPalette.PressedDark">
      <summary>
            Gets/sets the end push color.
            Note that setting custom value will automatically change the current colorscheme to custom.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPalette.CheckedLight">
      <summary>
            Gets/sets the begin check color.
            Note that setting custom value will automatically change the current colorscheme to custom.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPalette.CheckedDark">
      <summary>
            Gets/sets the end check color.
            Note that setting custom value will automatically change the current colorscheme to custom.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPalette.Menu">
      <summary>
            Gets/sets the menu background color.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPalette.MenuText">
      <summary>
            Gets/sets the menu text color.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPalette.ControlText">
      <summary>
            Gets/sets the default text color.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPalette.HighlightText">
      <summary>
            Gets/sets the selected text color.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPalette.Caption">
      <summary>
            Gets/sets the caption color.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPalette.CaptionText">
      <summary>
            Gets/sets the caption text color.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPalette.Border">
      <summary>
            Gets/sets the border color.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPalette.ControlBorder">
      <summary>
            Gets/sets the control border color.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPalette.SelectedBorder">
      <summary>
            Gets/sets the border color.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPalette.SecondaryBorder">
      <summary>
            Gets/sets the color for an inner border.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPalette.Window">
      <summary>
            Gets/sets the background color of a window.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPalette.WindowText">
      <summary>
            Gets/sets the foreground color of a window.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPalette.Scheme">
      <summary>
            Gets/sets the current predefined color scheme for the Palette.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPalette.BaseScheme">
      <summary>
            Gets/sets the base scheme to be used when the ColorScheme is user-defined.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPalette.UseThemes">
      <summary>
            Gets/sets a value whether to apply themes(if enabled) when the color scheme is set to WindowsDefault.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPalette.ThemeEnabled">
      <summary>
            Gets a value whether a theme is enabled (valid when the Scheme is ColorScheme.WindowsDefault)
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NMouseInteractiveControl">
      <summary>
            Summary description for NMouseInteractiveControl.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NCommand">
      <summary>
            Base class for all commands.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.INCommandCollection">
      <summary>
            Represents an object that contains nested commands.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.INCommandCollection.Commands">
      <summary>
            Gets the children commands of this instance.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.INCommandBarsObject">
      <summary>
            Provides a simple property to retrieve a NCommandBarsManager reference.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.INCommandBarsObject.Manager">
      <summary>
            Gets a reference to the <see cref="T:Nevron.UI.WinForm.Controls.NCommandBarsManager" /> object. Might be null.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.INSerializable">
      <summary>
            Provides common method for retreiving the data needed to serialize an object.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.INSerializable.GetSerializationData">
      <summary>
            Gets an object that contains serializable data for the current instance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NCommand.Contains(Nevron.UI.WinForm.Controls.NCommand)">
      <summary>
            Searches down in the command tree whether this command or one of its children contains the specified command.
            </summary>
      <param name="comm">The command to search for.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NCommand.FromContext(Nevron.UI.WinForm.Controls.NCommandContext)">
      <summary>
            Initializes a new NCommand object from a given context.
            </summary>
      <param name="context">The context to init from.</param>
      <returns>The newly created command.</returns>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommand.PropertyPage">
      <summary>
            Gets the NPropertyPage object used to visually edit the NCommand object.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommand.Manager">
      <summary>
            Gets a refrence to a NCommandBarsManager object. Might be null.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommand.Renderer">
      <summary>
            Gets the Parent's renderer.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommand.Palette">
      <summary>
            Gets the NPalette used to render the control.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NCommand.Click">
      <summary>
            Fired when the NCommand is clicked(executed).
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NCommand.Select">
      <summary>
            Fired when the NCommand is hovered(selected).
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NCommand.Deselect">
      <summary>
            Fired when the NCommand is unhovered(deselected).
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NCommand.Popup">
      <summary>
            Fired when the NCommand is about to show its child menu.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NCommand.ClosePopup">
      <summary>
            Fired when the NCommand closes its child menu.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NCommand.Measure">
      <summary>
            Fired when the NCommand needs measuring (works only if the "OwnMeasure" flag is set to true).
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NCommand.Paint">
      <summary>
            Fired when the NCommand needs painting (works only if the "OwnPaint" flag is set to true).
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NCommand.QueryUIState">
      <summary>
            Fired just before the command is painted. Use this event if you want to dynamically update its state.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NCommand.TooltipRequest">
      <summary>
            Fires when the Tooltip was requested.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommand.Parent">
      <summary>
            Gets the NCommandParent that contains the command.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommand.ParentCollection">
      <summary>
            Gets the NCommandCollection that contains the command.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommand.ParentCommand">
      <summary>
            Gets the NCommand object that contains this command. Might be null.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommand.TopLevelParent">
      <summary>
            Gets the top-level parent for this command. Typically this is a NToolbar object or a NMenuWindow for context menus.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommand.TopLevelCommand">
      <summary>
            Gets the top-level command that contains this command.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommand.Context">
      <summary>
            Gets the context shared by this command.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommand.Enabled">
      <summary>
            Gets/sets a value whether the command is enabled.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommand.Checked">
      <summary>
            Gets/sets a value whether the command is checked.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommand.Commands">
      <summary>
            Gets the commands associated with this command.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommand.OwnPaint">
      <summary>
            Gets/sets a value whether painting will be handled by the command itself.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommand.OwnMeasure">
      <summary>
            Gets/sets a value whether measuring will be handled by the command itself.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommand.Properties">
      <summary>
            Gets/sets the common properties for the NCommand.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommand.VisualState">
      <summary>
            Gets the parent-dependant state of the NCommand.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NKeyHelper">
      <summary>
            Summary description for NKeyHelper.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NShortcut">
      <summary>
            Represents a keyboard shortcut combination that can be assigned
            to a <see cref="T:Nevron.UI.WinForm.Controls.INShortcutProvider" /> instance.
            </summary>
      <remarks>
            Using this simple class allows you to create and use
            practically any keyboard combination, not only the predefined
            ones in the Windows.Forms.Shortcut enumeration.
            </remarks>
      <example>
            The following example creates Control+Shift+O keyboard combination
            and attaches it to an existing NCommand object:
            <code>
            NShortcut shortcut = new NShortcut(Keys.O, Keys.Control | Keys.Shift);
            nCommand1.Shortcut = shortcut;
            </code></example>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NShortcut.ToString">
      <summary>
            Overriden. Displays the key and modifiers values separated by "+".
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NShortcut.Match(System.Windows.Forms.KeyEventArgs)">
      <summary>
            Returns true if the shortcut matches with the specified KeyEventArgs.
            </summary>
      <param name="e">
      </param>
      <returns>Returns true only if the shortcut matches all modifiers and key code</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NShortcut.MatchAny(System.Windows.Forms.KeyEventArgs)">
      <summary>
            Returns true if the shortcut matches any of the modifier keys and the key code.
            </summary>
      <param name="e">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NShortcut.PropertyPage">
      <summary>
            Gets the NPropertyPage to edit this object.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NShortcut.Key">
      <summary>
            Gets/sets the key value of the shortcut.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NShortcut.Modifiers">
      <summary>
            Gets/sets the modifiers value of the shortcut.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NShortcut.Keys">
      <summary>
            Gets the combined value of the key and modifier.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NShortcut.Empty">
      <summary>
            Gets an empty shortcut.
            </summary>
    </member>
    <member name="T:Nevron.UI.NButtonEditElement">
      <summary>
            Represents an abstract container which contains a display portion and a set of hosted buttons.
            </summary>
    </member>
    <member name="T:Nevron.UI.NUIElementContainer">
      <summary>
            Represents an element which is layoutable and serves as a container for other elements.
            </summary>
    </member>
    <member name="T:Nevron.UI.NUIElement">
      <summary>
            Represents the base of all user interface elements.
            </summary>
    </member>
    <member name="T:Nevron.UI.NThemableElement">
      <summary>
            Summary description for NThemableElement.
            </summary>
    </member>
    <member name="T:Nevron.UI.NInputElement">
      <summary>
            Summary description for NInputElement.
            </summary>
    </member>
    <member name="T:Nevron.UI.NMouseInputElement">
      <summary>
            Summary description for NMouseInputElement.
            </summary>
    </member>
    <member name="T:Nevron.UI.NKeyboardInputElement">
      <summary>
            Summary description for NKeyboardInputElement.
            </summary>
    </member>
    <member name="T:Nevron.UI.NVisualElement">
      <summary>
            Summary description for NUIElement.
            </summary>
    </member>
    <member name="T:Nevron.UI.NHitTestableElement">
      <summary>
            Summary description for NHitTestableElement.
            </summary>
    </member>
    <member name="T:Nevron.UI.NBoundableElement">
      <summary>
            Summary description for NBoundableElement.
            </summary>
    </member>
    <member name="T:Nevron.UI.NUIFrameworkElement">
      <summary>
            Represents the basic UI Element. It has no visual representation, just the atomic element, base for all visual UI elements.
            </summary>
    </member>
    <member name="T:Nevron.UI.NUINode">
      <summary>
            Represents a node in the UI context.
            </summary>
    </member>
    <member name="T:Nevron.UI.NDisposableObject">
      <summary>
            Represents a generic implementation of IDisposable interface.
            </summary>
    </member>
    <member name="M:Nevron.UI.NDisposableObject.ClearEvents">
      <summary>
            Removes all the events handlers attached to this instance.
            </summary>
    </member>
    <member name="E:Nevron.UI.NDisposableObject.Disposed">
      <summary>
            Fired when the object has been disposed.
            </summary>
    </member>
    <member name="P:Nevron.UI.NDisposableObject.Events">
      <summary>
            Gets the list of all events attached to this object.
            </summary>
    </member>
    <member name="P:Nevron.UI.NDisposableObject.Disposing">
      <summary>
            Gets a value indicating whether the object is in process of being disposed of.
            </summary>
    </member>
    <member name="P:Nevron.UI.NDisposableObject.IsDisposed">
      <summary>
            Gets a value indicating whether the object is already disposed.
            </summary>
    </member>
    <member name="P:Nevron.UI.NDisposableObject.LockEventFiring">
      <summary>
            Optionally locks any event firing from this instance.
            </summary>
    </member>
    <member name="M:Nevron.UI.NUINode.GetAnyParentSuspended">
      <summary>
            Determines whether there is a suspended parent up in the node chain.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NUINode.ContainsPropEntry(System.Int32)">
      <summary>
            Determines whether an entry with the specified key exists in the node's property storage.
            </summary>
      <param name="propConstant">The key to examine.</param>
      <returns>True if an entry exists, false otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.NUINode.GetPropertyValue(System.Int32)">
      <summary>
            Gets the current value of the specified property.
            </summary>
      <param name="key">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NUINode.SetCustomProperty(System.Int32,System.Object)">
      <summary>
            Gets/sets a custom property associated with this node.
            </summary>
      <param name="key">The property key.</param>
      <param name="value">The value of the property.</param>
    </member>
    <member name="M:Nevron.UI.NUINode.GetCustomProperty(System.Int32)">
      <summary>
            Gets previously set custom property using the specified key.
            </summary>
      <param name="key">The key.</param>
      <returns>The property value.</returns>
    </member>
    <member name="M:Nevron.UI.NUINode.ClearCustomProperty(System.Int32)">
      <summary>
            Remove previously set custom property.
            </summary>
      <param name="key">The key.</param>
    </member>
    <member name="M:Nevron.UI.NUINode.ClearCustomProperties">
      <summary>
            Clears all the custom properties.
            </summary>
    </member>
    <member name="M:Nevron.UI.NUINode.SendToBack">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.NUINode.Suspend">
      <summary>
            Generally suspends the node. For different instances this will have different meaning.
            </summary>
    </member>
    <member name="M:Nevron.UI.NUINode.Resume">
      <summary>
            Resumes the node from a previous call to the Suspend method.
            </summary>
    </member>
    <member name="M:Nevron.UI.NUINode.Resume(System.Boolean)">
      <summary>
            Resumes the node from a previous call to the Suspend method and optionally performs instance-dependent update.
            </summary>
      <param name="update">True to update, false otherwise.</param>
    </member>
    <member name="M:Nevron.UI.NUINode.BubblePropertyChanging(Nevron.UI.INUINode,Nevron.UI.NPropertyChangingEventArgs)">
      <summary>
            Bubbles the PropertyChanging notification up in the parent tree.
            </summary>
      <param name="sender">The sender of this notification. It may differ from the originator.</param>
      <param name="e">The arguments associated with the event.</param>
    </member>
    <member name="M:Nevron.UI.NUINode.BubblePropertyChanged(Nevron.UI.INUINode,Nevron.UI.NPropertyChangedEventArgs)">
      <summary>
            Bubbles the PropertyChanged notification up in the parent tree.
            </summary>
      <param name="sender">The sender of this notification. It may differ from the originator.</param>
      <param name="e">The arguments associated with the event.</param>
    </member>
    <member name="M:Nevron.UI.NUINode.CanRaiseEvent(System.Delegate,System.EventArgs)">
      <summary>
            Determines whether the node can raise the specified event.
            </summary>
      <param name="value">
      </param>
      <param name="e">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NUINode.InitializeDefault">
      <summary>
            Performs default initialization when constructed.
            This method allows full control over node's instanciation as it may be overriden.
            </summary>
    </member>
    <member name="M:Nevron.UI.NUINode.OnPropertyChanging(Nevron.UI.NPropertyChangingEventArgs)">
      <summary>
            Fires the PropertyChanging event.
            The method first bubbles up the change allowing any parent to prevent it.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.NUINode.OnPropertyChanged(Nevron.UI.NPropertyChangedEventArgs)">
      <summary>
            Fires the PropertyChanged event.
            The method bubbles up the change and allows any parent to perform additional update.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.NUINode.UpdateAfterResume">
      <summary>
            An instance-dependent method which allows an update after a Resume method call.
            </summary>
    </member>
    <member name="P:Nevron.UI.NUINode.ParentNode">
      <summary>
            Gets the parent of this node.
            </summary>
    </member>
    <member name="P:Nevron.UI.NUINode.RootNode">
      <summary>
            Gets the root node of the nodes tree where this node resides.
            </summary>
    </member>
    <member name="P:Nevron.UI.NUINode.IsSuspended">
      <summary>
            Gets a value whether the current isntance is supended.
            </summary>
    </member>
    <member name="E:Nevron.UI.NUINode.PropertyChanging">
      <summary>
            Fired when a command's property is about to be changed. Cancelable.
            </summary>
    </member>
    <member name="E:Nevron.UI.NUINode.PropertyChanged">
      <summary>
            Fired when a command's property has changed.
            </summary>
    </member>
    <member name="P:Nevron.UI.NUINode.ShouldBubblePropertyChanging">
      <summary>
            Gets/sets a value whether this node will bubble its property changing event up in the parent chain.
            </summary>
    </member>
    <member name="P:Nevron.UI.NUINode.ShouldBubblePropertyChanged">
      <summary>
            Gets/sets a value whether this node will bubble its property changed event up in the parent chain.
            </summary>
    </member>
    <member name="T:Nevron.UI.INUIFrameworkElement">
      <summary>
            Summary description for INUIFrameworkElement.
            </summary>
    </member>
    <member name="M:Nevron.UI.NUIFrameworkElement.UpdateReferences(Nevron.INReferenceProvider)">
      <summary>
      </summary>
      <param name="provider">
      </param>
    </member>
    <member name="M:Nevron.UI.NUIFrameworkElement.Clone">
      <summary>
            Creates an exact copy of the current instance.
            </summary>
      <returns>The newly created element.</returns>
    </member>
    <member name="M:Nevron.UI.NUIFrameworkElement.CloneWithNewUniqueId(System.Collections.Hashtable)">
      <summary>
      </summary>
      <param name="mapUIds">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NUIFrameworkElement.ReplaceForeignUniqueIds(System.Collections.Hashtable,System.Boolean)">
      <summary>
      </summary>
      <param name="mapUIds">
      </param>
      <param name="makeNotFoundEmpty">
      </param>
    </member>
    <member name="M:Nevron.UI.NUIFrameworkElement.GetAttributeByName(System.String)">
      <summary>
            Gets a child or descendant attribute by its name
            </summary>
      <param name="attributeName">child name or full attribute name</param>
      <returns>a reference to the attribute</returns>
    </member>
    <member name="M:Nevron.UI.NUIFrameworkElement.GetAttributeName(Nevron.Dom.INAttribute)">
      <summary>
            Gets the name of the specified child attribute
            </summary>
      <param name="attribute">child attribute</param>
      <returns>name of the attribute</returns>
    </member>
    <member name="M:Nevron.UI.NUIFrameworkElement.SetAttributeByName(System.String,Nevron.Dom.INAttribute)">
      <summary>
            Sets a child or descendant attribute by its name
            </summary>
      <param name="attributeName">
      </param>
      <param name="attribute">
      </param>
    </member>
    <member name="M:Nevron.UI.NUIFrameworkElement.OnAttributePropertyChanging(System.String,System.String,System.Object)">
      <summary>
            Called by child or descendants attributes when an attribute property is changing
            </summary>
      <param name="attributeFullName">full attribute name</param>
      <param name="propertyName">attribute property</param>
      <param name="newValue">new property value</param>
      <returns>true if the change is acceptable, otherwise false</returns>
    </member>
    <member name="M:Nevron.UI.NUIFrameworkElement.OnAttributePropertyChanged(System.String,System.String)">
      <summary>
            Called by child or descendants attributes when an attribute property has changed
            </summary>
      <param name="attributeFullName">full attribute name</param>
      <param name="propertyName">attribute property</param>
    </member>
    <member name="M:Nevron.UI.NUIFrameworkElement.OnAttributeChanged(System.String)">
      <summary>
            Called by child or descendants attributes when an attribute has changed
            </summary>
      <param name="attributeFullName">full attribute name</param>
    </member>
    <member name="M:Nevron.UI.NUIFrameworkElement.ProcessTimerTick(Nevron.UI.NTimer)">
      <summary>
            Processes a tick of a timer.
            The instance must have a started timer from the NTimerManager.
            </summary>
      <param name="sender">The timer which sends the notification.</param>
    </member>
    <member name="P:Nevron.UI.NUIFrameworkElement.Id">
      <summary>
            Gets/sets an integer value which identifies this element in the current UI ontext.
            </summary>
    </member>
    <member name="P:Nevron.UI.NUIFrameworkElement.Tag">
      <summary>
            Gets/sets an additional data associated with this element.
            </summary>
    </member>
    <member name="P:Nevron.UI.NUIFrameworkElement.UniqueId">
      <summary>
            Gets/sets a Guid structure which uniquely identifies this element.
            </summary>
    </member>
    <member name="P:Nevron.UI.NUIFrameworkElement.Attributes">
      <summary>
            Gets an array of the child attributes of this container
            </summary>
      <returns>attributes of the container</returns>
    </member>
    <member name="T:Nevron.UI.INBoundableElement">
      <summary>
            Summary description for INBoundableElement.
            </summary>
    </member>
    <member name="M:Nevron.UI.INBoundableElement.ConvertBounds(Nevron.GraphicsCore.NRectangle,Nevron.UI.CoordinateSystem)">
      <summary>
            Converts the specified bounds to the desired coordinate system.
            </summary>
      <param name="bounds">The specified bounds.</param>
      <param name="system">The desired coordinate system.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.INBoundableElement.ConvertLocation(Nevron.GraphicsCore.NPoint,Nevron.UI.CoordinateSystem)">
      <summary>
            Converts the specified location to the desired coordinate system.
            </summary>
      <param name="point">The specified location.</param>
      <param name="system">The desired coordinate system.</param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.INBoundableElement.Bounds">
      <summary>
            Gets the bounds of this instance including the non-client area (if any).
            </summary>
    </member>
    <member name="P:Nevron.UI.INBoundableElement.DeviceBounds">
      <summary>
            Gets the current instance's bounds in device coordinates.
            </summary>
    </member>
    <member name="P:Nevron.UI.INBoundableElement.ClientBounds">
      <summary>
            Gets the current instance's client bounds.
            </summary>
    </member>
    <member name="P:Nevron.UI.INBoundableElement.ProposedBounds">
      <summary>
            Gets the bounds which the user tried to apply to the element.
            These may differ from the current bounds which are restricted by flags like AutoSizeMask, etc.
            </summary>
    </member>
    <member name="M:Nevron.UI.NBoundableElement.SetBounds(Nevron.GraphicsCore.NRectangle)">
      <summary>
            Sets the bounds of the current INBoundable instance.
            </summary>
      <param name="bounds">The preffered bounds.</param>
    </member>
    <member name="M:Nevron.UI.NBoundableElement.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Sets the bounds of the current INBoundable instance.
            </summary>
      <param name="left">The left value.</param>
      <param name="top">The top value.</param>
      <param name="width">The width value.</param>
      <param name="height">The height value.</param>
    </member>
    <member name="M:Nevron.UI.NBoundableElement.GetPreferredSize(Nevron.GraphicsCore.NSize)">
      <summary>
            Gets the preffered size of this boundable element using the specified available size.
            </summary>
    </member>
    <member name="M:Nevron.UI.NBoundableElement.PerformAutoSize">
      <summary>
            Forces the element to autosize itself.
            </summary>
    </member>
    <member name="M:Nevron.UI.NBoundableElement.ConvertBounds(Nevron.GraphicsCore.NRectangle,Nevron.UI.CoordinateSystem)">
      <summary>
            Converts the specified bounds to the desired coordinate system.
            </summary>
      <param name="bounds">The specified bounds.</param>
      <param name="system">The desired coordinate system.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NBoundableElement.ConvertLocation(Nevron.GraphicsCore.NPoint,Nevron.UI.CoordinateSystem)">
      <summary>
            Converts the specified location to the desired coordinate system.
            </summary>
      <param name="point">The specified location.</param>
      <param name="system">The desired coordinate system.</param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.NBoundableElement.ProposedBounds">
      <summary>
            Gets/sets the proposed bounds for the element.
            These may differ from the current bounds which are restricted by flags like AutoSizeMask, etc.
            </summary>
    </member>
    <member name="P:Nevron.UI.NBoundableElement.Bounds">
      <summary>
            Gets/sets the bounds of this instance in coordinates relative to its current parent.
            </summary>
    </member>
    <member name="P:Nevron.UI.NBoundableElement.DeviceBounds">
      <summary>
            Gets the element's bounds in device coordinates.
            </summary>
    </member>
    <member name="P:Nevron.UI.NBoundableElement.ClientBounds">
      <summary>
            Gets the element's client bounds in a local coordinate system.
            </summary>
    </member>
    <member name="P:Nevron.UI.NBoundableElement.Location">
      <summary>
            Gets/sets the location of this instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.NBoundableElement.Size">
      <summary>
            Gets/sets the size of this instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.NBoundableElement.InitialSize">
      <summary>
            Gets the initial size of the element.
            </summary>
    </member>
    <member name="P:Nevron.UI.NBoundableElement.MinimumSize">
      <summary>
            Gets/sets the minimum allowed size for this instance.
            If set to Size.Empty (the default one) this value will not be considered.
            </summary>
    </member>
    <member name="P:Nevron.UI.NBoundableElement.MaximumSize">
      <summary>
            Gets/sets the maximum allowed size for this instance.
            If set to Size.Empty (the default one) this value will not be considered.
            </summary>
    </member>
    <member name="P:Nevron.UI.NBoundableElement.PreferredSize">
      <summary>
            Gets the preffered size of this boundable element.
            </summary>
    </member>
    <member name="P:Nevron.UI.NBoundableElement.Left">
      <summary>
            Gets/sets the left value of the element's bounds.
            </summary>
    </member>
    <member name="P:Nevron.UI.NBoundableElement.Top">
      <summary>
            Gets/sets the top value of the element's bounds.
            </summary>
    </member>
    <member name="P:Nevron.UI.NBoundableElement.Right">
      <summary>
            Gets the right value of the element's bounds.
            </summary>
    </member>
    <member name="P:Nevron.UI.NBoundableElement.Bottom">
      <summary>
            Gets the bottom value of the element's bounds.
            </summary>
    </member>
    <member name="P:Nevron.UI.NBoundableElement.Width">
      <summary>
            Gets/sets the width of the element's bounds.
            </summary>
    </member>
    <member name="P:Nevron.UI.NBoundableElement.Height">
      <summary>
            Gets/sets the width of the element's bounds.
            </summary>
    </member>
    <member name="P:Nevron.UI.NBoundableElement.AutoSizeMask">
      <summary>
            Gets/sets a value whether the element will autosize its bounds to fit the preffered size.
            </summary>
    </member>
    <member name="P:Nevron.UI.NBoundableElement.HasNonClientArea">
      <summary>
            Determines whether the current instance has non-client area.
            </summary>
    </member>
    <member name="T:Nevron.UI.INHitTestableElement">
      <summary>
            Summary description for INHitTestableElement.
            </summary>
    </member>
    <member name="M:Nevron.UI.NHitTestableElement.HitTest(Nevron.GraphicsCore.NPoint,Nevron.UI.NHitTestContext)">
      <summary>
      </summary>
      <param name="pt">The point to examine in device coordinates.</param>
      <param name="context">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.UI.INVisualElement">
      <summary>
            Summary description for INVisualElement.
            </summary>
    </member>
    <member name="T:Nevron.UI.INPaintableElement">
      <summary>
            Summary description for INPaintable.
            </summary>
    </member>
    <member name="M:Nevron.UI.INPaintableElement.Paint(Nevron.UI.NPaintContext)">
      <summary>
            Performs paint logic using the specified context.
            </summary>
      <param name="context">The context connected with the paint operation.</param>
    </member>
    <member name="M:Nevron.UI.INPaintableElement.Invalidate">
      <summary>
            Invalidates the current instance.
            </summary>
    </member>
    <member name="M:Nevron.UI.INPaintableElement.Invalidate(System.Boolean)">
      <summary>
            Invalidates the current instance and optionally requests host invalidate.
            </summary>
      <param name="requestHostInvalidate">True to invalidate the current host, false otherwise.</param>
    </member>
    <member name="M:Nevron.UI.INPaintableElement.Invalidate(Nevron.GraphicsCore.NRectangle)">
      <summary>
            Invalidates a portion of the current instance.
            </summary>
      <param name="bounds">A rectangular area which is to be invalidated.</param>
    </member>
    <member name="M:Nevron.UI.INPaintableElement.Invalidate(Nevron.GraphicsCore.NRectangle,System.Boolean)">
      <summary>
            Invalidates a portion of the current instance.
            </summary>
      <param name="bounds">
      </param>
      <param name="requestHostInvalidate">True to invalidate the current host, false otherwise.</param>
    </member>
    <member name="M:Nevron.UI.INPaintableElement.Refresh">
      <summary>
            Invalidates and immediately updates the current instance.
            </summary>
    </member>
    <member name="M:Nevron.UI.INPaintableElement.GetBitmap">
      <summary>
            Gets a bitmap representation of the current instance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.INPaintableElement.GetRenderCacheEntry(System.Int32)">
      <summary>
            Gets a cached object which can be used in a render operation.
            </summary>
      <param name="key">The key to search for.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.INPaintableElement.ClearRenderCacheEntry(System.Int32,System.Boolean)">
      <summary>
            Clears an entry in the object's render cache.
            </summary>
      <param name="key">The key to search for.</param>
      <param name="disposeEntry">True to dispose the found entry, false otherwise.</param>
    </member>
    <member name="M:Nevron.UI.INPaintableElement.UpdateRenderCache(Nevron.UI.NPaintContext)">
      <summary>
            Updates the current render cache using the specified graphics object.
            </summary>
      <param name="context">The paint context.</param>
    </member>
    <member name="M:Nevron.UI.INPaintableElement.ClearRenderCache">
      <summary>
            Clears the entire render cache.
            </summary>
    </member>
    <member name="P:Nevron.UI.INPaintableElement.PaintRect">
      <summary>
            Gets the rectangle visible for paint operations.
            </summary>
    </member>
    <member name="P:Nevron.UI.INPaintableElement.Painting">
      <summary>
            Gets a value indicating whether the instance is currently painting itself.
            </summary>
    </member>
    <member name="T:Nevron.UI.INAnimatable">
      <summary>
            Represents a generic object which might be animated.
            </summary>
    </member>
    <member name="M:Nevron.UI.INAnimatable.OnAnimationStarted(Nevron.UI.NAnimationEventArgs)">
      <summary>
            Notifies the instance for an animation being started.
            </summary>
      <param name="e">The arguments associated with the event.</param>
    </member>
    <member name="M:Nevron.UI.INAnimatable.OnAnimationStep">
      <summary>
            Notifies the instance for an animation step being performed.
            </summary>
    </member>
    <member name="M:Nevron.UI.INAnimatable.OnAnimationEnded">
      <summary>
            Notifies the instance for an animation step being ended.
            </summary>
    </member>
    <member name="M:Nevron.UI.INAnimatable.CanAnimate">
      <summary>
            Determines whether the current instance may be animated.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.INAnimatable.IsAnimating">
      <summary>
            Determines whether the current instance is in a process of being animated.
            </summary>
    </member>
    <member name="P:Nevron.UI.INAnimatable.Animatable">
      <summary>
            Gets/sets a value indicating whether this instance may be animated.
            </summary>
    </member>
    <member name="P:Nevron.UI.INVisualElement.IsVisible">
      <summary>
            Determines whether this instance is currently visible
            </summary>
    </member>
    <member name="P:Nevron.UI.INVisualElement.Visible">
      <summary>
            Gets/sets the local Visible value.
            </summary>
    </member>
    <member name="M:Nevron.UI.NVisualElement.Paint(Nevron.UI.NPaintContext)">
      <summary>
            Paints the element using the provided paint context.
            </summary>
      <param name="context">The object containg information about the paint operation.</param>
    </member>
    <member name="M:Nevron.UI.NVisualElement.Invalidate">
      <summary>
            Invalidates the element's bounds.
            </summary>
    </member>
    <member name="M:Nevron.UI.NVisualElement.Invalidate(System.Boolean)">
      <summary>
            Invalidates the element's bounds.
            </summary>
    </member>
    <member name="M:Nevron.UI.NVisualElement.Invalidate(Nevron.GraphicsCore.NRectangle)">
      <summary>
            Invalidates the element's bounds.
            </summary>
    </member>
    <member name="M:Nevron.UI.NVisualElement.Refresh">
      <summary>
            Invalidates and immediately updates element's bounds.
            </summary>
    </member>
    <member name="M:Nevron.UI.NVisualElement.GetBitmap">
      <summary>
            Gets a bitmap representation of the current instance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NVisualElement.GetRenderCacheEntry(System.Int32)">
      <summary>
            Gets an object from the render cache of this element.
            </summary>
      <param name="key">The key to search for.</param>
      <returns>Null if no entry is associated with this key, the value otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.NVisualElement.ClearRenderCacheEntry(System.Int32,System.Boolean)">
      <summary>
            Clears the key-specified entry in the render cache of the element.
            </summary>
      <param name="key">The key to search for.</param>
      <param name="disposeEntry">True to dispose previously existing entry, false otherwise.</param>
    </member>
    <member name="M:Nevron.UI.NVisualElement.ClearRenderCache">
      <summary>
            Clears the entire render cache of the element.
            </summary>
    </member>
    <member name="M:Nevron.UI.NVisualElement.UpdateRenderCache(Nevron.UI.NPaintContext)">
      <summary>
            Updates the render cache using the specified paint context.
            </summary>
      <param name="context">The paint context to use.</param>
    </member>
    <member name="M:Nevron.UI.NVisualElement.CanAnimate">
      <summary>
            Determines whether at its current state the element may be animated.
            This may differ from the Animatable value.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NVisualElement.InitializeDefault">
      <summary>
            Performs a default initialization of the element.
            </summary>
    </member>
    <member name="P:Nevron.UI.NVisualElement.PaintRect">
      <summary>
            Gets the rectangle visible for paint operations.
            </summary>
    </member>
    <member name="P:Nevron.UI.NVisualElement.Painting">
      <summary>
            Gets a value indicating whether the instance is currently painting itself.
            </summary>
    </member>
    <member name="P:Nevron.UI.NVisualElement.IsVisible">
      <summary>
            Determines whether the element is currently visible.
            </summary>
    </member>
    <member name="P:Nevron.UI.NVisualElement.Visible">
      <summary>
            Gets/sets a local value whether this element is visible.
            It may differ from the IsVisible property which depends on the UI hierarchy.
            </summary>
    </member>
    <member name="P:Nevron.UI.NVisualElement.InvalidateOnResize">
      <summary>
            Gets/sets a value indicating whether the element will automatically invalidate itself when resized.
            </summary>
    </member>
    <member name="P:Nevron.UI.NVisualElement.InvalidateOnLocationChanged">
      <summary>
            Gets/sets a value indicating whether the element will automatically invalidate itself when its location is changed.
            </summary>
    </member>
    <member name="P:Nevron.UI.NVisualElement.UseBitmapCache">
      <summary>
            Gets/sets a value whether the element's painting will be cached on a bitmap.
            Greatly improves performance of static(not dynamically resized) controls.
            </summary>
    </member>
    <member name="P:Nevron.UI.NVisualElement.Opacity">
      <summary>
            Gets/sets the opacity of the element.
            This value will work when the UseBitmapCache value is true.
            </summary>
    </member>
    <member name="E:Nevron.UI.NVisualElement.Invalidated">
      <summary>
            Fired when the element is invalidated (marked as dirty) and needs re-paint.
            </summary>
    </member>
    <member name="E:Nevron.UI.NVisualElement.VisibleChanged">
      <summary>
            Fired when the element's IsVisible state has changed.
            </summary>
    </member>
    <member name="P:Nevron.UI.NVisualElement.IsAnimating">
      <summary>
            Gets a value which determines whether the element is currently being animated.
            </summary>
    </member>
    <member name="P:Nevron.UI.NVisualElement.Animatable">
      <summary>
            Gets/sets a value whether the element allows animation.
            </summary>
    </member>
    <member name="P:Nevron.UI.NVisualElement.DefaultOpacity">
      <summary>
            Gets the default element's opacity.
            </summary>
    </member>
    <member name="T:Nevron.UI.INKeyboardInputElement">
      <summary>
            Summary description for INKeyboardProcessor.
            </summary>
    </member>
    <member name="M:Nevron.UI.INKeyboardInputElement.Focus">
      <summary>
            Attempts to give keyboard focus to the element.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.INKeyboardInputElement.IsFocused">
      <summary>
            Gets a value whether the element currently contains the keyboard focus.
            </summary>
    </member>
    <member name="P:Nevron.UI.INKeyboardInputElement.AllowFocus">
      <summary>
            Gets/sets a value whether the element may receive focus.
            </summary>
    </member>
    <member name="P:Nevron.UI.INKeyboardInputElement.CanFocus">
      <summary>
            Gets a value whether the element can be currently focused.
            </summary>
    </member>
    <member name="P:Nevron.UI.INKeyboardInputElement.KeyboardInputEnabled">
      <summary>
            Gets/sets a value whether the element will receive keyboard input.
            </summary>
    </member>
    <member name="P:Nevron.UI.NKeyboardInputElement.UseMnemonic">
      <summary>
            Gets/sets a value whether the element will check mnemonics.
            </summary>
    </member>
    <member name="P:Nevron.UI.NKeyboardInputElement.AllowFocus">
      <summary>
            Gets/sets a value whether the element allows receiving focus.
            </summary>
    </member>
    <member name="P:Nevron.UI.NKeyboardInputElement.KeyboardInputEnabled">
      <summary>
            Gets/sets a value whether keyboard input is enabled for this element.
            </summary>
    </member>
    <member name="P:Nevron.UI.NKeyboardInputElement.FocusedElement">
      <summary>
            Gets the keyboard input element which is currently focused.
            </summary>
    </member>
    <member name="T:Nevron.UI.INMouseInputElement">
      <summary>
            Summary description for INMouseProcessor.
            </summary>
    </member>
    <member name="M:Nevron.UI.INMouseInputElement.QueryCursor(Nevron.GraphicsCore.NPoint)">
      <summary>
            Queries the current cursor to be displayed.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.INMouseInputElement.ClientMouse">
      <summary>
            Gets the current mouse position in client coordinates.
            </summary>
    </member>
    <member name="P:Nevron.UI.INMouseInputElement.Cursor">
      <summary>
            Gets/sets the local Cursor entry.
            </summary>
    </member>
    <member name="M:Nevron.UI.NMouseInputElement.QueryCursor(Nevron.GraphicsCore.NPoint)">
      <summary>
            Queries the current cursor to be displayed when the mouse hovers the element.
            For element containers this will be the cursor provided by the child element under the mouse.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NMouseInputElement.SetCapture">
      <summary>
            Attempts to capture the mouse.
            </summary>
    </member>
    <member name="M:Nevron.UI.NMouseInputElement.ReleaseCapture">
      <summary>
            Releases previous mouse capture.
            </summary>
    </member>
    <member name="M:Nevron.UI.NMouseInputElement.InitializeDefault">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.NMouseInputElement.ClientMouse">
      <summary>
            Gets the current mouse position in coordinates relative to the bounding rectangle of the element.
            </summary>
    </member>
    <member name="P:Nevron.UI.NMouseInputElement.Cursor">
      <summary>
            Gets/sets the cursor to be displayed when the mouse moves over the element.
            </summary>
    </member>
    <member name="P:Nevron.UI.NMouseInputElement.ActionButton">
      <summary>
            Gets/sets the button which is interpreted as the "Action" one. The default action button is MouseButtons.Left.
            </summary>
    </member>
    <member name="P:Nevron.UI.NMouseInputElement.IsMouseCaptured">
      <summary>
            Determines whether the mouse is captured by this element.
            </summary>
    </member>
    <member name="P:Nevron.UI.NMouseInputElement.AllowCapture">
      <summary>
            Gets/sets a value indicating whether the element can capture the mouse.
            </summary>
    </member>
    <member name="P:Nevron.UI.NMouseInputElement.IsMouseOver">
      <summary>
            Determines whether the element contains mouse pointer.
            </summary>
    </member>
    <member name="P:Nevron.UI.NMouseInputElement.MouseInputEnabled">
      <summary>
            Gets/sets a value indicating whether the mouse input is enabled for this element.
            </summary>
    </member>
    <member name="P:Nevron.UI.NMouseInputElement.FocusOnMouseDown">
      <summary>
            Gets/sets a value whether the element will be focused on left mouse down.
            </summary>
    </member>
    <member name="P:Nevron.UI.NMouseInputElement.TooltipText">
      <summary>
            Gets/sets the tooltip to be displayed by this element when the mouse hovers it.
            </summary>
    </member>
    <member name="P:Nevron.UI.NMouseInputElement.CapturedElement">
      <summary>
            Gets the mouse input element which has currently captured the mouse.
            </summary>
    </member>
    <member name="T:Nevron.UI.INInputElement">
      <summary>
            Summary description for INInputElement.
            </summary>
    </member>
    <member name="P:Nevron.UI.INInputElement.ContainsMouse">
      <summary>
            Gets a value whether the element or any of its children currently contains the mouse.
            </summary>
    </member>
    <member name="P:Nevron.UI.INInputElement.ContainsCapture">
      <summary>
            Gets a value whether the element or one of its children is currently captured the mouse.
            </summary>
    </member>
    <member name="P:Nevron.UI.INInputElement.ContainsFocus">
      <summary>
            Gets/sets a value whether the element or one of its children contains the keyboard focus.
            </summary>
    </member>
    <member name="P:Nevron.UI.INInputElement.Enabled">
      <summary>
            Gets/sets a value whether the element is enabled - that is user input is allowed.
            </summary>
    </member>
    <member name="P:Nevron.UI.NInputElement.Enabled">
      <summary>
            Gets/sets a value whether this element is enabled (can receive input).
            </summary>
    </member>
    <member name="P:Nevron.UI.NInputElement.ContainsMouse">
      <summary>
            Determines whether this element or one of its children contains mouse.
            </summary>
    </member>
    <member name="P:Nevron.UI.NInputElement.ContainsFocus">
      <summary>
            Determines whether this element or one of its children contains focus.
            </summary>
    </member>
    <member name="P:Nevron.UI.NInputElement.ContainsCapture">
      <summary>
            Determines whether this element or one of its children has currently captured the mouse.
            </summary>
    </member>
    <member name="T:Nevron.UI.INThemableElement">
      <summary>
            Summary description for INThemable.
            </summary>
    </member>
    <member name="M:Nevron.UI.INThemableElement.SetState(System.Int32)">
      <summary>
            Sets the current state for this instance.
            </summary>
      <param name="stateId">The specfied state.</param>
    </member>
    <member name="M:Nevron.UI.INThemableElement.ResetState">
      <summary>
            Resets the current state to its initial value.
            </summary>
    </member>
    <member name="M:Nevron.UI.INThemableElement.OnThemeChanged(Nevron.UI.NThemeChangedEventArgs)">
      <summary>
            Gets notified when the current theme has changed.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.INThemableElement.OnParentThemeChanged(Nevron.Dom.INNode,Nevron.UI.NThemeChangedEventArgs)">
      <summary>
            Gets notified when theme of a parent node has changed.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.INThemableElement.UpdatePartStateInfo">
      <summary>
            Forces an immediate update of the current instance's state
            </summary>
    </member>
    <member name="M:Nevron.UI.INThemableElement.GetBackgroundBounds(Nevron.UI.NPaintContext)">
      <summary>
            Gets the bounds where the background shape should be rendered.
            </summary>
      <param name="context">The context containing information for the painting operation.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.INThemableElement.GetGlyphBounds(Nevron.UI.NPaintContext)">
      <summary>
            Gets the bounds where the glyph shape should be rendered.
            </summary>
      <param name="context">The context containing information for the painting operation.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.INThemableElement.GetDecorationBounds(Nevron.UI.NPaintContext)">
      <summary>
            Gets the bounds where the decoration shape should be rendered.
            </summary>
      <param name="context">The context containing information for the painting operation.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.INThemableElement.GetFocusCueBounds(Nevron.UI.NPaintContext)">
      <summary>
            Gets the bounds where the FocusCue shape should be rendered.
            </summary>
      <param name="context">The context containing information for the painting operation.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.INThemableElement.CanPaintFocusCues">
      <summary>
            Determines whether the element may display focus cues.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.INThemableElement.CurrentStyle">
      <summary>
            Gets the current theme style used by this instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.INThemableElement.Style">
      <summary>
            Gets/sets the local style.
            This entry has highest priority when composing the current style for this instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.INThemableElement.PartStateInfo">
      <summary>
            Gets/sets the part and state info for the current instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.INThemableElement.ComposeTheme">
      <summary>
            Gets/sets a value how the current theme is aquired.
            If this flag is true the instance will ask its anscestors to give a valid INTheme reference.
            </summary>
    </member>
    <member name="M:Nevron.UI.NThemableElement.SetState(System.Int32)">
      <summary>
            Sets the specfied state as current.
            </summary>
      <param name="stateId">The state to set.</param>
    </member>
    <member name="M:Nevron.UI.NThemableElement.ResetState">
      <summary>
            Resets the current state to its default value.
            </summary>
    </member>
    <member name="M:Nevron.UI.NThemableElement.OnThemeChanged(Nevron.UI.NThemeChangedEventArgs)">
      <summary>
            The element is notified that the current theme has changed.
            </summary>
      <param name="e">The object containing information about the event.</param>
    </member>
    <member name="M:Nevron.UI.NThemableElement.OnParentThemeChanged(Nevron.Dom.INNode,Nevron.UI.NThemeChangedEventArgs)">
      <summary>
            The element is notified that the current theme has changed.
            </summary>
      <param name="e">The object containing information about the event.</param>
    </member>
    <member name="M:Nevron.UI.NThemableElement.GetGlyphBounds(Nevron.UI.NPaintContext)">
      <summary>
            Gets the bounds where the glyph shape should be rendered.
            </summary>
      <param name="context">The context containing information for the painting operation.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NThemableElement.GetBackgroundBounds(Nevron.UI.NPaintContext)">
      <summary>
            Gets the bounds where the glyph shape should be rendered.
            </summary>
      <param name="context">The context containing information for the painting operation.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NThemableElement.GetDecorationBounds(Nevron.UI.NPaintContext)">
      <summary>
            Gets the bounds where the glyph shape should be rendered.
            </summary>
      <param name="context">The context containing information for the painting operation.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NThemableElement.GetFocusCueBounds(Nevron.UI.NPaintContext)">
      <summary>
            Gets the bounding rectangle where the focus cues should be displayed.
            For example an NPushButtonElement will return its bounding rectangle while an NCheckBoxElement will return its text bounds.
            </summary>
      <param name="context">The context which contains information about the painting operation.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NThemableElement.CanPaintFocusCues">
      <summary>
            Determines whether the element may display focus cues.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NThemableElement.GetAttributeName(Nevron.Dom.INAttribute)">
      <summary>
      </summary>
      <param name="attribute">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NThemableElement.OnAttributePropertyChanged(System.String,System.String)">
      <summary>
      </summary>
      <param name="attributeFullName">
      </param>
      <param name="propertyName">
      </param>
    </member>
    <member name="M:Nevron.UI.NThemableElement.GetDefaultFontInfo">
      <summary>
            Gets the default font info to be used when the current built style does not contain information.
            This method is used primary by elements which do not belong to any specific class and may use the .NET Font member of their hosts.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NThemableElement.GetDefaultTextFillStyle">
      <summary>
            Gets the default text fill style to be used when the currently built style does not contain information.
            This method is used primary by elements which do not belong to any specific class and may use the .NET ForeColor member of their hosts.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NThemableElement.InitializeDefault">
      <summary>
            Performs a default initialization of the element.
            </summary>
    </member>
    <member name="P:Nevron.UI.NThemableElement.Theme">
      <summary>
            Gets/sets the local theme to be used by this element.
            </summary>
    </member>
    <member name="P:Nevron.UI.NThemableElement.CurrentTheme">
      <summary>
            Gets the current theme used by this instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.NThemableElement.CurrentStyle">
      <summary>
            Gets the current theme style used by this instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.NThemableElement.ComposeTheme">
      <summary>
            Gets/sets a value whether to ask the parent element for its theme or not.
            </summary>
    </member>
    <member name="P:Nevron.UI.NThemableElement.PartStateInfo">
      <summary>
            Gets the structure containing theme data information about this element.
            </summary>
    </member>
    <member name="P:Nevron.UI.NThemableElement.Style">
      <summary>
            Gets/sets the local style for this instance.
            This entry has highest priority when composing the current style for the element.
            </summary>
    </member>
    <member name="P:Nevron.UI.NThemableElement.Renderer">
      <summary>
            Gets/sets the renderer used to paint this instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.NThemableElement.CurrentRenderer">
      <summary>
            Gets the current renderer used by this instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.NThemableElement.ShouldRegisterForThemeChange">
      <summary>
            Determines whether this instance should listen for a changes in the current theme.
            </summary>
    </member>
    <member name="T:Nevron.UI.INUIElement">
      <summary>
            Summary description for INUIElement.
            </summary>
    </member>
    <member name="T:Nevron.UI.INLayoutableElement">
      <summary>
            Summary description for INLayoutTarget.
            </summary>
    </member>
    <member name="M:Nevron.UI.INLayoutableElement.RequestLayout">
      <summary>
            Requests a layout operation.
            </summary>
    </member>
    <member name="M:Nevron.UI.INLayoutableElement.OnLayoutBegin">
      <summary>
            Notifies this layoutable instance for the beginning of a layout operation.
            </summary>
    </member>
    <member name="M:Nevron.UI.INLayoutableElement.OnLayoutMeasure(Nevron.GraphicsCore.NSize@)">
      <summary>
            Notifies this layoutable instance for a "Measure" pass.
            </summary>
      <param name="proposedSize">The proposes size calculated by the layout engine.</param>
    </member>
    <member name="M:Nevron.UI.INLayoutableElement.OnLayoutArrange(Nevron.GraphicsCore.NPoint@)">
      <summary>
            Notifies the layoutable instance for an "Arrange" pass.
            </summary>
      <param name="proposedLocation">The proposed location calculated by the layout engine.</param>
    </member>
    <member name="M:Nevron.UI.INLayoutableElement.OnLayoutSetBounds(Nevron.GraphicsCore.NRectangle@)">
      <summary>
            Called by the layout engine when the bounds of the layoutable instance are ready to be applied.
            </summary>
      <param name="proposedBounds">The proposed bounds calculated by the layout engine.</param>
    </member>
    <member name="M:Nevron.UI.INLayoutableElement.OnLayoutComplete">
      <summary>
            Notifies this instance for a completed layout.
            </summary>
    </member>
    <member name="P:Nevron.UI.INLayoutableElement.Margins">
      <summary>
            Gets the spacing between current instance and other layoutable ones.
            </summary>
    </member>
    <member name="P:Nevron.UI.INLayoutableElement.LayoutContainer">
      <summary>
            Gets the INLayoutContainer instance which hosts this one.
            </summary>
    </member>
    <member name="P:Nevron.UI.INUIElement.Host">
      <summary>
            Gets the host instance where this element currently resides.
            </summary>
    </member>
    <member name="P:Nevron.UI.INUIElement.FocusCues">
      <summary>
            Gets/sets a value whether the element will display visual cues when focused.
            </summary>
    </member>
    <member name="P:Nevron.UI.INUIElement.RightToLeft">
      <summary>
            Gets/sets the direction of the element's content.
            </summary>
    </member>
    <member name="M:Nevron.UI.NUIElement.UpdateReferences(Nevron.INReferenceProvider)">
      <summary>
      </summary>
      <param name="provider">
      </param>
    </member>
    <member name="M:Nevron.UI.NUIElement.Refresh">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.NUIElement.RequestLayout">
      <summary>
            Checks whether the element resides in a layoutable container.
            If true the container is asked to perform layout.
            </summary>
    </member>
    <member name="M:Nevron.UI.NUIElement.OnLayoutBegin">
      <summary>
            Notifies this instance for the beginning of a layout operation.
            </summary>
    </member>
    <member name="M:Nevron.UI.NUIElement.OnLayoutMeasure(Nevron.GraphicsCore.NSize@)">
      <summary>
            Notifies the layoutable instance for a "Measure" pass.
            </summary>
      <param name="proposedSize">The proposes size calculated by the layout engine.</param>
    </member>
    <member name="M:Nevron.UI.NUIElement.OnLayoutArrange(Nevron.GraphicsCore.NPoint@)">
      <summary>
            Notifies the layoutable instance for an "Arrange" pass.
            </summary>
      <param name="proposedLocation">The proposed location calculated by the layout engine.</param>
    </member>
    <member name="M:Nevron.UI.NUIElement.OnLayoutSetBounds(Nevron.GraphicsCore.NRectangle@)">
      <summary>
            Called by the layout engine when the bounds of the layoutable instance are ready to be applied.
            </summary>
      <param name="proposedBounds">The proposed bounds calculated by the layout engine.</param>
    </member>
    <member name="M:Nevron.UI.NUIElement.OnLayoutComplete">
      <summary>
            Notifies this instance for a completed layout.
            </summary>
    </member>
    <member name="M:Nevron.UI.NUIElement.ReleaseCapture">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.NUIElement.GetContentRectangle">
      <summary>
            Gets the rectangle into which content is displayed.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NUIElement.UpdateRightToLeft">
      <summary>
            Forces an immediate update of the state depending on the RightToLeft value.
            </summary>
    </member>
    <member name="M:Nevron.UI.NUIElement.IsLayoutProperty(System.Int32)">
      <summary>
            Determines whether the property with the specified ID is connected with the element's layout.
            </summary>
      <param name="propId">The property ID to examine.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NUIElement.ProcessHostPropertyChange(Nevron.UI.NPropertyChangedEventArgs)">
      <summary>
            Allows for additional processing of a property change from the current host.
            </summary>
      <param name="e">The arguments object containing information about the event.</param>
    </member>
    <member name="M:Nevron.UI.NUIElement.InitializeDefault">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.NUIElement.GetContainsMouse">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NUIElement.FocusCore">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NUIElement.SetCaptureCore">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.NUIElement.OnPropertyChanged(Nevron.UI.NPropertyChangedEventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.NUIElement.InvalidateCore(Nevron.GraphicsCore.NRectangle,System.Boolean)">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.NUIElement.Margins">
      <summary>
            Gets/sets the padding among this element's bounds and the other children of its current container.
            </summary>
    </member>
    <member name="P:Nevron.UI.NUIElement.LayoutContainer">
      <summary>
            Gets the current layout container where this element resides.
            </summary>
    </member>
    <member name="P:Nevron.UI.NUIElement.Host">
      <summary>
            Gets the INElementHost instance where this element resides.
            For a Windows Forms application this will be a Control instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.NUIElement.FocusCues">
      <summary>
            Gets/sets a value indicating whether the element will display focus cues (usually a focused rectangle) when it has the keyboard focus.
            </summary>
    </member>
    <member name="P:Nevron.UI.NUIElement.Enabled">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.NUIElement.ClientMouse">
      <summary>
      </summary>
    </member>
    <member name="E:Nevron.UI.NUIElement.LayoutRequested">
      <summary>
            Fired whenever a property or attribute has changed and the element needs to be layouted by its parent container (or host).
            </summary>
    </member>
    <member name="P:Nevron.UI.NUIElement.DefaultFocusCuesInflate">
      <summary>
            Gets the default FocusCuesInflate value.
            </summary>
    </member>
    <member name="P:Nevron.UI.NUIElement.RightToLeft">
      <summary>
            Gets/sets a value specifying whether the content is right-to-left aligned.
            For example if the element is visualized on a Hebrew language settings system the right-to-left value will be true.
            </summary>
    </member>
    <member name="P:Nevron.UI.NUIElement.Padding">
      <summary>
            Gets/sets the internal padding for this element.
            </summary>
    </member>
    <member name="T:Nevron.UI.INUIElementContainer">
      <summary>
            Summary description for INUIElementContainer.
            </summary>
    </member>
    <member name="T:Nevron.UI.INLayoutContainer">
      <summary>
            Represents a container element which may perform layout logic upon its children.
            </summary>
    </member>
    <member name="M:Nevron.UI.INLayoutContainer.PerformLayout">
      <summary>
            Performs layout logic.
            </summary>
    </member>
    <member name="M:Nevron.UI.INLayoutContainer.ResumeLayout">
      <summary>
            Resumes the layout.
            </summary>
    </member>
    <member name="M:Nevron.UI.INLayoutContainer.ResumeLayout(System.Boolean)">
      <summary>
            Resumes the layout and optionally performs layout.
            </summary>
      <param name="performLayout">True to perform layout, false otherwise.</param>
    </member>
    <member name="M:Nevron.UI.INLayoutContainer.SuspendLayout">
      <summary>
            Temporally suspends any layout operation.
            </summary>
    </member>
    <member name="P:Nevron.UI.INLayoutContainer.IsLayoutSuspended">
      <summary>
            Gets a value whether the layout operation is currently suspended.
            </summary>
    </member>
    <member name="P:Nevron.UI.INLayoutContainer.Targets">
      <summary>
            Gets an array of all the targets for the layout operation.
            </summary>
    </member>
    <member name="P:Nevron.UI.INLayoutContainer.LayoutRectangle">
      <summary>
            Gets the bounding rectangle into which the layout logic should be applied.
            </summary>
    </member>
    <member name="P:Nevron.UI.INLayoutContainer.LayoutEngine">
      <summary>
            Gets/sets the layout engine used to perform layout logic upon this instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.INLayoutContainer.Padding">
      <summary>
            Gets/sets the object containing information about this instance's inner padding.
            </summary>
    </member>
    <member name="T:Nevron.UI.INUINodeComposite">
      <summary>
            Summary description for INUINodeComposite.
            </summary>
    </member>
    <member name="T:Nevron.UI.INUINodeContainer">
      <summary>
            Summary description for INUINodeContainer.
            </summary>
    </member>
    <member name="M:Nevron.UI.NUIElementContainer.PerformLayout">
      <summary>
            Forces the layout container to apply its layout logic.
            </summary>
    </member>
    <member name="M:Nevron.UI.NUIElementContainer.ResumeLayout">
      <summary>
            Resumes layout operations.
            </summary>
    </member>
    <member name="M:Nevron.UI.NUIElementContainer.OnLayoutRequested(Nevron.UI.INLayoutableElement)">
      <summary>
            Notifies the container that a child needs a layout operation to be performed.
            </summary>
      <param name="target">The child that requested the layout.</param>
    </member>
    <member name="M:Nevron.UI.NUIElementContainer.ResumeLayout(System.Boolean)">
      <summary>
            Resumes layout operation and optionally performs layout logic.
            </summary>
      <param name="performLayout">True to perform layout logic, false otherwise.</param>
    </member>
    <member name="M:Nevron.UI.NUIElementContainer.SuspendLayout">
      <summary>
            Suspends any layout operation.
            </summary>
    </member>
    <member name="M:Nevron.UI.NUIElementContainer.OnAttributePropertyChanged(System.String,System.String)">
      <summary>
      </summary>
      <param name="attributeFullName">
      </param>
      <param name="propertyName">
      </param>
    </member>
    <member name="M:Nevron.UI.NUIElementContainer.Children(Nevron.Filters.INFilter)">
      <summary>
            Obtains the child nodes of this node
            </summary>
      <param name="filter">filter to use, or null if no filter must be applied</param>
      <returns>list of child nodes, which satisfy the filter</returns>
    </member>
    <member name="M:Nevron.UI.NUIElementContainer.GetEnumerator(Nevron.Filters.INFilter)">
      <summary>
            Obtains a child node enumerator 
            </summary>
      <param name="filter">filter to use, or null if no filter must be applied</param>
      <returns>node enumerator</returns>
    </member>
    <member name="M:Nevron.UI.NUIElementContainer.GetEnumerator">
      <summary>
            Obtains a child node enumerator 
            </summary>
      <returns>node enumerator</returns>
    </member>
    <member name="M:Nevron.UI.NUIElementContainer.IndexOfChild(Nevron.Dom.INNode)">
      <summary>
            Obtains the index of the specified node within this container.
            </summary>
      <param name="node">The node which index is to be retrieved.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NUIElementContainer.AccumulateChildren(Nevron.Filters.INFilter,Nevron.Dom.NNodeList)">
      <summary>
            Accumulates the children contained in this node, which satisfy the filter to the provided node list
            </summary>
      <param name="filter">filter to use, or null if no filter must be applied</param>
      <param name="list">list to which to append the child nodes, which satisfy the filter</param>
    </member>
    <member name="M:Nevron.UI.NUIElementContainer.Descendants(Nevron.Filters.INFilter,System.Int32)">
      <summary>
            Obtains the descentant nodes of this node
            </summary>
      <param name="filter">filter to use, or null if no filter must be applied</param>
      <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
      <returns>list of child nodes, which satisfy the filter</returns>
    </member>
    <member name="M:Nevron.UI.NUIElementContainer.IsChild(Nevron.Dom.INNode)">
      <summary>
            Determines whether the specfied node is contained within this container.
            </summary>
      <param name="node">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NUIElementContainer.ChildrenCount(Nevron.Filters.INFilter)">
      <summary>
            Returns the number of child nodes which satisfy the specified filter
            </summary>
      <param name="filter">filter to use, or null if no filter should be applied</param>
      <returns>children count, which satisfy the filter</returns>
    </member>
    <member name="M:Nevron.UI.NUIElementContainer.SetChildIndex(Nevron.Dom.INNode,System.Int32)">
      <summary>
            Sets a new index of the specified child node
            </summary>
      <param name="node">node whose index to change</param>
      <param name="index">new index</param>
      <returns>previous node index</returns>
    </member>
    <member name="M:Nevron.UI.NUIElementContainer.IsDescendant(Nevron.Dom.INNode,System.Int32)">
      <summary>
            Queries whether the specified node is a descendant of this node
            </summary>
      <param name="node">node to look for</param>
      <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
      <returns>true if the node is a descendant node, otherwise false</returns>
    </member>
    <member name="M:Nevron.UI.NUIElementContainer.DescendantsCount(Nevron.Filters.INFilter,System.Int32)">
      <summary>
            Returns the number of descendant nodes, which satisfy the specified filter
            </summary>
      <param name="filter">filter to use, or null if no filter should be applied</param>
      <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
      <returns>count of descendants, which satisfy the filter</returns>
    </member>
    <member name="M:Nevron.UI.NUIElementContainer.GetChildAt(System.Int32)">
      <summary>
            Obtains the child at the specified index.
            </summary>
      <param name="index">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NUIElementContainer.AccumulateDescendants(Nevron.Filters.INFilter,System.Int32,Nevron.Dom.NNodeList)">
      <summary>
            Accumulates the descendants contained in this node, which satisfy the filter to the provided node list
            </summary>
      <param name="filter">filter to use, or null if no filter must be applied</param>
      <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
      <param name="list">list to which to append the descendant nodes, which satisfy the filter</param>
    </member>
    <member name="M:Nevron.UI.NUIElementContainer.OnChildPropertyChanging(Nevron.UI.INUINode,Nevron.UI.NPropertyChangingEventArgs)">
      <summary>
            Gets notified that a child property is about to change.
            This notification allows the parent node to examine the property and eventually to cancel it.
            </summary>
      <param name="sender">The sender of the notification. It may differ from the originator of the event.</param>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.NUIElementContainer.OnChildPropertyChanged(Nevron.UI.INUINode,Nevron.UI.NPropertyChangedEventArgs)">
      <summary>
            Gets notified that a child property has changed.
            This notification allows the parent node to perform optional update after the change.
            </summary>
      <param name="sender">The sender of the notification. It may differ from the originator of the event.</param>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.NUIElementContainer.OnChildContextMenuRequested(Nevron.UI.INUINode,Nevron.UI.NContextMenuEventArgs)">
      <summary>
            Gets notified that a child context menu has been requested and the child did not provide such.
            This notification allows the parent node to provide a context menu depending on the originator of the request.
            </summary>
      <param name="sender">The sender of the notification. It may differ from the originator of the event.</param>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.NUIElementContainer.AddChild(Nevron.Dom.INNode)">
      <summary>
            Adds a child node
            </summary>
      <param name="node">node to add</param>
    </member>
    <member name="M:Nevron.UI.NUIElementContainer.InsertChild(System.Int32,Nevron.Dom.INNode)">
      <summary>
            Inserts a child node at the specified index
            </summary>
      <param name="index">index at which to insert the child node</param>
      <param name="node">node to insert</param>
    </member>
    <member name="M:Nevron.UI.NUIElementContainer.CanInsertChild(System.Int32,Nevron.Dom.INNode)">
      <summary>
            Queries whether the specified node can be inserted at the specified index
            </summary>
      <param name="index">index at which the child node will be inserted</param>
      <param name="node">child node to insert</param>
      <returns>true if the node can be inserted at the specified index, otherwise false</returns>
    </member>
    <member name="M:Nevron.UI.NUIElementContainer.RemoveChild(Nevron.Dom.INNode)">
      <summary>
            Removes the specified child node from the container children
            </summary>
      <param name="node">child node to remove</param>
    </member>
    <member name="M:Nevron.UI.NUIElementContainer.RemoveChildAt(System.Int32)">
      <summary>
            Removes the child node at the specified index
            </summary>
      <param name="index">index of child node to remove</param>
    </member>
    <member name="M:Nevron.UI.NUIElementContainer.RemoveAllChildren">
      <summary>
            Removes all children
            </summary>
    </member>
    <member name="M:Nevron.UI.NUIElementContainer.CanRemoveChild(Nevron.Dom.INNode)">
      <summary>
            Queries whether the specified child node can be removed
            </summary>
      <param name="node">child node to remove</param>
      <returns>true if the node can be removed, otherwise false</returns>
    </member>
    <member name="M:Nevron.UI.NUIElementContainer.GetChildFromId(System.Int32)">
      <summary>
            Obtains a child element by its id
            </summary>
      <param name="id">id of the element</param>
      <returns>reference to the element if it was found, otherwise null</returns>
    </member>
    <member name="M:Nevron.UI.NUIElementContainer.GetChildFromUniqueId(System.Guid)">
      <summary>
            Obtains a child element by its unique id
            </summary>
      <param name="uid">unique id of the element</param>
      <returns>reference to the element if it was found, otherwise null</returns>
    </member>
    <member name="M:Nevron.UI.NUIElementContainer.GetDescendantFromId(System.Int32,System.Int32)">
      <summary>
            Obtains a element node by its id
            </summary>
      <param name="id">id of the element</param>
      <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
      <returns>reference to the element if it was found, otherwise null</returns>
    </member>
    <member name="M:Nevron.UI.NUIElementContainer.GetDescendantFromUniqueId(System.Guid,System.Int32)">
      <summary>
            Obtains a child element by its unique id
            </summary>
      <param name="uid">unique id of the element</param>
      <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
      <returns>reference to the element if it was found, otherwise null</returns>
    </member>
    <member name="M:Nevron.UI.NUIElementContainer.AddChildren(Nevron.UI.INUIElement[])">
      <summary>
            Adds range of INUIElement instances to this container.
            </summary>
      <param name="children">
      </param>
    </member>
    <member name="M:Nevron.UI.NUIElementContainer.OnChildInvalidated(Nevron.UI.INVisualElement)">
      <summary>
            Gets notified for a child element being invalidated.
            Allows to perform additional operations like clearing cache.
            </summary>
      <param name="child">The child which was invalidated.</param>
    </member>
    <member name="M:Nevron.UI.NUIElementContainer.OnInserting(System.Int32,Nevron.Dom.INNode)">
      <summary>
            Called when a node is about to be inserted in the base array list
            </summary>
      <param name="index">index at which the node will be inserted</param>
      <param name="node">node which will be inserted</param>
    </member>
    <member name="M:Nevron.UI.NUIElementContainer.OnInserted(System.Int32,Nevron.Dom.INNode)">
      <summary>
            Called when a node has been inserted in the base array list
            </summary>
      <remarks>
            This implementation fires the NodeInserted event if the implementation is connected to an event sink service
            </remarks>
      <param name="index">index at which the node was inserted</param>
      <param name="node">node which was inserted</param>
    </member>
    <member name="M:Nevron.UI.NUIElementContainer.OnRemoving(Nevron.Dom.INNode)">
      <summary>
            Called when a node is about to be removed from the base array list
            </summary>
      <param name="node">node which will be removed</param>
    </member>
    <member name="M:Nevron.UI.NUIElementContainer.OnRemoved(Nevron.Dom.INNode)">
      <summary>
            Called when a node has been removed from the base array list
            </summary>
      <remarks>
            This implementation fires the NodeRemoved event if the implementation is connected to an event sink service
            </remarks>
      <param name="node">node which was removed</param>
    </member>
    <member name="M:Nevron.UI.NUIElementContainer.CheckPreviousParent(Nevron.Dom.INNode)">
      <summary>
            Checks whether the specified node already has a parent.
            If so, the node is automatically detached from its previous parent.
            </summary>
      <param name="node">The node to examine.</param>
    </member>
    <member name="M:Nevron.UI.NUIElementContainer.OnStartRemoveAll">
      <summary>
            Called before all nodes have been removed from the base array list
            </summary>
    </member>
    <member name="M:Nevron.UI.NUIElementContainer.OnEndRemoveAll">
      <summary>
            Called after all nodes have been removed from the base array list
            </summary>
    </member>
    <member name="M:Nevron.UI.NUIElementContainer.OnAbortRemoveAll">
      <summary>
            Called to abort the remove all nodes operation if possible
            </summary>
    </member>
    <member name="M:Nevron.UI.NUIElementContainer.OnIndexChanging(Nevron.Dom.INNode,System.Int32,System.Int32)">
      <summary>
            Called when the index of the specified node is about to change
            </summary>
      <param name="node">node whose index in the base array is changing</param>
      <param name="curIndex">current node index</param>
      <param name="newIndex">new node index</param>
    </member>
    <member name="M:Nevron.UI.NUIElementContainer.OnIndexChanged(Nevron.Dom.INNode,System.Int32,System.Int32)">
      <summary>
            Called when the index of the specified node has changed
            </summary>
      <param name="node">node whose index has changed</param>
      <param name="curIndex">current node index</param>
      <param name="oldIndex">old node index</param>
    </member>
    <member name="M:Nevron.UI.NUIElementContainer.PaintTargets(Nevron.UI.NPaintContext,System.Collections.ArrayList)">
      <summary>
            Paints the provided array of INUIElement instances.
            </summary>
      <param name="context">
      </param>
      <param name="targets">
      </param>
    </member>
    <member name="M:Nevron.UI.NUIElementContainer.TransformDevice(Nevron.UI.NPaintContext,Nevron.UI.lIII11l1)">
      <summary>
            Transforms the device for the local painting operation
            </summary>
      <param name="context">
      </param>
      <param name="hint">
      </param>
    </member>
    <member name="M:Nevron.UI.NUIElementContainer.TunelPropertyChanging(Nevron.Dom.INNode,Nevron.UI.NPropertyChangingEventArgs)">
      <summary>
            Notifies all children for a pending property change.
            This method allows the children nodes to examine the property and even cancel it.
            </summary>
      <param name="sender">The sender of the notification. May differ from the originator of the event.</param>
      <param name="e">The arguments associated with the event.</param>
    </member>
    <member name="M:Nevron.UI.NUIElementContainer.TunelPropertyChanged(Nevron.Dom.INNode,Nevron.UI.NPropertyChangedEventArgs)">
      <summary>
            Notifies all children for a property change.
            This method allows the children nodes to perform additional updates.
            </summary>
      <param name="sender">The sender of the notification. May differ from the originator of the event.</param>
      <param name="e">The arguments associated with the event.</param>
    </member>
    <member name="M:Nevron.UI.NUIElementContainer.FocusNextElement(Nevron.UI.INKeyboardInputElement,System.Boolean,System.Boolean)">
      <summary>
            Attempts to give the focus to the next element.
            </summary>
      <param name="child">The child to start from.</param>
      <param name="forward">True to traverse children forward, false otherwise.</param>
      <param name="wrap">Specifies whether the search should continue if first or last child is reached.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NUIElementContainer.GetContainsFocus">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.NUIElementContainer.AutoLayout">
      <summary>
            Gets/sets a value whether the container will automatically layout its children or will let this operation to be performed explicitly.
            </summary>
    </member>
    <member name="P:Nevron.UI.NUIElementContainer.IsLayoutSuspended">
      <summary>
            Determines whether the layout logic of the container is suspended.
            </summary>
    </member>
    <member name="P:Nevron.UI.NUIElementContainer.Targets">
      <summary>
            Gets an array of all the layoutable children of this container.
            </summary>
    </member>
    <member name="P:Nevron.UI.NUIElementContainer.LayoutRectangle">
      <summary>
            Gets the rectangle into which layout logic is performed. 
            </summary>
    </member>
    <member name="P:Nevron.UI.NUIElementContainer.LayoutEngine">
      <summary>
            Gets/sets the layout engine for this container.
            </summary>
    </member>
    <member name="P:Nevron.UI.NUIElementContainer.InputTargets">
      <summary>
            Returns all the targets that should be hit-tested.
            </summary>
    </member>
    <member name="P:Nevron.UI.NUIElementContainer.ChildrenClipRect">
      <summary>
            Gets the clipping rectangle when painting children.
            </summary>
    </member>
    <member name="P:Nevron.UI.NUIElementContainer.InternalChildrenClipRect">
      <summary>
            Gets the clipping rectangle when painting internal (special) children.
            </summary>
    </member>
    <member name="P:Nevron.UI.NUIElementContainer.EventSinkService">
      <summary>
            Gets/sets the event sink service for the node.
            </summary>
    </member>
    <member name="P:Nevron.UI.NUIElementContainer.ShouldTunnelPropertyChanging">
      <summary>
            Gets/sets a value whether this node will tunnel its property changing event to its children.
            </summary>
    </member>
    <member name="P:Nevron.UI.NUIElementContainer.ShouldTunnelPropertyChanged">
      <summary>
            Gets/sets a value whether this node will tunnel its property changed event to its children.
            </summary>
    </member>
    <member name="P:Nevron.UI.NUIElementContainer.ClipChildren">
      <summary>
            Gets/sets a value indicating whether this container will clip the graphics output only within its layout rectangle.
            </summary>
    </member>
    <member name="P:Nevron.UI.NUIElementContainer.VisibleChildrenCount">
      <summary>
            Gets the count of all visible children.
            </summary>
    </member>
    <member name="M:Nevron.UI.NButtonEditElement.ShouldSerializeOrientation">
      <summary>
            Determines whether the Orientation property needs to be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NButtonEditElement.ShouldSerializeDisplayIndex">
      <summary>
            Determines whether the LabelIndex property needs to be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="E:Nevron.UI.NButtonEditElement.ButtonClick">
      <summary>
            Notifies for a child button click.
            </summary>
    </member>
    <member name="P:Nevron.UI.NButtonEditElement.MinimumSize">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.NButtonEditElement.DisplayIndex">
      <summary>
            Gets/sets the index of the display in the children collection.
            </summary>
    </member>
    <member name="P:Nevron.UI.NButtonEditElement.Orientation">
      <summary>
            Gets/sets the orientation of the button edit.
            </summary>
    </member>
    <member name="P:Nevron.UI.NButtonEditElement.ShowDisplay">
      <summary>
            Determines whether the display will be visible.
            </summary>
    </member>
    <member name="P:Nevron.UI.NButtonEditElement.DefaultOrientation">
      <summary>
            Gets the default value for the Orientation property.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NGalleryItemEventArgs.Item">
      <summary>
            Gets the item associated with the event.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NGalleryItemSelectionChangedEventArgs.Change">
      <summary>
            Gets the selection change hint.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NFrameAppearance">
      <summary>
            Represents a template object which controls the appearance of a INFrameControl intstance.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NFrameAppearance.OnPropertyChanging(Nevron.UI.WinForm.Controls.PropertyChangingEventArgs)">
      <summary>
            Fires the PropertyChanging event.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NFrameAppearance.OnPropertyChanged(System.String)">
      <summary>
            Fires the PropertyChanged event.
            </summary>
      <param name="propName">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NFrameAppearance.InitializeDefault">
      <summary>
            Performs default initialization.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NFrameAppearance.CreateObjects">
      <summary>
            Creates the default embedded objects - segmented images, image sets, etc.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NFrameAppearance.PerformDispose">
      <summary>
      </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NFrameAppearance.PropertyChanging">
      <summary>
            Fired when a property is about to be changed. Cancelable.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NFrameAppearance.PropertyChanged">
      <summary>
            Fired when a property has changed.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFrameAppearance.AllowPropertyChange">
      <summary>
            Determines whether a property can be changed.
            For all predefined frames this is false.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFrameAppearance.Name">
      <summary>
            Gets/sets the name of the frame appearance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFrameAppearance.PredefinedFrame">
      <summary>
            Gets the predefined frame value for this instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFrameAppearance.CloseButtonImageSet">
      <summary>
            Gets the set of images to be displayed by the "Close" button.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFrameAppearance.RestoreButtonImageSet">
      <summary>
            Gets the set of images to be displayed by the "Restore" button.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFrameAppearance.MaximizeButtonImageSet">
      <summary>
            Gets the set of images to be displayed by the "Maximize" button.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFrameAppearance.MinimizeButtonImageSet">
      <summary>
            Gets the set of images to be displayed by the "Minimize" button.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFrameAppearance.HelpButtonImageSet">
      <summary>
            Gets the set of images to be displayed by the "Help" button.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFrameAppearance.CaptionHeight">
      <summary>
            Gets/sets the height of the caption.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFrameAppearance.LeftBorder">
      <summary>
            Gets/sets the width of the left border.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFrameAppearance.RightBorder">
      <summary>
            Gets/sets the width of the right border.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFrameAppearance.BottomBorder">
      <summary>
            Gets/sets the width of the bottom border.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFrameAppearance.ButtonSpacing">
      <summary>
            Gets/sets the spacing between each two caption buttons.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFrameAppearance.ImageOffset">
      <summary>
            Gets/sets the offset of the frame image from the topleft corner.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFrameAppearance.ButtonsOffset">
      <summary>
            Gets/sets the buttons offset from the top-right corner of the frame.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFrameAppearance.ButtonSize">
      <summary>
            Gets/sets the size of the capion buttons.
            If an imageset is supplied for a button the size of the images is used.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFrameAppearance.ButtonGlyphSize">
      <summary>
            Gets/sets the size of the capion glyphs.
            If an imageset is supplied for a button this value is discarded.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFrameAppearance.TextShadow">
      <summary>
            Gets/sets a value indicating whether a text shadow will be simulated.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFrameAppearance.ImageTextEntity">
      <summary>
            Gets/sets a value indicating whether the image and text are treated as one entity.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFrameAppearance.CaptionFont">
      <summary>
            Gets/sets the font used to render caption text.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFrameAppearance.ActiveTextColor">
      <summary>
            Gets/sets the text color for active caption.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFrameAppearance.InactiveTextColor">
      <summary>
            Gets/sets the text color for inactive caption.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFrameAppearance.ActiveTextShadowColor">
      <summary>
            Gets/sets the text shadow color for active caption.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFrameAppearance.InactiveTextShadowColor">
      <summary>
            Gets/sets the text shadow color for inactive caption.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFrameAppearance.TextFormat">
      <summary>
            Gets/sets the text format object used for drawing caption text.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFrameAppearance.TextAlign">
      <summary>
            Gets/sets the alignment of the text on the caption.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFrameAppearance.ImageAlign">
      <summary>
            Gets/sets the alignment of the image on the caption.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFrameAppearance.ImageTextRelation">
      <summary>
            Gets/sets the relation between caption image and text.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFrameAppearance.FrameActive">
      <summary>
            Gets the active frame.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFrameAppearance.FrameInactive">
      <summary>
            Gets the inactive frame.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NForm">
      <summary>
            Represents an extended Form with completely customized non-client metrics, painting and behavior.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.INFrameControl">
      <summary>
            Summary description for INFrameControl.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.INFrameControl.InvalidateFrame">
      <summary>
            Invalidates the frame.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.INFrameControl.UpdateFrame">
      <summary>
            Updates the frame including repaint and region update.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.INFrameControl.OnCaptionButtonClicked(Nevron.UI.WinForm.Controls.NFrameCaptionButton)">
      <summary>
            Gets notified for a caption button click.
            </summary>
      <param name="button">
      </param>
      <returns>True if handled and no default processing is required, false otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.INFrameControl.OnSysMenuCommand(Nevron.UI.WinForm.Controls.CommandEventArgs)">
      <summary>
            Called whenever a system menu command is clicked.
            </summary>
      <param name="args">
      </param>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.INFrameControl.FrameAppearance">
      <summary>
            Gets/sets the local value for this instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.INFrameControl.UseGlobalTemplate">
      <summary>
            Gets/sets a value indicating whether this instance will use the global template provided by the NUIManager.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.INFrameControl.ShowCaptionImage">
      <summary>
            Gets/sets a value whether to display the caption image.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.INFrameControl.ShowCaptionText">
      <summary>
            Gets/sets a value whether to display the caption text.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.INFrameControl.Movable">
      <summary>
            Gets/sets a value indicating whether the user may move the frame using the left mouse button.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.INFrameControl.Sizable">
      <summary>
            Gets/sets a value indicating whether the user may resize the frame.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.INFrameControl.ToolWindow">
      <summary>
            Gets/sets a value indicating whether the frame acts as a tool window.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.INFrameControl.MaximizeBox">
      <summary>
            Gets/sets a value whether the frame will display a Maximize button allowing the user make the current instance occupy the entire working area.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.INFrameControl.MinimizeBox">
      <summary>
            Gets/sets a value whether the frame will display a Minimize button allowing the user to send the current instance to the system task bar.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.INFrameControl.CloseButton">
      <summary>
            Gets/sets a value whether the frame will display a close button allowing the user to "Close" the current instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.INFrameControl.HelpButton">
      <summary>
            Gets/sets a value whether the frame will display a Help button allowing the user to trigger the context-sensitive help on the current instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.INFrameControl.SystemMenu">
      <summary>
            Gets/sets a value whether a system menu should be displayed when the user right-clicks the frame's caption.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.INFrameControl.IsActive">
      <summary>
            Determines whether the frame is active.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.INFrameControl.CustomButtons">
      <summary>
            Gets the collection of custom caption buttons.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.INFrameControl.CaptionImage">
      <summary>
            Gets/sets the image to be displayed by the caption.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.INFrameControl.CurrentCaptionImage">
      <summary>
            Gets the current image displayed by the caption.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.INFrameControl.PreferredNCState">
      <summary>
            Gets/sets the preferred state for the non-client area.
            Note that specifying this will override the default processing of the NC activate message.
            0 is always inactive, 1 is always active and -1 is discarded.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.INFrameControl.CaptionButtonClicked">
      <summary>
            Fired when the user has clicked a custom button.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.INFrameControl.SysMenuCommands">
      <summary>
            Gets an array with all the commands to be displayed when a system menu is requested.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NForm.ApplyPalette(Nevron.UI.WinForm.Controls.NPalette)">
      <summary>
            Updates from the specified palette and 
            </summary>
      <param name="palette">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NForm.InvalidateFrame">
      <summary>
            Invalidates the frame.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NForm.Dispose(System.Boolean)">
      <summary>
      </summary>
      <param name="disposing">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NForm.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
      <summary>
      </summary>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="width">
      </param>
      <param name="height">
      </param>
      <param name="specified">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NForm.OnHandleCreated(System.EventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NForm.OnHandleDestroyed(System.EventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NForm.WndProc(System.Windows.Forms.Message@)">
      <summary>
      </summary>
      <param name="m">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NForm.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NForm.SetFrameAppearance(Nevron.UI.WinForm.Controls.NFrameAppearance)">
      <summary>
            Performs the core logic of applying a frame appearance.
            </summary>
      <param name="appearance">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NForm.OnSysMenuCommandClicked(Nevron.UI.WinForm.Controls.CommandEventArgs)">
      <summary>
            Fires the SysMenuCommandClicked event.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NForm.ShouldSerializeCaptionImage">
      <summary>
            Determines whether the 
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NForm.EnableSkinning">
      <summary>
            Determines whether the NForm will use the current skin to display its frame.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NForm.Skin">
      <summary>
            Gets/sets the local NSkin instance to be used when painting this control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NForm.CurrentSkin">
      <summary>
            Gets the current skin to be used by this instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NForm.Palette">
      <summary>
            Gets/sets the NPalette used to render the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NForm.PaletteInheritance">
      <summary>
            Gets/sets a value which Palette value will be applied on a higher level Palette change.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NForm.UseGlobalTemplate">
      <summary>
            Gets/sets a value indicating whether this instance will use the global template provided by the NUIManager.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NForm.UseGlassIfEnabled">
      <summary>
            Determines whether the form will use the Vista Glass effect if enabled.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NForm.ShowCaptionImage">
      <summary>
            Gets/sets a value whether to display the caption image.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NForm.ShowCaptionText">
      <summary>
            Gets/sets a value whether to display the caption text.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NForm.Movable">
      <summary>
            Gets/sets a value indicating whether the user may move the frame using the left mouse button.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NForm.Sizable">
      <summary>
            Gets/sets a value indicating whether the user may resize the frame.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NForm.ToolWindow">
      <summary>
            Gets/sets a value indicating whether the Form acts as a tool window.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NForm.SystemMenu">
      <summary>
            Gets/sets a value whether a system menu should be displayed when the user right-clicks the frame's caption.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NForm.IsActive">
      <summary>
            Determines whether the frame is currently active.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NForm.ClientMouse">
      <summary>
            Gets the current mouse position in client coordinates.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NForm.MinimizeBox">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NForm.MaximizeBox">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NForm.CloseButton">
      <summary>
            Gets/sets a value whether the frame will display a close button allowing the user to "Close" the current instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NForm.HelpButton">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NForm.FrameAppearance">
      <summary>
            Gets/sets the local value for this instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NForm.CurrentFrameAppearance">
      <summary>
            Gets the NFrameAppearance template currently used by this instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NForm.CaptionImage">
      <summary>
            Gets/sets the image to be displayed by the caption.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NForm.CurrentCaptionImage">
      <summary>
            Gets the image displayed by the caption.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NForm.SysMenuCommands">
      <summary>
            Gets an array with all the commands to be displayed when a system menu is requested.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NForm.CustomButtons">
      <summary>
            Gets the collection of custom caption buttons.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NForm.CaptionButtonClicked">
      <summary>
            Fired when the user has clicked a custom button.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NForm.SysMenuCommandClicked">
      <summary>
            Fired when the user has clicked a command from the system menu.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NForm.CreateParams">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NForm.FormBorderStyle">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NForm.WindowState">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NForm.Text">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NForm.Icon">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NPaletteUIElementHostWithBorder">
      <summary>
            Summary description for NPaletteUIElementHostWithBorder.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPaletteUIElementHostWithBorder.Border">
      <summary>
            Gets the NControlBorder object that manages the border around the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPaletteUIElementHostWithBorder.DefaultBorderStyle">
      <summary>
            Gets the default border style for the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPaletteUIElementHostWithBorder.DefaultBaseBorderColor">
      <summary>
            Gets the default base color to use when drawing 3D borders.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPaletteUIElementHostWithBorder.BorderWidth">
      <summary>
            Gets the preffered width of the border.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPaletteUIElementHostWithBorder.EnableSkinning">
      <summary>
            Gets/sets a value indicating whether the control will use skin logic.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPaletteUIElementHostWithBorder.Skin">
      <summary>
            Gets/sets the local NSkin instance to be used when painting this control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPaletteUIElementHostWithBorder.CurrentSkin">
      <summary>
            Gets the current skin to be used by this instance.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NTreeViewExRenderer">
      <summary>
            Handles measuring and rendering of items in a NItemsControl instance.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NTreeListHeaderDragInfo">
      <summary>
            Represents an object which stores information about a header drag operation.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.NTreeListHeaderDragInfo.Commit">
      <summary>
            Determines whether the drag operation is successful or should be canceled.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.NTreeListHeaderDragInfo.Delta">
      <summary>
            The offset generated during dragging.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.NTreeListHeaderDragInfo.MouseCapturePos">
      <summary>
            The mouse position where mouse was pressed.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.NTreeListHeaderDragInfo.MousePos">
      <summary>
            The current mouse position.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.NTreeListHeaderDragInfo.BorderOffset">
      <summary>
            The offset between the capture mouse position and the bounds of the header item.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.NTreeListHeaderDragInfo.HitCode">
      <summary>
            The hit code of the current operation.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListHeaderDragInfo.Header">
      <summary>
            Gets the NTreeListHeaderItem instance associated with the operation.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NLightUIElement">
      <summary>
            Represents a basic UI element which has bounds, may be painted and may intercept user input.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NLightUIObject">
      <summary>
            Base class for all light-ui based objects.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIObject.IsDisposing">
      <summary>
            Determines whether the element is in a process of being disposed of.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIObject.IsDisposed">
      <summary>
            Determines whether the element is already disposed.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIObject.Tag">
      <summary>
            Gets/sets the additional information associated with the object.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIElement.ContextMenu">
      <summary>
            Gets/sets the NContextMenu instance to be displayed when the user has right-clicked on the element.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIElement.Visible">
      <summary>
            Gets/sets the element's local Visible value. This may differ from the IsVisible value.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIElement.IsVisible">
      <summary>
            Determines whether the element is visible in the current UI context.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIElement.Enabled">
      <summary>
            Gets/sets the element's local Enabled value. This may differ from the IsEnabled value.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIElement.IsEnabled">
      <summary>
            Determines whether the element is enabled in the current UI context.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIElement.IsFocused">
      <summary>
            Determines whether the item is currently focused.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIElement.TooltipInfo">
      <summary>
            Gets the NTooltipInfo instance which describes the tooltip for this item.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIElement.Padding">
      <summary>
            Gets/sets the internal padding of the item.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIElement.Margins">
      <summary>
            Gets/sets the outer padding of the item.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.ItemDragDropMode">
      <summary>
            Specifies the possible modes when a NLightUIItem drag-and-drop operation is started.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.ItemDragDropMode.Default">
      <summary>
            The current NItemsControl instance will choose the mode.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.ItemDragDropMode.None">
      <summary>
            No drag-and-drop is allowed.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.ItemDragDropMode.Local">
      <summary>
            Drag-and-drop is allowed within the item's current host.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.ItemDragDropMode.Global">
      <summary>
            Drag-and-drop is allowed among all NItemsControl instances currently alive.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.ItemMouseHitCode">
      <summary>
            Specifies the possible codes when the mouse hovers an NLightUIItem instance.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.ItemMouseHitCode.Nowhere">
      <summary>
            The mouse is outside the item's bounding box.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.ItemMouseHitCode.Bounds">
      <summary>
            The mouse is within the item's bounding box
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.ItemMouseHitCode.Image">
      <summary>
            The mouse is within the item's bounding box and above the image part.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.ItemMouseHitCode.Text">
      <summary>
            The mouse is within the item's bounding box and above the text part.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.ItemMouseHitCode.CheckBox">
      <summary>
            The mouse is within the item's bounding box and above the checkbox part.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.ItemBackgroundMode">
      <summary>
            Specifies which part of an item is filled with background brush.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.ItemTextProcessMode">
      <summary>
            Specifies the possible text handling modes for a NLightUIItem
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.ItemCheckState">
      <summary>
            Specifies the possible check state of a NLightUIItem
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.ItemCheckStyle">
      <summary>
            Specifies the possible check style of a NLightUIItem
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.ItemVisualState">
      <summary>
            Specifies the possible visual states of a NLightUIItem
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.ItemUpdateMask">
      <summary>
            A mask which describes an update process.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.MouseState">
      <summary>
            Common mouse state for a visual object.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.ItemSelectionMode">
      <summary>
            Specifies the possible selection modes for a NItemsControl
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.ItemDragDropAction">
      <summary>
            Specifies the possible actions for an item drag-and-drop operation.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.ItemDragDropEffect">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.ItemSelectionAction">
      <summary>
            Specifies the possible ways for requesting an item selection.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.InputEvent">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NToolbar">
      <summary>
            Represents a toolbar-like command parent.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NCommandParent">
      <summary>
            Provides a base implementation for a command parent.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.INImageListProvider">
      <summary>
            Provides a common property for all objects that provide image list.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.INImageListProvider.ImageList">
      <summary>
            Gets/sets the ImageList provided by this object.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NCommandParent.GetCommands">
      <summary>
            Gets all the commands and their children ones.
            </summary>
      <returns>An arraylist populated with the commands.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NCommandParent.GetCommands(System.Boolean)">
      <summary>
            Gets all the commands contained by this parent and their children ones.
            </summary>
      <param name="visibleOnly">Specifies whether to search for visible commands only.</param>
      <returns>An arraylist populated with the matches.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NCommandParent.ApplyStyle(Nevron.UI.WinForm.Controls.NCommand)">
      <summary>
            Applies the default style to a command.
            </summary>
      <param name="comm">The command to apply style to.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NCommandParent.CanAcceptPropertyChange(System.String,System.Object)">
      <summary>
            Determines whether the parent allows change of a property of its child command.
            </summary>
      <param name="propName">The property that is to be changed</param>
      <param name="value">The new value that is to be applied.</param>
      <returns>True if the new value can be applied, false otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NCommandParent.ProcessShortcut(System.Windows.Forms.KeyEventArgs)">
      <summary>
            Processes a keyboard combination recursively.
            </summary>
      <param name="e">The KeyEventArgs to process.</param>
      <returns>True if a valid shortcut command has been found, false otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NCommandParent.Reset(System.Boolean)">
      <summary>
            Resets the state of the command parent. If the parent has been assigned a valid DefaultRangeID
            it will populate all the contexts from that ID. Otherwise it will set the visibility of all commands to Visibility.Visible.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NCommandParent.UpdateCommands(System.Boolean,System.Boolean)">
      <summary>
            Updates all the commands and additionally performs measure and refresh.
            </summary>
      <param name="measure">True to perform measure, false otherwise.</param>
      <param name="refresh">True to refresh the control, false otherwise.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NCommandParent.ContainsMenu(Nevron.UI.WinForm.Controls.NMenuWindow)">
      <summary>
            Determines whether the specified menu is a child one of any command contained within this parent.
            </summary>
      <param name="menu">The menu window to check for.</param>
      <returns>True if the menu is contained, false otherwise.</returns>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandParent.PaletteInheritance">
      <summary>
            Gets/sets a value which Palette value will be applied on a higher level Palette change.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandParent.Renderer">
      <summary>
            Gets/sets the renderer for this command parent.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandParent.Palette">
      <summary>
            Gets/sets the NPalette used to render the control.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NCommandParent.CommandClick">
      <summary>
            Fired when a command hosted by this parent is clicked.
            Typically this event is fired only by a top level parents such as NToolbar and NContextMenu.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NCommandParent.CommandPopup">
      <summary>
            Fired when a command hosted by this parent is about to display its drop-down menu.
            Typically this event is fired only by a top level parents such as NToolbar and NContextMenu.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandParent.ImageSize">
      <summary>
            Gets/sets the image size for the command parent.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandParent.PrefferedSize">
      <summary>
            Gets the preffered size for this parent.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandParent.CommandSize">
      <summary>
            Gets/sets the command size for the command parent.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandParent.ShowTooltips">
      <summary>
            Gets/sets a value whether the command parent will display a tooltip when the mouse hovers a command.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandParent.Commands">
      <summary>
            Gets the collection of NCommand objects for the parent.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandParent.ImageList">
      <summary>
            Gets/sets the ImageList for the command parent.
            Note that if a NCommand object already has an assigned ImageList value it will keep it,
            otherwise it will get the value from its parent.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandParent.Suspend">
      <summary>
            Temporally suspends the update of commands.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandParent.DefaultRangeID">
      <summary>
            Gets/sets the default command range id for the toolbar.
            When such a range is specified the "Reset" method will populate all the commands from that range.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandParent.DefaultCommandStyle">
      <summary>
            Gets/sets the default command style to be applied on commands with CommandStyle.Default
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandParent.TopLevelParent">
      <summary>
            Gets the NCommandParent that is not parented or contained by any other NCommandParent.
            Typically this is a NToolbar object or a NContextMenuWindow object.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandParent.AllowReset">
      <summary>
            Gets/sets a value whether the command parent can be reset - that is restoring its default set of commands.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandParent.CommandLayout">
      <summary>
            Gets/sets the current layout to be applied on commands.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandParent.AutoDropDownDelay">
      <summary>
            Gets/sets a value whether there will be a delay when the
            parent has entered modal loop and a command which will bedropped down is hovered.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandParent.BackgroundType">
      <summary>
            Gets/sets a value specifying how the control's background is rendered.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandParent.HasBorder">
      <summary>
            Gets/sets a value specifying whether the control has border.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.INHookProvider">
      <summary>
            Represents an object that might install Windows hooks and loops.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.INHookProvider.EnterLoop">
      <summary>
            Installs a local modal loop on the thread.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.INHookProvider.ExitLoop">
      <summary>
            Exits the current loop installed by this instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.INHookProvider.Hook">
      <summary>
            Gets the NHookBase object provided by this instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.INHookProvider.LoopEntered">
      <summary>
            Gets a value whether there is currently a loop installed by this instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NToolbar.EnableSkinning">
      <summary>
            Gets/sets a value indicating whether the control will use skin logic.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NToolbar.Skin">
      <summary>
            Gets/sets the local NSkin instance to be used when painting this control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NToolbar.CurrentSkin">
      <summary>
            Gets the current skin to be used by this instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NToolbar.Hook">
      <summary>
            Gets the NToolbarHook object that is responsible for filtering messages when in menu loop.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NToolbar.LoopEntered">
      <summary>
            Gets a value whether a loop is currently running.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NToolbar.AutoSize">
      <summary>
            Gets/sets a value whether the NToolbar will perform autosizing.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NToolbar.CaptionHeight">
      <summary>
            Gets/sets the height of the caption.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NToolbar.HasGripper">
      <summary>
            Gets/sets a value whether the NCommandParent will display a gripper.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NToolbar.ImageTextRelation">
      <summary>
            Gets/sets the relation between the image and text parts of the children commands.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.INDockingControl">
      <summary>
            Represents a control that might be docked onto an INControlDock instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.INDockingControl.CanFloat">
      <summary>
            Gets/sets a value whether the control can float.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.INDockingControl.CanDock">
      <summary>
            Gets/sets a value whether the control can dock.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.INDockingControl.CanDockLeft">
      <summary>
            Gets/sets a value whether the control can be docked left.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.INDockingControl.CanDockRight">
      <summary>
            Gets/sets a value whether the control can be docked right.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.INDockingControl.CanDockTop">
      <summary>
            Gets/sets a value whether the control can be docked top.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.INDockingControl.CanDockBottom">
      <summary>
            Gets/sets a value whether the control can be docked bottom.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.INShortcutProvider">
      <summary>
            Represents the common functionality of objects that provide shortcuts.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.INShortcutProvider.Shortcut">
      <summary>
            Gets/sets the shortcut provided by the object.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.INShortcutProvider.Description">
      <summary>
            Gets the human readable description of the INShortcutProvider
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDockingToolbar.CanFloat">
      <summary>
            Gets/sets a value whether the toolbar can be in a floating state.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDockingToolbar.CanDock">
      <summary>
            Gets/sets a value whether the toolbar can be in a docked state.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDockingToolbar.CanDockLeft">
      <summary>
            Gets/sets a value whether the toolbar can dock left.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDockingToolbar.CanDockRight">
      <summary>
            Gets/sets a value whether the toolbar can dock right.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDockingToolbar.CanDockTop">
      <summary>
            Gets/sets a value whether the toolbar can dock top.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDockingToolbar.CanDockBottom">
      <summary>
            Gets/sets a value whether the toolbar can dock bottom.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDockingToolbar.Shortcut">
      <summary>
            Gets the shorcut keyboard combination that gives the toolbar keyboard focus.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDockingToolbar.Description">
      <summary>
            Gets the human readable description of the INShortcutProvider
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDockingToolbar.Visible">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDockingToolbar.HasPendantCommand">
      <summary>
            Gets/sets a value indicating whether the toolbar has a special pendant command.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDockingToolbar.DefaultLocation">
      <summary>
            Gets/sets the preffered location of the toolbar.
            During a layout operation the layout manager will always try to achieve each toolbar's default location.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDockingToolbar.RowIndex">
      <summary>
            Gets/sets the zero-based index of the row(column) on which the toolbar is located.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDockingToolbar.PrefferedRowIndex">
      <summary>
            Gets/sets the zero-based index of the preffered row(column) on which the toolbar is to be located.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDockingToolbar.AllowHide">
      <summary>
            Gets/sets a value whether the toolbar can be hidden either by pressing the "Close" command in floating state or by unchecking the toolbar from the editor.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDockingToolbar.AllowDelete">
      <summary>
            Gets/sets a value whether the toolbar can be deleted at run-time.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDockingToolbar.AllowRename">
      <summary>
            Gets/sets a value whether the toolbar can be renamed at run-time.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDockingToolbar.FloatingLocation">
      <summary>
            Gets/sets the preffered location to use when the toolbar will float for the first time.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDockingToolbar.FloatingSize">
      <summary>
            Gets/sets the preffered size to use when the toolbar will float for the first time.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDockingToolbar.Moveable">
      <summary>
            Determines whether the toolbar may be freely repositioned within it current container.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NComboBox">
      <summary>
            Represents a custom control with functionality similar to the one found in standard ComboBox control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NControlBase.Palette">
      <summary>
            Gets/sets the NPalette used to render the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NControlBase.PaletteInheritance">
      <summary>
            Gets/sets a value which Palette value will be applied on a higher level Palette change.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.INInteractiveControl">
      <summary>
            Encapsulates the common behavior for control that might change their state.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.INInteractiveControl.State">
      <summary>
            Gets/sets the current state for the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NInteractiveControl.State">
      <summary>
            Gets/sets the InteractiveState of the Control.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NComboBox.BeforeDrop">
      <summary>
            Occurs when the NComboBox is about to display its drop-down part.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NComboBox.AfterDrop">
      <summary>
            Occurs when the NComboBox has opened its drop-down part.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NComboBox.CloseDrop">
      <summary>
            Occurs when the NComboBox has closed its drop-down part.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NComboBox.SelectedIndexChanged">
      <summary>
            Occurs when the selected index in the NComboBox has changed.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NComboBox.EnableSkinning">
      <summary>
            Gets/sets a value indicating whether the control will use skin logic.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NComboBox.Skin">
      <summary>
            Gets/sets the local NSkin instance to be used when painting this control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NComboBox.CurrentSkin">
      <summary>
            Gets the current skin to be used by this instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NComboBox.Hook">
      <summary>
            Gets the NHookBase object that is used to enter and exit message loops.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NComboBox.LoopEntered">
      <summary>
            Gets a value whether a loop is currently running.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NComboBox.ImageList">
      <summary>
            Gets/sets the ImageList for the NComboBox object.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NComboBox.SelectedText">
      <summary>
            Gets/sets the selected text in the editable portion of the combo-box.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NComboBox.SelectionStart">
      <summary>
            Gets/sets the starting index of the text selection in the editable portion of the combo-box.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NComboBox.SelectionLength">
      <summary>
            Gets/sets the length of the selection in the editable portion of the combo-box.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NComboBox.Items">
      <summary>
            Gets the Items collection for the drop-down NListBox.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NComboBox.Editable">
      <summary>
            Gets/sets a value whether the control will have an edit portion.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NComboBox.InteractiveBorder">
      <summary>
            Gets/sets a value whether a border around the NComboBox
            will be drawn in default state or only when hovered or pressed.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NComboBox.ListProperties">
      <summary>
            Gets the common properties of the drop-down listbox part.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NComboBox.Text">
      <summary>
            Gets/sets the text in the editable portion of the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NComboBox.SelectedIndex">
      <summary>
            Gets/sets the selected index in the combobox.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NComboBox.DropDownWidth">
      <summary>
            Gets/sets the preffered width of the drop-down part. By default it is the width of the ComboBox.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NComboBox.DropDownItems">
      <summary>
            "Gets/sets the number of items that should display in the drop-down part. By default the items are 8."
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NComboBox.Renderer">
      <summary>
            Gets the renderer that renders this NComboBox object.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NComboBox.AcceptTextChangeOnReturnOnly">
      <summary>
            Gets/sets a value indicating how a text change will be treated.
            If this flag is false the text change will be only accepted when the user hits the "Return" key.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NComboBox.SelectedItem">
      <summary>
            Gets/sets the selected item in the NComboBox.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NComboBox.EditControl">
      <summary>
            Gets the internal edit control when the Editable flag is true.
            Directly modifying its properties may lead to undesired behavior.
            This is exposed for the sake of the .NET 2.0 AutoComplete feature.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NComboBox.TooltipInfo">
      <summary>
            Gets the object which contains information about the tooltip associated with this control.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NCommandContextCollection">
      <summary>
            Represents a collection of NCommandContext objects.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NCollectionBase">
      <summary>
            A class that simply overrides the standard one and fires some events for adding and removing objects.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NCollectionBase.Dispose">
      <summary>
            Disposes all the resources used by the collection.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NCollectionBase.BeforeInsert">
      <summary>
            Fired before inserting an object
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NCollectionBase.AfterInsert">
      <summary>
            Fired when inserting of an object is complete
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NCollectionBase.BeforeRemove">
      <summary>
            Fired when removing of an object is started
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NCollectionBase.AfterRemove">
      <summary>
            Fired when removing of an object is completed
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NCollectionBase.Cleared">
      <summary>
            Fired when clearing of the collection is completed
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NCollectionBase.Changed">
      <summary>
            Fired whenever the collection is changed.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NCommandContextCollection.Contains(Nevron.UI.WinForm.Controls.NCommandContext)">
      <summary>
            Determines whether the specified context is contained within the collection.
            </summary>
      <param name="context">The context to check for.</param>
      <returns>True if contained, false otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NCommandContextCollection.Contains(System.Int32)">
      <summary>
            Determines whether a context with the specified id is contained within the collection.
            </summary>
      <param name="contextID">The id to check for.</param>
      <returns>True if contained, false otherwise.</returns>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandContextCollection.UniqueIDOnly">
      <summary>
            Gets/sets a value whether the collection will allow adding contexts with unique ids.
            </summary>
    </member>
    <member name="T:Nevron.UI.NTickShapeRenderInfo">
      <summary>
            Summary description for NTickShapeRenderInfo.
            </summary>
    </member>
    <member name="T:Nevron.UI.Themes.System.NUxThemeTrackbarRenderer">
      <summary>
            Summary description for NUxThemeTrackbarRenderer.
            </summary>
    </member>
    <member name="T:Nevron.UI.Themes.System.NTrackbarRenderer">
      <summary>
            Summary description for NTrackbarRenderer.
            </summary>
    </member>
    <member name="T:Nevron.UI.NUIRendererBase">
      <summary>
            Summary description for NUIRenderer.
            </summary>
    </member>
    <member name="T:Nevron.UI.INUIRenderer">
      <summary>
            Summary description for INUIRenderer.
            </summary>
    </member>
    <member name="M:Nevron.UI.INUIRenderer.Render(Nevron.UI.NPaintContext,Nevron.UI.INThemableElement)">
      <summary>
            Renders the specified visual element using the specified context.
            </summary>
      <param name="context">The context associated with the render operation.</param>
      <param name="element">The visual element to render.</param>
    </member>
    <member name="M:Nevron.UI.INUIRenderer.RenderBackground(Nevron.UI.NPaintContext,Nevron.UI.INThemableElement)">
      <summary>
            Renders only the background of the specified element.
            </summary>
      <param name="context">The context associated with the render operation.</param>
      <param name="element">The visual element to render.</param>
    </member>
    <member name="M:Nevron.UI.INUIRenderer.RenderDecoration(Nevron.UI.NPaintContext,Nevron.UI.INThemableElement)">
      <summary>
            Renders only the decoration of the specified element.
            </summary>
      <param name="context">The context associated with the render operation.</param>
      <param name="element">The visual element to render.</param>
    </member>
    <member name="M:Nevron.UI.INUIRenderer.RenderGlyph(Nevron.UI.NPaintContext,Nevron.UI.INThemableElement)">
      <summary>
            Renders only the glyph of the specified element.
            </summary>
      <param name="context">The context associated with the render operation.</param>
      <param name="element">The visual element to render.</param>
    </member>
    <member name="M:Nevron.UI.INUIRenderer.RenderContent(Nevron.UI.NPaintContext,Nevron.UI.INThemableElement)">
      <summary>
            Renders the content of the specified element.
            </summary>
      <param name="context">The context associated with the render operation.</param>
      <param name="element">The visual element to render.</param>
    </member>
    <member name="M:Nevron.UI.INUIRenderer.RenderFocusCues(Nevron.UI.NPaintContext,Nevron.UI.INThemableElement)">
      <summary>
            Renders any visual cues for the specified element.
            </summary>
      <param name="context">The context associated with the render operation.</param>
      <param name="element">The visual element to render.</param>
    </member>
    <member name="M:Nevron.UI.INUIRenderer.RenderNonClient(Nevron.UI.NPaintContext,Nevron.UI.INThemableElement)">
      <summary>
            Renders the non-client part (if any) of the specified element.
            </summary>
      <param name="context">The context associated with the render operation.</param>
      <param name="element">The visual element to render.</param>
    </member>
    <member name="M:Nevron.UI.INUIRenderer.CanRender(Nevron.UI.INThemableElement)">
      <summary>
            Determines whether the specified element's rendering is supported by this renderer.
            </summary>
      <param name="element">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.INUIRenderer.RenderMask">
      <summary>
            Gets a mask which determines which render passes this renderer can complete.
            </summary>
    </member>
    <member name="P:Nevron.UI.NUIRendererBase.RenderMask">
      <summary>
            Gets a value which determines which render passes this renderer can complete.
            </summary>
    </member>
    <member name="T:Nevron.UI.NThemeStyleState">
      <summary>
            Summary description for NFillStyleState.
            </summary>
    </member>
    <member name="T:Nevron.UI.NTheme">
      <summary>
            Represents a general theme;
            A theme contains information about how different elements are rendered
            as well as what renderer to be used for a specific element.
            </summary>
    </member>
    <member name="T:Nevron.UI.INTheme">
      <summary>
            Summary description for INTheme.
            </summary>
    </member>
    <member name="M:Nevron.UI.INTheme.GetRenderer(System.Int32)">
      <summary>
            Retrieves the renderer for the specified theme class.
            </summary>
      <param name="classId">The id of the theme class to search for.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.INTheme.GetColorTable(System.Int32)">
      <summary>
            Retrieves the color table for the specified theme class.
            </summary>
      <param name="classId">The id of the theme class to search for.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.INTheme.GetStyle(Nevron.UI.NPartStateInfo)">
      <summary>
            Retrieves the specific style for the specified class, part and state.
            </summary>
      <param name="info">The NPartStateInfo which describes the theme state.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.INTheme.GetPartStyle(Nevron.UI.NPartStateInfo)">
      <summary>
            Retrieves the default style for the specified part.
            </summary>
      <param name="info">The NPartStateInfo which describes the theme part.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.INTheme.GetClassStyle(Nevron.UI.NPartStateInfo)">
      <summary>
            Retrieves the default style for the specified class.
            </summary>
      <param name="info">The NPartStateInfo which describes the theme class.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.INTheme.GetPreferredSize(Nevron.UI.NPartStateInfo)">
      <summary>
            Retrieves the preferred size for a the specified theme part.
            </summary>
      <param name="info">The NPartStateInfo which describes the theme part.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.INTheme.ContainsEntry(Nevron.UI.NPartStateInfo)">
      <summary>
            Deremines whether the current theme contains entry for the specified part state info.
            </summary>
      <param name="info">The part state info to check for.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.INTheme.CanModify">
      <summary>
            Determines whether the current theme might be modified.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.INTheme.RegisterChangeListener(Nevron.UI.INThemableElement)">
      <summary>
            Registers a listener for a change in the theme.
            </summary>
      <param name="instance">
      </param>
    </member>
    <member name="M:Nevron.UI.INTheme.UnregisterChangeListener(Nevron.UI.INThemableElement)">
      <summary>
            Unregisters an already registered listener.
            </summary>
      <param name="instance">
      </param>
    </member>
    <member name="P:Nevron.UI.INTheme.ColorTransform">
      <summary>
            Gets/sets the global color channel scaling to all UI elements.
            </summary>
    </member>
    <member name="M:Nevron.UI.NTheme.Clear">
      <summary>
            Removes all entries from the theme without disposing them.
            </summary>
    </member>
    <member name="M:Nevron.UI.NTheme.ProvideReference(System.Type)">
      <summary>
      </summary>
      <param name="referenceType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.NTheme.ColorTransform">
      <summary>
            Gets/sets the global color channel scaling to all UI elements.
            </summary>
    </member>
    <member name="T:Nevron.UI.ToolStrips.NToolItem">
      <summary>
            Represents a light-weight ui element which is a part (item) in an item strip.
            </summary>
    </member>
    <member name="T:Nevron.UI.NImageAndTextItem">
      <summary>
            Represents a light-weight ui element which is a part (item) in a container.
            </summary>
    </member>
    <member name="T:Nevron.UI.NUIItem">
      <summary>
            Represents the base class for an item in a container element.
            </summary>
    </member>
    <member name="P:Nevron.UI.NUIItem.IsMouseInteractive">
      <summary>
            Determines whether the mouse input will change item's state.
            </summary>
    </member>
    <member name="P:Nevron.UI.NUIItem.PropertyMaster">
      <summary>
            Gets/sets the property master which provides properties for this item.
            This can be any valid INPropertyMaster instance allowing for flexible property inheritance.
            </summary>
    </member>
    <member name="P:Nevron.UI.NUIItem.ItemState">
      <summary>
            Gets/sets the state of the item.
            </summary>
    </member>
    <member name="T:Nevron.UI.INUIItem">
      <summary>
            Summary description for INUIItem.
            </summary>
    </member>
    <member name="E:Nevron.UI.NImageAndTextItem.HyperLinkClick">
      <summary>
            Fired when the action mouse button has been released over a hyper-link.
            </summary>
    </member>
    <member name="P:Nevron.UI.NImageAndTextItem.ItemStyle">
      <summary>
            Gets/sets the style of the item.
            </summary>
    </member>
    <member name="P:Nevron.UI.NImageAndTextItem.DefaultImage">
      <summary>
            Gets the default image to be used.
            </summary>
    </member>
    <member name="P:Nevron.UI.NImageAndTextItem.DefaultImageIndex">
      <summary>
            Gets the default image index to be used.
            </summary>
    </member>
    <member name="P:Nevron.UI.NImageAndTextItem.DefaultImageTextSpacing">
      <summary>
            Gets the default spacing between image and text.
            </summary>
    </member>
    <member name="P:Nevron.UI.NImageAndTextItem.DefaultImageList">
      <summary>
            Gets the default spacing between image and text.
            </summary>
    </member>
    <member name="P:Nevron.UI.NImageAndTextItem.DefaultImageSize">
      <summary>
            Gets the default spacing between image and text.
            </summary>
    </member>
    <member name="P:Nevron.UI.NImageAndTextItem.DefaultImageSizeMode">
      <summary>
            Gets the default image size mode.
            </summary>
    </member>
    <member name="P:Nevron.UI.NImageAndTextItem.DefaultContentAlign">
      <summary>
            Gets the default content alignment.
            </summary>
    </member>
    <member name="P:Nevron.UI.NImageAndTextItem.DefaultText">
      <summary>
            Gets the default text to be displayed by this item.
            </summary>
    </member>
    <member name="P:Nevron.UI.NImageAndTextItem.DefaultTextMargins">
      <summary>
            Gets the default value for the TextMargins property.
            </summary>
    </member>
    <member name="P:Nevron.UI.NImageAndTextItem.DefaultClipText">
      <summary>
            Gets the default value of the ClipText property.
            </summary>
    </member>
    <member name="P:Nevron.UI.NImageAndTextItem.DefaultTextOrientation">
      <summary>
            Gets the default value of the TextOrientation property.
            </summary>
    </member>
    <member name="P:Nevron.UI.NImageAndTextItem.DefaultItemStyle">
      <summary>
            Gets the default value for the ItemStyle property.
            </summary>
    </member>
    <member name="P:Nevron.UI.NImageAndTextItem.Image">
      <summary>
            Gets/sets the image to be used by this item.
            </summary>
    </member>
    <member name="P:Nevron.UI.NImageAndTextItem.ImageIndex">
      <summary>
            Gets/sets the image index from imagelist to be used by this item.
            </summary>
    </member>
    <member name="P:Nevron.UI.NImageAndTextItem.ImageTextSpacing">
      <summary>
            Gets/sets the spacing between image and text.
            </summary>
    </member>
    <member name="P:Nevron.UI.NImageAndTextItem.ImageList">
      <summary>
            Gets/sets the imagelist to be used by this item.
            </summary>
    </member>
    <member name="P:Nevron.UI.NImageAndTextItem.ImageSize">
      <summary>
            Gets/sets the size used to calculate the bounds into which to paint the current image.
            </summary>
    </member>
    <member name="P:Nevron.UI.NImageAndTextItem.ImageSizeMode">
      <summary>
            Gets/sets the mode used to fit the current image in the available image bounds.
            </summary>
    </member>
    <member name="P:Nevron.UI.NImageAndTextItem.MinimumTextSize">
      <summary>
            Gets/sets the minimum size that will be reserved for text.
            </summary>
    </member>
    <member name="P:Nevron.UI.NImageAndTextItem.ImageSourceRect">
      <summary>
            Gets/sets the source rectangle from the image to be rendered.
            </summary>
    </member>
    <member name="P:Nevron.UI.NImageAndTextItem.ImageAlpha">
      <summary>
            Gets/sets the alpha value to be applied on the item's image.
            </summary>
    </member>
    <member name="P:Nevron.UI.NImageAndTextItem.ImageGrayScale">
      <summary>
            Gets/sets a value indicating whether to render item's image in gray scale.
            </summary>
    </member>
    <member name="P:Nevron.UI.NImageAndTextItem.TreatAsOneEntity">
      <summary>
            Determines whether to treat both image and text as one entity.
            </summary>
    </member>
    <member name="P:Nevron.UI.NImageAndTextItem.AutoPaintImage">
      <summary>
            Determines whether to automatically paint the image.
            </summary>
    </member>
    <member name="P:Nevron.UI.NImageAndTextItem.AutoPaintText">
      <summary>
            Determines whether to automatically paint the text.
            </summary>
    </member>
    <member name="P:Nevron.UI.NImageAndTextItem.ClipText">
      <summary>
            Gets/sets a value indicating whether the text will be cliped to the calculated bounds.
            </summary>
    </member>
    <member name="P:Nevron.UI.NImageAndTextItem.ImageAlign">
      <summary>
            Gets/sets the alignment of the image (used when TreatAsOneEntity is false).
            </summary>
    </member>
    <member name="P:Nevron.UI.NImageAndTextItem.TextOrientation">
      <summary>
            Gets/sets the orientation of the text.
            </summary>
    </member>
    <member name="P:Nevron.UI.NImageAndTextItem.Text">
      <summary>
            Gets/sets the text displayed by this item.
            </summary>
    </member>
    <member name="P:Nevron.UI.NImageAndTextItem.TextAlign">
      <summary>
            Gets/sets the alignment of the text (used when TreatAsOneEntity is false).
            </summary>
    </member>
    <member name="P:Nevron.UI.NImageAndTextItem.ContentAlign">
      <summary>
            Gets/sets the alignment to be used when image and text are one entity.
            </summary>
    </member>
    <member name="P:Nevron.UI.NImageAndTextItem.ImageTextRelation">
      <summary>
            Gets/sets the relation between the image and the text.
            </summary>
    </member>
    <member name="P:Nevron.UI.NImageAndTextItem.ImageAndTextLayout">
      <summary>
            Gets/sets the object which is calculates the image and text bounds for the item.
            </summary>
    </member>
    <member name="P:Nevron.UI.NImageAndTextItem.TextMargins">
      <summary>
            Gets/sets the NPadding object which controls the margins of the text.
            </summary>
    </member>
    <member name="P:Nevron.UI.NImageAndTextItem.CurrentImage">
      <summary>
            Gets the current image displayed by the item.
            </summary>
    </member>
    <member name="P:Nevron.UI.NImageAndTextItem.HyperLinks">
      <summary>
            Gets all the hyperlinks available in item's text.
            </summary>
    </member>
    <member name="T:Nevron.UI.ToolStrips.INToolItem">
      <summary>
            Summary description for INUIItem.
            </summary>
    </member>
    <member name="P:Nevron.UI.ToolStrips.NToolItem.IsVisible">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.ToolStrips.NToolItem.IsOverflown">
      <summary>
            Gets a value whether the tool item has exceeded the bounds of its parent strip and is put in the "Overflow"
            </summary>
    </member>
    <member name="P:Nevron.UI.ToolStrips.NToolItem.Strip">
      <summary>
            Gets the strip that currently parents this item.
            </summary>
    </member>
    <member name="T:Nevron.UI.NHScrollBarElement">
      <summary>
            Summary description for NHScrollBarElement.
            </summary>
    </member>
    <member name="T:Nevron.UI.NScrollBarElement">
      <summary>
            Summary description for NScrollBarElement.
            </summary>
    </member>
    <member name="T:Nevron.UI.NTrackElement">
      <summary>
            Represents a range element which displays a thumb for visual representation of the Value member.
            </summary>
    </member>
    <member name="T:Nevron.UI.NRangeElement">
      <summary>
            Summary description for NRangeElement.
            </summary>
    </member>
    <member name="M:Nevron.UI.NRangeElement.OnMinimumChanged(System.EventArgs)">
      <summary>
            Notifies the element that the Minimum meber has changed.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.NRangeElement.OnMaximumChanged(System.EventArgs)">
      <summary>
            Notifies the element that the Maximum meber has changed.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.NRangeElement.OnSmallChangeChanged(System.EventArgs)">
      <summary>
            Notifies the element that the SmallChange meber has changed.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.NRangeElement.OnLargeChangeChanged(System.EventArgs)">
      <summary>
            Notifies the element that the LargeChange meber has changed.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.NRangeElement.OnValueChanged(System.EventArgs)">
      <summary>
            Notifies the element that the Value meber has changed.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.NRangeElement.OnOrientationChanged(System.EventArgs)">
      <summary>
            Provides additional processing of the Orientation property change.
            </summary>
      <param name="e">The arguments associated with the event.</param>
    </member>
    <member name="M:Nevron.UI.NRangeElement.DoValueUpdate(Nevron.UI.NValueUpdateEventArgs)">
      <summary>
            Performs the core logic of value update.
            </summary>
      <param name="e">The arguments associated with the event.</param>
    </member>
    <member name="M:Nevron.UI.NRangeElement.InitializeDefault">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.NRangeElement.OnPropertyChanged(Nevron.UI.NPropertyChangedEventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.NRangeElement.UpdateAfterResume">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.NRangeElement.ShouldSerializeMinimum">
      <summary>
            Determines whether the Minimum member should be serialize by the designer.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NRangeElement.ShouldSerializeMaximum">
      <summary>
            Determines whether the Maximum member should be serialize by the designer.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NRangeElement.ShouldSerializeSmallChange">
      <summary>
            Determines whether the SmallChange member should be serialize by the designer.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NRangeElement.ShouldSerializeLargeChange">
      <summary>
            Determines whether the LargeChange member should be serialize by the designer.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NRangeElement.ShouldSerializeValue">
      <summary>
            Determines whether the Value member should be serialize by the designer.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NRangeElement.ShouldSerializeOrientation">
      <summary>
            Determines whether the Orientation member should be serialized by the designer.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="E:Nevron.UI.NRangeElement.ValueChanged">
      <summary>
            Fired whenever the Value member has changed.
            </summary>
    </member>
    <member name="E:Nevron.UI.NRangeElement.ValueUpdateRequested">
      <summary>
            Fired when a value update is requested. The NewValue member of the 
            </summary>
    </member>
    <member name="P:Nevron.UI.NRangeElement.Minimum">
      <summary>
            Gets/sets the Minimum member of the range element.
            </summary>
    </member>
    <member name="P:Nevron.UI.NRangeElement.Maximum">
      <summary>
            Gets/sets the Minimum member of the range element.
            </summary>
    </member>
    <member name="P:Nevron.UI.NRangeElement.SmallChange">
      <summary>
            Gets/sets the SmallChange member of the range element.
            </summary>
    </member>
    <member name="P:Nevron.UI.NRangeElement.LargeChange">
      <summary>
            Gets/sets the LargeChange member of the range element.
            </summary>
    </member>
    <member name="P:Nevron.UI.NRangeElement.Value">
      <summary>
            Gets/sets the Value member of the range element.
            </summary>
    </member>
    <member name="P:Nevron.UI.NRangeElement.Orientation">
      <summary>
            Gets/sets the orientation of the track element.
            </summary>
    </member>
    <member name="M:Nevron.UI.NTrackElement.CanInsertChild(System.Int32,Nevron.Dom.INNode)">
      <summary>
      </summary>
      <param name="index">
      </param>
      <param name="node">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NTrackElement.GetShaftBounds">
      <summary>
            Gets the bounds of the shaft.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NTrackElement.GetThumbTrackRect">
      <summary>
            Gets the tracking rect between one edge (depending on the hit code) of the shaft and the thumb's bounds.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NTrackElement.CreateThumbInstance">
      <summary>
            Creates the core instance of the Thumb element.
            This method allows the user to provide its own custom instance.
            </summary>
      <returns>The instance of the Thumb to be used by the track element.</returns>
    </member>
    <member name="M:Nevron.UI.NTrackElement.GetThumbSize">
      <summary>
            Gets the size to be applied on the Thumb child.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NTrackElement.GetThumbLocation">
      <summary>
            Gets the point to be set as a location of the child Thumb element.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NTrackElement.GetThumbLogicalPosition(System.Single)">
      <summary>
            Gets the logical position of the thumb using the proposed device position
            </summary>
      <param name="devicePos">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NTrackElement.GetValue(System.Single)">
      <summary>
            Gets the current value of the track element using the proposed device position.
            </summary>
      <param name="devicePos">The proposed device position.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NTrackElement.ClampThumbSize(Nevron.GraphicsCore.NSize@)">
      <summary>
            This method is called when the size of the child Thumb element is about to be set, allowing for any final additional processing to be performed.
            </summary>
      <param name="proposed">The size returned from the GetThumbSize method.</param>
    </member>
    <member name="M:Nevron.UI.NTrackElement.ClampThumbLocation(Nevron.GraphicsCore.NPoint@,Nevron.GraphicsCore.NSize)">
      <summary>
            This method is called when the location of the child Thumb element is about to be set, allowing for any final additional processing to be performed.
            </summary>
      <param name="proposed">The point returned by the GetThumbLocation method.</param>
      <param name="final">The final size calculated for the thumb.</param>
    </member>
    <member name="M:Nevron.UI.NTrackElement.GetThumbVisibile">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.NTrackElement.UpdateShaftsBounds">
      <summary>
            Updates the bounds of the two shaft elements
            </summary>
    </member>
    <member name="M:Nevron.UI.NTrackElement.InitializeDefault">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.NTrackElement.PerformDispose">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.NTrackElement.OnBoundsChanged(System.EventArgs,Nevron.UI.BoundsChangedMask)">
      <summary>
      </summary>
      <param name="e">
      </param>
      <param name="mask">
      </param>
    </member>
    <member name="M:Nevron.UI.NTrackElement.OnEnabledChanged(System.EventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="P:Nevron.UI.NTrackElement.Thumb">
      <summary>
            Gets the child NThumbElement instance.
            </summary>
    </member>
    <member name="M:Nevron.UI.NScrollBarElement.CanInsertChild(System.Int32,Nevron.Dom.INNode)">
      <summary>
      </summary>
      <param name="index">
      </param>
      <param name="node">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NScrollBarElement.CreateButtonInstance">
      <summary>
            Creates the core instance of a button part.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NScrollBarElement.LayoutButtons">
      <summary>
            Updates the bounds of the children buttons.
            </summary>
    </member>
    <member name="M:Nevron.UI.NScrollBarElement.InitializeDefault">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.NScrollBarElement.ProcessTimerTick(Nevron.UI.NTimer)">
      <summary>
      </summary>
      <param name="timer">
      </param>
    </member>
    <member name="P:Nevron.UI.NScrollBarElement.ButtonSize">
      <summary>
            Gets the size for a button.
            </summary>
    </member>
    <member name="P:Nevron.UI.NScrollBarElement.FirstButton">
      <summary>
            Gets the first button. For a horizontal scrollbar this is the left one, for a vertical - the top.
            </summary>
    </member>
    <member name="P:Nevron.UI.NScrollBarElement.SecondButton">
      <summary>
            Gets the second button. For a horizontal scrollbar this is the right one, for a vertical - the bottom.
            </summary>
    </member>
    <member name="M:Nevron.UI.NHScrollBarElement.GetShaftBounds">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NHScrollBarElement.InitializeDefault">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.NHScrollBarElement.LayoutButtons">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.NHScrollBarElement.GetThumbLocation">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NHScrollBarElement.GetThumbSize">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NHScrollBarElement.ShouldSerializeButtonWidth">
      <summary>
            Determines whether the ButtonWidth member should be serialized by the designer.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.NHScrollBarElement.MinimumSize">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.NHScrollBarElement.ButtonSize">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.NHScrollBarElement.ButtonWidth">
      <summary>
            Gets/sets the width of a single button.
            </summary>
    </member>
    <member name="T:Nevron.UI.NMarqueeProgressElement">
      <summary>
            Represents a progress element with an indeterminate period.
            </summary>
    </member>
    <member name="T:Nevron.UI.NProgressElement">
      <summary>
            Summary description for NProgressElement.
            </summary>
    </member>
    <member name="M:Nevron.UI.NProgressElement.Increment(System.Int32)">
      <summary>
            Increments the current Value with the specified amount.
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:Nevron.UI.NProgressElement.PerformStep">
      <summary>
            Increments the current Value with the amount defined by the Step property.
            </summary>
    </member>
    <member name="M:Nevron.UI.NProgressElement.GetChunkBounds">
      <summary>
            Gets the bounds of the progress chunk.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NProgressElement.ShouldSerializeContent">
      <summary>
            Determines whether the Content property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NProgressElement.ShouldSerializeDisplayText">
      <summary>
            Determines whether the DisplayText property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NProgressElement.ShouldSerializeStep">
      <summary>
            Determines whether the Step property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.NProgressElement.DefaultText">
      <summary>
            Gets the default text to be displayed if DisplayText is true.
            </summary>
    </member>
    <member name="P:Nevron.UI.NProgressElement.Content">
      <summary>
            Gets the NLabelElement which represents the content of the progress element.
            </summary>
    </member>
    <member name="P:Nevron.UI.NProgressElement.DisplayText">
      <summary>
            Gets/sets a value indicating whether progress text will be displayed.
            If the Content's text is not specified default one will be applied.
            </summary>
    </member>
    <member name="P:Nevron.UI.NProgressElement.Step">
      <summary>
            Gets/sets the amount to increment the current value with when the Increment or PerformStep methods are called.
            </summary>
    </member>
    <member name="P:Nevron.UI.NProgressElement.DefaultDisplayText">
      <summary>
            Gets the default value for the DisplayText property.
            </summary>
    </member>
    <member name="P:Nevron.UI.NProgressElement.DefaultStep">
      <summary>
            Gets the default value for the Step property.
            </summary>
    </member>
    <member name="M:Nevron.UI.NMarqueeProgressElement.Start">
      <summary>
            Starts an infinite loop of waiting. On each timer tick the current position is incremented with the Step value.
            </summary>
    </member>
    <member name="M:Nevron.UI.NMarqueeProgressElement.End">
      <summary>
            Ends previously started waiting loop.
            </summary>
    </member>
    <member name="M:Nevron.UI.NMarqueeProgressElement.ShouldSerializeRepeatInterval">
      <summary>
            Determines whether the RepeatInterval property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NMarqueeProgressElement.ShouldSerializeMarqueeSizeMode">
      <summary>
            Determines whether the MarqueeSizeMode property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NMarqueeProgressElement.ShouldSerializeMarqueeChunkPercent">
      <summary>
            Determines whether the MarqueeChunkPercent property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NMarqueeProgressElement.ShouldSerializeMarqueeChunkLength">
      <summary>
            Determines whether the MarqueeChunkPercent property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.NMarqueeProgressElement.RepeatInterval">
      <summary>
            Gets/sets the interval used to automatically increment the current position of the waiting rectangle.
            </summary>
    </member>
    <member name="P:Nevron.UI.NMarqueeProgressElement.MarqueeSizeMode">
      <summary>
            Gets/sets the logic to be used when calculating the size of the marquee chunk.
            </summary>
    </member>
    <member name="P:Nevron.UI.NMarqueeProgressElement.MarqueeChunkPercent">
      <summary>
            Gets/sets the percent of the element's width(height) to be used when calculating the marquee chunk size. Valid when the MarqueeSizeMode is Relative.
            </summary>
    </member>
    <member name="P:Nevron.UI.NMarqueeProgressElement.MarqueeChunkLength">
      <summary>
            Gets/sets the fixed length to be used when calculating the chunk size. Valid when the MarqueeSizeMode is Fixed.
            </summary>
    </member>
    <member name="P:Nevron.UI.NMarqueeProgressElement.IsWaiting">
      <summary>
            Determines whether a wating loop is currently running.
            </summary>
    </member>
    <member name="P:Nevron.UI.NMarqueeProgressElement.DefaultRepeatInterval">
      <summary>
            Gets the default value for the RepeatInterval property.
            </summary>
    </member>
    <member name="P:Nevron.UI.NMarqueeProgressElement.DefaultMarqueeChunkLength">
      <summary>
            Gets the default value for the MarqueeSizeMode property.
            </summary>
    </member>
    <member name="P:Nevron.UI.NMarqueeProgressElement.DefaultMarqueeSizeMode">
      <summary>
            Gets the default value for the MarqueeSizeMode property.
            </summary>
    </member>
    <member name="P:Nevron.UI.NMarqueeProgressElement.DefaultMarqueeChunkPercent">
      <summary>
            Gets the default value for the MarqueeChunkPercent property.
            </summary>
    </member>
    <member name="P:Nevron.UI.NMarqueeProgressElement.DefaultStep">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.UI.NValueUpdateEventArgs">
      <summary>
            Summary description for EventArguments.
            </summary>
    </member>
    <member name="P:Nevron.UI.NValueUpdateEventArgs.Code">
      <summary>
            Gets the code of the request.
            </summary>
    </member>
    <member name="P:Nevron.UI.NValueUpdateEventArgs.NewValue">
      <summary>
            Gets/sets the new value to be set.
            </summary>
    </member>
    <member name="T:Nevron.UI.NSizeGripElement">
      <summary>
            Summary description for NSplitterElement.
            </summary>
    </member>
    <member name="T:Nevron.UI.NLabelElement">
      <summary>
            Represents a static element which may display image and/or text.
            </summary>
    </member>
    <member name="P:Nevron.UI.NLabelElement.CanFocus">
      <summary>
            Labels may not focus.
            </summary>
    </member>
    <member name="P:Nevron.UI.NLabelElement.IsMouseInteractive">
      <summary>
            The label is not mouse interactive.
            </summary>
    </member>
    <member name="T:Nevron.UI.NReversibleRenderer">
      <summary>
            Summary description for NReversibleRenderer.
            </summary>
    </member>
    <member name="T:Nevron.UI.NStreamConverter">
      <summary>
            Summary description for NStreamConverter.
            </summary>
    </member>
    <member name="T:Nevron.UI.NBrushHelper">
      <summary>
            Summary description for NBrushHelper.
            </summary>
    </member>
    <member name="T:Nevron.UI.GripperStyle">
      <summary>
            Specifies a style for a gripper.
            </summary>
    </member>
    <member name="T:Nevron.UI.SizingGripperMode">
      <summary>
            Specifies a style for a sizing gripper.
            </summary>
    </member>
    <member name="F:Nevron.UI.BorderStyle3D.Default">
      <summary>
            Let the control to decide which style is most appropriate.
            </summary>
    </member>
    <member name="T:Nevron.UI.BlendStyle">
      <summary>
            Specifies possible blendings when filling areas.
            </summary>
    </member>
    <member name="F:Nevron.UI.BlendStyle.Automatic">
      <summary>
            The blend style is determined depending on the current color scheme.
            </summary>
    </member>
    <member name="F:Nevron.UI.BlendStyle.None">
      <summary>
            No blend is applied.
            </summary>
    </member>
    <member name="F:Nevron.UI.BlendStyle.Aqua">
      <summary>
            Aqua blending.
            </summary>
    </member>
    <member name="F:Nevron.UI.BlendStyle.Glass">
      <summary>
            Glass blending.
            </summary>
    </member>
    <member name="F:Nevron.UI.BlendStyle.Tube">
      <summary>
            Tube-like blending
            </summary>
    </member>
    <member name="T:Nevron.UI.NUIAttribute">
      <summary>
            Summary description for NUIAttribute.
            </summary>
    </member>
    <member name="M:Nevron.UI.NUIAttribute.ClearEvents">
      <summary>
            Clears the list of all attached events.
            </summary>
    </member>
    <member name="T:Nevron.UI.NTextInfo">
      <summary>
            Summary description for NTextInfo.
            </summary>
    </member>
    <member name="T:Nevron.UI.NContentInfo">
      <summary>
            Summary description for NContentInfo.
            </summary>
    </member>
    <member name="P:Nevron.UI.NContentInfo.Align">
      <summary>
            Gets/sets the content alignment for the current image.
            </summary>
    </member>
    <member name="M:Nevron.UI.NTextInfo.UpdateReferences(Nevron.INReferenceProvider)">
      <summary>
      </summary>
      <param name="provider">
      </param>
    </member>
    <member name="P:Nevron.UI.NTextInfo.Text">
      <summary>
            Gets/sets the associated text.
            </summary>
    </member>
    <member name="P:Nevron.UI.NTextInfo.RenderOptions">
      <summary>
            Gets the object providing information for text rendering.
            </summary>
    </member>
    <member name="T:Nevron.SmartShapes.NMoveToRow">
      <summary>
            The NMoveToRow class represents a path command row, 
            which moves the plotter to the location identified by its (X, Y) cells.
            </summary>
    </member>
    <member name="T:Nevron.SmartShapes.NPathCommandRow">
      <summary>
            The NPathCommandRow class represents a formula row, 
            which is used for the formula definition of a single path command inside a formula figure.
            It serves as base class for more specific path commands.
            </summary>
    </member>
    <member name="T:Nevron.FormulaSheet.NFormulaRow">
      <summary>
            The NFormulaRow class represents a collection of cells inside the formula section rows collection. 
            </summary>
      <remarks>
            The rows of a formula section reside in an instance of NFormulaRowCollection class, which can be obtained 
            from the Rows property of the NFormulaSection class.
            </remarks>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaRow.Clone">
      <summary>
            Creates an identical copy of this object
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaRow.UpdateReferences(Nevron.INReferenceProvider)">
      <summary>
      </summary>
      <param name="provider">
      </param>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaRow.CreateNonSerializedObjects">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaRow.GetReferenceProvider">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaRow.ProvideReference(System.Type)">
      <summary>
      </summary>
      <param name="referenceType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaRow.Add(Nevron.FormulaSheet.NFormulaCell)">
      <summary>
            Adds the specified cell
            </summary>
      <param name="cell">cell to add</param>
      <returns>index of the cell in the collection</returns>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaRow.IndexOf(Nevron.FormulaSheet.NFormulaCell)">
      <summary>
            Determines the index of the cell in the collection
            </summary>
      <param name="cell">cell</param>
      <returns>index of the cell or -1 if it is not in the collection</returns>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaRow.Insert(System.Int32,Nevron.FormulaSheet.NFormulaCell)">
      <summary>
            Inserts a the specified cell at the specified index
            </summary>
      <param name="index">index</param>
      <param name="cell">cell</param>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaRow.Remove(Nevron.FormulaSheet.NFormulaCell)">
      <summary>
            Removes the specified cell
            </summary>
      <param name="cell">cell to remove</param>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaRow.Contains(Nevron.FormulaSheet.NFormulaCell)">
      <summary>
            Determines whether the specified cell is contained in this collection
            </summary>
      <param name="cell">cell</param>
      <returns>true if the cell is contained in this collection, otherwise false</returns>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaRow.InvalidateCache">
      <summary>
            Invalidates the cached values for all formula cells contained in the row
            </summary>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaRow.GetVerbs">
      <summary>
            Gets the verbs of this row
            </summary>
      <returns>verbs</returns>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaRow.CellsSealed">
      <summary>
            Determines whether the cells of this row are sealed.
            When the cells of the row are sealed you cannot add or remove cells from the row
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaRow.OnChanged">
      <summary>
            Called when the collection items have changed
            </summary>
      <remarks>
            This implementation calls the OnRowCellsChanged method of the sheet
            </remarks>
    </member>
    <member name="P:Nevron.FormulaSheet.NFormulaRow.Count">
      <summary>
            Gets the count of cells in the collection
            </summary>
    </member>
    <member name="P:Nevron.FormulaSheet.NFormulaRow.Section">
      <summary>
            Gets a reference to the formula section hosting this row
            </summary>
    </member>
    <member name="P:Nevron.FormulaSheet.NFormulaRow.Sheet">
      <summary>
            Gets a reference to the formula sheet hosting this row
            </summary>
    </member>
    <member name="M:Nevron.SmartShapes.NPathCommandRow.CreatePathCommand">
      <summary>
            Creates a path command, which represents this path command row type
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.SmartShapes.NPathCommandRow.GetControlPoint(System.Int32)">
      <summary>
            Gets the control point at the specified index
            </summary>
      <param name="index">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.SmartShapes.NPathCommandRow.SetControlPoint(System.Int32,Nevron.GraphicsCore.NPointF)">
      <summary>
            Sets the control point at the specified index
            </summary>
      <param name="index">
      </param>
      <param name="point">
      </param>
    </member>
    <member name="M:Nevron.SmartShapes.NPathCommandRow.CanConvertTo(Nevron.GraphicsCore.PathCommandType)">
      <summary>
            Queries whether this path command can be converted to the specified type
            </summary>
      <param name="type">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.SmartShapes.NPathCommandRow.ConvertTo(Nevron.GraphicsCore.PathCommandType)">
      <summary>
            Converts this path command row to a new command row with the specified type
            </summary>
      <param name="type">
      </param>
      <returns>new path command row if convertion succeeded, otherwise null</returns>
    </member>
    <member name="M:Nevron.SmartShapes.NPathCommandRow.GetVerbs">
      <summary>
            Overriden to add remove row, insert row and insert row after and change row type verbs
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.SmartShapes.NPathCommandRow.CellsSealed">
      <summary>
            Overriden to return true
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.SmartShapes.NPathCommandRow.X">
      <summary>
            Gets a reference to the X formula cell
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NPathCommandRow.Y">
      <summary>
            Gets a reference to the Y formula cell
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NPathCommandRow.PreviousRow">
      <summary>
            Gets a reference to the previous row in the figure section
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NPathCommandRow.Location">
      <summary>
            Gets/sets the vertex location, which this path command represents (in local coordinates)
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NPathCommandRow.Type">
      <summary>
            Gets the type of the path command row
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NPathCommandRow.ControlsCount">
      <summary>
            Gets the number of control points for the current path command type
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NPathCommandRow.ShapeSheet">
      <summary>
            Safely gets the path sheet
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NPathCommandRow.MiddlePoint">
      <summary>
            Gets the middle point bethween this row location and the previous row location
            </summary>
    </member>
    <member name="M:Nevron.SmartShapes.NMoveToRow.Clone">
      <summary>
            Creates an identical copy of this object
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.SmartShapes.NMoveToRow.CreatePathCommand">
      <summary>
            Creates a path command, which represents this path command row type
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.SmartShapes.NMoveToRow.Type">
      <summary>
            Overriden to return MoveTo
            </summary>
    </member>
    <member name="T:Nevron.NewGraphics.Pdf.l111Ill1.PdfStream">
      <summary>
            The PDF stream objects.
            </summary>
    </member>
    <member name="T:Nevron.NewGraphics.Pdf.l111Ill1.PdfStream.Keys">
      <summary>
            Common keys for all streams.
            </summary>
    </member>
    <member name="T:Nevron.NewGraphics.Pdf.l111Il11.Keys">
      <summary>
            Predefined keys of this dictionary.
            </summary>
    </member>
    <member name="T:Nevron.NewGraphics.Pdf.l111IlIl.FontSelector">
      <summary>
            A collection of information that uniquely identifies a particular PDF font.
            ... more docu... TODO
            Two PDF fonts are equal if and only if their font selector objects are equal.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.INHtmlMapElement">
      <summary>
            Implemented by elements that export Html image map contents.
            </summary>
    </member>
    <member name="T:Nevron.Grid.INGridData">
      <summary>
            Summary description for INGridData.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NFillStyle">
      <summary>
            The base of all filling types, which currently are: color, gradient, pattern, image and advanced gradient
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NAppearanceStyle">
      <summary>
            The base of all appearance styles.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NAppearanceStyle.GetHashCode">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NAppearanceStyle.CreatePreview(Nevron.GraphicsCore.NSize,Nevron.GraphicsCore.NStrokeStyle)">
      <summary>
            Generates a preview bitmap of this appearance style with the specified dimensions.
            </summary>
      <param name="size">
      </param>
      <param name="frameStrokeStyle">
      </param>
      <remarks>
            Note that the preview bitmap may actually differ from the visualized 
            appearance because some properties like material, mapping 
            and image filter properties are discarded. You can use this function to implement 
            thumbnail preview in your applications. It is recommended to 
            pass bitmaps with square dimensions in order achieve better quality.
            </remarks>
      <returns>
            The function returns a Bitmap object containing the appearance style preview.
            </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NAppearanceStyle.DrawPreview(Nevron.GraphicsCore.lIIIIllI,Nevron.GraphicsCore.NRectangleF,Nevron.GraphicsCore.NStrokeStyle)">
      <summary>
            Draws a preview of this appearance style at the specified device.
            </summary>
      <param name="device">
      </param>
      <param name="bounds">
      </param>
      <param name="frameStrokeStyle">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NAppearanceStyle.IsPrimitiveStyle">
      <summary>
            Returns true if this appearance style is a primitive appearance style (fill style, stroke style or shadow style).
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NAppearanceStyle.OnDrawPreviewBackground(Nevron.GraphicsCore.lIIIIllI,Nevron.GraphicsCore.NRectangleF)">
      <summary>
            Draws the background of the preview for this appearance style.
            </summary>
      <param name="device">
      </param>
      <param name="bounds">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NAppearanceStyle.GetBoundRect(Nevron.GraphicsCore.NRectangleF,Nevron.GraphicsCore.l1IlllI1)">
      <summary>
            Obtains the bounding rect containing the object when visualized with this appearance style.
            </summary>
      <param name="shapeRect">
      </param>
      <param name="lengthConverter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NAppearanceStyle.GetMarginRect(Nevron.GraphicsCore.NRectangleF,Nevron.GraphicsCore.l1IlllI1)">
      <summary>
            Obtains the margins of this appearance style.
            </summary>
      <param name="shapeRect">
      </param>
      <param name="lengthConverter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NAppearanceStyle.GetShapeInflate(Nevron.GraphicsCore.l1IlllI1)">
      <summary>
            Obtains the maximum inflate of the shape.
            </summary>
      <param name="lengthConverter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NAppearanceStyle.OnDrawPreview(Nevron.GraphicsCore.lIIIIllI,Nevron.GraphicsCore.NSizeF)">
      <summary>
            Draws the preview for this appearance style.
            </summary>
      <param name="device">
      </param>
      <param name="size">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NAppearanceStyle.GetDescription">
      <summary>
            Returns a short description of this style.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NAppearanceStyle.GetPaintableRect(Nevron.GraphicsCore.NRectangleF,Nevron.GraphicsCore.l1IlllI1)">
      <summary>
            Obtains the paintable rectangle associated with this appearance style
            </summary>
      <param name="shapeRect">
      </param>
      <param name="lengthConverter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.GraphicsCore.INInvertible">
      <summary>
            Implemented by objects that can have inverted representation
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.INInvertible.Invert">
      <summary>
            Returns the inverted representation of this object
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NFillStyle.Dispose">
      <summary>
            Disposes 
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NFillStyle.Invert">
      <summary>
            Returns the inverted fill style
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NFillStyle.OnStateChangingFromHistory(System.String)">
      <summary>
            Called when the history is about to modify the object state
            </summary>
      <param name="hint">history hint, which was passed when the state was recorded</param>
    </member>
    <member name="M:Nevron.GraphicsCore.NFillStyle.OnStateChangedFromHistory(System.String)">
      <summary>
            Called when the history has modified the object state
            </summary>
      <param name="hint">history hint, which was passed when the state was recorded</param>
    </member>
    <member name="M:Nevron.GraphicsCore.NFillStyle.GetAttributeByName(System.String)">
      <summary>
            Gets a child or descendant attribute by its name
            </summary>
      <param name="attributeName">child name or full attribute name</param>
      <returns>a reference to the attribute</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NFillStyle.GetAttributeName(Nevron.Dom.INAttribute)">
      <summary>
            Gets the name of the specified child attribute
            </summary>
      <param name="attribute">child attribute</param>
      <returns>name of the attribute</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NFillStyle.SetAttributeByName(System.String,Nevron.Dom.INAttribute)">
      <summary>
            Sets a child or descendant attribute by its name
            </summary>
      <param name="attributeName">
      </param>
      <param name="attribute">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NFillStyle.GetHashCode">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NFillStyle.HasImageFilters">
      <summary>
            Returns true if the fill style has associated image filters.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NFillStyle.GetBestSize">
      <summary>
            Returns the best visualization size for this fill style.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NFillStyle.SetTransparencyPercent(System.Single)">
      <summary>
            Sets the transparency percent of the diffuse and ambient material colors.
            </summary>
      <param name="percent">
      </param>
      <remarks>
            Transparency is discarded for the background object fill style. Note that transparent objects slow down the rendering.
            </remarks>
    </member>
    <member name="M:Nevron.GraphicsCore.NFillStyle.IsTranslucent">
      <summary>
            Returns true if this style is translucent.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NFillStyle.IsTransparent">
      <summary>
            Returns true if this style is transparent.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NFillStyle.GetPrimaryColor">
      <summary>
            Returns the primary color of this fill style.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NFillStyle.IsNativeStretchedInSvg">
      <summary>
            Returns true if this style is natively streteched by SVG.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NFillStyle.IsPrimitiveStyle">
      <summary>
            Returns true if this appearance style is a primitive appearance style (fill style, stroke style or shadow style).
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NFillStyle.GetPaintableRect(Nevron.GraphicsCore.NRectangleF,Nevron.GraphicsCore.l1IlllI1)">
      <summary>
            Obtains the paintable rectangle associated with this appearance style
            </summary>
      <param name="shapeRect">
      </param>
      <param name="lengthConverter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NFillStyle.Equals(System.Object)">
      <summary>
            Returns true if the objects are equal
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NFillStyle.Attributes">
      <summary>
            Gets the list of child attributes of this container
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NFillStyle.MaterialStyle">
      <summary>
            Gets/sets the material style of this fill style
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NFillStyle.ImageFiltersStyle">
      <summary>
            Obtains the image filters style associated with this fill style.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NFillStyle.FillStyleType">
      <summary>
            Gets the fill style type.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NFillStyle.Intensity">
      <summary>
            Returns the intensity of this fill style in the range [0, 255].
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NAdvancedGradientFillStyle">
      <summary>
            Represents an advanced gradient.
            </summary>
      <remarks>
            An advanced gradient consists of a background color and an arbitrary 
            number of color points with different shape and intensity.
            </remarks>
    </member>
    <member name="T:Nevron.GraphicsCore.NTextureFillStyle">
      <summary>
            The base class of all fill styles using a texture - gradient, image, hatch and advanced gradient. 
            </summary>
      <remarks>
            This class is not intended for direct usage - you should use fill styles deriving from it like NGradientFillStyle, NHatchFillStyle, NImageFillStyle and NAdvancedGradientFillStyle.
            </remarks>
    </member>
    <member name="M:Nevron.GraphicsCore.NTextureFillStyle.GetHashCode">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NTextureFillStyle.OnDrawPreview(Nevron.GraphicsCore.lIIIIllI,Nevron.GraphicsCore.NSizeF)">
      <summary>
            Draws a preview of the style on the specified device.
            </summary>
      <param name="device">
      </param>
      <param name="size">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NTextureFillStyle.IsNativeStretchedInSvg">
      <summary>
            Returns true if this style is natively streteched by SVG.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NTextureFillStyle.Equals(System.Object)">
      <summary>
            Returns true if the objects are equal
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NTextureFillStyle.OnAttributePropertyChanging(System.String,System.String,System.Object)">
      <summary>
            Called by child or descendants attributes when an attribute property is changing
            </summary>
      <param name="attributeFullName">full attribute name</param>
      <param name="propertyName">attribute property</param>
      <param name="newValue">new property value</param>
      <returns>true if the change is acceptable, otherwise false</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NTextureFillStyle.OnAttributePropertyChanged(System.String,System.String)">
      <summary>
            Called by child or descendants attributes when an attribute property has changed
            </summary>
      <param name="attributeFullName">full attribute name</param>
      <param name="propertyName">attribute property</param>
    </member>
    <member name="M:Nevron.GraphicsCore.NTextureFillStyle.OnAttributeChanged(System.String)">
      <summary>
            Called by child or descendants attributes when an attribute has changed
            </summary>
      <param name="attributeFullName">full attribute name</param>
    </member>
    <member name="M:Nevron.GraphicsCore.NAdvancedGradientFillStyle.GetHashCode">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NAdvancedGradientFillStyle.Init(Nevron.GraphicsCore.AdvancedGradientScheme,System.Int32)">
      <summary>
            Loads a predefined advanced gradient.
            </summary>
      <remarks>
            There are 24 types of predefined gradient styles each having 15 
            variants. When you load a predefined gradient all previous contents 
            of the advanced gradient description object will be lost.
            </remarks>
      <param name="nScheme">The scheme (style) of the gradient.</param>
      <param name="nVariant">The gradient subvariant within the style.</param>
    </member>
    <member name="M:Nevron.GraphicsCore.NAdvancedGradientFillStyle.SetTransparencyPercent(System.Single)">
      <summary>
            Sets the transparency percent of the diffuse and ambient material colors.
            </summary>
      <param name="percent">
      </param>
      <remarks>
            Transparency is discarded for the background object fill style. Note that transparent objects slow down the rendering.
            </remarks>
    </member>
    <member name="M:Nevron.GraphicsCore.NAdvancedGradientFillStyle.Equals(System.Object)">
      <summary>
            Returns true if the objects are equal
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NAdvancedGradientFillStyle.GetDescription">
      <summary>
            Returns a short description of this NFillStyle object.
            </summary>
      <remarks>
            The default implementation returns the color converted to string.
            </remarks>
    </member>
    <member name="M:Nevron.GraphicsCore.NAdvancedGradientFillStyle.IsTransparent">
      <summary>
            Returns true if this style is transparent.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NAdvancedGradientFillStyle.IsTranslucent">
      <summary>
            Returns true if this style is translucent.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NAdvancedGradientFillStyle.GetPrimaryColor">
      <summary>
            Returns the primary color of this fill style.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NAdvancedGradientFillStyle.IsNativeStretchedInSvg">
      <summary>
            Returns true if this style is natively streteched by SVG.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NAdvancedGradientFillStyle.Invert">
      <summary>
            Returns the inverted fill style
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NAdvancedGradientFillStyle.BackgroundColor">
      <summary>
            The background color of the gradient.
            </summary>
      <remarks>
            The background color merges with all the points in the Points collection.
            </remarks>
    </member>
    <member name="P:Nevron.GraphicsCore.NAdvancedGradientFillStyle.Points">
      <summary>
            An array of NAdvancedGradientPoint objects, which describe the advanced gradient.
            </summary>
      <remarks>
            Each object in the collection represents an advanced gradient point 
            with properties for shape, color, position, rotation and intensity.
            </remarks>
    </member>
    <member name="P:Nevron.GraphicsCore.NAdvancedGradientFillStyle.FillStyleType">
      <summary>
            Gets the fill style type.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NAdvancedGradientFillStyle.Intensity">
      <summary>
            Returns the intensity of this fill style in the range [0, 255].
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NScaleAnimation">
      <summary>
            Scales an object from one size to another.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NAnimation">
      <summary>
            Base class for all animations.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NAnimation.Clone">
      <summary>
            Creates an identical copy of this animation object.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NAnimation.CompareTo(System.Object)">
      <summary>
            Compares the animation styles in terms of apply order.
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NAnimation.CompareTo(Nevron.GraphicsCore.NAnimation)">
      <summary>
            Compares the animation styles in terms of apply order.
            </summary>
      <param name="other">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NAnimation.UpdateReferences(Nevron.INReferenceProvider)">
      <summary>
            Updates the references stored by the object
            </summary>
      <remarks>
            The object can query the specified provider for references 
            </remarks>
      <param name="provider">provider from which to obtain references</param>
    </member>
    <member name="M:Nevron.GraphicsCore.NAnimation.CreateNonSerializedObjects">
      <summary>
            Creates any non serialized objects, which the holder posseses
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NAnimation.GetReferenceProvider">
      <summary>
            Obtains the reference provider to which the object is currently attached
            </summary>
      <returns>reference provider</returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NAnimation.Duration">
      <summary>
            Gets/Sets the duration of the animation in seconds.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NAnimation.StartTime">
      <summary>
            Gets/Sets the start time of the animation (in seconds after the beginning of the clip).
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NAnimation.TimeRange">
      <summary>
            Gets the time range of the animation
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NAnimation.Priority">
      <summary>
            Determines the priority of the animation. Animations with higher priority
            are applied before animations with lower priority. By default set to 0.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NAnimation.AnimationType">
      <summary>
            Gets the type of this animation.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NScaleAnimation.Clone">
      <summary>
            Creates an identical copy of this animation object.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NScaleAnimation.AnchorX">
      <summary>
            Gets/Sets the scale X anchor. Must be in the range [0, 1]. By default set to 0.5
            which means the horizontal center.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NScaleAnimation.AnchorY">
      <summary>
            Gets/Sets the scale Y anchor. Must be in the range [0, 1]. By default set to 0.5
            which means the vertical center.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NScaleAnimation.StartScale">
      <summary>
            Gets/Sets the start scale factor. It has x and y component (value of 1 for x and y
            means no scale). By default set to (1, 1).
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NScaleAnimation.EndScale">
      <summary>
            Gets/Sets the final scale factor. It has x and y component (value of 1 for x and y
            means no scale). By default set to (1, 1).
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NScaleAnimation.AnimationType">
      <summary>
            Gets the type of this animation.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NAnimationsStyle">
      <summary>
            Collection containing the animations to apply on an object.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NAnimationsStyle.Equals(System.Object)">
      <summary>
            Determines whether the animations styles are equal.
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NAnimationsStyle.GetHashCode">
      <summary>
            Overriden because equals was overriden.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NAnimationsStyle.OnDrawPreview(Nevron.GraphicsCore.lIIIIllI,Nevron.GraphicsCore.NSizeF)">
      <summary>
      </summary>
      <param name="device">
      </param>
      <param name="size">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NAnimationsStyle.GetDescription">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NAnimationsStyle.GetPaintableRect(Nevron.GraphicsCore.NRectangleF,Nevron.GraphicsCore.l1IlllI1)">
      <summary>
      </summary>
      <param name="shapeRect">
      </param>
      <param name="lengthConverter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NAnimationsStyle.AddAnimation(Nevron.GraphicsCore.NAnimation)">
      <summary>
            Adds a new animation to this animations style.
            </summary>
      <param name="animation">The animation to add.</param>
    </member>
    <member name="P:Nevron.GraphicsCore.NAnimationsStyle.AnimationBoundsMode">
      <summary>
            Gets or sets the animation bounds mode
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NAnimationsStyle.AnimationBounds">
      <summary>
            Gets/Sets the bounds of the animated object. If not set, the bounds are
            calculated based on the animated shapes.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NRootPercentageRelativeUnit">
      <summary>
            Represents the root percentage relative measurement unit
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NRelativeUnit">
      <summary>
            Serves as base class for all units in the Relative measurement system
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NMeasurementUnit">
      <summary>
            A base class for all real world measurement units, which adopts a specific 
            measurement system and transforms it to GDI+ compatible measures.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NMeasurementUnit.Clone">
      <summary>
            Creates an identical copy of this objects
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NMeasurementUnit.ToString">
      <summary>
            Converts this measurement unit to string. 
            </summary>
      <returns>
      </returns>
      <remarks>
            Calling this function is identical to calling the Name property of the measurement unit.
            </remarks>
    </member>
    <member name="M:Nevron.GraphicsCore.NMeasurementUnit.Equals(System.Object)">
      <summary>
            Determines if two measurement units are equal.
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NMeasurementUnit.GetHashCode">
      <summary>
            Overriden because Equals was overriden
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NMeasurementUnit.ConvertXValueToPixels(Nevron.GraphicsCore.NMeasurementUnitConverter)">
      <summary>
            Converts this measurement unit to its equivalent in pixels along the X direction.
            </summary>
      <param name="converter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NMeasurementUnit.ConvertYValueToPixels(Nevron.GraphicsCore.NMeasurementUnitConverter)">
      <summary>
            Converts this measurement unit to its equivalent in pixels along the Y direction.
            </summary>
      <param name="converter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NMeasurementUnit.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Serializes this measurement unit.
            </summary>
      <param name="info">
      </param>
      <param name="context">
      </param>
    </member>
    <member name="P:Nevron.GraphicsCore.NMeasurementUnit.MeasurementSystem">
      <summary>
            Obtains the measurement system this unit belongs to.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NMeasurementUnit.UnitType">
      <summary>
            Gets the measurement unit type
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NMeasurementUnit.ScaleToInch">
      <summary>
            The scale to inch of this measurement unit.
            </summary>
      <remarks>
            Only absolute measurement units have scale to inch ratio. Device, Relative and Transform measurement units return 0.
            </remarks>
    </member>
    <member name="P:Nevron.GraphicsCore.NMeasurementUnit.DefaultValueFormat">
      <summary>
            The default value format of this measurement unit.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NMeasurementUnit.Abbreviation">
      <summary>
            The abbreviation of this measurement unit.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NMeasurementUnit.Name">
      <summary>
            The name of this measurement unit.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NRelativeUnit.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Serializes this measurement unit.
            </summary>
      <param name="info">
      </param>
      <param name="context">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NRelativeUnit.GetFromEnum(Nevron.GraphicsCore.RelativeUnit)">
      <summary>
            Returns the NRelativeUnit object corresponding to the relative unit enum value
            </summary>
      <param name="relativeUnit">
      </param>
      <returns>
      </returns>
    </member>
    <member name="F:Nevron.GraphicsCore.NRelativeUnit.ParentPercentage">
      <summary>
            Parent percentange
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NRelativeUnit.RootPercentage">
      <summary>
            Root percentange
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NRelativeUnit.Name">
      <summary>
            The name of this relative unit
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NRelativeUnit.DefaultValueFormat">
      <summary>
            The default value format of this measurement unit.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NRelativeUnit.RelativeUnit">
      <summary>
            Gets the relative unit type the object.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NRelativeUnit.UnitType">
      <summary>
            The measurement unit type.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NRelativeUnit.ScaleToInch">
      <summary>
            The scale to inch of this measurement unit.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NRootPercentageRelativeUnit.ConvertXValueToPixels(Nevron.GraphicsCore.NMeasurementUnitConverter)">
      <summary>
            Converts this measurement unit to its equivalent in pixels along the X direction.
            </summary>
      <param name="converter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRootPercentageRelativeUnit.ConvertYValueToPixels(Nevron.GraphicsCore.NMeasurementUnitConverter)">
      <summary>
            Converts this measurement unit to its equivalent in pixels along the Y direction.
            </summary>
      <param name="converter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NRootPercentageRelativeUnit.Abbreviation">
      <summary>
            The abbreviation of this measurement unit.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NRootPercentageRelativeUnit.RelativeUnit">
      <summary>
            Gets the english unit of the object.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NMeterMetricUnit">
      <summary>
            Represents the meter metric measurement unit.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NMetricUnit">
      <summary>
            Serves as base class for all units in the Metric measurement system
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NMetricUnit.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Serializes this measurement unit.
            </summary>
      <param name="info">
      </param>
      <param name="context">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NMetricUnit.GetMetricUnitScaleToMilimeter(Nevron.GraphicsCore.MetricUnit)">
      <summary>
            Gets the scaling of the specified metric unit to milimeters
            </summary>
      <param name="unit">unit for which to obtain scaling</param>
      <returns>scaling to milimeters</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NMetricUnit.GetFromEnum(Nevron.GraphicsCore.MetricUnit)">
      <summary>
            Returns the NMetricUnit object corresponding to the metric enum value
            </summary>
      <param name="metricUnit">
      </param>
      <returns>
      </returns>
    </member>
    <member name="F:Nevron.GraphicsCore.NMetricUnit.Micrometer">
      <summary>
            Micrometer unit
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NMetricUnit.Millimeter">
      <summary>
            Millimeter unit
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NMetricUnit.Centimeter">
      <summary>
            Centimeter unit
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NMetricUnit.Decimiter">
      <summary>
            Decimeter unit
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NMetricUnit.Meter">
      <summary>
            Meter unit
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NMetricUnit.Kilometer">
      <summary>
            Kilometer unit
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NMetricUnit.DefaultValueFormat">
      <summary>
            The default value format of this measurement unit.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NMetricUnit.Name">
      <summary>
            The name of this metric unit.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NMetricUnit.UnitType">
      <summary>
            The measurement unit type.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NMetricUnit.MetricUnit">
      <summary>
            Gets the metric unit with which the object is initialized
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NMeterMetricUnit.ConvertXValueToPixels(Nevron.GraphicsCore.NMeasurementUnitConverter)">
      <summary>
            Converts this measurement unit to its equivalent in pixels along the X direction.
            </summary>
      <param name="converter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NMeterMetricUnit.ConvertYValueToPixels(Nevron.GraphicsCore.NMeasurementUnitConverter)">
      <summary>
            Converts this measurement unit to its equivalent in pixels along the Y direction.
            </summary>
      <param name="converter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NMeterMetricUnit.Abbreviation">
      <summary>
            The abbreviation of this measurement unit.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NMeterMetricUnit.MetricUnit">
      <summary>
            Gets the english unit of the object.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NMeterMetricUnit.ScaleToInch">
      <summary>
            The scale to inch of this measurement unit.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NLinkEnglishUnit">
      <summary>
            Represents the english link measurement unit.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NEnglishUnit">
      <summary>
            Serves as base class for all units in the British And American (English) measurement system
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NEnglishUnit.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Serializes this measurement unit.
            </summary>
      <param name="info">
      </param>
      <param name="context">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NEnglishUnit.GetEnlishUnitScaleToInch(Nevron.GraphicsCore.EnglishUnit)">
      <summary>
      </summary>
      <param name="unit">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NEnglishUnit.GetFromEnum(Nevron.GraphicsCore.EnglishUnit)">
      <summary>
            Returns the NEnglishUnit object corresponding to the english unit enum value
            </summary>
      <param name="englishUnit">
      </param>
      <returns>
      </returns>
    </member>
    <member name="F:Nevron.GraphicsCore.NEnglishUnit.League">
      <summary>
            Leage
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NEnglishUnit.Mile">
      <summary>
            Mile
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NEnglishUnit.Furlong">
      <summary>
            Furlong
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NEnglishUnit.Chain">
      <summary>
            Chain
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NEnglishUnit.Rod">
      <summary>
            Rod
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NEnglishUnit.Yard">
      <summary>
            Yard
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NEnglishUnit.Foot">
      <summary>
            Foot
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NEnglishUnit.Link">
      <summary>
            Link
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NEnglishUnit.Hand">
      <summary>
            Hand
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NEnglishUnit.Inch">
      <summary>
            Inch
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NEnglishUnit.Line">
      <summary>
            Line
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NEnglishUnit.Pica">
      <summary>
            Pica
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NEnglishUnit.Name">
      <summary>
            The name of this english unit.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NEnglishUnit.EnglishUnit">
      <summary>
            Gets the english unit of the object.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NEnglishUnit.UnitType">
      <summary>
            The measurement unit type.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NEnglishUnit.ScaleToInch">
      <summary>
            The scale to inch of this measurement unit.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NEnglishUnit.DefaultValueFormat">
      <summary>
            The default value format of this measurement unit.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NLinkEnglishUnit.ConvertXValueToPixels(Nevron.GraphicsCore.NMeasurementUnitConverter)">
      <summary>
            Converts this measurement unit to its equivalent in pixels along the X direction.
            </summary>
      <param name="converter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NLinkEnglishUnit.ConvertYValueToPixels(Nevron.GraphicsCore.NMeasurementUnitConverter)">
      <summary>
            Converts this measurement unit to its equivalent in pixels along the Y direction.
            </summary>
      <param name="converter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NLinkEnglishUnit.Abbreviation">
      <summary>
            The abbreviation of this measurement unit.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NLinkEnglishUnit.EnglishUnit">
      <summary>
            Gets the english unit of the object.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NLinkEnglishUnit.ScaleToInch">
      <summary>
            The scale to inch of this measurement unit.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NMarginsL">
      <summary>
            Represents margins, defined by four lengths
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NMarginsL.Equals(System.Object)">
      <summary>
            Overriden to compare the margins lengths
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NMarginsL.ToString">
      <summary>
            Obtains the string representation of this margins.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NMarginsL.Parse(System.String@,Nevron.GraphicsCore.NMeasurementSystemManager)">
      <summary>
            Converts the string representation of a margins structure to its NMarginsL equivalent.
            </summary>
      <param name="s">
      </param>
      <param name="measurementSystemManager">
      </param>
      <returns>
      </returns>
    </member>
    <member name="F:Nevron.GraphicsCore.NMarginsL.Left">
      <summary>
            Left margin.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NMarginsL.Top">
      <summary>
            Top margin.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NMarginsL.Right">
      <summary>
            Right margin.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NMarginsL.Bottom">
      <summary>
            Bottom margin.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NMarginsL.Empty">
      <summary>
            The empty (0, 0, 0, 0) margins.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NLength">
      <summary>
            Represents a length, defined as a value and measurement unit pair
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NLength.ToString">
      <summary>
            Returns the string representation of this NLength object.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NLength.Equals(System.Object)">
      <summary>
            Determines whether the lengths are equal.
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NLength.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NLength.Parse(System.String@,Nevron.GraphicsCore.NMeasurementSystemManager)">
      <summary>
            Converts the string representation of a number to its NLength equivalent.
            </summary>
      <param name="s">
      </param>
      <param name="measurementSystemManager">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NLength.CompareTo(System.Object)">
      <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NLength.Clone">
      <summary>
            Creates an exact replica of this NLength object
            </summary>
      <returns>
      </returns>
    </member>
    <member name="F:Nevron.GraphicsCore.NLength.Value">
      <summary>
            The length value.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NLength.MeasurementUnit">
      <summary>
            The length measurement unit.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NLength.Negate">
      <summary>
            Returns the negative value of this NLength
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NLength.Empty">
      <summary>
            The empty (0) length.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Text.INStyleChangeObserver">
      <summary>
            Implemented by objects that monitor style changes
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NImageFormatProvider">
      <summary>
            The NImageFormatProvider class represents a format provider, which serves 
            as base class for all image format providers
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NFormatProvider">
      <summary>
            The NFormatProvider class serves as base class for all types of format providers
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.INFormatProvider">
      <summary>
            Implemented by all format providers
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.INFormatProvider.ProvidedMimeTypes">
      <summary>
            Obtains an array of the provided mime types
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NFormatProvider.ProvidedMimeTypes">
      <summary>
            Must override to return the provided mime types
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.INImageFormatProvider">
      <summary>
            Implemented by image format providers
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.INImageFormatProvider.ProvideImage(Nevron.GraphicsCore.NSize,Nevron.GraphicsCore.NResolution,Nevron.GraphicsCore.INImageFormat)">
      <summary>
            Provides an image with the specified dimensions, resolution and format
            </summary>
      <param name="dimensions">
      </param>
      <param name="resolution">
      </param>
      <param name="imageFormat">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.INImageFormatProvider.ProvideImage(Nevron.GraphicsCore.NSize,Nevron.GraphicsCore.NRectangle,Nevron.GraphicsCore.NResolution,Nevron.GraphicsCore.INImageFormat)">
      <summary>
            Provides an image with the specified dimensions, resolution and format
            </summary>
      <param name="dimensions">
      </param>
      <param name="viewport">
      </param>
      <param name="resolution">
      </param>
      <param name="imageFormat">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NImageFormatProvider.ProvideImage(Nevron.GraphicsCore.NSize,Nevron.GraphicsCore.NResolution,Nevron.GraphicsCore.INImageFormat)">
      <summary>
            Provides an image with the specifies dimensions and format.
            </summary>
      <param name="dimensions">
      </param>
      <param name="resolution">
      </param>
      <param name="imageFormat">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NImageFormatProvider.ProvideImage(Nevron.GraphicsCore.NSize,Nevron.GraphicsCore.NRectangle,Nevron.GraphicsCore.NResolution,Nevron.GraphicsCore.INImageFormat)">
      <summary>
            Provides an image with the specifies dimensions and format.
            </summary>
      <param name="dimensions">
      </param>
      <param name="viewport">
      </param>
      <param name="resolution">
      </param>
      <param name="imageFormat">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.GraphicsCore.NSvgImage">
      <summary>
            The NSvgImage class represents a svg image
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NImage">
      <summary>
            The NImage class represents an image and serves as base class for all types of images
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.INImage">
      <summary>
            Implemented by all images
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.INImage.SaveToFile(System.String,Nevron.GraphicsCore.INFileFormat)">
      <summary>
            Saves the image to a file.
            </summary>
      <param name="file">
      </param>
      <param name="format">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.INImage.SaveToStream(System.IO.Stream,Nevron.GraphicsCore.INFileFormat)">
      <summary>
            Saves the image to the specified stream.
            </summary>
      <param name="stream">
      </param>
      <param name="format">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.INImage.CopyToClipboard">
      <summary>
            Places the image on the clipboard.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.INImage.Size">
      <summary>
            Returns the size of the image in pixels.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NImage.SaveToFile(System.String,Nevron.GraphicsCore.INFileFormat)">
      <summary>
            Obtains an image generated from the image renderer and saves it to the specified file.
            </summary>
      <param name="file">
      </param>
      <param name="format">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NImage.SaveToStream(System.IO.Stream,Nevron.GraphicsCore.INFileFormat)">
      <summary>
            Obtains an image generated from the image renderer and saves it to the specified file.
            </summary>
      <param name="stream">
      </param>
      <param name="format">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NImage.CopyToClipboard">
      <summary>
            Places the image generated on the clipboard.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NImage.Dispose">
      <summary>
            Releases all resources used by the object
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NImage.Size">
      <summary>
            Returns the size of the image in pixels.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.INSvgImage">
      <summary>
            Implemented by SVG images
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.INSvgImage.Svg">
      <summary>
            Gets/sets the SVG string
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NSvgImage.SaveToFile(System.String,Nevron.GraphicsCore.INFileFormat)">
      <summary>
            Saves the SVG image to the specified file.
            </summary>
      <param name="fileName">
      </param>
      <param name="fileFormat">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NSvgImage.SaveToStream(System.IO.Stream,Nevron.GraphicsCore.INFileFormat)">
      <summary>
            Saves the SVG to the specified stream.
            </summary>
      <param name="stream">
      </param>
      <param name="fileFormat">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NSvgImage.CopyToClipboard">
      <summary>
            Places the SVG content in the clipboard.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NSvgImage.Svg">
      <summary>
            Gets/sets the SVG string
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NSvgImage.Size">
      <summary>
            Returns the size of the image in pixels.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NSvgImageFormat">
      <summary>
            Describes a SVG image response returned to the client browser.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NImageFormat">
      <summary>
            All response types in have an associated object deriving from NImageFormat.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.INImageFormat">
      <summary>
            Base image format class.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.INFileFormat">
      <summary>
            Base file format interface.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.INFileFormat.GetMimeType">
      <summary>
            Returns the mime type of the image.
            </summary>
      <remarks>
            This method is overridden  in the derived classes.
            </remarks>
    </member>
    <member name="M:Nevron.GraphicsCore.INFileFormat.GetExtension">
      <summary>
            Returns the file extension of the image
            </summary>
      <remarks>
            This method is overridden  in the derived classes.
            </remarks>
    </member>
    <member name="M:Nevron.GraphicsCore.INFileFormat.GetName">
      <summary>
            Obtains the name of this image format
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.INImageFormat.HtmlTextWriterTag">
      <summary>
            The HTML tag corresponding to this image.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NImageFormat.GetMimeType">
      <summary>
            Returns the mime type of the image.
            </summary>
      <remarks>
            This method is overridden  in the derived classes.
            </remarks>
    </member>
    <member name="M:Nevron.GraphicsCore.NImageFormat.GetExtension">
      <summary>
            Returns the file extension of the image
            </summary>
      <remarks>
            This method is overridden  in the derived classes.
            </remarks>
    </member>
    <member name="M:Nevron.GraphicsCore.NImageFormat.GetName">
      <summary>
            Obtains the name of this image format
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NImageFormat.ToString">
      <summary>
            Overriden to return the image format name
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NImageFormat.CreateImageFormat(System.String)">
      <summary>
            Creates an image format for the specified mime type
            </summary>
      <param name="mimeType">mime type</param>
      <returns>corresponding image format</returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NImageFormat.HtmlTextWriterTag">
      <summary>
            The HTML tag corresponding to this image.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.INSvgImageFormat">
      <summary>
            Implemented by SVG image formats.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.INSvgImageFormat.Compress">
      <summary>
            Whether this is .svg or .svgz format.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.INSvgImageFormat.EmbedImagesInSvg">
      <summary>
            When set to true all images referenced by the Svg document will be embedded using base64 encoding.
            </summary>
      <remarks>
            The encoding format can be altered by using the EmbeddedImageFormat property. The default encoding is PNG.
            </remarks>
    </member>
    <member name="P:Nevron.GraphicsCore.INSvgImageFormat.EmbeddedImageFormat">
      <summary>
            Describes the format used to encode embedded images.
            </summary>
      <remarks>
            This property takes effect only if EmbedImagesInSvg is set to true.
            </remarks>
    </member>
    <member name="P:Nevron.GraphicsCore.INSvgImageFormat.AddSvgHeader">
      <summary>
            Whether or not to add Svg header to the generated document.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.INSvgImageFormat.EnableInteractivity">
      <summary>
            When set to true the component will generate an automatic ID for each scene element.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.INSvgImageFormat.CustomScript">
      <summary>
            The script to be injected in the Svg.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.INSvgImageFormat.Attributes">
      <summary>
            The attributes assciated with the Svg tag.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NSvgImageFormat.MimeType">
      <summary>
            Mime type for svg+xml images
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NSvgImageFormat.GetMimeType">
      <summary>
            Returns the mime type of the image.
            </summary>
      <remarks>
            This method is overridden in the derived classes.
            </remarks>
    </member>
    <member name="M:Nevron.GraphicsCore.NSvgImageFormat.GetExtension">
      <summary>
            Returns the file extension of the image
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NSvgImageFormat.GetName">
      <summary>
            Obtains the name of this image format
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NSvgImageFormat.ToString">
      <summary>
            Obtains the String representation of this instance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NSvgImageFormat.CultureInfo">
      <summary>
            Gets/sets the culture info used to encode the generated SVG
            </summary>
      <remarks>
            By default this value is set to invariant culture
            </remarks>
    </member>
    <member name="P:Nevron.GraphicsCore.NSvgImageFormat.Compress">
      <summary>
            Whether the svg is in compressed (SVGZ format) format.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NSvgImageFormat.EmbedImagesInSvg">
      <summary>
            When set to true all images referenced by the Svg document will be embedded using base64 encoding.
            </summary>
      <remarks>
            The encoding format can be altered by using the EmbeddedImageFormat property. The default encoding is PNG.
            </remarks>
    </member>
    <member name="P:Nevron.GraphicsCore.NSvgImageFormat.EmbeddedImageFormat">
      <summary>
            Describes the format used to encode embedded images.
            </summary>
      <remarks>
            This property takes effect only if EmbedImagesInSvg is set to true.
            </remarks>
    </member>
    <member name="P:Nevron.GraphicsCore.NSvgImageFormat.AddSvgHeader">
      <summary>
            Whether or not to add Svg header to the generated document.
            </summary>
      <remarks>
            By default the value of this property is set to true but you may wish to turn it off if you intend to embed the Svg code in another Svg document.
            </remarks>
    </member>
    <member name="P:Nevron.GraphicsCore.NSvgImageFormat.EnableInteractivity">
      <summary>
            When set to true the component will generate an automatic ID for each scene element.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NSvgImageFormat.CustomScript">
      <summary>
            The script to be injected in the Svg.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NSvgImageFormat.Attributes">
      <summary>
            The attributes assciated with the Svg tag.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NSvgImageFormat.HtmlTextWriterTag">
      <summary>
            The HTML tag corresponding to this image.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NEmfImageFormat">
      <summary>
            Represents the EMF image format.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NEmfImageFormat.MimeType">
      <summary>
            Mime type constant for emf images
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NEmfImageFormat.GetMimeType">
      <summary>
            Returns the mime type - "image/bmp".
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NEmfImageFormat.GetExtension">
      <summary>
            Returns the file extension - ".bmp".
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NEmfImageFormat.GetName">
      <summary>
            Obtains the name of this image format
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NEmfImageFormat.HtmlTextWriterTag">
      <summary>
            The HTML tag corresponding to this image.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.INHitTestable">
      <summary>
            Implemented by objects that are hit testable.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.INHitTestable.HitTest(Nevron.GraphicsCore.NPointF)">
      <summary>
            Performs a hit test.
            </summary>
      <param name="pt">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.GraphicsCore.Text.NTextService">
      <summary>
            The base of all text document services.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Text.NStyle">
      <summary>
            The NStyle class controls the appearance of stylable text elements
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NStyle.Contains(Nevron.GraphicsCore.StyleEntry)">
      <summary>
            Determines whether the style contains the specified entry
            </summary>
      <param name="styleEntry">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NStyle.Clear(Nevron.GraphicsCore.StyleEntry)">
      <summary>
            Clears the specified style entry from the style.
            </summary>
      <param name="styleEntry">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NStyle.IsEmpty">
      <summary>
            Determines whether the Style is empty (all styles are equal to null)
            </summary>
      <returns>true if the style is empty, otherwise false</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NStyle.SafeEquals(Nevron.GraphicsCore.Text.NStyle,Nevron.GraphicsCore.Text.NStyle)">
      <summary>
            Safely compares if the two styles are equal
            </summary>
      <param name="style1">
      </param>
      <param name="style2">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NStyle.Clone">
      <summary>
            Creates an identical copy of this object
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.Text.NStyle.ListStyle">
      <summary>
            Gets/sets the stroke style
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.Text.NStyle.StrokeStyle">
      <summary>
            Gets/sets the stroke style
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.Text.NStyle.ShadowStyle">
      <summary>
            Gets/sets the shadow style
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.Text.NStyle.FillStyle">
      <summary>
            Gets/sets the fill style
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.Text.NStyle.BackgroundFillStyle">
      <summary>
            Gets/sets the background fill style
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.Text.NStyle.FontStyleEx">
      <summary>
            Gets/sets the font style
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.Text.NStyle.FontName">
      <summary>
            Gets/sets the font name
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.Text.NStyle.FontSize">
      <summary>
            Gets/sets the font size
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.Text.NStyle.InteractivityStyle">
      <summary>
            Gets/sets the interactivity style
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.Text.NStyle.LineTrimStyle">
      <summary>
            Specifies how to trim text lines.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.Text.NStyle.ParagraphAlignment">
      <summary>
            The horizontal alignment of the paragraph.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.Text.NStyle.LineSpacing">
      <summary>
            Gets/sets the line spacing.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.Text.NStyle.LeftIndent">
      <summary>
            Gets/sets the left paragraph indent.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.Text.NStyle.RightIndent">
      <summary>
            Gets/sets the left paragraph indent.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.Text.NStyle.TopSpacing">
      <summary>
            Gets/sets the top paragraph indent.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.Text.NStyle.BottomSpacing">
      <summary>
            Gets/sets the top paragraph indent.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.Text.NStyle.FirstLineIndent">
      <summary>
            Gets/sets the first paragraph line indent.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.Text.NStyle.BaselinePosition">
      <summary>
            Gets sets the base line position of the element
            </summary>
      <remarks>
            O indicated normal baseline position. Values greater than zero indicate superscript level, 
            values lower than zero indicate subscript level.
            </remarks>
    </member>
    <member name="T:Nevron.GraphicsCore.Shapes.NEdgePolygon">
      <summary>
            Summary description for NEdgePolygon.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Shapes.N2DShape">
      <summary>
            Summary description for NShape2D.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Shapes.IN2DShape">
      <summary>
            Summary description for IN2DVectorImage.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.Shapes.N2DShape.Clone">
      <summary>
            Creates an exact copy of this object
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.Shapes.NCustomShape.Clone">
      <summary>
            Creates an exact copy of this object
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.Shapes.NCustomShape.PreferredSize">
      <summary>
            Gets the preferred size of the shape
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Shapes.NGraphicsNode">
      <summary>
            Summary description for NGraphicsNode.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.Shapes.NGraphicsNode.Paint(Nevron.GraphicsCore.Shapes.NGraphicsPaintContext)">
      <summary>
            Paints this node.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.Shapes.NGraphicsNode.Visible">
      <summary>
            Constrols the visibility of this graphics node
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Shapes.NStringFormatStyleCommandNode">
      <summary>
            Summary description for NStringFormatStyleCommandNode.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Shapes.NGraphicsCommandNode">
      <summary>
            Summary description for NGraphicsCommandNode.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Shapes.NCompositeGraphicsNode">
      <summary>
            Summary description for NCompositeShapeNode.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.INDevice">
      <summary>
            Summary description for INDevice.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.INLengthConverterProvider">
      <summary>
            Summary description for INLengthConverterProvider.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.INDevice.ActivateInteractivityStyle(Nevron.GraphicsCore.NInteractivityStyle)">
      <summary>
            Activates the specified interactivity style
            </summary>
      <param name="interactivityStyle">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.INDevice.ActivateElement(Nevron.Dom.INElement)">
      <summary>
            Activates an element.
            </summary>
      <param name="element">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.INDevice.ActivateAtomicElement(Nevron.Dom.INAtomicElement)">
      <summary>
            Activates an atomic element.
            </summary>
      <param name="atomicElement">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.INDevice.ActivateAtom(System.Int32)">
      <summary>
            Activates an atom.
            </summary>
      <param name="atomId">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.INDevice.DisposeUnusedObjects">
      <summary>
            Disposes all graphics objects not used in the last paint
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.INDevice.RequiresInteractivity">
      <summary>
            Returns true if the device requires interactivity
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.INDevice.Resolution">
      <summary>
            Gets the resolution of this Device object.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.INDevice.RenderTechnology">
      <summary>
            Obtains the rendering technology of the device
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.INDevice.RenderSurface">
      <summary>
            Returns the render surface of the device
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.INDevice.Palette">
      <summary>
            Gets / sets the device color palette
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.INDevice.ColorTransform">
      <summary>
            Gets / sets the color transform object associated with this device
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Ria.Flash.l11IlI1I.BytecodeHolder">
      <summary>
            inner class for bytecode block collection
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Ria.Flash.l11IlI1I.BytecodeEnumerator">
      <summary>
            inner class, swf bytecode block enumerator for 'foreach' loops
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NPathFigureList">
      <summary>
            Represents a list of NPathFigure objects
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NPathFigureList.Add(Nevron.GraphicsCore.NPathFigure)">
      <summary>
            Adds the figure to the end of the collection
            </summary>
      <param name="value">
      </param>
      <returns>The zero-based index at which the new element is inserted</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NPathFigureList.AddRange(Nevron.GraphicsCore.NPathFigure[])">
      <summary>
            Copies the elements of a NPathFigure array to the end of the collection.
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NPathFigureList.AddRange(Nevron.GraphicsCore.NPathFigureList)">
      <summary>
            Copies the elements of a single list to the end of the collection.
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NPathFigureList.Contains(Nevron.GraphicsCore.NPathFigure)">
      <summary>
            Determines whether the specified figure is in the collection
            </summary>
      <param name="value">
      </param>
      <returns>if value is found in the collection otherwise, false</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NPathFigureList.CopyTo(Nevron.GraphicsCore.NPathFigure[],System.Int32)">
      <summary>
            Copies the entire collection values to a one-dimensional array of NPathFigures, starting at the specified index of the target array.
            </summary>
      <param name="array">The one-dimensional array of NPathFigures that is the destination of the elements copied from collection. The Array must have zero-based indexing</param>
      <param name="index">The zero-based index in array at which copying begins.</param>
    </member>
    <member name="M:Nevron.GraphicsCore.NPathFigureList.IndexOf(Nevron.GraphicsCore.NPathFigure)">
      <summary>
            Searches for the specified figure and returns the zero-based index of the first occurrence within the collection
            </summary>
      <param name="value">the NPathFigure value to locate</param>
      <returns>index of the int value</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NPathFigureList.Insert(System.Int32,Nevron.GraphicsCore.NPathFigure)">
      <summary>
            Inserts the figure at the specified index
            </summary>
      <param name="index">index at which value is inserted</param>
      <param name="value">NPathFigure value</param>
    </member>
    <member name="M:Nevron.GraphicsCore.NPathFigureList.Remove(Nevron.GraphicsCore.NPathFigure)">
      <summary>
            Removes the first occurrence of a specific NPathFigure value from the collection
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="T:Nevron.GraphicsCore.NLineToCommand">
      <summary>
            The NLineToCommand class represents a command, 
            which draws a line from the previus command location to this command location
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NPathCommand">
      <summary>
            The NPathCommand abstract class serves as a base class for all path commands, 
            which can reside in a path figure
            </summary>
      <remarks>
            Each path command has primary X and Y coordinate (i.e. location). 
            The location of a command is used as a start point for the geometry primitive represented by the next command in the figure. 
            In this way the primitives are efficiently chained.
            </remarks>
    </member>
    <member name="M:Nevron.GraphicsCore.NPathCommand.Translate(System.Single,System.Single)">
      <summary>
            Translates this command with the specified amounts
            </summary>
      <remarks>
            This implementation translates the command location
            </remarks>
      <param name="dx">
      </param>
      <param name="dy">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NPathCommand.Scale(System.Single,System.Single,Nevron.GraphicsCore.NPointF)">
      <summary>
            Scales this command around the specified pin with the specified scale factors
            </summary>
      <param name="scaleX">x scale</param>
      <param name="scaleY">y scale</param>
      <param name="pin">pin</param>
    </member>
    <member name="M:Nevron.GraphicsCore.NPathCommand.AccumulateBounds(Nevron.GraphicsCore.NRange2DF@)">
      <summary>
            Accumulates the bounds of this command in the specified range
            </summary>
      <param name="range">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NPathCommand.CreatePrimitive(Nevron.GraphicsCore.NPathCommand)">
      <summary>
            Obtains the geometry primitive which represents this path command
            </summary>
      <remarks>
            This implementation returns null
            </remarks>
    </member>
    <member name="M:Nevron.GraphicsCore.NPathCommand.AddToGraphicsPath(System.Drawing.Drawing2D.GraphicsPath,Nevron.GraphicsCore.NPathCommand)">
      <summary>
            Must override to add the command to the specified graphics path
            </summary>
      <param name="path">
      </param>
      <param name="prevCommand">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NPathCommand.Clone">
      <summary>
            Must override to clone the command
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NPathCommand.Type">
      <summary>
            Must override to get the command type
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NPathCommand.X">
      <summary>
            Gets/sets the X coordinate of the command location
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NPathCommand.Y">
      <summary>
            Gets/sets the Y coordinate of the command location
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NPathCommand.Location">
      <summary>
            Gets/sets the location of the command primary point
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NPathCommand.Tag">
      <summary>
            Custom object associated with the path command
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NLineToCommand.Clone">
      <summary>
            Overriden to create a cloned move to command
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NLineToCommand.AddToGraphicsPath(System.Drawing.Drawing2D.GraphicsPath,Nevron.GraphicsCore.NPathCommand)">
      <summary>
            Overriden to draw a line from the previous command location to this command location
            </summary>
      <param name="path">
      </param>
      <param name="prevCommand">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NLineToCommand.CreatePrimitive(Nevron.GraphicsCore.NPathCommand)">
      <summary>
            Overriden to return an instance of the NLineSegmentF primitive
            </summary>
      <param name="prevCommand">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NLineToCommand.Type">
      <summary>
            Overriden to return LineTo
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NVector2DD">
      <summary>
            The NVector2DD struct represents a 2D vector with double value
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NVector2DD.RotateAt(System.Double,System.Drawing.PointF)">
      <summary>
            Rotates the vector with the specified angle arount the specified anchor 
            </summary>
      <param name="angle">angle (in radians)</param>
      <param name="anchor">anchor point</param>
    </member>
    <member name="M:Nevron.GraphicsCore.NVector2DD.Normalize">
      <summary>
            Makes this vector the unit vector (e.g. its length becomes 1)
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NVector2DD.Equals(System.Object)">
      <summary>
            Returns true if the objects are equal.
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NVector2DD.GetHashCode">
      <summary>
            Returns the hash code of this instance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="F:Nevron.GraphicsCore.NVector2DD.X">
      <summary>
            x coordinate
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NVector2DD.Y">
      <summary>
            y coordinate
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NVector2DD.Length">
      <summary>
            Gets the vector lenght
            </summary>
    </member>
    <member name="T:Nevron.FormulaSheet.NFormulaSheet">
      <summary>
            The NFormulaSheet class is a container of formula sections, 
            which is used for the formula definition of an object. 
            The NFormulaSheet class serves as base class for more specialized formula sheets.
            </summary>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaSheet.Clone">
      <summary>
            Creates an identical copy of this object
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaSheet.UpdateReferences(Nevron.INReferenceProvider)">
      <summary>
      </summary>
      <param name="provider">
      </param>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaSheet.CreateNonSerializedObjects">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaSheet.GetReferenceProvider">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaSheet.ProvideReference(System.Type)">
      <summary>
      </summary>
      <param name="referenceType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaSheet.CreateEvaluator">
      <summary>
            Creates a formula sheet evaluator, 
            which can be used for the evaluation of the formulas cells residing in this sheet.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaSheet.ResolveCellReference(System.String)">
      <summary>
            Gets a reference to the cell with the specified name (e.g. resolves a cell reference)
            </summary>
      <param name="cellName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaSheet.BeginUpdate">
      <summary>
            Marks the beginning of a formula sheet update - pair it with EndUpdate
            </summary>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaSheet.EndUpdate">
      <summary>
            Marks the end of a formula sheet initialization - pair it with BeginUpdate
            </summary>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaSheet.InvalidateCache(System.Boolean)">
      <summary>
            Invalidates the cache of the sheet and all its sections
            </summary>
      <param name="discardLock">whether to discard the cache invalidation lock</param>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaSheet.OnSectionsChanged">
      <summary>
            Called by the section collection, when its content has changed
            </summary>
      <remarks>
            Fires the SectionsChanged event. Then calls the OnChanged method
            </remarks>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaSheet.OnSectionRowsChanged(Nevron.FormulaSheet.NFormulaSection)">
      <summary>
            Called by sections, when their rows collection has changed
            </summary>
      <remarks>
            Fires the SectionRowsChanged event. Then calls the OnChanged method
            </remarks>
      <param name="section">section whose rows has changed</param>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaSheet.OnSectionCellsChanged(Nevron.FormulaSheet.NFormulaSection)">
      <summary>
            Called by sections, when their cells dictionary has changed
            </summary>
      <remarks>
            Fires the SectionCellsChanged event. Then calls the OnChanged method
            </remarks>
      <param name="section">section whose cells has changed</param>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaSheet.OnRowCellsChanged(Nevron.FormulaSheet.NFormulaRow)">
      <summary>
            Called by rows, when their cells content has changed
            </summary>
      <remarks>
            Fires the RowCellsChanged event. Then calls the OnChanged method
            </remarks>
      <param name="row">row whose cells has changed</param>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaSheet.OnCellChanged(Nevron.FormulaSheet.NFormulaCell)">
      <summary>
            Called by cells, when a property of the specified cell has changed
            </summary>
      <remarks>
            Fires the CellChanged event. Then calls the OnChanged method
            </remarks>
      <param name="cell">cell whose property has changed</param>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaSheet.OnCellsChanged">
      <summary>
            Called by optimized methods, when multiple cell values have been changed in a single update  
            </summary>
      <remarks>
            Fires the CellsChanged event. Then calls the OnChanged method
            </remarks>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaSheet.UpdateReferencesTreeView(System.Windows.Forms.TreeView,Nevron.FormulaSheet.NFormulaCell)">
      <summary>
            Updates the specified tree view with the references, which can be used for the specified formula cell
            </summary>
      <param name="treeView">
      </param>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaSheet.GetVerbs">
      <summary>
            Gets the verbs of this sheet
            </summary>
      <returns>verbs</returns>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaSheet.OnChanged">
      <summary>
            Called when the sheet has changed
            </summary>
      <remarks>
            Invalidates the sheet. Then fires the Changed event
            </remarks>
    </member>
    <member name="E:Nevron.FormulaSheet.NFormulaSheet.SectionsChanged">
      <summary>
            Fired when the sections maintained by the sheet have changed (the sender argument is a reference to the sheet)
            </summary>
    </member>
    <member name="E:Nevron.FormulaSheet.NFormulaSheet.SectionRowsChanged">
      <summary>
            Fired when the rows of a section in this sheet have changed (the sender argument is a reference to the section)
            </summary>
    </member>
    <member name="E:Nevron.FormulaSheet.NFormulaSheet.SectionCellsChanged">
      <summary>
            Fired when the cells of a section in this sheet have changed (the sender argument is a reference to the section)
            </summary>
    </member>
    <member name="E:Nevron.FormulaSheet.NFormulaSheet.RowCellsChanged">
      <summary>
            Fired when the cells of a row in a section of this sheet have changed (the sender argument is a reference to the row)
            </summary>
    </member>
    <member name="E:Nevron.FormulaSheet.NFormulaSheet.CellChanged">
      <summary>
            Fired when a cell has changed (the sender argument is a reference to the cell)
            </summary>
    </member>
    <member name="E:Nevron.FormulaSheet.NFormulaSheet.CellsChanged">
      <summary>
            Fired when a multiple cells from the sheet have changed (the sender argument is a reference to the sheet)
            </summary>
    </member>
    <member name="E:Nevron.FormulaSheet.NFormulaSheet.Changed">
      <summary>
            Fired when the sheet has changed (the sender argument is a reference to the sheet)
            </summary>
    </member>
    <member name="P:Nevron.FormulaSheet.NFormulaSheet.Sections">
      <summary>
            Gets a reference to the sections in this sheet
            </summary>
    </member>
    <member name="P:Nevron.FormulaSheet.NFormulaSheet.Container">
      <summary>
            Gets a reference to formula sheet container to which this formula sheet is connected.
            The formula sheet will query the container for external formula sheet references.
            </summary>
    </member>
    <member name="P:Nevron.FormulaSheet.NFormulaSheet.LockEvents">
      <summary>
            Locks/unlocks the events firing of the sheet
            </summary>
    </member>
    <member name="P:Nevron.FormulaSheet.NFormulaSheet.LockCacheInvalidation">
      <summary>
            Locks/unlocks the events firing of the sheet
            </summary>
    </member>
    <member name="T:Nevron.Editors.NStyleEditorUC">
      <summary>
            Summary description for NStyleEditorUC.
            </summary>
    </member>
    <member name="M:Nevron.Editors.NStyleEditorUC.Dispose(System.Boolean)">
      <summary> 
            Clean up any resources being used.
            </summary>
    </member>
    <member name="P:Nevron.Editors.NStyleEditorUC.Style">
      <summary>
            Gets/sets the style to edit.
            </summary>
    </member>
    <member name="E:Nevron.Editors.NStyleEditorUC.StyleChanged">
      <summary>
            Occurs when the edited style has changed
            </summary>
    </member>
    <member name="T:Nevron.Editors.NStrokeStylePreviewRenderer">
      <summary>
            Summary description for NStrokeStylePreviewRenderer.
            </summary>
    </member>
    <member name="T:Nevron.Editors.NStylePreviewRenderer">
      <summary>
            Summary description for NStylePreviewRenderer.
            </summary>
    </member>
    <member name="P:Nevron.Editors.NStylePreviewRenderer.Style">
      <summary>
            Controls the background style of the preview.
            </summary>
    </member>
    <member name="P:Nevron.Editors.NStylePreviewRenderer.PreviewMargins">
      <summary>
            Sets the margins of the rect displaying the fill style.
            </summary>
    </member>
    <member name="P:Nevron.Editors.NStrokeStylePreviewRenderer.Style">
      <summary>
            Sets the NShadowStyle used to create the preview.
            </summary>
    </member>
    <member name="T:Nevron.Editors.NMaterialStyleEditor">
      <summary>
            Summary description for NMaterialStyleEditor.
            </summary>
    </member>
    <member name="M:Nevron.Editors.NMaterialStyleEditor.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
    </member>
    <member name="T:Nevron.Editors.NStylePreviewEditor">
      <summary>
            Summary description for NStylePreviewEditor.
            </summary>
    </member>
    <member name="T:Nevron.Editors.INAttributeEditor">
      <summary>
            Summary description for INStyleEditor.
            </summary>
    </member>
    <member name="M:Nevron.Editors.NStylePreviewEditor.PrepareToEditType(System.Type)">
      <summary>
            Prepares the editor to edit attributes from the specified type.
            </summary>
      <param name="attributeType">
      </param>
    </member>
    <member name="M:Nevron.Editors.NStylePreviewEditor.SetAutomaticAttribute(Nevron.Dom.INAttribute)">
      <summary>
            Sets the style editor in automatic mode.
            </summary>
      <param name="style">
      </param>
    </member>
    <member name="M:Nevron.Editors.NStylePreviewEditor.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
    </member>
    <member name="P:Nevron.Editors.NStylePreviewEditor.Attribute">
      <summary>
            Gets/sets the attribute edited by the editor.
            </summary>
    </member>
    <member name="P:Nevron.Editors.NStylePreviewEditor.AllowAutomatic">
      <summary>
            Gets/sets the style to edit.
            </summary>
    </member>
    <member name="T:Nevron.Editors.NLengthTypeEditor">
      <summary>
            Length type editor.
            </summary>
    </member>
    <member name="T:Nevron.Editors.NDataGridColorColumnStyle">
      <summary>
            Color selection DataGrid column style
            </summary>
      <remarks>
            This data grid control can be used for the visual editing of columns of type Color
            </remarks>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NDataGridControlColumnStyle">
      <summary>
            Base class for all columns styles which require editing control
            </summary>
      <remarks>
            Implements basic column style functionality which requires an editing control.
            </remarks>
    </member>
    <member name="T:Nevron.UI.WinForm.NFileDialogFilters">
      <summary>
            Summary description for NFileDialogFilters.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NTreeNodeCollection">
      <summary>
            A collection of NTreeNode instances.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NLightUIItemCollection">
      <summary>
            Represents a strongly-typed collection of NLightUIElement instances.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NLightUIItemCollection.Contains(Nevron.UI.WinForm.Controls.NLightUIItem)">
      <summary>
            Determines whether the specified item is contained in the collection.
            </summary>
      <param name="item">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NLightUIItemCollection.IndexOf(Nevron.UI.WinForm.Controls.NLightUIItem)">
      <summary>
            Gets the zero-based index of the specified item.
            </summary>
      <param name="item">
      </param>
      <returns>The index of the item if it is contained, -1 otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NLightUIItemCollection.GetItemsByCheckState(Nevron.UI.WinForm.Controls.ItemCheckState)">
      <summary>
            Gets all items that have the specified check state.
            </summary>
      <param name="state">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NLightUIItemCollection.GetItemsByCheckState(Nevron.UI.WinForm.Controls.ItemCheckState,System.Boolean)">
      <summary>
            Gets all items that have the specified check state.
            </summary>
      <param name="state">
      </param>
      <param name="nested">True to perform recursive search in all items that are INLightUIItemContainer, false otherwise.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NLightUIItemCollection.Sort(System.Boolean,System.Boolean)">
      <summary>
            Sorts the collection.
            </summary>
      <param name="ascending">True to sort ascending, false otherwise.</param>
      <param name="recursive">True to perform recursive sorting (including all INLIghtUIItemContainer child instances), false otherwise.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NLightUIItemCollection.Sort(Nevron.UI.WinForm.Controls.NLightUIItemComparer,System.Boolean)">
      <summary>
            Sorts the collection using the specified comparer.
            </summary>
      <param name="comparer">The IComparer instance used to sort the collection.</param>
      <param name="recursive">True to perform recursive sorting (including all INLIghtUIItemContainer child instances), false otherwise.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NLightUIItemCollection.GetChildrenCount">
      <summary>
            Gets the total count of all children, including nested ones.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItemCollection.Owner">
      <summary>
            Gets INLightUIItemContainer instance that owns this collection.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItemCollection.FirstVisible">
      <summary>
            Gets the first visible item in the collection.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItemCollection.LastVisible">
      <summary>
            Gets the last visible item in the collection.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItemCollection.VisibleCount">
      <summary>
            Gets the count of currently visible items.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItemCollection.VisibleFilter">
      <summary>
            Gets/sets the INFilter instance which controls visibility of items.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeNodeCollection.Add(Nevron.UI.WinForm.Controls.NTreeNode)">
      <summary>
            Adds the specified node to the collection.
            </summary>
      <param name="node">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeNodeCollection.AddRange(Nevron.UI.WinForm.Controls.NTreeNode[])">
      <summary>
            Adds range of nodes to the collection.
            </summary>
      <param name="nodes">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeNodeCollection.Insert(System.Int32,Nevron.UI.WinForm.Controls.NTreeNode)">
      <summary>
            Inserts the specified node at the specified position in the collection.
            </summary>
      <param name="index">
      </param>
      <param name="node">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeNodeCollection.Remove(Nevron.UI.WinForm.Controls.NTreeNode)">
      <summary>
            Removes the specified node from the collection.
            </summary>
      <param name="node">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeNodeCollection.GetNodesByText(System.String,System.Boolean)">
      <summary>
            Collects all nodes with the specified text.
            </summary>
      <param name="text">The text to search for.</param>
      <param name="nested">True to recursively iterate through nested nodes, false to examine the current collection only.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeNodeCollection.GetNodesByName(System.String,System.Boolean)">
      <summary>
            Collects all nodes with the specified name.
            </summary>
      <param name="name">The text to search for.</param>
      <param name="nested">True to recursively iterate through nested nodes, false to examine the current collection only.</param>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NTreeNode">
      <summary>
            Represents an item (node) in a NTreeViewEx control.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NLightUIItemContainer">
      <summary>
            Represents a NLightUIItem which may contain other items as children.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NLightUIItem">
      <summary>
            Represents a light ui element such as tree-node, list item, etc.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NLightUIItem.PrePaint(Nevron.UI.WinForm.Controls.NLightUIPaintContext)">
      <summary>
            Paints the item using the specified context.
            </summary>
      <param name="context">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NLightUIItem.Measure(Nevron.UI.WinForm.Controls.NLightUIPaintContext)">
      <summary>
            Measures the item using the specified context.
            </summary>
      <param name="context">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NLightUIItem.HitTest(Nevron.GraphicsCore.NPoint)">
      <summary>
            Determines whether the specified point is within item's bounds.
            </summary>
      <param name="point">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NLightUIItem.GetBackgroundRect(Nevron.UI.WinForm.Controls.NLightUIPaintContext)">
      <summary>
            Gets the rectangle where background should be painted.
            </summary>
      <param name="context">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NLightUIItem.SetVisualState(Nevron.UI.WinForm.Controls.NLightUIItemVisualState,Nevron.UI.WinForm.Controls.ItemVisualState)">
      <summary>
            Assigns local visual state to this item. By default the current host's ones are used.
            </summary>
      <param name="instance">
      </param>
      <param name="state">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NLightUIItem.NextSibling(System.Boolean)">
      <summary>
            Gets the next sibling of this item.
            </summary>
      <param name="visibleOnly">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NLightUIItem.PreviousSibling(System.Boolean)">
      <summary>
            Gets the previous sibling of this item.
            </summary>
      <param name="visibleOnly">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NLightUIItem.MouseHitTest(Nevron.GraphicsCore.NPoint)">
      <summary>
            Gets the mouse hit code which specifies the item's parts which contains the specified point.
            </summary>
      <param name="pt">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItem.ContextMenu">
      <summary>
            Gets/sets the NContextMenu instance to be displayed when the user has right-clicked on the item.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItem.MouseInteractive">
      <summary>
            Determines whether the element will be mouse interactive and change its state upon different mouse events.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItem.Visible">
      <summary>
            Gets/sets the element's local Visible value. This may differ from the IsVisible value.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItem.Selected">
      <summary>
            Gets/sets a value indicating whether the item is selected.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItem.IsVisible">
      <summary>
            Determines whether the element is visible in the current UI context.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItem.Enabled">
      <summary>
            Gets/sets the element's local Enabled value. This may differ from the IsEnabled value.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItem.IsEnabled">
      <summary>
            Determines whether the element is enabled in the current UI context.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItem.IsFocused">
      <summary>
            Determines whether the item is currently focused.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItem.IsEditing">
      <summary>
            Determines whether the item is currently in edit mode.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItem.Padding">
      <summary>
            Gets/sets the internal padding of the item.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItem.Margins">
      <summary>
            Gets/sets the outer padding of the item.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItem.Selectable">
      <summary>
            Determines whether the item may be selected.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItem.Image">
      <summary>
            Gets/sets the image to be displayed by the item.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItem.ImageIndex">
      <summary>
            Gets/sets the image index from the host's image list.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItem.ImageKey">
      <summary>
            Gets/sets the image key from the host's image list.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItem.ImageSize">
      <summary>
            Gets/sets the size of rectangle where image is displayed.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItem.Text">
      <summary>
            Gets/sets the text displayed by the item.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItem.Name">
      <summary>
            Gets/sets the optional name of the item.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItem.ImageTextRelation">
      <summary>
            Gets/sets the relation between the image and text displayed by the item.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItem.ImageTextSpacing">
      <summary>
            Gets/sets the spacing between the image and text.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItem.ImageAlign">
      <summary>
            Gets/sets the alignment of the image when ImageTextRelation is None.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItem.TextAlign">
      <summary>
            Gets/sets the alignment of the text when ImageTextRelation is None.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItem.CheckAlign">
      <summary>
            Gets/sets the alignment of the check box (if any) within node's bounding rect.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItem.CheckSpacing">
      <summary>
            Gets/sets the spacing between the check box and other content.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItem.CheckStyle">
      <summary>
            Gets/sets the local check style for the item.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItem.CheckState">
      <summary>
            Gets/sets the check state of the item.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItem.BackgroundMode">
      <summary>
            Gets/sets the local background mode for the item.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItem.TextProcessMode">
      <summary>
            Gets/sets the mode of text processing.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItem.TooltipInfo">
      <summary>
            Gets the NTooltipInfo instance which describes the tooltip for this item.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItem.ModelBounds">
      <summary>
            Gets the model bounds of the item.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItem.ViewBounds">
      <summary>
            Gets the view bounds of the item. This includes any host transformations like scroll position.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItem.PreferredSize">
      <summary>
            Gets the preferred item's size.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItem.TextSize">
      <summary>
            Gets the size of the item's text.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItem.VisualState">
      <summary>
            Gets the visual state of the item.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItem.Cursor">
      <summary>
            Gets/sets the cursor to be applied when mouse hovers over this item.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItem.Parent">
      <summary>
            Gets the current parent of the element.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItem.RootParent">
      <summary>
            Gets the topmost (root) parent of the element.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItem.Depth">
      <summary>
            Gets the depth of this item in the visual tree.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItem.Host">
      <summary>
            Gets the NItemsControl instance where this item resides.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItem.Index">
      <summary>
            Gets the zero-based index of this item in its parent item collection.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItem.VisibleIndex">
      <summary>
            Gets the zero-based index of this item in its owner collection's visible items.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItem.OwnerCollection">
      <summary>
            Gets the NLightUIItemCollection which owns this item.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItem.IsHiddenByFilter">
      <summary>
            Determines whether the item is hidden by an applied filter.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItem.DefaultPadding">
      <summary>
            Gets the default padding of the item.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItem.DefaultMargins">
      <summary>
            Gets the default margins of the item.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItem.DefaultText">
      <summary>
            Gets the default text of the item.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItem.DefaultImageSize">
      <summary>
            Gets the default image size of the item.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItem.DefaultImageTextRelation">
      <summary>
            Gets the default image size of the item.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItem.DefaultImageTextSpacing">
      <summary>
            Gets the default text of the item.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItem.DefaultCheckSpacing">
      <summary>
            Gets the default value of the CheckSpacing property.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NLightUIItemContainer.IsDescendant(Nevron.UI.WinForm.Controls.NLightUIItem)">
      <summary>
            Determines whether the specified item is contained by this container or by any of its children.
            </summary>
      <param name="item">The item to examine.</param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItemContainer.HasVisibleChildren">
      <summary>
            Determines whether the container currently contains visible child items.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItemContainer.CloneChildren">
      <summary>
            Determines whether the container will clone all its subtree of items upon cloning.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeNode.Expand">
      <summary>
            Expands the node. This will make all its children visible.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeNode.Collapse">
      <summary>
            Collapses the node. This will make all its child nodes hidden.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeNode.ExpandAll">
      <summary>
            Expands the node and its children.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeNode.CollapseAll">
      <summary>
            Collapses the node and its children.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeNode.ToggleState">
      <summary>
            Toggles the Expand/Collapse state.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeNode.GetSelectedDescendants">
      <summary>
            Returns an array of all the selected descendants.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeNode.PostPaint(Nevron.UI.WinForm.Controls.NLightUIPaintContext)">
      <summary>
      </summary>
      <param name="context">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeNode.GetBackgroundRect(Nevron.UI.WinForm.Controls.NLightUIPaintContext)">
      <summary>
      </summary>
      <param name="context">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeNode.ToString">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeNode.ResetPreferredHeight">
      <summary>
            Resets the preferred height of the node.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeNode.PaintLines(Nevron.UI.WinForm.Controls.NTreeViewExPaintContext)">
      <summary>
      </summary>
      <param name="context">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeNode.PaintBoxes(Nevron.UI.WinForm.Controls.NTreeViewExPaintContext)">
      <summary>
      </summary>
      <param name="context">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeNode.PaintCheckBox(Nevron.UI.WinForm.Controls.NLightUIPaintContext)">
      <summary>
      </summary>
      <param name="context">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeNode.PaintImage(Nevron.UI.WinForm.Controls.NLightUIPaintContext)">
      <summary>
      </summary>
      <param name="context">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeNode.PaintText(Nevron.UI.WinForm.Controls.NLightUIPaintContext)">
      <summary>
      </summary>
      <param name="context">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeNode.PaintFocusCues(Nevron.UI.WinForm.Controls.NLightUIPaintContext)">
      <summary>
      </summary>
      <param name="context">
      </param>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeNode.ExpandCollapseMode">
      <summary>
            Gets/sets the expand/collapse behavior mode of the node.
            When Automatic the behavior will depend on the children nodes.
            When Always the node will fire NodeExpanding, NodeExpanded notifications regardless of its children collection.
            This mode is useful for building dynamic/virtual tree-view.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeNode.Nodes">
      <summary>
            Gets the collection of child nodes.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeNode.IsExpanded">
      <summary>
            Determines whether the node is in expanded state.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeNode.CanExpand">
      <summary>
            Determines whether the node may be expanded.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeNode.PreferredHeight">
      <summary>
            Gets/sets the preferred height for the node.
            The actual node height will be the maximum of the measured and preferred height.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeNode.TreeView">
      <summary>
            Gets the NTreeViewEx instance where this node resides.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeNode.BoxBounds">
      <summary>
            Gets the bounding rect of the Expand/Collapse box.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeNode.IndicatorBounds">
      <summary>
            Gets the bounding rectangle of the corresponding indicator.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeNode.BoxMouseState">
      <summary>
            Gets the mouse state of the expand/collapse box
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeNode.IsVisible">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeNode.IndicatorImage">
      <summary>
            Gets/sets the custom image to be displayed on the corresponding indicator.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeNode.CommonIndicator">
      <summary>
            Gets/sets the common indicator for the node.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeNode.IsEven">
      <summary>
            Determines whether the node is treated as "Even Row" when painting the owner tree
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeNode.HasVisibleChildren">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeNode.DefaultPreferredHeight">
      <summary>
            Gets the default preferred height of the node.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NControlRenderer">
      <summary>
            Represents an abstract renderer of any Control instance.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NUIRenderer">
      <summary>
            Base class for all renderers. Provides basic methods as well as shared GDI objects.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NUIRenderer.Finalize">
      <summary>
            Releases all resources used by the renderer.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NUIRenderer.Dispose(System.Boolean)">
      <summary>
            Releases all resources used by the renderer.
            </summary>
      <param name="disposing">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NUIRenderer.OnPaletteChanged(Nevron.UI.WinForm.Controls.NPalette,Nevron.UI.WinForm.Controls.PaletteChangeEventArgs)">
      <summary>
            Handles the change in the renderer's palette.
            </summary>
      <param name="Palette">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NUIRenderer.CreatePaletteCore">
      <summary>
            Creates the core instance of the palette.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NUIRenderer.CreateGDIObjects">
      <summary>
            Creates the cached GDI object used by the renderer.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NUIRenderer.FillDefault(System.Drawing.Graphics,System.Drawing.Rectangle,System.Single)">
      <summary>
            Fills the provided rect with a gradient.
            </summary>
      <param name="g">
      </param>
      <param name="r">
      </param>
      <param name="angle">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NUIRenderer.FillHover(System.Drawing.Graphics,System.Drawing.Rectangle,System.Single)">
      <summary>
      </summary>
      <param name="g">
      </param>
      <param name="r">
      </param>
      <param name="angle">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NUIRenderer.FillCheck(System.Drawing.Graphics,System.Drawing.Rectangle,System.Single)">
      <summary>
      </summary>
      <param name="g">
      </param>
      <param name="r">
      </param>
      <param name="angle">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NUIRenderer.FillPush(System.Drawing.Graphics,System.Drawing.Rectangle,System.Single)">
      <summary>
      </summary>
      <param name="g">
      </param>
      <param name="r">
      </param>
      <param name="angle">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NUIRenderer.Fill(System.Drawing.Graphics,System.Drawing.Rectangle,System.Single,System.Drawing.Color,System.Drawing.Color,Nevron.UI.BlendStyle,Nevron.UI.WinForm.Controls.RoundingStyle)">
      <summary>
      </summary>
      <param name="g">
      </param>
      <param name="r">
      </param>
      <param name="angle">
      </param>
      <param name="c1">
      </param>
      <param name="c2">
      </param>
      <param name="blend">
      </param>
      <param name="roundingStyle">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NUIRenderer.Draw(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color,Nevron.UI.WinForm.Controls.RoundingStyle,System.Boolean)">
      <summary>
      </summary>
      <param name="g">
      </param>
      <param name="r">
      </param>
      <param name="c1">
      </param>
      <param name="c2">
      </param>
      <param name="roundingStyle">
      </param>
      <param name="secondary">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NUIRenderer.Dispose">
      <summary>
            Disposes all the resources used by the renderer.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NUIRenderer.DrawImage(System.Drawing.Graphics,System.Drawing.Image,System.Drawing.Rectangle,System.Boolean,System.Boolean)">
      <summary>
            Draws an image on a specified graphics surface and within the specified bounds
            </summary>
      <param name="g">The graphics to draw onto</param>
      <param name="img">The image to draw</param>
      <param name="r">The rectangle into which to draw the image</param>
      <param name="disabled">True to draw the image disabled, otherwise false</param>
      <param name="fade">True to perform image fading, false otherwise</param>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NUIRenderer.Palette">
      <summary>
            Gets the current Palette used by the renderer.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NUIRenderer.Pen">
      <summary>
            Gets the cashed Pen object used to draw lines.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NUIRenderer.Brush">
      <summary>
            Gets the cahsed SolidBrush object used to fill surfaces.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NUIRenderer.StringFormat">
      <summary>
            Gets the cashed StringFormat object.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NUIRenderer.SymbolFont">
      <summary>
            Gets the cashed Font object used to draw glyphs.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NControlRenderer.Parent">
      <summary>
            Gets/sets the control this renderer is attached to.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.INScrollableControl">
      <summary>
            Specifies a generic window which may have a WS_HSCROLL and/or WM_VSCROLL styles applied.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.INScrollableControl.BaseWindowProc(System.Windows.Forms.Message@)">
      <summary>
            Calls the base window prucedure.
            </summary>
      <param name="m">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.INScrollableControl.UpdateScrollBars">
      <summary>
            Forces scrollbar update - it includes measuring and re-painting.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.INScrollableControl.HScroll">
      <summary>
            Gets a value whether the horizontal scrollbar is present.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.INScrollableControl.VScroll">
      <summary>
            Gets a value whether the vertical scrollbar is present.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.INScrollableControl.UseDefaultScroll">
      <summary>
            Gets a value whether the control itself implements a scrolling loop (like list-boxes, tree-views, etc).
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.INScrollableControl.WindowRect">
      <summary>
            Gets the entire window rectangle, including non-client space (if any).
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.INScrollableControl.ScrollBarRenderer">
      <summary>
            Gets/sets the renderer which handles scrollbar painting.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.INScrollableControl.UseCustomScrollBars">
      <summary>
            Determines whether to use custom scrollbars or use the default windows ones (better performance).
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPropertyPage.Description">
      <summary>
            Gets/sets the description for the property page.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NColorTable">
      <summary>
            Represents a table of colors.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NColorTable.Control">
      <summary>
            Gets/sets the control background color.
            Note that setting custom value will automatically change the current colorscheme to custom.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NColorTable.ControlLight">
      <summary>
            Gets/sets the begin background color.
            Note that setting custom value will automatically change the current colorscheme to custom.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NColorTable.ControlDark">
      <summary>
            Gets/sets the end background color.
            Note that setting custom value will automatically change the current colorscheme to custom.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NColorTable.Highlight">
      <summary>
            Gets/sets the highlight color.
            Note that setting custom value will automatically change the current colorscheme to custom.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NColorTable.HighlightLight">
      <summary>
            Gets/sets the begin hover(select) color.
            Note that setting custom value will automatically change the current colorscheme to custom.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NColorTable.HighlightDark">
      <summary>
            Gets/sets the end hover(select) color.
            Note that setting custom value will automatically change the current colorscheme to custom.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NColorTable.PressedLight">
      <summary>
            Gets/sets the begin push color.
            Note that setting custom value will automatically change the current colorscheme to custom.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NColorTable.PressedDark">
      <summary>
            Gets/sets the end push color.
            Note that setting custom value will automatically change the current colorscheme to custom.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NColorTable.Menu">
      <summary>
            Gets/sets the menu background color.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NColorTable.MenuText">
      <summary>
            Gets/sets the menu text color.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NColorTable.ControlText">
      <summary>
            Gets/sets the default text color.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NColorTable.HighlightText">
      <summary>
            Gets/sets the selected text color.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NColorTable.Caption">
      <summary>
            Gets/sets the caption color.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NColorTable.CaptionText">
      <summary>
            Gets/sets the caption text color.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NColorTable.Border">
      <summary>
            Gets/sets the border color.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NColorTable.ControlBorder">
      <summary>
            Gets/sets the control border color.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NColorTable.SelectedBorder">
      <summary>
            Gets/sets the border color.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NColorTable.Window">
      <summary>
            Gets/sets the background color of a window.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NColorTable.WindowText">
      <summary>
            Gets/sets the foreground color of a window.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NNavigationPaneBand">
      <summary>
            Represents a band in a NNavigationPane control.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NNavigationPaneBand.OnParentChanged(System.EventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NNavigationPaneBand.ShouldSerializeImage">
      <summary>
            Determines whether the Image member should be serialized by the designer.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NNavigationPaneBand.ShouldSerializeSmallImage">
      <summary>
            Determines whether the SmallImage member should be serialized by the designer.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NNavigationPaneBand.ShouldSerializeText">
      <summary>
            Determines whether the Text member should be serialized by the designer.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NNavigationPaneBand.Active">
      <summary>
            Gets/sets a value indicating whether the current instance is active (visible).
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NNavigationPaneBand.Image">
      <summary>
            Gets/sets the image to be displayed by the large button associated with the band.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NNavigationPaneBand.SmallImage">
      <summary>
            Gets/sets the image to be displayed by the associated item when the band is pinned to the toolbar.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NNavigationPaneBand.TooltipText">
      <summary>
            Gets/sets the tooltip text to be displayed when the mouse hovers this band's button representation.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NNavigationPaneBand.IsVisible">
      <summary>
            Gets/sets a value whether the current band is visible within its parent Pane.
            The user may always display it again by the Configure command.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NNavigationPaneBand.ShowCaptionImage">
      <summary>
            Gets/sets a value indicating whether the band will update Navigation Pane's caption with its image.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NNavigationPaneBand.BackColor">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NNavigationPaneBand.ForeColor">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NDummySerializer">
      <summary>
            Represents a dummy serializer (does nothing).
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NNativeWindow">
      <summary>
            Summary description for NNativeWindow.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.DataGridDateTimeFormat">
      <summary>
            Defines the format of the date time column style.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.DataGridDateTimeFormat.CustomDateTime">
      <summary>
            Date time format is defined by the user
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.DataGridDateTimeFormat.Date">
      <summary>
            Short date (based on default locale date time format)
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.DataGridDateTimeFormat.LongDate">
      <summary>
            Long date (based on default locale date time format)
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.DataGridDateTimeFormat.Time">
      <summary>
            Time is formatted based on default locale date time format
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.DataGridDateTimeFormat.DateTime">
      <summary>
            The date time is formatted with the default locale date time format
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NDataGridDateTimeColumnStyle">
      <summary>
            Column style, which can be used for the visual editing of date time values represented by Ole Automation dates (double values)
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NDataGridTextControlColumnStyleBase">
      <summary>
            Base control for column styles, which need a control for visual editing of values which can be represented as simple text
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NContextMenu">
      <summary>
            Summary description for NContextMenu.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NContextMenu.Show(System.Drawing.Point)">
      <summary>
            Displays the context menu to the user.
            </summary>
      <param name="screenLocation">The location(in screen coordinates) of the menu.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NContextMenu.Show(System.Object,System.Drawing.Point)">
      <summary>
      </summary>
      <param name="owner">
      </param>
      <param name="screenLocation">
      </param>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NContextMenu.CommandClick">
      <summary>
            Raised when a command hosted by the NContextMenu is clicked.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NContextMenu.Showing">
      <summary>
            Raised when the context menu is about to be displayed
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NContextMenu.Closed">
      <summary>
            Raised when the context menu is closed
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NContextMenu.MenuWindow">
      <summary>
            Gets the internal NMenuWindow instance used to visualize commands.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NContextMenu.Commands">
      <summary>
            Gets the NCommandCollection for the NContextMenu.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NContextMenu.ImageList">
      <summary>
            Gets/sets the ImageList for the command parent.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NContextMenu.Palette">
      <summary>
            Gets/sets the NPalette used to render the NContextMenu.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NContextMenu.PaletteInheritance">
      <summary>
            Gets/sets a value which Palette value will be applied on a higher level Palette change.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NContextMenu.MenuOptions">
      <summary>
            Gets/sets the customization options for the context menu.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NContextMenu.EnableSkinning">
      <summary>
            Gets/sets a value indicating whether the skinning logic may be applied on the menu.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.MenuBarMnemonicsVisibility">
      <summary>
            Specifies how mnemonics in a NMenuBar are displayed.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.MenuBarMnemonicsVisibility.SystemDefault">
      <summary>
            Uses the current system configuration.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.MenuBarMnemonicsVisibility.Show">
      <summary>
            Always visible.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.MenuBarMnemonicsVisibility.Hide">
      <summary>
            Always hidden.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NTreeListNodeSubItem">
      <summary>
            Represents a sub-item a NTreeListNode.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeListNodeSubItem.GetPreferredSize(Nevron.UI.WinForm.Controls.NTreeListPaintContext)">
      <summary>
            Gets the preferred size of the item.
            </summary>
      <param name="context">The context to use for measuring.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeListNodeSubItem.PrePaint(Nevron.UI.WinForm.Controls.NTreeListPaintContext)">
      <summary>
            Pre-paints the item on the specified context.
            </summary>
      <param name="context">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeListNodeSubItem.PostPaint(Nevron.UI.WinForm.Controls.NTreeListPaintContext)">
      <summary>
            Post-paints the item on the specified context.
            </summary>
      <param name="context">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeListNodeSubItem.ComposeFillInfo">
      <summary>
            Composes the actual NFillInfo which will be used to fill item's interior.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeListNodeSubItem.GetValue">
      <summary>
            Gets the core data of the item.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeListNodeSubItem.GetGroupByValue">
      <summary>
            Gets the value used when this item participates in a GroupBy operation.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeListNodeSubItem.GetPreferredSizeCore(Nevron.UI.WinForm.Controls.NTreeListPaintContext)">
      <summary>
            The core implementation of the GetPreferredSize method.
            </summary>
      <param name="context">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeListNodeSubItem.CompareCore(Nevron.UI.WinForm.Controls.NTreeListNodeSubItem,System.Boolean)">
      <summary>
            The core implementation of the Compare method.
            </summary>
      <param name="item">
      </param>
      <param name="ascending">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeListNodeSubItem.PaintNullValueString(Nevron.UI.WinForm.Controls.NTreeListPaintContext)">
      <summary>
            Paints a string which notifies that the item currently stores no data.
            </summary>
      <param name="context">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeListNodeSubItem.SetRawData(System.Object)">
      <summary>
            Sets the raw data for the item.
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListNodeSubItem.RawData">
      <summary>
            Gets the raw data displayed by this item.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListNodeSubItem.CompareData">
      <summary>
            Gets/sets user-defined data to compare two items when sorting is required.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListNodeSubItem.GroupByData">
      <summary>
            Gets/sets user-defined value to be used when GroupBy action is executed.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListNodeSubItem.Padding">
      <summary>
            Gets/sets the internal padding of this subitem.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListNodeSubItem.FillInfo">
      <summary>
            Gets/sets the NFillInfo instance which controls the background of the item.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListNodeSubItem.GroupByTitle">
      <summary>
            Gets/sets the title for the group node which holds this item.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListNodeSubItem.PaintBackgroundOverNode">
      <summary>
            Determines whether the item's local background will be painted after the owner node's one.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListNodeSubItem.IsVisible">
      <summary>
            Determins whether the sub-item is currently visible (the column it is attached to is displayed).
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListNodeSubItem.Column">
      <summary>
            Gets/sets the column this item belongs to.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListNodeSubItem.Index">
      <summary>
            Gets the zero-based index the item in its owner node's sub-item collection.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListNodeSubItem.Owner">
      <summary>
            Gets the NTreeListNode instance which owns this item.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListNodeSubItem.ViewBounds">
      <summary>
            Gets the viewable bounds of the item.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListNodeSubItem.ItemType">
      <summary>
            Gets the type of the current item.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListNodeSubItem.DefaultPadding">
      <summary>
            Gets the default value of the Padding property.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NTreeListNodeStringSubItem">
      <summary>
            Represents a simple text sub-item.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NTreeListNodeTextSubItem">
      <summary>
            A NTreeListNodeSubItem which data is displayed by text.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListNodeTextSubItem.DisplayValue">
      <summary>
            Gets the display value of the item.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListNodeTextSubItem.Font">
      <summary>
            Gets/sets the local font to be used by this item.
            If not set the one from owner node will be inherited.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListNodeTextSubItem.TextFillInfo">
      <summary>
            Gets/sets the local fill info to be used when rendering text.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListNodeTextSubItem.TextFormat">
      <summary>
            Gets/sets the text formatting structure.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListNodeTextSubItem.RenderingHint">
      <summary>
            Gets/sets the rendering hint used to display the text.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListNodeTextSubItem.DefaultTextFormat">
      <summary>
            Gets the default value of the TextFormat property.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListNodeTextSubItem.DefaultRenderingHint">
      <summary>
            Gets the default value of the RenderingHint property.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListNodeStringSubItem.DisplayValue">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListNodeStringSubItem.Text">
      <summary>
            Gets/sets the text to be displayed by this item.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListNodeStringSubItem.CaseSensitiveCompare">
      <summary>
            Determines whether case sensitive comparison will be made when this item is compared to another.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListNodeStringSubItem.ItemType">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NTreeListNodeDateTimeSubItem">
      <summary>
            A NTreeListNodeSubItem which stores boolean value.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NTreeListNodeFormattableSubItem">
      <summary>
            A NTreeListNodeSubItem which value may have a formatted display.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListNodeFormattableSubItem.FormatString">
      <summary>
            Gets/sets the string used to format the item's value.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListNodeDateTimeSubItem.DisplayValue">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListNodeDateTimeSubItem.Value">
      <summary>
            Gets/sets the date-time value of the item.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListNodeDateTimeSubItem.ItemType">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NLightUIBeginPaintEventArgs">
      <summary>
            The class contains information about an upcoming paint operation in a NItemsControl instance.
            Provided is the NLightUIPaintContext which allows you to modify the cached reusable paint data.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItemEventArgs.Item">
      <summary>
            Gets the item associated with the event.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItemMouseEventArgs.ClientMouse">
      <summary>
            Gets the item associated with the event.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItemDragDropEventArgs.MousePosition">
      <summary>
            Gets the current mouse position (in client coordinates).
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItemDragDropEventArgs.Cursor">
      <summary>
            Gets/sets the Cursor for the current drag-and-drop action.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItemDragDropEventArgs.DragOverItem">
      <summary>
            Gets the item that is currently below the mouse position.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItemDragDropEventArgs.Effect">
      <summary>
            Gets/sets the effect of the current drag-and-drop action
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NSkinnableComponent">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NSkinnableComponent.EnableSkinning">
      <summary>
            Determines whether the component will use skinning logic.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NSkinnableComponent.Skin">
      <summary>
            Gets/sets the local NSkin instance to be used when painting this control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NSkinnableComponent.CurrentSkin">
      <summary>
            Gets the current skin to be used by this instance.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NSerializationData">
      <summary>
            Represents a basic class used for storing a serializable representation of an object.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NSerializationData.SaveData">
      <summary>
            Saves the data
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NSerializationData.LoadData">
      <summary>
            Loads the data
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NSerializationData.CreateObject">
      <summary>
            Creates a new object and copies the serialized data to it.
            </summary>
      <returns>The newly created object.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NSerializationData.SetSavedCore(System.Boolean)">
      <summary>
            Sets the "IsSaved" state.
            </summary>
      <param name="bSaved">
      </param>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NSerializationData.Type">
      <summary>
            Gets/sets the Type to be loaded/saved
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NSerializationData.IsSaved">
      <summary>
            Gets a boolean value whether the data is copied from the object instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandBarsData.Manager">
      <summary>
            Gets/sets the NCommandBarsManager object which data is to be saved/loaded.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandData.Command">
      <summary>
            Gets/sets the NCommand object which state will be saved/loaded.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NCommandContextData">
      <summary>
            Persistency data for a NCommandContext
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NCommandContextData.SaveData">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NCommandContextData.LoadData">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NCommandContextData.CreateObject">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandContextData.Context">
      <summary>
            Gets/sets the NCommandContext object which state is to be saved/loaded.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NCommandBarsStateFlags">
      <summary>
            Specifies which parts of the manager will be serialized.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.NCommandBarsStateFlags.None">
      <summary>
            No serialize/deserialize will occur
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.NCommandBarsStateFlags.Toolbars">
      <summary>
            The toolbars and their commands are serialized.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.NCommandBarsStateFlags.Contexts">
      <summary>
            The contexts collection is serialized.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.NCommandBarsStateFlags.Ranges">
      <summary>
            The ranges collection is serialized.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.NCommandBarsStateFlags.ImageLists">
      <summary>
            All parts participate in save/load
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.NCommandBarsStateFlags.All">
      <summary>
            Combination of all flags
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NToolbarDock">
      <summary>
            Represents a top level dock for toolbars.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.INControlDock">
      <summary>
            Represents a generic control dock.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.INControlDock.CanAcceptControl(Nevron.UI.WinForm.Controls.INDockingControl)">
      <summary>
            Checks whether the dock can accept the specified docking control.
            </summary>
      <param name="dockingControl">The docking control to check for.</param>
      <returns>True if can accept the control, false otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.INControlDock.PerformDock(Nevron.UI.WinForm.Controls.INDockingControl)">
      <summary>
            Performs dock operation upon the specified control.
            </summary>
      <param name="control">The specified control.</param>
      <returns>True if operation was successful, false otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.INControlDock.PerformUndock(Nevron.UI.WinForm.Controls.INDockingControl)">
      <summary>
            Preforms undock operation upon the specified control.
            </summary>
      <param name="control">The specified control.</param>
      <returns>True f operation was successful, false otherwise.</returns>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.INControlDock.HotArea">
      <summary>
            Gets the rectangular area into which docking begins.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.INControlDock.HotAreaInflate">
      <summary>
            Gets the inflate around the dock.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NDockBase.CanAcceptControl(Nevron.UI.WinForm.Controls.INDockingControl)">
      <summary>
            Checks if the dock can accept the control.
            </summary>
      <param name="dockingControl">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NDockBase.PerformDock(Nevron.UI.WinForm.Controls.INDockingControl)">
      <summary>
            Performs docking of a INDockingControl object
            </summary>
      <param name="control">The control to dock</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NDockBase.PerformUndock(Nevron.UI.WinForm.Controls.INDockingControl)">
      <summary>
            Performs undocking of a INDockingControl object
            </summary>
      <param name="control">The control to undock</param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDockBase.HotArea">
      <summary>
            Gets the hot area (in screen coordinates) when dock/undock is needed.
            If any INDockingControl object is in any of these areas docking/undocking will begin.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDockBase.HotAreaInflate">
      <summary>
            Get the inflate for the hot area.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDockBase.PaletteInheritance">
      <summary>
            Gets/sets a value which Palette value will be applied on a higher level Palette change.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDockBase.Renderer">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDockBase.Palette">
      <summary>
            Gets/sets the NPalette used to render the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDockBase.Dock">
      <summary>
            Gets/sets the DockStyle for the control.
            Note that DockStyle.None and DockStyle.Fill are not acceptable.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NToolbarDock.EnableSkinning">
      <summary>
            Gets/sets a value indicating whether the control will use skin logic.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NToolbarDock.Skin">
      <summary>
            Gets/sets the local NSkin instance to be used when painting this control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NToolbarDock.CurrentSkin">
      <summary>
            Gets the current skin to be used by this instance.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NCommandCollection">
      <summary>
            Represents a collection of NCommand objects.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NCommandCollection.Add(Nevron.UI.WinForm.Controls.NCommand)">
      <summary>
            Adds the specified NCommand object to the collection.
            </summary>
      <param name="command">The command to add.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NCommandCollection.AddRange(Nevron.UI.WinForm.Controls.NCommand[])">
      <summary>
            Adds range of commands to the collection.
            </summary>
      <param name="commands">The range of commands.</param>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NCalculatorDropDown">
      <summary>
            The control assembles an NPopup and an NCalculator instances and uses an NPopupCombo to display the drop-down portion.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NPopupCombo">
      <summary>
            Represents a control which may display a NPopup instance in a combo-box like manner.
            As it is completely generic you may build any configuration - create a NPopupCombo instance, specify its "Popup" property and the control is ready-to-use.
            When the drop-down button on the right is pressed, the popup will be displayed, aligned with the combo.
            You may explicitly override the placement by specifying "UseDefaultPlacement" property.
            The default alignment depends on the DropDownDirection property.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NPopupDropDownControl">
      <summary>
            Summary description for NPopupDropDown.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NEditorBase">
      <summary>
            Base class for all editors.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NEditorBase.ShouldSerializeEditorVisibility">
      <summary>
            Detertmines whether the EditorVisibility should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NEditorBase.EditorVisibility">
      <summary>
            Gets/sets the visibility of the internal editor.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NEditorBase.SelectionStart">
      <summary>
            Gets/sets the start index of the selcetion. Valid if the internal editor is visible.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NEditorBase.SelectionLength">
      <summary>
            Gets/sets the number of characters that are currently selected in the editor.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NEditorBase.SelectedText">
      <summary>
            Gets/sets the currently selected text in the editor.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPopupDropDownControl.Popup">
      <summary>
            Gets/sets the popup-part of the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPopupDropDownControl.UseDefaultPopupPlacement">
      <summary>
            Gets/sets a value indicating whether the popup's placement will be internally updated before display.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPopupDropDownControl.DropDownDirection">
      <summary>
            Gets/sets the direction to be used when displaying the popup.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPopupCombo.DefaultDropDownWidth">
      <summary>
            Gets the default width of the drop-down button.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPopupCombo.DropDownButtonWidth">
      <summary>
            Gets/sets the width of the drop-down button.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPopupCombo.Label">
      <summary>
            Gets the NLabelElement which represents the label for this combo.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPopupCombo.Text">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCalculatorDropDown.Popup">
      <summary>
            Gets the NPopup instance which hosts the drop-down portion.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCalculatorDropDown.Calculator">
      <summary>
            Gets the drop-down NCalculator portion.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCalculatorDropDown.EditorVisibility">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NControlDropDownButton">
      <summary>
            Represents an extended NOptionButton control with support for displaying controls in its drop-down part
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NOptionButton">
      <summary>
            Represents a predefined button that generally can be used to select among different options.
            Two modes available - drop-down and modal.
            When in drop-down mode a context menu, aligned to the button's bottom edge, with all options, is displayed.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NButton">
      <summary>
            Represents a standard Windows Forms button with custom rendering.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NButton.ApplyPalette(Nevron.UI.WinForm.Controls.NPalette)">
      <summary>
            Updates from the specified palette.
            </summary>
      <param name="palette">The palette to update from.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NButton.CreateRendererCore">
      <summary>
            Creates the renderer to be used by this instance.
            </summary>
      <returns>The newly created renderer.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NButton.Clone">
      <summary>
            Creates an identical copy if this button.
            </summary>
      <returns>The newly created button.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NButton.UpdateFrom(System.Object)">
      <summary>
            Updates the current button from another one.
            </summary>
      <param name="from">The button to update from.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NButton.Dispose(System.Boolean)">
      <summary>
      </summary>
      <param name="disposing">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NButton.NotifyDefault(System.Boolean)">
      <summary>
      </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NButton.OnEnabledChanged(System.EventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NButton.IsInputKey(System.Windows.Forms.Keys)">
      <summary>
      </summary>
      <param name="keyData">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NButton.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NButton.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NButton.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NButton.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NButton.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NButton.OnMouseEnter(System.EventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NButton.OnMouseHover(System.EventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NButton.OnClick(System.EventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NButton.OnMouseLeave(System.EventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NButton.OnGotFocus(System.EventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NButton.OnLostFocus(System.EventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NButton.OnPaint(System.Windows.Forms.PaintEventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NButton.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
      <summary>
      </summary>
      <param name="pevent">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NButton.WndProc(System.Windows.Forms.Message@)">
      <summary>
      </summary>
      <param name="m">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NButton.CreateButtonInfo">
      <summary>
            Creates a NButtonBaseInfo object that provides the base button behavior.
            </summary>
      <returns>The newly created info to use.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NButton.OnLoad">
      <summary>
            Called just before the control becomes visible.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NButton.EnableSkinning">
      <summary>
            Gets/sets a value indicating whether the control will use skin logic.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NButton.Skin">
      <summary>
            Gets/sets the local NSkin instance to be used when painting this control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NButton.CurrentSkin">
      <summary>
            Gets the current skin to be used by this instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NButton.Renderer">
      <summary>
            Gets/sets the current renderer for the button.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NButton.Palette">
      <summary>
            Gets/sets the NPalette used to render the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NButton.PaletteInheritance">
      <summary>
            Gets/sets a value which Palette value will be applied on a higher level Palette change.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NButton.State">
      <summary>
            Gets/sets the current interactive state of the NButton.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NButton.ImageList">
      <summary>
            Gets/sets the ImageList that contains the image to be displayed on the button.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NButton.Border">
      <summary>
            Gets the NControlBorder object that manages the border around the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NButton.BorderWidth">
      <summary>
            Gets the preffered width of the border.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NButton.IsBorderHot">
      <summary>
            Gets a value indicating whether the border should be drawn in its default state (works only if the border is interactive).
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NButton.DefaultBorderStyle">
      <summary>
            Gets the default border style for the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NButton.DefaultBaseBorderColor">
      <summary>
            Gets the default base color to use when drawing 3D borders.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NButton.ImageIndex">
      <summary>
            Gets/sets the imagelist index value of the image displayed on the NButton.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NButton.Selectable">
      <summary>
            Gets/sets a value whether the button will receive focus when clicked.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NButton.TransparentBackground">
      <summary>
            Determines whether the control will simulate transparency.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NButton.RoundedCornersType">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NButton.ButtonRoundedEdgeValue">
      <summary>
            Depending of <see cref="P:Nevron.UI.WinForm.Controls.NButton.RoundedCornersType" /> value, gets or sets the radius of button rounded edge.
            If RoundedCornersType is set to Percent the value must be between 0 and 50.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NButton.ButtonProperties">
      <summary>
            Gets the common NButton properties.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NOptionButton.ArrowClick">
      <summary>
            Occurs when the user clicks the ArrowRect of the NOptionButton.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NOptionButton.CommandClick">
      <summary>
            Occurs when the user clicks a command from the Commands collection of the NOptionButton.
            This event is available only for OptionButtonMode.DropDown.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NOptionButton.CloseDropDown">
      <summary>
            Fired when the NOptionButton closes its drop-down part(available only for OptionButtonMode.DropDown.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NOptionButton.Mode">
      <summary>
            Gets/sets the OptionButtonMode for the NOptionButton.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NOptionButton.ArrowWidth">
      <summary>
            Gets/sets the width of the arrow part of the NOptionButton.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NOptionButton.Commands">
      <summary>
            Gets the commands to be displayed by the drop-down menu.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NOptionButton.ArrowClickOptions">
      <summary>
            Gets/sets a value indicating whether the NOptionButton
            will expose its functionality only when the user clicks the arrow rect.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NOptionButton.ShowArrow">
      <summary>
            Gets/sets a value indicating whether the NOptionButton will display arrow or dots.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NOptionButton.ArrowRect">
      <summary>
            Gets the rectangle of the arrow.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NOptionButton.MenuWindow">
      <summary>
            Gets the internal NMenuWindow instance used to display child commands.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NControlDropDownButton.DropDownControl">
      <summary>
            Gets/sets the Control to be displayed in the drop-down portion of the button.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NControlDropDownButton.AcceptReturn">
      <summary>
            Gets/sets a value indicating whether by pressing the "Return" key the button will close its drop-down part
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NControlDropDownButton.AcceptEscape">
      <summary>
            Gets/sets a value indicating whether by pressing the "Escape" key the button will close its drop-down part
            </summary>
    </member>
    <member name="T:Nevron.UI.Themes.System.NScrollbarRenderer">
      <summary>
            Summary description for NScrollbarRenderer.
            </summary>
    </member>
    <member name="P:Nevron.UI.Themes.System.NScrollbarRenderer.RenderMask">
      <summary>
            This renderer will handle backgrounds and glyphs
            </summary>
    </member>
    <member name="T:Nevron.UI.Themes.System.NCalculatorRenderer">
      <summary>
            Summary description for NCalculatorRenderer.
            </summary>
    </member>
    <member name="P:Nevron.UI.Themes.System.NCalculatorRenderer.RenderMask">
      <summary>
            This renderer will handle backgrounds and glyphs
            </summary>
    </member>
    <member name="T:Nevron.UI.Themes.Office2003.NOffice2003Theme">
      <summary>
            Represents Miscrosoft Office 2003 theme.
            </summary>
    </member>
    <member name="T:Nevron.UI.NDynamicTheme">
      <summary>
            Represents a theme which is dynamic - e.g. depends on the system settings.
            </summary>
    </member>
    <member name="P:Nevron.UI.Themes.Office2003.NOffice2003Theme.ColorScheme">
      <summary>
            Gets/sets the color scheme to be used by the theme.
            </summary>
    </member>
    <member name="T:Nevron.UI.NColorTableColorEntry">
      <summary>
            Summary description for NColorTableEntry.
            </summary>
    </member>
    <member name="T:Nevron.UI.NThemeStyleDesignerSerializer">
      <summary>
            Summary description for NThemeStyleDesignerSerializer.
            </summary>
    </member>
    <member name="T:Nevron.UI.TrackbarShaftStates">
      <summary>
            Summary description for ArrowButtonStates.
            </summary>
    </member>
    <member name="T:Nevron.UI.NThemeConstantRelationAttribute">
      <summary>
            Summary description for NThemeConstantTypeAttribute.
            </summary>
    </member>
    <member name="T:Nevron.UI.INPropertyMaster">
      <summary>
            Summary description for INPropertyMaster.
            </summary>
    </member>
    <member name="T:Nevron.UI.INHookManager">
      <summary>
            Provides methods for installing and previewing windows messages.
            </summary>
    </member>
    <member name="T:Nevron.UI.ToolStrips.OverflowVisibility">
      <summary>
            Specifies whether or not an item is displayed by the overflow's drop-down.
            By default it is displayed by the overflow drop-down when item's bounds exceed the layout rectangle.
            </summary>
    </member>
    <member name="T:Nevron.UI.NThumbElement">
      <summary>
            Represents the thumb in a Track element.
            </summary>
    </member>
    <member name="T:Nevron.UI.NTrackElementPartItem">
      <summary>
            Summary description for NTrackElementPartItem.
            </summary>
    </member>
    <member name="P:Nevron.UI.NTrackElementPartItem.Direction">
      <summary>
            Gets the direction of the button.
            </summary>
    </member>
    <member name="P:Nevron.UI.NTrackElementPartItem.Owner">
      <summary>
            Gets the current NTrackElement instance which owns this item.
            </summary>
    </member>
    <member name="M:Nevron.UI.NThumbElement.ProcessMouseMove(Nevron.UI.NMouseEventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="T:Nevron.UI.NCalculatorElement">
      <summary>
            Represents a container element which 
            </summary>
    </member>
    <member name="M:Nevron.UI.NCalculatorElement.GetButton(Nevron.UI.CalculatorButton)">
      <summary>
            Gets the button with the specified CalculatorButton value.
            </summary>
      <param name="button">The CalculatorButton value to search for.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NCalculatorElement.Execute(Nevron.UI.CalculatorButton)">
      <summary>
            Executes the specified CalculatorButton.
            </summary>
      <param name="button">
      </param>
    </member>
    <member name="M:Nevron.UI.NCalculatorElement.SetDisplayValue(System.Decimal)">
      <summary>
            Sets the specified value as current.
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:Nevron.UI.NCalculatorElement.ShouldSerializeAutoScaleButtonFont">
      <summary>
            Determines whether the AutoScaleButtonFont property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NCalculatorElement.ShouldSerializeShowDisplay">
      <summary>
            Determines whether the ShowDisplay property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.NCalculatorElement.DisplayValue">
      <summary>
            Gets the string representation of the current value.
            </summary>
    </member>
    <member name="P:Nevron.UI.NCalculatorElement.AutoScaleButtonFont">
      <summary>
            Gets/sets a value indicating whether the Font of the children buttons will be automatically scaled to accomodate the current size.
            </summary>
    </member>
    <member name="P:Nevron.UI.NCalculatorElement.ShowDisplay">
      <summary>
            Gets/sets a value indicating whether the Calculator will show its Display child.
            </summary>
    </member>
    <member name="T:Nevron.UI.NCalculatorButtonClickEventArgs">
      <summary>
            Summary description for EventArguments.
            </summary>
    </member>
    <member name="T:Nevron.UI.NCalculatorParseValueEventArgs">
      <summary>
            Summary description for EventArguments.
            </summary>
    </member>
    <member name="P:Nevron.UI.NCalculatorParseValueEventArgs.Input">
      <summary>
            Gets the input which needs to be formatted.
            </summary>
    </member>
    <member name="P:Nevron.UI.NCalculatorParseValueEventArgs.Output">
      <summary>
            Gets/sets the output which will be displayed.
            </summary>
    </member>
    <member name="T:Nevron.UI.NNullableImageTypeEditor">
      <summary>
            Summary description for NNullableImageTypeEditor.
            </summary>
    </member>
    <member name="T:Nevron.UI.NFlagsEnumTypeEditor">
      <summary>
            Summary description for NFlagsEnumEditor.
            </summary>
    </member>
    <member name="T:Nevron.UI.NLayoutHelper">
      <summary>
            Summary description for NLayoutHelper.
            </summary>
    </member>
    <member name="F:Nevron.UI.NLayoutHelper.AnyTop">
      <summary>
            A bitwise mask of all alignments that contain "Top".
            </summary>
    </member>
    <member name="F:Nevron.UI.NLayoutHelper.AnyLeft">
      <summary>
            A bitwise mask of all alignments that contain "Left".
            </summary>
    </member>
    <member name="F:Nevron.UI.NLayoutHelper.AnyBottom">
      <summary>
            A bitwise mask of all alignments that contain "Bottom".
            </summary>
    </member>
    <member name="F:Nevron.UI.NLayoutHelper.AnyRight">
      <summary>
            A bitwise mask of all alignments that contain "Right".
            </summary>
    </member>
    <member name="F:Nevron.UI.NLayoutHelper.AnyMiddle">
      <summary>
            A bitwise mask of all alignments that contain "Middle".
            </summary>
    </member>
    <member name="F:Nevron.UI.NLayoutHelper.AnyCenter">
      <summary>
            A bitwise mask of all alignments that contain "Center".
            </summary>
    </member>
    <member name="T:Nevron.SmartShapes.NInsertSectionsVerb">
      <summary>
            The NInsertSectionsVerb verb is used for the visual insertion of path sheet sections
            </summary>
    </member>
    <member name="T:Nevron.FormulaSheet.NVerb">
      <summary>
            The NVerb class represents a verb of a formula sheet or formula section. 
            It serves as base class for all verbs, which appear in the formula sheet editor.
            </summary>
    </member>
    <member name="M:Nevron.FormulaSheet.NVerb.Execute">
      <summary>
            Must override to perform the verb action
            </summary>
    </member>
    <member name="F:Nevron.FormulaSheet.NVerb.Name">
      <summary>
            Verb name
            </summary>
    </member>
    <member name="M:Nevron.SmartShapes.NInsertSectionsVerb.Execute">
      <summary>
            Overriden to prompt the user to select the sections which can be inserted and to insert them in the sheet
            if the user pressed the OK button.
            </summary>
    </member>
    <member name="F:Nevron.SmartShapes.NInsertSectionsVerb.ShapeSheet">
      <summary>
            Reference to the path sheet in which to insert new sections
            </summary>
    </member>
    <member name="T:Nevron.SmartShapes.NSmartShapesCategory">
      <summary>
            The NSmartShapesCategory class represents a collection of smart shapes, 
            which can be passed to the shape editor
            </summary>
    </member>
    <member name="T:Nevron.SmartShapes.NSmartShapeCollection">
      <summary>
            The NSmartShapeCollection class is a strongly typed collection, containing NSmartShape instances
            </summary>
    </member>
    <member name="M:Nevron.SmartShapes.NSmartShapeCollection.Clone">
      <summary>
            Creates an identical copy of this object
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.SmartShapes.NSmartShapeCollection.UpdateReferences(Nevron.INReferenceProvider)">
      <summary>
      </summary>
      <param name="provider">
      </param>
    </member>
    <member name="M:Nevron.SmartShapes.NSmartShapeCollection.CreateNonSerializedObjects">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.SmartShapes.NSmartShapeCollection.GetReferenceProvider">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.SmartShapes.NSmartShapeCollection.ProvideReference(System.Type)">
      <summary>
      </summary>
      <param name="parentType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.SmartShapes.NSmartShapeCollection.Add(Nevron.SmartShapes.NSmartShape)">
      <summary>
            Adds the specified shape
            </summary>
      <param name="shape">shape to add</param>
      <returns>index of the shape in the collection</returns>
    </member>
    <member name="M:Nevron.SmartShapes.NSmartShapeCollection.IndexOf(Nevron.SmartShapes.NSmartShape)">
      <summary>
            Determines the index of the shape in the collection
            </summary>
      <param name="shape">shape</param>
      <returns>index of the shape or -1 if it is not in the collection</returns>
    </member>
    <member name="M:Nevron.SmartShapes.NSmartShapeCollection.Insert(System.Int32,Nevron.SmartShapes.NSmartShape)">
      <summary>
            Inserts a the specified shape at the specified index
            </summary>
      <param name="index">index</param>
      <param name="shape">shape</param>
    </member>
    <member name="M:Nevron.SmartShapes.NSmartShapeCollection.Remove(Nevron.SmartShapes.NSmartShape)">
      <summary>
            Removes the specified shape
            </summary>
      <param name="shape">shape to remove</param>
    </member>
    <member name="M:Nevron.SmartShapes.NSmartShapeCollection.Contains(Nevron.SmartShapes.NSmartShape)">
      <summary>
            Determines whether the specified shape is contained in this collection
            </summary>
      <param name="shape">shape</param>
      <returns>true if the shape is contained in this collection, otherwise false</returns>
    </member>
    <member name="M:Nevron.SmartShapes.NSmartShapeCollection.GetShapeByName(System.String)">
      <summary>
            Gets the smart shape with the specified name
            </summary>
      <param name="name">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.SmartShapes.NSmartShapeCollection.OnValidate(System.Object)">
      <summary>
      </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:Nevron.SmartShapes.NSmartShapeCollection.OnClear">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.SmartShapes.NSmartShapeCollection.OnClearComplete">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.SmartShapes.NSmartShapeCollection.OnInsertComplete(System.Int32,System.Object)">
      <summary>
            Overriden to call the OnChanged method
            </summary>
      <param name="index">
      </param>
      <param name="value">
      </param>
    </member>
    <member name="M:Nevron.SmartShapes.NSmartShapeCollection.OnRemoveComplete(System.Int32,System.Object)">
      <summary>
            Overriden to call the OnChanged method
            </summary>
      <param name="index">
      </param>
      <param name="value">
      </param>
    </member>
    <member name="M:Nevron.SmartShapes.NSmartShapeCollection.OnSetComplete(System.Int32,System.Object,System.Object)">
      <summary>
            Overriden to call the OnChanged method
            </summary>
      <param name="index">
      </param>
      <param name="oldobj">
      </param>
      <param name="newobj">
      </param>
    </member>
    <member name="M:Nevron.SmartShapes.NSmartShapeCollection.OnChanged">
      <summary>
            Called when the collection items have changed
            </summary>
    </member>
    <member name="M:Nevron.SmartShapes.NSmartShapesCategory.ToString">
      <summary>
            Overriden to return the name of the category
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.SmartShapes.NSmartShapesCategory.Name">
      <summary>
            Gets/sets the name of the shape category
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NSmartShapesCategory.DefaultShapeName">
      <summary>
            Gets/sets the name of the default shape 
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NSmartShapesCategory.DefaultShape">
      <summary>
            Gets the default shape
            </summary>
    </member>
    <member name="T:Nevron.SmartShapes.NControlBehaviorFormulaCell">
      <summary>
            The NControlBehaviorFormulaCell is a formula cell, which has a strong type of 
            Int32 and provides options from the ControlBehavior enumeration
            </summary>
    </member>
    <member name="T:Nevron.FormulaSheet.NInt32FormulaCell">
      <summary>
            The NInt32FormulaCell is a formula cell, which has a strong type of Int32
            </summary>
    </member>
    <member name="T:Nevron.FormulaSheet.NFormulaCell">
      <summary>
            The NFormulaCell class represents a cell from a formula row or formula section. 
            The formula cell value can be a constant value, or the result of a formula evaluation.
            The NFormulaCell class serves as base class for strongly typed cells and variant type cell.
            </summary>
      <remarks>
            The value of the cell as a variant value can be obtained from VariantValue property. 
            If the Formula property contains a non null string the VariantValue property will return the result of its evaluation. 
            <para>
            The Name property returns a string, which can be used to reference the cell inside the formula of another cell in the same sheet.
            </para></remarks>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaCell.Clone">
      <summary>
            Creates an identical copy of this object
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaCell.UpdateReferences(Nevron.INReferenceProvider)">
      <summary>
      </summary>
      <param name="provider">
      </param>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaCell.CreateNonSerializedObjects">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaCell.GetReferenceProvider">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaCell.InvalidateCache">
      <summary>
            Invalidates the cache of the cell
            </summary>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaCell.Evaluate(Nevron.FormulaSheet.NFormulaSheetEvaluator)">
      <summary>
            Evaluates the value of this cell
            </summary>
      <param name="evaluator">evaluator which to use</param>
      <returns>reference to the current cell value</returns>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaCell.Paint(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Font,Nevron.FormulaSheet.FormulaSheetViewStyle)">
      <summary>
            Paints information about the cell, by rendering a text in the specified boudns
            </summary>
      <param name="g">
      </param>
      <param name="bounds">
      </param>
      <param name="font">
      </param>
      <param name="viewStyle">
      </param>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaCell.GetStrongTypeOptions">
      <summary>
            Gets the options for a strong type. Applicable only if the IsStronglyTyped returned true. 
            Returns null if the strong type has no options.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaCell.SetVariantValue(Nevron.FormulaEngine.NVariant)">
      <summary>
            Sets the specified variant value as the value of this cell
            </summary>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaCell.GetVariantValue">
      <summary>
            Gets the value of this cell as a variant value
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaCell.OnChanged">
      <summary>
            Called when the cell has changed
            </summary>
      <remarks>
            This implementation calls the OnCellChanged method of the sheet
            </remarks>
    </member>
    <member name="P:Nevron.FormulaSheet.NFormulaCell.VariantValue">
      <summary>
            Get/sets the formula cell value as a variant
            </summary>
    </member>
    <member name="P:Nevron.FormulaSheet.NFormulaCell.Formula">
      <summary>
            Get/sets the cell formula. 
            If a valid formula is set the Value property will return the result of its evaluation.
            </summary>
    </member>
    <member name="P:Nevron.FormulaSheet.NFormulaCell.FormulaEvaluated">
      <summary>
            Gets/sets whether the cell's formula is already evaluated. 
            The value of this property is only taken into account if the Formula property is not null.
            Setting this property to false will request an evaluation of the cell's formula. 
            </summary>
    </member>
    <member name="P:Nevron.FormulaSheet.NFormulaCell.FormulaError">
      <summary>
            Obtains the error, which was generated by the last cell formula evaluation. 
            If the last formula evaluation was successful this property returns null.
            </summary>
    </member>
    <member name="P:Nevron.FormulaSheet.NFormulaCell.Name">
      <summary>
            Gets the name with which this cell can be referenced in the formula sheet to which it belongs
            </summary>
    </member>
    <member name="P:Nevron.FormulaSheet.NFormulaCell.Row">
      <summary>
            Gets a reference to the row hosting the cell (if the cell is hosted in a row)
            </summary>
    </member>
    <member name="P:Nevron.FormulaSheet.NFormulaCell.Section">
      <summary>
            Gets a reference to the section hosting the cell
            </summary>
    </member>
    <member name="P:Nevron.FormulaSheet.NFormulaCell.Sheet">
      <summary>
            Obtains a reference to the sheet hosting the cell
            </summary>
    </member>
    <member name="P:Nevron.FormulaSheet.NFormulaCell.IsConstant">
      <summary>
            Determines whether this is a contstant formula cell
            </summary>
    </member>
    <member name="P:Nevron.FormulaSheet.NFormulaCell.NeedsEvaluation">
      <summary>
            Determines whether the cell need evaluation
            </summary>
    </member>
    <member name="P:Nevron.FormulaSheet.NFormulaCell.IsStronglyTyped">
      <summary>
            Determines whether the cell is strongly typed
            </summary>
      <remarks>
            A strongly typed cell will automatically convert it's value to its strong type.
            This implementation returns false.
            </remarks>
    </member>
    <member name="P:Nevron.FormulaSheet.NFormulaCell.StrongType">
      <summary>
            Gets the strong type of the cell value. Applicable only if the IsStronglyTyped returned true.
            </summary>
    </member>
    <member name="M:Nevron.FormulaSheet.NInt32FormulaCell.Clone">
      <summary>
            Creates an identical copy of this object
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaSheet.NInt32FormulaCell.SetVariantValue(Nevron.FormulaEngine.NVariant)">
      <summary>
            Overriden to convert the variant to Int32 and store its value
            </summary>
      <param name="val">
      </param>
    </member>
    <member name="M:Nevron.FormulaSheet.NInt32FormulaCell.GetVariantValue">
      <summary>
            Overriden to get the value as a Int32 variant
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.FormulaSheet.NInt32FormulaCell.Value">
      <summary>
            Gets/sets the Int32 value of the cell
            </summary>
    </member>
    <member name="P:Nevron.FormulaSheet.NInt32FormulaCell.IsStronglyTyped">
      <summary>
            Overriden to return true
            </summary>
    </member>
    <member name="P:Nevron.FormulaSheet.NInt32FormulaCell.StrongType">
      <summary>
            Overriden to return VariantType.Int32
            </summary>
    </member>
    <member name="M:Nevron.SmartShapes.NControlBehaviorFormulaCell.Clone">
      <summary>
            Creates an identical copy of this object
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.SmartShapes.NControlBehaviorFormulaCell.GetStrongTypeOptions">
      <summary>
            Overriden to provide the options from the ControlBehavior enumeration
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.NewGraphics.NGraphicsObject.InitFrom(Nevron.NewGraphics.NGraphicsObject)">
      <summary>
            Initializes a new graphics object from the given one.
            </summary>
      <param name="graphicsObject">
      </param>
    </member>
    <member name="M:Nevron.NewGraphics.NGraphicsObject.Clone">
      <summary>
            Creates an identical copy of this object.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.NewGraphics.NPen.InitFrom(Nevron.NewGraphics.NGraphicsObject)">
      <summary>
            Initializes a new graphics object from the given one.
            </summary>
      <param name="graphicsObject">
      </param>
    </member>
    <member name="P:Nevron.NewGraphics.NPen.Width">
      <summary>
            Gets or sets the width of the stroke.
            </summary>
    </member>
    <member name="P:Nevron.NewGraphics.NPen.Brush">
      <summary>
            Gets or sets the fill of the stroke.
            </summary>
    </member>
    <member name="P:Nevron.NewGraphics.NPen.StartLineCap">
      <summary>
            Gets or sets the start line cap of the stroke.
            </summary>
    </member>
    <member name="P:Nevron.NewGraphics.NPen.EndLineCap">
      <summary>
            Gets or sets the end line cap of the stroke.
            </summary>
    </member>
    <member name="P:Nevron.NewGraphics.NPen.LineJoin">
      <summary>
            Gets or sets the line join of this stroke.
            </summary>
    </member>
    <member name="P:Nevron.NewGraphics.NPen.MiterLimit">
      <summary>
            Gets or sets the limit of the thickness of the join on a mitered corner.
            </summary>
    </member>
    <member name="P:Nevron.NewGraphics.NPen.DashCap">
      <summary>
            Gets or sets the cap style used at the end of the line dashes.
            </summary>
    </member>
    <member name="P:Nevron.NewGraphics.NPen.DashStyle">
      <summary>
            Gets or sets the style used for dashed lines.
            </summary>
    </member>
    <member name="P:Nevron.NewGraphics.NPen.DashPattern">
      <summary>
            Gets or sets an array of custom dashes and spaces.
            </summary>
    </member>
    <member name="P:Nevron.NewGraphics.NPen.DashOffset">
      <summary>
            Gets or sets the distance from the start of a line to the beginning of a dash pattern.
            </summary>
    </member>
    <member name="T:Nevron.NewGraphics.Pdf.l11IIIIl.Keys">
      <summary>
            Predefined keys of this dictionary.
            </summary>
    </member>
    <member name="M:Nevron.NewGraphics.INGraphics2D.RotateTransform(System.Single)">
      <summary>
      </summary>
      <param name="angle">Rotation angle in radians.</param>
    </member>
    <member name="T:Nevron.GraphicsCore.NInteractivityStyle">
      <summary>
            Controls the properties related to the interactivity behavior of the object it 
            is attached to. These properties include tooltips,  mouse cursor and URL to redirect 
            the browser to when the user clicks on the chart image map (this feature is supported 
            only by the Nevron Chart for .NET server control when generating HTML image maps).
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.INHtmlMapAreaAttribute">
      <summary>
            Base Html map area attribute interface.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NInteractivityStyle.FindAttributeOfType(System.Type)">
      <summary>
            Returns a refence to an attribute of the specified type.
            </summary>
      <param name="type">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NInteractivityStyle.IsEmpty">
      <summary>
            Returns true if the interactivity style is empty.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NInteractivityStyle.Cursor">
      <summary>
            The cursor type when the mouse is over the object.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NInteractivityStyle.Tooltip">
      <summary>
            The tooltip of the object when the mouse passes over it.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NInteractivityStyle.UserData">
      <summary>
            User data to be passed to the client as an atribute of the image map area XML element, corresponding to the related interactive object.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NInteractivityStyle.UrlLink">
      <summary>
            The URL to redirect the browser to when the user clicks on the object.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NInteractivityStyle.CustomMapAreaAttribute">
      <summary>
            A custom Html image map area attribute added to the each map area element.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NInteractivityStyle.CustomScript">
      <summary>
            A custom script to be injected in the generated in the Html image map.
            </summary>
      <remarks>
            The script will only be injected if the object is visible.
            </remarks>
    </member>
    <member name="P:Nevron.GraphicsCore.NInteractivityStyle.GeneratePostback">
      <summary>
            Gets/sets a value indicating whether the object will generate a postback when clicked.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NInteractivityStyle.GenerateImageMapObject">
      <summary>
            Gets/sets a value indicating whether the object will generate a postback when clicked.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NInteractivityStyle.InteractivityAttributes">
      <summary>
            A collection of the interactivity attributes associated with this style.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NConvolutionImageFilter">
      <summary>
            The base of all filters that contain convolution matrices.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NImageFilter">
      <summary>
            Base class for all image filters
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NImageFilter.UpdateReferences(Nevron.INReferenceProvider)">
      <summary>
            Updates the references stored by the object
            </summary>
      <remarks>
            The object can query the specified provider for references 
            </remarks>
      <param name="provider">provider from which to obtain references</param>
    </member>
    <member name="M:Nevron.GraphicsCore.NImageFilter.CreateNonSerializedObjects">
      <summary>
            Creates any non serialized objects, which the holder posseses
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NImageFilter.GetReferenceProvider">
      <summary>
            Obtains the reference provider to which the object is currently attached
            </summary>
      <returns>reference provider</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NImageFilter.Clone">
      <summary>
            Creates an exact copy of this object
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NConvolutionImageFilter.BlurType">
      <summary>
            The type of blur convolution to use.
            </summary>
      <remarks>
            This property defines the function used to make the convolution matrix applied on the image. By default set to BlurType.Linear.
            </remarks>
    </member>
    <member name="T:Nevron.GraphicsCore.NBevelAndEmbossImageFilter">
      <summary>
            When present in a ImageFilters collection the NBevelAndEmbossImageFilter class instructs the component to apply a bevel and emboss effect on the image. 
            This effect is different than the bevel and emboss filter applied in Photoshop,
             because it works by combining three samples of the image - original, highlight and dark. 
             The different types of the bevel and emboss define how these images are combined.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NBevelAndEmbossImageFilter.BevelType">
      <summary>
            The type of bevel effect to generate. 
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NBevelAndEmbossImageFilter.Angle">
      <summary>
            The angle of offset.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NBevelAndEmbossImageFilter.Depth">
      <summary>
            The depth of the bevel effect, affects the distance between the highlight and shadow shapes offset across the direction specified in 'Angle'. 
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NBevelAndEmbossImageFilter.Soften">
      <summary>
            Blur amount of the bevel shapes.  
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NBevelAndEmbossImageFilter.OriginalOpacity">
      <summary>
            Fades out the original image leaving only the bevel effect. 
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NBevelAndEmbossImageFilter.LightColor">
      <summary>
            The light color of the contour.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NBevelAndEmbossImageFilter.ShadowColor">
      <summary>
            The shadow color of the contour.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NStandardFrameStyle">
      <summary>
            Represents a rectangular frame around an object
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NFrameStyle">
      <summary>
            The NFrameStyle object controls the frame applied on a particular object. 
            The frame itself consists of four elements - the outer bevel, the bevel distance, 
            the inner bevel and the frame border. With the help of the InnerStyle and OuterStyle 
            properties you can control inner and outer bevel style. The BevelDistance property 
            specifies the distance between the inner and the outer bevel. The HasBorder property 
            allows you to enable or disable the frame border.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NFrameStyle.Visible">
      <summary>
            Controls the visibility of the frame
            </summary>
      <summary>
            The color of the light outer bevel side.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NFrameStyle.FrameStyleType">
      <summary>
            Gets the fill style type.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NStandardFrameStyle.SetPredefinedFrameStyle(Nevron.GraphicsCore.PredefinedStandardFrame)">
      <summary>
            Sets a predefined frame style.
            </summary>
      <param name="style">The frame style</param>
      <remarks>
            Use this function to configure a frame with one function call.
            </remarks>
      <example>
        <code>
            somedFrame.SetPredefinedFrameStyle(PredefinedFrameStyle.Sunken)
            </code>
        <code>
            somedFrame.SetPredefinedFrameStyle(PredefinedFrameStyle.Sunken);
            </code>
      </example>
    </member>
    <member name="M:Nevron.GraphicsCore.NStandardFrameStyle.OnDrawPreview(Nevron.GraphicsCore.lIIIIllI,Nevron.GraphicsCore.NSizeF)">
      <summary>
            Draws a preview of the style on the specified device.
            </summary>
      <param name="device">
      </param>
      <param name="size">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NStandardFrameStyle.GetDescription">
      <summary>
            Returns a short description of this shadow style.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NStandardFrameStyle.GetPaintableRect(Nevron.GraphicsCore.NRectangleF,Nevron.GraphicsCore.l1IlllI1)">
      <summary>
            Overriden. Obtains the paintable rectangle associated with this standard frame style.
            </summary>
      <param name="shapeRect">
      </param>
      <param name="lengthConverter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NStandardFrameStyle.OuterBevelStyle">
      <summary>
            Controls the outer bevel style of the frame. 
            </summary>
      <remarks>
            Can be None, Raised or Sunken. The outer bevel is rendered using the OuterLight 
            and OuterDark colors of the NStandardFrameStyle object. Initially these colors are 
            set to KnownColor.ControlLightLight and KnownColor.ControlDark respectively.
            </remarks>
      <example>
            The following example modifies the OuterStyle:
            <code lang="VB">
            somedFrame.OuterBevelStyle = BevelStyle.Sunken
            somedFrame.InnerBevelStyle = BevelStyle.Sunken
            somedFrame.BevelWidth = 1
            </code><code>
            somedFrame.OuterBevelStyle = BevelStyle.Sunken;
            somedFrame.InnerBevelStyle = BevelStyle.Sunken;
            somedFrame.BevelWidth = 1;
            </code></example>
    </member>
    <member name="P:Nevron.GraphicsCore.NStandardFrameStyle.OuterBevelWidth">
      <summary>
            Controls the width of the inner and the outer bevels. 
            </summary>
      <remarks>
            The default value is 1 pixel.
            </remarks>
      <example>
            The following example modifies the InnerStyle.
            <code lang="VB">
            somedFrame.OuterStyle = BevelStyle.Sunken
            somedFrame.InnerStyle = BevelStyle.Sunken
            somedFrame.BevelWidth = new NLength(1, NGraphicsUnit.Pixel)
            </code><code>
            somedFrame.OuterStyle = BevelStyle.Sunken;
            somedFrame.InnerStyle = BevelStyle.Sunken;
            somedFrame.BevelWidth = new NLength(1, NGraphicsUnit.Pixel);
            </code></example>
    </member>
    <member name="P:Nevron.GraphicsCore.NStandardFrameStyle.OuterBevelLightColor">
      <summary>
            The color of the light outer bevel side.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NStandardFrameStyle.OuterBevelDarkColor">
      <summary>
            The color of the dark outer bevel side.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NStandardFrameStyle.InnerBevelStyle">
      <summary>
            Controls the inner style of the frame. 
            </summary>
      <remarks>
            Can be None, Raised or Sunken. The inner bevel is rendered using the InnerLight 
            and InnerDark colors of the NStandardFrameStyle object. Initially these colors are 
            set to KnownColor.Control and KnownColor.ControlDarkDark respectively.
            </remarks>
      <example>
            The following example modifies the InnerStyle:
            <code land="VB">
            somedFrame.OuterStyle = BevelStyle.Sunken
            somedFrame.InnerStyle = BevelStyle.Sunken
            somedFrame.BevelWidth = 1
            </code><code>
            somedFrame.OuterStyle = BevelStyle.Sunken;
            somedFrame.InnerStyle = BevelStyle.Sunken;
            somedFrame.BevelWidth = 1;
            </code></example>
    </member>
    <member name="P:Nevron.GraphicsCore.NStandardFrameStyle.InnerBevelWidth">
      <summary>
            Controls the distance between the inner and the outer bevel. 
            </summary>
      <remarks>
            The default value is 0.
            </remarks>
      <example>
            The following example modifies the Bevel distance.
            <code lang="VB">
            somedFrame.OuterStyle = BevelStyle.Sunken
            somedFrame.InnerStyle = BevelStyle.Sunken
            somedFrame.BevelWidth = 1
            somedFrame.BevelDistance = 3 ' increase the bevel distance
            </code><code>
            somedFrame.OuterStyle = BevelStyle.Sunken;
            somedFrame.InnerStyle = BevelStyle.Sunken;
            somedFrame.BevelWidth = 1;
            somedFrame.BevelDistance = 3; // increase the bevel distance
            </code></example>
    </member>
    <member name="P:Nevron.GraphicsCore.NStandardFrameStyle.InnerBevelLightColor">
      <summary>
            The color of the light inner bevel side.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NStandardFrameStyle.InnerBevelDarkColor">
      <summary>
            The color of the dark inner bevel side.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NStandardFrameStyle.OuterBorderWidth">
      <summary>
            The width of the outer border (between the inner and the outer bevels).
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NStandardFrameStyle.OuterBorderColor">
      <summary>
            The color used to fill the gap between the inner and the outer bevel.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NStandardFrameStyle.InnerBorderWidth">
      <summary>
            The width of the inner border.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NStandardFrameStyle.InnerBorderColor">
      <summary>
            The color used to fill the inner border.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NStandardFrameStyle.FrameStyleType">
      <summary>
            Returns the type of the frame style
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NImageFillStyle">
      <summary>
            Represents an image based filling.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NImageFillStyle.GetHashCode">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NImageFillStyle.SetTransparencyPercent(System.Single)">
      <summary>
            Sets the transparency percent of the diffuse and ambient material colors.
            </summary>
      <param name="percent">
      </param>
      <remarks>
            Transparency is discarded for the background object fill style. Note that transparent objects slow down the rendering.
            </remarks>
    </member>
    <member name="M:Nevron.GraphicsCore.NImageFillStyle.Equals(System.Object)">
      <summary>
            Returns true if the objects are equal
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NImageFillStyle.Invert">
      <summary>
            Returns the inverted fill style
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NImageFillStyle.GetDescription">
      <summary>
            Returns a short description of this NImageFillStyle object.
            </summary>
      <remarks>
            The default implementation returns a string containing the image file name.
            </remarks>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NImageFillStyle.IsTransparent">
      <summary>
            Returns true if this style is transparent.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NImageFillStyle.IsTranslucent">
      <summary>
            Returns true if this style is translucent.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NImageFillStyle.GetPrimaryColor">
      <summary>
            Returns the primary color of this fill style.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NImageFillStyle.GetBestSize">
      <summary>
            Returns the best visualization size for this fill style.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NImageFillStyle.Dispose">
      <summary>
            Releases all resources used by the object
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NImageFillStyle.FileName">
      <summary>
            The full path to an image file used to create a texture.
            </summary>
      <remarks>
            The image file that will be used as a texture. This property is an empty string 
            by default. Note that the component does not check whether the image exists or 
            not when you set this property. 
            </remarks>
    </member>
    <member name="P:Nevron.GraphicsCore.NImageFillStyle.Bitmap">
      <summary>
            The bitmap object used to create a texture if Type is set to FillEffectType.Image.
            </summary>
      <remarks>
            You can use this property if you want to assign a texture to the fill style contained in a bitmap object.
            This is the case when the texture is dynamically generated or loaded from resource file.
            </remarks>
    </member>
    <member name="P:Nevron.GraphicsCore.NImageFillStyle.Alpha">
      <summary>
            The apha value applied on the image.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NImageFillStyle.FillStyleType">
      <summary>
            Gets the fill style type.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NImageFillStyle.Intensity">
      <summary>
            Returns the intensity of this fill style in the range [0, 255].
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NHideAnimation">
      <summary>
            Hides the object during the animation time range
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NHideAnimation.Clone">
      <summary>
            Creates an identical copy of this animation object.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NHideAnimation.AnimationType">
      <summary>
            Gets the type of this animation.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NTextureMappingStyleKeyFactory">
      <summary>
            Summary description for NTextureMappingStyleKeyFactory.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NTextureMappingStyleKeyFactory.GetKey(Nevron.GraphicsCore.NTextureMappingStyle)">
      <summary>
            Returns a key for a specified stroke style
            </summary>
      <param name="textureMappingStyle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NTextureMappingStyleKeyFactory.ResetKey">
      <summary>
            Forces the factory to create a new key
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NLineEnglishUnit">
      <summary>
            Represents the english line measurement unit.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NLineEnglishUnit.ConvertXValueToPixels(Nevron.GraphicsCore.NMeasurementUnitConverter)">
      <summary>
            Converts this measurement unit to its equivalent in pixels along the X direction.
            </summary>
      <param name="converter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NLineEnglishUnit.ConvertYValueToPixels(Nevron.GraphicsCore.NMeasurementUnitConverter)">
      <summary>
            Converts this measurement unit to its equivalent in pixels along the Y direction.
            </summary>
      <param name="converter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NLineEnglishUnit.Abbreviation">
      <summary>
            The abbreviation of this measurement unit.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NLineEnglishUnit.EnglishUnit">
      <summary>
            Gets the english unit of the object.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NLineEnglishUnit.ScaleToInch">
      <summary>
            The scale to inch of this measurement unit.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NLeagueEnglishUnit">
      <summary>
            Represents the english league measurement unit.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NLeagueEnglishUnit.ConvertXValueToPixels(Nevron.GraphicsCore.NMeasurementUnitConverter)">
      <summary>
            Converts this measurement unit to its equivalent in pixels along the X direction.
            </summary>
      <param name="converter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NLeagueEnglishUnit.ConvertYValueToPixels(Nevron.GraphicsCore.NMeasurementUnitConverter)">
      <summary>
            Converts this measurement unit to its equivalent in pixels along the Y direction.
            </summary>
      <param name="converter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NLeagueEnglishUnit.Abbreviation">
      <summary>
            The abbreviation of this measurement unit.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NLeagueEnglishUnit.EnglishUnit">
      <summary>
            Gets the english unit of the object.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NLeagueEnglishUnit.ScaleToInch">
      <summary>
            The scale to inch of this measurement unit.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NChainEnglishUnit">
      <summary>
            Represents the english chain measurement unit.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NChainEnglishUnit.ConvertXValueToPixels(Nevron.GraphicsCore.NMeasurementUnitConverter)">
      <summary>
            Converts this measurement unit to its equivalent in pixels along the X direction.
            </summary>
      <param name="converter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NChainEnglishUnit.ConvertYValueToPixels(Nevron.GraphicsCore.NMeasurementUnitConverter)">
      <summary>
            Converts this measurement unit to its equivalent in pixels along the Y direction.
            </summary>
      <param name="converter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NChainEnglishUnit.Abbreviation">
      <summary>
            The abbreviation of this measurement unit.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NChainEnglishUnit.EnglishUnit">
      <summary>
            Gets the english unit of the object.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NChainEnglishUnit.ScaleToInch">
      <summary>
            The scale to inch of this measurement unit.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Text.INRenderable">
      <summary>
            Summary description for INRenderable.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Text.INSelfDeleteable">
      <summary>
            Implemented by objects that cannot be empty
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.INImageMapWriter">
      <summary>
            Implemented by elements that export Html image map contents.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.INTransoformableDevice">
      <summary>
            Implemented by transformable devices
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.INSceneTreeDevice">
      <summary>
            Implemented by scene tree devices
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.INImageMapWriter.WriteBeginMap">
      <summary>
            Begins writing the map
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.INImageMapWriter.WriteEndMap">
      <summary>
            Ends writing the map
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.INImageMapWriter.WriteRectangle(Nevron.GraphicsCore.NRectangleF)">
      <summary>
            Writes a rectangle to the image map
            </summary>
      <param name="rectangle">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.INImageMapWriter.WritePolygon(Nevron.GraphicsCore.NPointF[])">
      <summary>
            Writes a polygon to the image map
            </summary>
      <param name="points">
      </param>
    </member>
    <member name="P:Nevron.GraphicsCore.INImageMapWriter.Accuracy">
      <summary>
            Gets the accuracy of this image map
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.INMeasurementGraphicsProvider">
      <summary>
            Implemented by measurement graphics providers.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Shapes.NRectShape">
      <summary>
            Summary description for NRectShape.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Shapes.NSmoothEdgeBarShape">
      <summary>
            Summary description for NSmoothEdgeBarShape.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Shapes.NBarShape">
      <summary>
            Summary description for NBarShape.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Shapes.NLinesPathSegment">
      <summary>
            Summary description for NLinesPathSegment.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Shapes.NMultiPointPathSegment">
      <summary>
            Summary description for NMultiPointPathSegment.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Shapes.NRectangleGraphicsNode">
      <summary>
            Summary description for NRectangleGraphicsNode.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.Shapes.NRectangleGraphicsNode.Paint(Nevron.GraphicsCore.Shapes.NGraphicsPaintContext)">
      <summary>
            Paints this node.
            </summary>
      <param name="context">
      </param>
    </member>
    <member name="T:Nevron.GraphicsCore.Shapes.NEllipseGraphicsNode">
      <summary>
            Summary description for NEllipseGraphicsNode.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.Shapes.NEllipseGraphicsNode.Paint(Nevron.GraphicsCore.Shapes.NGraphicsPaintContext)">
      <summary>
            Paints this node.
            </summary>
      <param name="context">
      </param>
    </member>
    <member name="T:Nevron.GraphicsCore.INRenderSurface">
      <summary>
            Implemented by render surfaces
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.INRenderSurface.Resize(Nevron.GraphicsCore.NSize)">
      <summary>
            Resizes the render surface
            </summary>
      <param name="newSize">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.INRenderSurface.Invalidate">
      <summary>
            Invalidates the contents of the render suface
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NMouseCommand">
      <summary>
            Defines a mouse command.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NMouseCommand.Match(Nevron.GraphicsCore.MouseAction,System.Windows.Forms.MouseEventArgs)">
      <summary>
            Returns true if the command matches the specified mouse action and event arguments
            </summary>
      <param name="mouseAction">
      </param>
      <param name="e">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NMouseCommand.MouseAction">
      <summary>
            The mouse action recognized by this command.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NMouseCommand.Clicks">
      <summary>
            The number of clicks.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NMouseCommand.MouseButton">
      <summary>
            The mouse button(s) of this command.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NGraphicsBase">
      <summary>
            Base class for all graphics.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.N2DDevicePDF">
      <summary>
            Represents a 2D PDF device.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.N2DDeviceRIA">
      <summary>
            Represents a 2D RIA device.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.INStaticCounterProvider">
      <summary>
            Summary description for INStaticCounterProvider.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.N2DDeviceRIA.ClearStyles(Nevron.GraphicsCore.lII11II1)">
      <summary>
            Clears style state and optionally updates the painter.
            </summary>
      <param name="styles">
      </param>
    </member>
    <member name="P:Nevron.GraphicsCore.N2DDeviceRIA.ClipPath">
      <summary>
            Sets the current clip path
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.N2DDeviceRIA.ClipInfo">
      <summary>
            Gets / sets the current clip path
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.N2DDeviceRIA.ColorTransform">
      <summary>
            Gets/Sets the color transform object associated with this device.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.N2DDeviceRIA.Palette">
      <summary>
            Gets/Sets the device color palette.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.N2DDevicePDF.SupportsAnimation">
      <summary>
            Determines whether this device supports animation.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.N2DDevicePDF.AnimationBounds">
      <summary>
            Gets or sets the animation bounds. Regarded only when AnimationBoundsMode is set to context
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.AnimationBoundsMode">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.AnimationBoundsMode.Custom">
      <summary>
            In this mode you can define custom bounds 
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.AnimationBoundsMode.Shape">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.AnimationBoundsMode.Context">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.DeviceDashMode">
      <summary>
            Enumerates how the dash style specified with the stroke style
            combines with previous line segments drawn with the same dash style
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.DeviceDashMode.Auto">
      <summary>
            Dash mode determined by stroke style
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.DeviceDashMode.Cycle">
      <summary>
            Dash mode is cycle for all stroke styles
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.DeviceDashMode.Reset">
      <summary>
            Dash mode is reset for all stroke styles
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.DashMode">
      <summary>
            Enumerates how the dash style specified with the stroke style
            combines with previous line segments drawn with the same dash style
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.DashMode.Cycle">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.DashMode.Reset">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Alignment">
      <summary>
            Enumerates alignment modes
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.Alignment.Near">
      <summary>
            Near alignment
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.Alignment.Center">
      <summary>
            Center alignment
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.Alignment.Far">
      <summary>
            Far alignment
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.CapStyle">
      <summary>
            Enumerates the possible cap styles
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.PaintEffectShape">
      <summary>
            Defines the shape of paint effect 
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.PaintEffectShape.Region">
      <summary>
            The effect shape is the same as the background region
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.PaintEffectShape.Rectangle">
      <summary>
            The effect shape is a rectangle
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.PaintEffectShape.Ellipse">
      <summary>
            The effect shape is an ellipse
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.PaintEffectShape.RoundedRect">
      <summary>
            The effect shape is a rounded rectangle
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.BorderShape">
      <summary>
            Defines the shape of a border painted around a object
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.BorderShape.Auto">
      <summary>
            The border shape is defined by the object it is attached to
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.BorderShape.Rectangle">
      <summary>
            The border shape is a rectangle
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.BorderShape.RoundedRect">
      <summary>
            The border shape is a rounded rectangle
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.ColorType">
      <summary>
            Enumerates the possible color types
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.ColorType.ARGB">
      <summary>
            Represents an ARGB color
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.ColorType.Indexed">
      <summary>
            Represents an indexed (palette) color
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.CursorType">
      <summary>
            Enumerates the possible cursor types.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.CursorType.Default">
      <summary>
            The default cursor, which is usually an arrow cursor.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.CursorType.AppStarting">
      <summary>
            The cursor that appears when an application starts.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.CursorType.Alias">
      <summary>
            HTML specific cursor. Indicates a create shortcut drag-drop operation. Mozilla Firefox specific.
            </summary>
      <remarks>
            This cursor is represented with the default cursor under Windows Forms.
            </remarks>
    </member>
    <member name="F:Nevron.GraphicsCore.CursorType.Arrow">
      <summary>
            The arrow cursor.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.CursorType.Cell">
      <summary>
            HTML specific cursor. Displays a cell editing cross. Mozilla Firefox specific.
            </summary>
      <remarks>
            This cursor is represented with the default cursor under Windows Forms.
            </remarks>
    </member>
    <member name="F:Nevron.GraphicsCore.CursorType.Copy">
      <summary>
            HTML specific cursor. Indicates a copy drag-drop operation. Mozilla Firefox specific.
            </summary>
      <remarks>
            This cursor is represented with the default cursor under Windows Forms.
            </remarks>
    </member>
    <member name="F:Nevron.GraphicsCore.CursorType.Cross">
      <summary>
            The crosshair cursor.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.CursorType.Hand">
      <summary>
            The hand cursor, typically used when hovering over a Web link.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.CursorType.Help">
      <summary>
            The Help cursor, which is a combination of an arrow and a question mark.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.CursorType.HSplit">
      <summary>
            The cursor that appears when the mouse is positioned over a horizontal splitter bar.
            </summary>
      <remarks>
            When used in Web Forms, this cursor is supported by Internet Explorer 6+, Mozilla Firefox and Safari only.
            </remarks>
    </member>
    <member name="F:Nevron.GraphicsCore.CursorType.IBeam">
      <summary>
            The I-beam cursor, which is used to show where the text cursor appears when the mouse is clicked.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.CursorType.No">
      <summary>
            The cursor that indicates that a particular region is invalid for the current operation.
            </summary>
      <remarks>
            When used in Web Forms, this cursor is supported by Internet Explorer 6+, Mozilla Firefox and Safari only.
            </remarks>
    </member>
    <member name="F:Nevron.GraphicsCore.CursorType.NoDrop">
      <summary>
            The cursor that indicates that a particular region is invalid for the current drag-drop operation.
            </summary>
      <remarks>
        <para>
            In Win Forms, this cursor is represented the same way as CursorType.No.
            </para>
        <para>
            In Web Forms, this cursor is supported by Internet Explorer 6+, Mozilla Firefox and Safari only.
            Mozilla Firefox and Safari display the same cursor as for CursorType.No. Internet Explorer displays
            a hand with a "denied" symbol on top.
            </para>
      </remarks>
    </member>
    <member name="F:Nevron.GraphicsCore.CursorType.NoMove2D">
      <summary>
            The cursor that appears during wheel operations when the mouse is not moving, but the window can be scrolled in both a horizontal and vertical direction.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.CursorType.NoMoveHoriz">
      <summary>
            The cursor that appears during wheel operations when the mouse is not moving, but the window can be scrolled in a horizontal direction.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.CursorType.NoMoveVert">
      <summary>
            The cursor that appears during wheel operations when the mouse is not moving, but the window can be scrolled in a vertical direction.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.CursorType.PanEast">
      <summary>
            The cursor that appears during wheel operations when the mouse is moving and the window is scrolling horizontally to the right.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.CursorType.PanNE">
      <summary>
            The cursor that appears during wheel operations when the mouse is moving and the window is scrolling horizontally and vertically upward and to the right.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.CursorType.PanNorth">
      <summary>
            The cursor that appears during wheel operations when the mouse is moving and the window is scrolling vertically in an upward direction.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.CursorType.PanNW">
      <summary>
            The cursor that appears during wheel operations when the mouse is moving and the window is scrolling horizontally and vertically upward and to the left.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.CursorType.PanSE">
      <summary>
            The cursor that appears during wheel operations when the mouse is moving and the window is scrolling horizontally and vertically downward and to the right.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.CursorType.PanSouth">
      <summary>
            The cursor that appears during wheel operations when the mouse is moving and the window is scrolling vertically in a downward direction.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.CursorType.PanSW">
      <summary>
            The cursor that appears during wheel operations when the mouse is moving and the window is scrolling horizontally and vertically downward and to the left.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.CursorType.PanWest">
      <summary>
            The cursor that appears during wheel operations when the mouse is moving and the window is scrolling horizontally to the left.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.CursorType.SizeAll">
      <summary>
            The four-headed sizing cursor, which consists of four joined arrows that point north, south, east, and west.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.CursorType.SizeNESW">
      <summary>
            The two-headed diagonal (northeast/southwest) sizing cursor.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.CursorType.SizeNS">
      <summary>
            The two-headed vertical (north/south) sizing cursor.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.CursorType.SizeNWSE">
      <summary>
            The two-headed diagonal (northwest/southeast) sizing cursor.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.CursorType.SizeWE">
      <summary>
            The two-headed horizontal (west/east) sizing cursor.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.CursorType.UpArrow">
      <summary>
            The up arrow cursor, typically used to identify an insertion point.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.CursorType.VSplit">
      <summary>
            The cursor that appears when the mouse is positioned over a vertical splitter bar.
            </summary>
      <remarks>
            When used in Web Forms, this cursor is supported by Internet Explorer 6+, Mozilla Firefox and Safari only.
            </remarks>
    </member>
    <member name="F:Nevron.GraphicsCore.CursorType.VText">
      <summary>
            HTML specific cursor. The cursor that appears when the mouse is positioned over a vertical text.
            </summary>
      <remarks>
        <para>
            When used in Web Forms, this cursor is supported by Internet Explorer 6+, Mozilla Firefox and Safari 3.1+ only.
            </para>
        <para>
            When used in Win Forms, this cursor is represented by the IBeam cursor.
            </para>
      </remarks>
    </member>
    <member name="F:Nevron.GraphicsCore.CursorType.WaitCursor">
      <summary>
            The wait cursor, typically an hourglass shape.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.CursorType.Custom">
      <summary>
            A custom defined cursor.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.ParagraphAlignment">
      <summary>
            The horizontal alignment of text inside the paragraph.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.ParagraphAlignment.Center">
      <summary>
            The text is horizontally centered.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.ParagraphAlignment.Left">
      <summary>
            The text is aligned to the left paragraph margin.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.ParagraphAlignment.Right">
      <summary>
            The text is aligned to the right paragraph margin.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.ParagraphAlignment.Justify">
      <summary>
            The text is justified.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.StringFormatType">
      <summary>
            Defines the standard string format types.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.StringFormatType.GenericDefault">
      <summary>
            Generic default string format.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.StringFormatType.GenericTypographic">
      <summary>
            Generic typographic string format.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.FillStyleType">
      <summary>
            Defines the possible fill styles.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.FillStyleType.Color">
      <summary>
            Solid color fill style.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.FillStyleType.Gradient">
      <summary>
            A fill style based on two colors.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.FillStyleType.Image">
      <summary>
            A fill style based on an Image (texture filling).
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.FillStyleType.Hatch">
      <summary>
            A fill style based on an pattern with foreground and background colors.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.FillStyleType.AdvancedGradient">
      <summary>
            A fill style based on an arbitrary number of points with different shape, color, intensity and angle.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.GradientStyle">
      <summary>
            Defines the style of the gradient or in other words the way the starting 
            color fades into the ending color. For more information see the NFillEffect 
            object description in the Object Reference.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.GradientStyle.Horizontal">
      <summary>
            Horizontal gradient.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.GradientStyle.Vertical">
      <summary>
            Vertical gradient.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.GradientStyle.DiagonalUp">
      <summary>
            Diagonal gradient with direction from the bottom left corner 
            to the top right corner.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.GradientStyle.DiagonalDown">
      <summary>
            Diagonal gradient with direction from the bottom right corner 
            to the top left corner.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.GradientStyle.FromCorner">
      <summary>
            Diagonal gradient starting from one of the four corners.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.GradientStyle.FromCenter">
      <summary>
            Gradient starting from the center.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.GradientStyle.StartToEnd">
      <summary>
            Gradient which is spread according to the shape start and end
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.GradientVariant">
      <summary>
            The variant of the gradient style. All gradient styles have four gradients 
            except GradientStyle.FromCenter, which has only two.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.GradientVariant.Variant1">
      <summary>
            Variant 1
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.GradientVariant.Variant2">
      <summary>
            Variant 2
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.GradientVariant.Variant3">
      <summary>
            Variant 3
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.GradientVariant.Variant4">
      <summary>
            Variant 4
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.AGPointShape">
      <summary>
            The shape of a point in an advanced gradient.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.AGPointShape.Circle">
      <summary>
            Circle shape.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.AGPointShape.Rectangle">
      <summary>
            Rectangle shape with controlled rotation angle.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.AGPointShape.Line">
      <summary>
            Line shape with controlled slope angle.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.AdvancedGradientScheme">
      <summary>
            Defines the possible predefined advanced gradient configurations
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.AdvancedGradientScheme.WhiteOnBlack">
      <summary>
            White color points on black background.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.AdvancedGradientScheme.WhiteOnRed">
      <summary>
            White color points on red background.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.AdvancedGradientScheme.WhiteOnGreen">
      <summary>
            White color points on green background.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.AdvancedGradientScheme.WhiteOnBlue">
      <summary>
            White color points on blue background.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.AdvancedGradientScheme.Red">
      <summary>
            Red color points on black background.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.AdvancedGradientScheme.Green">
      <summary>
            Green color points on black background.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.AdvancedGradientScheme.Blue">
      <summary>
            Blue color points on black background.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.AdvancedGradientScheme.Sunset">
      <summary>
            Dark orange color points on black background.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.AdvancedGradientScheme.NightFall1">
      <summary>
            Blue and magenta color points on black background.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.AdvancedGradientScheme.NightFall2">
      <summary>
            Magenta and blue color points on black background.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.AdvancedGradientScheme.Ocean1">
      <summary>
            Sky blue and spring green points on blue background.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.AdvancedGradientScheme.Ocean2">
      <summary>
            Spring green and sky blue points on blue background.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.AdvancedGradientScheme.Ocean3">
      <summary>
            Sky blue and spring green points on dark blue background.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.AdvancedGradientScheme.Ocean4">
      <summary>
            Spring green and sky blue points on dark blue background.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.AdvancedGradientScheme.CalmWater1">
      <summary>
            Dodger blue and red points on sky blue background.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.AdvancedGradientScheme.CalmWater2">
      <summary>
            Red and dodger blue points on sky blue background.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.AdvancedGradientScheme.Desert1">
      <summary>
            Yellow and red points on white background.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.AdvancedGradientScheme.Desert2">
      <summary>
            Red and yellow points on white background.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.AdvancedGradientScheme.Fire1">
      <summary>
            Red and yellow points on black background.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.AdvancedGradientScheme.Fire2">
      <summary>
            Yellow and red points on black background.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.AdvancedGradientScheme.Fog1">
      <summary>
            Teal and light olive points on deep sky blue background.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.AdvancedGradientScheme.Fog2">
      <summary>
            Light olive and teal points on deep sky blue background.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.AdvancedGradientScheme.Mahogany1">
      <summary>
            Coral and indian red points on black background.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.AdvancedGradientScheme.Mahogany2">
      <summary>
            Indian red and coral points on black background.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.MapMode">
      <summary>
            Defines how textures are mapped on the surfaces of an object.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.MapMode.RelativeToObject">
      <summary>
            Mapping is relative to the object. A mapping layout can be specified.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.MapMode.RelativeToViewer">
      <summary>
            Mapping is relative to the viewer.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.MapMode.Sphere">
      <summary>
            Environmental mapping used for special visual effects like reflection.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.MapLayout">
      <summary>
            The layout used when mapping a texture on an object in the 3D scene.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.MapLayout.Stretched">
      <summary>
            Stretches the texture along the X and Y axes until it fits the object. 
            It does not preserve the original texture dimensions ratio (aspect).
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.MapLayout.Fitted">
      <summary>
            Stretches the texture until its smaller dimension fits the object.
            This layout mode preserves the texture dimensions ratio (aspect).
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.MapLayout.Centered">
      <summary>
            Similar to fitted. When used on the background object it also preserves 
            the real original texture dimensions.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.MapLayout.Tiled">
      <summary>
            Repeats the texture along the X and Y axes. This layout mode preserves 
            the texture dimensions ratio (aspect).
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.MapLayout.StretchedToWidth">
      <summary>
            Stretches the texture by width until it fits. This layout mode preserves 
            the texture dimensions ratio (aspect).
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.MapLayout.StretchedToHeight">
      <summary>
            Stretches the texture by height until it fits. This layout mode preserves 
            the texture dimensions ratio (aspect).
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.MapLayout.CropFitted">
      <summary>
            Stretches the texture until its larger dimension fits the object.
            This layout mode preserves the texture dimensions ratio (aspect).
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.LinePattern">
      <summary>
            Defines a line pattern.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.LinePattern.Solid">
      <summary>
            Solid line (bit pattern 0xffff).
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.LinePattern.Dot">
      <summary>
            Dotted line (bit pattern 0x3333).
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.LinePattern.Dash">
      <summary>
            Dash line (bit pattern 0xff00).
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.LinePattern.DashDot">
      <summary>
            Dash dot line (bit pattern 0xff18).
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.LinePattern.DashDotDot">
      <summary>
            Dash dot dot line (bit pattern DashDotDot).
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.LinePattern.Custom">
      <summary>
            Custom line pattern (defined with the Custom Pattern)
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.FrameBevelStyle">
      <summary>
            Defines the bevel style of a standard frame. You may need a frame when you 
            want your control background to be more consistent with the other Windows 
            controls displayed by your form. For more information see the NFrameStyle object 
            in the Object Reference.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.FrameBevelStyle.None">
      <summary>
            The bevel is disabled.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.FrameBevelStyle.Raised">
      <summary>
            Configures a raised bevel.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.FrameBevelStyle.Sunken">
      <summary>
            Configures a sunken bevel.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.FrameStyleType">
      <summary>
            Enumerates the possible frame styles
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.FrameStyleType.Standard">
      <summary>
            Standard frame style with outer bevel, outer border, inner bevel and inner border.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.FrameStyleType.Image">
      <summary>
            Image frame style with shadow, lighting effect, fill style and border
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.FrameStyleType.Radial">
      <summary>
            Frame style that creates a radial shape
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.ImageFrameType">
      <summary>
            Defines the type of the image frame.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.ImageFrameType.None">
      <summary>
            None
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.ImageFrameType.Raised">
      <summary>
            Raised
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.ImageFrameType.Sunken">
      <summary>
            Sunken
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.ImageFrameType.Emboss">
      <summary>
            Emboss
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.ImageFrameType.Embed">
      <summary>
            Embed
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.ImageFrameType.Rounded">
      <summary>
            Rounded
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.ImageFrameType.RoundedTop">
      <summary>
            Rounded Top
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.ImageFrameType.RoundedBottom">
      <summary>
            Rounded Bottom
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.ImageFrameType.RoundedOpenR">
      <summary>
            Rounded with opened right side
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.ImageFrameType.RoundedOpenL">
      <summary>
            Rounded with opened left side
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.ImageFrameType.RoundedOpenRL">
      <summary>
            Rounded with opened left and right sides
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.ImageFrameType.Rectangle">
      <summary>
            Rectangle
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.ImageFrameType.RectangleInnerRounded">
      <summary>
            Rectangular frame with rounded inner rectangle
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.ImageFrameType.RectangleOuterRounded">
      <summary>
            Rounded outer rectangular frame with sharp inner rectangle
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.ShadowType">
      <summary>
            Defines the type of a shadow.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.ShadowType.None">
      <summary>
            No shadow at all.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.ShadowType.Solid">
      <summary>
            A shadow that does not fade towards its edges. Usually the fastest mode.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.ShadowType.LinearBlur">
      <summary>
            A shadow with linear attenuation.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.ShadowType.RadialBlur">
      <summary>
            A shadow with radial attenuation.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.ShadowType.GaussianBlur">
      <summary>
            A shadow with gausiian attenuation.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.PredefinedLightModel">
      <summary>
            The possible predefined light schemes
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.PredefinedLightModel.None">
      <summary>
            No lighting
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.PredefinedLightModel.SoftTopLeft">
      <summary>
            Single white light source with no specular light. Top left position in the scene.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.PredefinedLightModel.SoftFrontal">
      <summary>
            Single white light source with no specular light. Front position in the scene.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.PredefinedLightModel.SoftTopRight">
      <summary>
            Single white light source with no specular light. Top right position in the scene.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.PredefinedLightModel.ShinyTopLeft">
      <summary>
            Single white light source with specular light. Top left position in the scene.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.PredefinedLightModel.ShinyFrontal">
      <summary>
            Single white light source with specular light. Front position in the scene.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.PredefinedLightModel.ShinyTopRight">
      <summary>
            Single white light source with specular light. Top right position in the scene.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.PredefinedLightModel.MetallicLustre">
      <summary>
            Single white light source with specular and diffuse light. No ambient light component.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.PredefinedLightModel.NorthernLights">
      <summary>
            Fancy lighting from three light sources with high specular.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.PredefinedLightModel.SoftCameraLight">
      <summary>
            A soft point light that is moved with the camera.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.PredefinedLightModel.ShinyCameraLight">
      <summary>
            A shiny point light that is moved with the camera.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.PredefinedLightModel.BrightCameraLight">
      <summary>
            A point light that is moved with the camera, higher ambient.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.PredefinedLightModel.Arena">
      <summary>
            Red, green and blue light sources in model coorinates and a white on-camera light.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.PredefinedLightModel.GlitterLeft">
      <summary>
            Single white light source with specular and diffuse light, only global ambient. Left top position.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.PredefinedLightModel.GlitterRight">
      <summary>
            Single white light source with specular and diffuse light, only global ambient. Right top position.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.LightSourceType">
      <summary>
            Defines the type of a light source.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.LightSourceType.Directional">
      <summary>
            A light source that is infinitely far away from the scene. The rays 
            of light emitted by a directional light source can be considered 
            parallel by the time they reach an object.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.LightSourceType.Positional">
      <summary>
            The exact position of this light source within a scene determines 
            the effect it has on the scene.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.ListStyleType">
      <summary>
            Defines the shape or text of a bullet.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.ListStyleType.None">
      <summary>
            No marker is shown.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.ListStyleType.Disk">
      <summary>
            Default. Solid circles.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.ListStyleType.Star">
      <summary>
            Solid stars.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.ListStyleType.Square">
      <summary>
            Solid squares.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.ListStyleType.Decimal">
      <summary>
            1, 2, 3, 4, and so on.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.ListStyleType.LowerRoman">
      <summary>
            i, ii, iii, iv, and so on.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.ListStyleType.UpperRoman">
      <summary>
            I, II, III, IV, and so on.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.ListStyleType.LowerAlpha">
      <summary>
            a, b, c, d, and so on.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.ListStyleType.UpperAlpha">
      <summary>
            A, B, C, D, and so on.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.TextListStyleType">
      <summary>
            Defines the shape or text of a bullet.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.TextListStyleType.Decimal">
      <summary>
            1, 2, 3, 4, and so on.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.TextListStyleType.LowerRoman">
      <summary>
            i, ii, iii, iv, and so on.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.TextListStyleType.UpperRoman">
      <summary>
            I, II, III, IV, and so on.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.TextListStyleType.LowerAlpha">
      <summary>
            a, b, c, d, and so on.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.TextListStyleType.UpperAlpha">
      <summary>
            A, B, C, D, and so on.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.TextFormat">
      <summary>
            Defines the used text parser.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.TextFormat.Simple">
      <summary>
            No parser is used. The text can contain new line characters.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.TextFormat.XML">
      <summary>
            The XML parser is used. The text must be properly formatted 
            according to the XML standard.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.BackplaneShape">
      <summary>
            The shape of the backplane applied on texts, legends, chart margins and labels.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.BackplaneShape.Rectangle">
      <summary>
            Rectangle.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.BackplaneShape.Ellipse">
      <summary>
            Ellipse.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.BackplaneShape.Circle">
      <summary>
            Circle.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.BackplaneShape.CutEdgeRectangle">
      <summary>
            Cut edge rectangle with controlled edge.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.BackplaneShape.SmoothEdgeRectangle">
      <summary>
            Smooth edge rectangle with controlled smooth edge.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.ProjectionType">
      <summary>
            Defines the projection type
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.ProjectionType.Perspective">
      <summary>
            Perspective projection with depth perception, used for 3D scenes.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.ProjectionType.Orthogonal">
      <summary>
            Orthogonal projection (no depth perception) suitable for 2D charts.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.PredefinedProjection">
      <summary>
            Predefined view projections that enable you to 
            set all the projection parameters with one function call.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.PredefinedProjection.Orthogonal">
      <summary>
            Orthogonal 2D projection, no viewer rotation.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.PredefinedProjection.OrthogonalElevated">
      <summary>
            An orthogonal projection with slightly elevated camera. Suitable for 3D pie charts.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.PredefinedProjection.OrthogonalHorizontalLeft">
      <summary>
            Orthogonal 2D projection with viewer rotation for left aligned charts.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.PredefinedProjection.OrthogonalHorizontalRight">
      <summary>
            Orthogonal 2D projection with viewer rotation for right aligned charts.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.PredefinedProjection.OrthogonalHalf">
      <summary>
            Orthogonal 3D projection without viewer rotation.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.PredefinedProjection.OrthogonalHalfHorizontalLeft">
      <summary>
            Orthogonal 3D projection with viewer rotation for left aligned charts.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.PredefinedProjection.OrthogonalHalfHorizontalRight">
      <summary>
            Orthogonal 3D projection with viewer rotation for right aligned charts.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.PredefinedProjection.OrthogonalHalfRotated">
      <summary>
            Orthogonal 3D projection with rotated camera.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.PredefinedProjection.OrthogonalHalfElevated">
      <summary>
            Orthogonal 3D projection with elevated camera.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.PredefinedProjection.OrthogonalTop">
      <summary>
            Orthogonal view from top. Suitable for contour charts.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.PredefinedProjection.Perspective">
      <summary>
            A perspective projection without viewer rotation.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.PredefinedProjection.PerspectiveHorizontalLeft">
      <summary>
            A perspective projection with viewer rotation for left aligned charts.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.PredefinedProjection.PerspectiveHorizontalRight">
      <summary>
            A perspective projection with viewer rotation for right aligned charts.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.PredefinedProjection.PerspectiveRotated">
      <summary>
            A perspective projection with slightly rotated camera.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.PredefinedProjection.PerspectiveElevated">
      <summary>
            A perspective projection with slightly elevated camera.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.PredefinedProjection.PerspectiveTilted">
      <summary>
            A perspective projection with slightly rotated and elevated camera.
            Suitable for 3D scatter and surface charts.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.PredefinedProjection.Perspective1">
      <summary>
            A perspective projection with slightly rotated and elevated camera.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.PredefinedProjection.Perspective2">
      <summary>
            A perspective projection with slightly rotated and elevated camera.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.BoundsMode">
      <summary>
            Possible modes for fitting a drawable object into a specified area.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.BoundsMode.None">
      <summary>
            The object will not try to align to the chart area.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.BoundsMode.Fit">
      <summary>
            The object will stretch along X and Y in order to fill as much as 
            possible of the area preserving the object original proportions.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.BoundsMode.Stretch">
      <summary>
            The object will stretch along X and Y in order to fill as much as 
            possible of the area without breaking outside. Does not 
            preserve the object original proportions.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.BlurType">
      <summary>
            Different types of blur functions.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.BlurType.Linear">
      <summary>
            Specifies linear blur.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.BlurType.Radial">
      <summary>
            Specifies radial blur.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.BlurType.Gaussian">
      <summary>
            Specifies gaussian blur.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.BevelType">
      <summary>
            Different styles of bevel and emboss filter
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.BevelType.Inner">
      <summary>
            Inner bevel and emboss
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.BevelType.Outer">
      <summary>
            Outer bevel and emboss
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.BevelType.Emboss">
      <summary>
            Inner and outer bevel and emboss
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.BevelType.PillowEmboss">
      <summary>
            Pillow emboss
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.GlowType">
      <summary>
            Different styles of glow filter
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.GlowType.Inner">
      <summary>
            Inner glow
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.GlowType.Outer">
      <summary>
            Outer glow
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.ImageFilterType">
      <summary>
            Defines the supported image filters
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.ImageFilterType.Blur">
      <summary>
            Blur filter
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.ImageFilterType.Glow">
      <summary>
            Glow filter
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.ImageFilterType.Lighting">
      <summary>
            Lighting filter
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.ImageFilterType.BevelAndEmboss">
      <summary>
            BevelAndEmboss filter
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.ImageFilterType.ColorFill">
      <summary>
            Fast fill with color
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.ImageFilterType.Other">
      <summary>
            Not specified (reserved)
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.RenderDevice">
      <summary>
            Different types of rendering devices.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.RenderDevice.Auto">
      <summary>
            The rendering device is automatically determined
            based on the content requirements
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.RenderDevice.GDI">
      <summary>
            The rendering device is GDI+.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.RenderDevice.OpenGL">
      <summary>
            The rendering device is OpenGL.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.RenderSurface">
      <summary>
            Different types of rendering surfaces.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.RenderSurface.Bitmap">
      <summary>
            The control renders the image to a bitmap, which is then drawn 
            on the screen.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.RenderSurface.Window">
      <summary>
            The control renders directly in the window of the control.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.PredefinedStandardFrame">
      <summary>
            Predefined standard frame styles.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.PredefinedStandardFrame.None">
      <summary>
            Both bevels are disabled. No bevel space.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.PredefinedStandardFrame.SingleFixed">
      <summary>
            Both bevels are disabled. Bevel distance is 1.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.PredefinedStandardFrame.Sunken">
      <summary>
            Both bevels are sunken. Bevel width is 1.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.PredefinedStandardFrame.Raised">
      <summary>
            Both bevels are raised. Bevel width is 1.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.PredefinedStandardFrame.SunkenRaised">
      <summary>
            Outer bevel is sunken. Inner bevel is raised. Bevel width is 2.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.PredefinedStandardFrame.RaisedSunken">
      <summary>
            Outer bevel is raised. Inner bevel is sunken. Bevel width is 2.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.PredefinedImageFrame">
      <summary>
            Predefined image frame styles.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.TextDirection">
      <summary>
            Enumerates the supported text directions
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.TextDirection.LeftToRight">
      <summary>
            Left to right
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.TextDirection.RightToLeft">
      <summary>
            Right to left
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.AngleUnit">
      <summary>
            Enumerates the currently defined angle measurement units
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.AngleUnit.Radian">
      <summary>
            Radian angle unit
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.AngleUnit.Degree">
      <summary>
            Degree angle unit
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.AngleUnit.Grad">
      <summary>
            Grad angle unit
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.MetricUnit">
      <summary>
            Enumerates the currently defined Metric measurement units
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.MetricUnit.Micrometer">
      <summary>
            Micrometer
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.MetricUnit.Milimeter">
      <summary>
            Milimeter
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.MetricUnit.Centimeter">
      <summary>
            Centimeter
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.MetricUnit.Decimeter">
      <summary>
            Decimeter
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.MetricUnit.Meter">
      <summary>
            Meter
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.MetricUnit.Kilometer">
      <summary>
            Kilometer
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.EnglishUnit">
      <summary>
            Enumerates the currently defined English measurement units
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.EnglishUnit.League">
      <summary>
            League
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.EnglishUnit.Mile">
      <summary>
            Mile
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.EnglishUnit.Furlong">
      <summary>
            Furlong
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.EnglishUnit.Chain">
      <summary>
            Chain
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.EnglishUnit.Rod">
      <summary>
            Rod
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.EnglishUnit.Yard">
      <summary>
            Yard
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.EnglishUnit.Foot">
      <summary>
            Foot
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.EnglishUnit.Link">
      <summary>
            Link
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.EnglishUnit.Hand">
      <summary>
            Hand
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.EnglishUnit.Inch">
      <summary>
            Inch
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.EnglishUnit.Line">
      <summary>
            Line
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.EnglishUnit.Pica">
      <summary>
            Pica
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.RelativeUnit">
      <summary>
            Enumerates the currently defined Relative measurement units
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.RelativeUnit.ParentPercentage">
      <summary>
            Measurement specified in percentage of a parent dimension
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.RelativeUnit.RootPercentage">
      <summary>
            Measurement specified in percentage of a root dimension
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.UnitType">
      <summary>
            Defines the possible types of measurement units
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.UnitType.Device">
      <summary>
            Device measurement units (e.g. pixels)
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.UnitType.Absolute">
      <summary>
            Absolute (device independant measurement units)
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.UnitType.Relative">
      <summary>
            Relatice measurement units
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.MeasurementSystem">
      <summary>
            Enumerates the currently provided measurment systems
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.MeasurementSystem.English">
      <summary>
            British and American (English) measurement system
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.MeasurementSystem.Metric">
      <summary>
            Metric measurement system
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.MeasurementSystem.Graphics">
      <summary>
            GDI+ measurement system
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.MeasurementSystem.Relative">
      <summary>
            Relative measurement system
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.ClientScript">
      <summary>
            Enumerates the types of client side script
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.ClientScript.VBScript">
      <summary>
            VBScript
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.ClientScript.JScript">
      <summary>
            JScript
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.InteractivityAttributeType">
      <summary>
            Defines the supported interactivity attributes
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.InteractivityAttributeType.UrlLink">
      <summary>
            Url link
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.InteractivityAttributeType.Cursor">
      <summary>
            Cursor
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.InteractivityAttributeType.Tooltip">
      <summary>
            Tooltip
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.InteractivityAttributeType.CustomScript">
      <summary>
            Custom script
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.InteractivityAttributeType.CustomMapAreaAttribute">
      <summary>
            Custom map area attribute
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.InteractivityAttributeType.UserData">
      <summary>
            User data attribute
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.InteractivityAttributeType.ImageMapObject">
      <summary>
            Postback attribute
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.InteractivityAttributeType.Postback">
      <summary>
            Image map object attribute
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.InteractivityAttributeType.Other">
      <summary>
            Not specified (reserved)
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.ColorToHatchMode">
      <summary>
            Defines the mode in which colors are converted to hatches
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.ColorToHatchMode.NearestIntensity">
      <summary>
            Finds the hatch which nest matches the color intensity
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.ColorToHatchMode.CycleHatchStyles">
      <summary>
            Ciclic color to hatch conversion
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.PathCommandType">
      <summary>
            Enumerates the possible path commands
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.PathCommandType.MoveTo">
      <summary>
            Move to a coordinate
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.PathCommandType.LineTo">
      <summary>
            Draw a line to a coordinate
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.PathCommandType.BezierCurveTo">
      <summary>
            Draw a bezier curve to a coordinate
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.PathCommandType.ArcTo">
      <summary>
            Draw an arc to a cordinate
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.PathCommandType.CircularArcTo">
      <summary>
            Draw a circular arc to a coordinate
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.PathCommandType.EllipticalArcTo">
      <summary>
            Draw an elliptical arc to a coordinate
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.CompassDirection">
      <summary>
            Enumerates the compass directions
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.CompassDirection.NorthWest">
      <summary>
            North West
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.CompassDirection.North">
      <summary>
            North
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.CompassDirection.NorthEast">
      <summary>
            North East
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.CompassDirection.East">
      <summary>
            East
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.CompassDirection.SouthEast">
      <summary>
            South East
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.CompassDirection.South">
      <summary>
            South
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.CompassDirection.SouthWest">
      <summary>
            South West
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.CompassDirection.West">
      <summary>
            West
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Dimension">
      <summary>
            Enumerates the dimensions in a 3D Cartesian coordinate system
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.Dimension.X">
      <summary>
            X dimension
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.Dimension.Y">
      <summary>
            Y dimension
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.Dimension.Z">
      <summary>
            Z dimension
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.ImageMapMode">
      <summary>
            Enumerates the possible image map rendering modes
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.ImageMapMode.XHTML">
      <summary>
            Generate an XHTML image map
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.ImageMapMode.ImageMapObject">
      <summary>
            Generate an XML image map that will be deserialized to a JavaScript object at the client
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.LightSourceCoordinateMode">
      <summary>
            Enumerates the coordinate modes for a light source.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.LightSourceCoordinateMode.Model">
      <summary>
            The light source coordinates are defined in model space.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.LightSourceCoordinateMode.Camera">
      <summary>
            The light source coordinates are defined in camera space.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.AnimationType">
      <summary>
            Enumerates the animation types in the order they must be applied.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.AnimationType.Hide">
      <summary>
            Hide animation
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.AnimationType.Fade">
      <summary>
            Fade animation
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.AnimationType.Color">
      <summary>
            Color animation
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.AnimationType.Rotate">
      <summary>
            Rotate animation
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.AnimationType.Scale">
      <summary>
            Scale animation
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.AnimationType.Translate">
      <summary>
            Translate animation
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.AnimationType.All">
      <summary>
            All animations 
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.MouseAction">
      <summary>
            Defines the possible mouse actions
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.MouseAction.None">
      <summary>
            No mouse action
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.MouseAction.Down">
      <summary>
            Mouse down
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.MouseAction.Up">
      <summary>
            Mouse up
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.MouseAction.Move">
      <summary>
            Mouse move
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.MouseAction.Leave">
      <summary>
            Mouse leave
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.MouseAction.Enter">
      <summary>
            Mouse enter
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.MouseAction.Hover">
      <summary>
            Mouse hover
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.MouseAction.Wheel">
      <summary>
            Mouse wheel
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Direction">
      <summary>
            Enumerates the possible fragment enumerations
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.WrappingStyle">
      <summary>
            The wrapping style applied on the text object.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.MarkerShape">
      <summary>
            Marker shapes.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.MarkerShape.Bar">
      <summary>
            regular bar
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.MarkerShape.Triangle">
      <summary>
            cone
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.MarkerShape.InvertedTriangle">
      <summary>
            inverted cone
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.MarkerShape.Ellipse">
      <summary>
            ellipse
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.MarkerShape.Cross">
      <summary>
            cross
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.MarkerShape.DiagonalCross">
      <summary>
            a diagonal cross 
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.MarkerShape.LineCross">
      <summary>
            a cross shape with no filling
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.MarkerShape.LineDiagonalCross">
      <summary>
            a diagonal cross shape with no filling
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.MarkerShape.Star">
      <summary>
            star
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.RangeDisposition">
      <summary>
            Enumerates the possible range dispositions
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.RangeDisposition.Below">
      <summary>
            Current range is below range
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.RangeDisposition.Above">
      <summary>
            Current range is above range
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.RangeDisposition.InnerContained">
      <summary>
            Current range is fully contained
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.RangeDisposition.OuterContained">
      <summary>
            Current range outer contained
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.RangeDisposition.LeftContained">
      <summary>
            Current range is left contained
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.RangeDisposition.RightContained">
      <summary>
            Current range is right contained
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.ShapeRenderingMode">
      <summary>
            Enumerates the shape rendering modes
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.ImageRenderingMode">
      <summary>
            Enumerates the image rendering modes
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.TextRenderingMode">
      <summary>
            Enumerates the text rendering modes
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.BrushType">
      <summary>
            Enumerates the possible brush types
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NShadowStyleToGrayScaleConverter">
      <summary>
            The NShadowStyleToGrayScaleConverter class represents a converter, which converts a shadow style to its gray scale equivalent
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NShadowStyleConverter">
      <summary>
            The NShadowStyleConverter class serves as base class for all converters, which can convert shadow styles
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NShadowStyleConverter.Convert(System.Object)">
      <summary>
            Must override to convert the object
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NShadowStyleConverter.CanConvert(System.Type)">
      <summary>
            Determines whether the converter can convert objects of the specified type 
            </summary>
      <param name="type">object type</param>
      <returns>true if objects of this type can be converted, otherwise false</returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NShadowStyleConverter.Converts">
      <summary>
            Returns an array of types converted by this object.
            </summary>
      <remarks>
            This implementation will return all currently known types of shadow styles
            </remarks>
    </member>
    <member name="M:Nevron.GraphicsCore.NShadowStyleToGrayScaleConverter.Convert(System.Object)">
      <summary>
            Overriden to convert all colors of a shadow stytle to gray scale
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.GraphicsCore.NBackplaneStyleConverter">
      <summary>
            Serves as a base class for all converters, which can convert backplane styles.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NBackplaneStyleConverter.Convert(System.Object)">
      <summary>
            Must override to convert the object.
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NBackplaneStyleConverter.CanConvert(System.Type)">
      <summary>
            Determines whether the converter can convert objects of the specified type 
            </summary>
      <param name="type">object type</param>
      <returns>true if objects of this type can be converted, otherwise false</returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NBackplaneStyleConverter.Converts">
      <summary>
            Returns an array of types converted by this object.
            </summary>
      <remarks>
            This implementation will return all known types of text styles.
            </remarks>
    </member>
    <member name="T:Nevron.Editors.NDashStyleButton">
      <summary>
            Summary description for NDashStyleButton.
            </summary>
    </member>
    <member name="T:Nevron.Editors.NShadowStyleTypeEditorNoAutomatic">
      <summary>
            Provides facilities for visual editing of NShadowStyle objects.
            </summary>
    </member>
    <member name="T:Nevron.Editors.NShadowStyleTypeEditor">
      <summary>
            Provides facilities for visual editing of NShadowStyle objects.
            </summary>
    </member>
    <member name="T:Nevron.Editors.NAppearanceStyleTypeEditor">
      <summary>
            Provides facilities for visual editing of NAppearanceStyle objects.
            </summary>
    </member>
    <member name="T:Nevron.Editors.NAttributeTypeEditor">
      <summary>
            Summary description for NAttributeStyleEditor.
            </summary>
    </member>
    <member name="M:Nevron.Editors.NAppearanceStyleTypeEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
            Determines whether the style supports painting (preview).
            </summary>
      <param name="context">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Editors.NAppearanceStyleTypeEditor.PaintValue(System.Drawing.Design.PaintValueEventArgs)">
      <summary>
            Paints the style in the given context.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.Editors.NAppearanceStyleTypeEditor.PaintValueInternal(Nevron.GraphicsCore.NAppearanceStyle,System.Drawing.Design.PaintValueEventArgs)">
      <summary>
            Paints the appearance style in the passed paint value context.
            </summary>
      <param name="appearanceStyle">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.Editors.NShadowStyleTypeEditor.PaintValue(System.Drawing.Design.PaintValueEventArgs)">
      <summary>
            Paints the style in the given context.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.Editors.NShadowStyleTypeEditor.Edit(Nevron.GraphicsCore.NShadowStyle,Nevron.GraphicsCore.NShadowStyle@)">
      <summary>
            Edits the specified style. 
            </summary>
      <param name="shadowStyle">
      </param>
      <param name="shadowStyleResult">
      </param>
      <returns>
      </returns>
      <remarks>
            If the function returns true then the out parameter holds a valid style.
            </remarks>
    </member>
    <member name="M:Nevron.Editors.NShadowStyleTypeEditor.Edit(Nevron.GraphicsCore.NShadowStyle,System.Boolean,Nevron.GraphicsCore.NShadowStyle@)">
      <summary>
            Edits the specified style. If automatic is set to true the in parameter must be treated as automatic style.
            </summary>
      <param name="shadowStyle">
      </param>
      <param name="automaticStyle">
      </param>
      <param name="shadowStyleResult">
      </param>
      <returns>
      </returns>
      <remarks>
            If the function returns true then the out parameter holds a valid style.
            </remarks>
    </member>
    <member name="T:Nevron.Editors.NInteractivityStyleTypeEditor">
      <summary>
            Provides facilities for visual editing of NInteractivityStyle objects.
            </summary>
    </member>
    <member name="M:Nevron.Editors.NInteractivityStyleTypeEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
            Determines whether the style supports painting (preview).
            </summary>
      <param name="context">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Editors.NInteractivityStyleTypeEditor.PaintValue(System.Drawing.Design.PaintValueEventArgs)">
      <summary>
            Paints the style in the given context.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.Editors.NInteractivityStyleTypeEditor.Edit(Nevron.GraphicsCore.NInteractivityStyle,Nevron.GraphicsCore.NInteractivityStyle@)">
      <summary>
            Edits the specified style. 
            </summary>
      <param name="interactivityStyle">
      </param>
      <param name="interactivityStyleResult">
      </param>
      <returns>
      </returns>
      <remarks>
            If the function returns true then the out parameter holds a valid style.
            </remarks>
    </member>
    <member name="M:Nevron.Editors.NInteractivityStyleTypeEditor.Edit(Nevron.GraphicsCore.NInteractivityStyle,System.Boolean,Nevron.GraphicsCore.NInteractivityStyle@)">
      <summary>
            Edits the specified style. If automatic is set to true the in parameter must be treated as automatic style.
            </summary>
      <param name="interactivityStyle">
      </param>
      <param name="allowAutomatic">
      </param>
      <param name="interactivityStyleResult">
      </param>
      <returns>
      </returns>
      <remarks>
            If the function returns true then the out parameter holds a valid style.
            </remarks>
    </member>
    <member name="M:Nevron.Editors.NInteractivityStyleTypeEditor.PaintAttributeStripe(Nevron.GraphicsCore.NInteractivityStyle,System.Drawing.Graphics,Nevron.Editors.NImageListBuilder,System.Drawing.RectangleF)">
      <summary>
            Paints the attributes present in the interactivity style in the specified device and bounds.
            </summary>
      <param name="interactivityStyle">
      </param>
      <param name="g">
      </param>
      <param name="imageListBuilder">
      </param>
      <param name="bounds">
      </param>
    </member>
    <member name="T:Nevron.Editors.NStandardFrameStyleTypeEditor">
      <summary>
            Provides facilities for visual editing of NStandardFrameStyle objects.
            </summary>
    </member>
    <member name="M:Nevron.Editors.NStandardFrameStyleTypeEditor.Edit(Nevron.GraphicsCore.NStandardFrameStyle,Nevron.GraphicsCore.NStandardFrameStyle@)">
      <summary>
            Edits the specified style. 
            </summary>
      <param name="standardFrameStyle">
      </param>
      <param name="standardFrameStyleResult">
      </param>
      <returns>
      </returns>
      <remarks>
            If the function returns true then the out parameter holds a valid style.
            </remarks>
    </member>
    <member name="M:Nevron.Editors.NStandardFrameStyleTypeEditor.Edit(Nevron.GraphicsCore.NStandardFrameStyle,System.Boolean,Nevron.GraphicsCore.NStandardFrameStyle@)">
      <summary>
            Edits the specified style. If automatic is set to true the in parameter must be treated as automatic style.
            </summary>
      <param name="standardFrameStyle">
      </param>
      <param name="automaticStyle">
      </param>
      <param name="standardFrameStyleResult">
      </param>
      <returns>
      </returns>
      <remarks>
            If the function returns true then the out parameter holds a valid style.
            </remarks>
    </member>
    <member name="T:Nevron.Editors.NFrameStyleButton">
      <summary>
            Represents a button, which is used for the editing of a frame style. Displays a frame style preview.
            </summary>
    </member>
    <member name="T:Nevron.Editors.NAppearanceStyleButton`1">
      <summary>
            Serves as base class for preview buttons, editing different appearance styles
            </summary>
    </member>
    <member name="M:Nevron.Editors.NAppearanceStyleButton`1.OnClick(System.EventArgs)">
      <summary>
            Overriden to show the fill style editor
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.Editors.NAppearanceStyleButton`1.OnStyleChanged">
      <summary>
            Called when the appearance style has changed
            </summary>
    </member>
    <member name="M:Nevron.Editors.NAppearanceStyleButton`1.CreateDefaultStyle">
      <summary>
            Creates a default style for the purpose of automatic editing
            </summary>
      <returns>
      </returns>
    </member>
    <member name="E:Nevron.Editors.NAppearanceStyleButton`1.StyleChanged">
      <summary>
            Raised when the fill style has changed
            </summary>
    </member>
    <member name="P:Nevron.Editors.NAppearanceStyleButton`1.UseAutomatic">
      <summary>
            Gets/sets whether the editor associated with button must allow (enable) the Use Automatic check box in the editor
            </summary>
    </member>
    <member name="P:Nevron.Editors.NAppearanceStyleButton`1.Style">
      <summary>
            Gets/sets the style edited by the button
            </summary>
    </member>
    <member name="M:Nevron.Editors.NFrameStyleButton.EditStyle(Nevron.GraphicsCore.NFrameStyle,System.Boolean,Nevron.GraphicsCore.NFrameStyle@)">
      <summary>
            Overriden to show the background style type editor
            </summary>
      <param name="inStyle">
      </param>
      <param name="automatic">
      </param>
      <param name="outStyle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Editors.NFrameStyleButton.CreateDefaultStyle">
      <summary>
            Overriden to create a new background style
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.Editors.NFillStyleButton">
      <summary>
            Represents a button, which is used for the editing of a fill style. Displays a fill style preview.
            </summary>
    </member>
    <member name="M:Nevron.Editors.NFillStyleButton.EditStyle(Nevron.GraphicsCore.NFillStyle,System.Boolean,Nevron.GraphicsCore.NFillStyle@)">
      <summary>
            Overriden to show the fill style type editor
            </summary>
      <param name="inStyle">
      </param>
      <param name="automatic">
      </param>
      <param name="outStyle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Editors.NFillStyleButton.CreateDefaultStyle">
      <summary>
            Overriden to create a new color fill style
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.Editors.NPointEditor">
      <summary>
            Summary description for NPointEditor.
            </summary>
    </member>
    <member name="M:Nevron.Editors.NPointEditor.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
    </member>
    <member name="P:Nevron.Editors.NPointEditor.Point">
      <summary>
            Gets/sets the point to edit.
            </summary>
    </member>
    <member name="T:Nevron.Editors.NLengthEditorUC">
      <summary>
            Edits a NLength object.
            </summary>
    </member>
    <member name="M:Nevron.Editors.NLengthEditorUC.Dispose(System.Boolean)">
      <summary> 
            Clean up any resources being used.
            </summary>
    </member>
    <member name="P:Nevron.Editors.NLengthEditorUC.Length">
      <summary>
            Gets/sets the length object to edit.
            </summary>
    </member>
    <member name="E:Nevron.Editors.NLengthEditorUC.LengthChanged">
      <summary>
            Fired when the length has changed.
            </summary>
    </member>
    <member name="T:Nevron.Editors.NDateTimeSpanEditorUC">
      <summary>
            Summary description for NDateTimeSpanEditorUC.
            </summary>
    </member>
    <member name="M:Nevron.Editors.NDateTimeSpanEditorUC.Dispose(System.Boolean)">
      <summary> 
            Clean up any resources being used.
            </summary>
    </member>
    <member name="P:Nevron.Editors.NDateTimeSpanEditorUC.DateTimeSpan">
      <summary>
            Gets/sets the date time span object to edit.
            </summary>
    </member>
    <member name="E:Nevron.Editors.NDateTimeSpanEditorUC.DateTimeSpanChanged">
      <summary>
            Fired when the date time span has changed.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NHScrollInfo">
      <summary>
            Summary description for NHScrollInfo.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NScrollInfo">
      <summary>
            Summary description for NScrollInfo.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NScrollInfo.SmallChange">
      <summary>
            Gets/sets the small change for the corresponding scrollbar.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NScrollInfo.Value">
      <summary>
            Gets/sets the current value of the scrollbar.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NScrollInfo.Visible">
      <summary>
            Gets/sets a value whether the corresponding scrollbar is visible.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NTreeView">
      <summary>
            Represents a custom TreeView control with support for custom painting and images.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeView.EnableSkinning">
      <summary>
            Gets/sets a value indicating whether the control will use skin logic.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeView.Skin">
      <summary>
            Gets/sets the local NSkin instance to be used when painting this control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeView.CurrentSkin">
      <summary>
            Gets the current skin to be used by this instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeView.ScrollBarRenderer">
      <summary>
            Gets/sets the renderer which handles scrollbar painting.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeView.UseCustomScrollBars">
      <summary>
            Determines whether to use custom scrollbars or use the default windows ones (better performance).
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeView.ClientMouse">
      <summary>
            Gets the current mouse position in client coordinates.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeView.Renderer">
      <summary>
            Gets/sets the renderer that renders the NTreeView.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeView.Palette">
      <summary>
            Gets/sets the NPalette used to render the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeView.PaletteInheritance">
      <summary>
            Gets/sets a value which Palette value will be applied on a higher level Palette change.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeView.Border">
      <summary>
            Gets the NControlBorder object that manages the border around the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeView.BorderWidth">
      <summary>
            Gets the preffered width of the border.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeView.IsBorderHot">
      <summary>
            Gets a value indicating whether the border should be drawn in its default state (works only if the border is interactive).
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeView.DefaultBorderStyle">
      <summary>
            Gets the default border style for the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeView.DefaultBaseBorderColor">
      <summary>
            Gets the default base color to use when drawing 3D borders.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeView.ItemHeight">
      <summary>
            Gets/sets the height of an item in the NTreeView control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeView.CustomDraw">
      <summary>
            Gets/sets a value whether the treeview will perform custom drawing.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeView.LineColor">
      <summary>
            Gets/sets the line color for the treeview.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NTooltipController">
      <summary>
            The NTooltipController manages all tooltip requests per UI thread.
            It uses the NTooltipInfo object to create and display a pop-up window which contains brief summary about a control.
            Visually appealing effects like fade-in and fade-out animations, transparency, shadows, custom background, based on our generic NUIShape primitives, are easily achieved.
            The differences between the NTooltip component and the NTooltipController are many,
            most significant of them being animations, shadows supported on Windows 2000, synchronization in two subsequent tooltip display requests, control over tooltip's behavior, placement and appearance, etc.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTooltipController.Display(System.Windows.Forms.Control,Nevron.UI.NTooltipInfo)">
      <summary>
            Displays a tooltip, attached to a Control instance.
            </summary>
      <param name="owner">The owner of the tooltip.</param>
      <param name="info">The NTooltipInfo instance which describes the tooltip.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTooltipController.Close">
      <summary>
            Closes the currently displayed tooltip (if any).
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTooltipController.HasRequest(System.Windows.Forms.Control)">
      <summary>
            Determines whether the specified control has a request for displaying a tip.
            </summary>
      <param name="c">The control to examine.</param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTooltipController.HasDisplayedTip">
      <summary>
            Determines whether there is a tooltip currently displayed.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NFormSkinState">
      <summary>
            Represents an extended skin state which may be converted to an NFrameAppearance template.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NSkinState">
      <summary>
            Describes the appearance of a control in a specified state - such as normal, hot, disabled, etc.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NSkinState.ShouldSerializeBackground">
      <summary>
            Determines whether the Background property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NSkinState.ShouldSerializeGlyph">
      <summary>
            Determines whether the Glyph property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NSkinState.ShouldSerializeColor">
      <summary>
            Determines whether the Color property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NSkinState.ShouldSerializeTextShadow">
      <summary>
            Determines whether the TextShadow property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NSkinState.ShouldSerializeContentPadding">
      <summary>
            Determines whether the ContentPadding property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NSkinState.ShouldSerializePreferredSize">
      <summary>
            Determines whether the PreferredSize property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NSkinState.ShouldSerializeMinimumSize">
      <summary>
            Determines whether the PreferredSize property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NSkinState.Background">
      <summary>
            Gets/sets the NSkinImageShape instance which describes the background.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NSkinState.Glyph">
      <summary>
            Gets/sets the NSkinImageShape instance which describes the background.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NSkinState.Color">
      <summary>
            Gets/sets the NSkinColor instance containing color entries for the current state.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NSkinState.TextShadow">
      <summary>
            Determines whether the text will have a shadow in this state.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NSkinState.ContentPadding">
      <summary>
            Gets/sets the padding to be applied on content.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NSkinState.PreferredSize">
      <summary>
            Gets/sets the preferred size for this state.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NSkinState.MinimumSize">
      <summary>
            Gets/sets the minimum size for this state.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NFormSkinState.ShouldSerializeCaptionFont">
      <summary>
            Determines whether the CaptionFont property needs to be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NFormSkinState.ShouldSerializeCaptionFontString">
      <summary>
            Determines whether the CaptionFontString property needs to be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NFormSkinState.ShouldSerializeBorders">
      <summary>
            Determines whether the Borders property needs to be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NFormSkinState.ShouldSerializeTextRenderingHint">
      <summary>
            Determines whether the TextRenderingHint property needs to be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NFormSkinState.ShouldSerializeTextAlign">
      <summary>
            Determines whether the TextAlign property needs to be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NFormSkinState.ShouldSerializeImageAlign">
      <summary>
            Determines whether the ImageAlign property needs to be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NFormSkinState.ShouldSerializeImageTextRelation">
      <summary>
            Determines whether the ImageTextRelation property needs to be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NFormSkinState.ShouldSerializeButtonsOffset">
      <summary>
            Determines whether the ButtonsOffset property needs to be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NFormSkinState.ShouldSerializeImageOffset">
      <summary>
            Determines whether the ImageOffset property needs to be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NFormSkinState.ShouldSerializeCaptionHeight">
      <summary>
            Determines whether the CaptionHeight property needs to be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFormSkinState.CaptionFont">
      <summary>
            Gets/sets the Font to be used when drawing caption text.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFormSkinState.Borders">
      <summary>
            Gets/sets the NPadding structure which describes the dimensions of the Form's borders.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFormSkinState.TextRenderingHint">
      <summary>
            Gets/sets the hint to be used when rendering caption text.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFormSkinState.TextAlign">
      <summary>
            Gets/sets the alignment of the caption text.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFormSkinState.ImageAlign">
      <summary>
            Gets/sets the alignment of the caption image.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFormSkinState.ImageTextRelation">
      <summary>
            Gets/sets the relation between caption image and text.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFormSkinState.ButtonsOffset">
      <summary>
            Gets/sets the caption buttons' offset from the top-right corner of the caption.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFormSkinState.ImageOffset">
      <summary>
            Gets/sets an additional offset to be applied when calculating caption image's bounds.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFormSkinState.CaptionHeight">
      <summary>
            Gets/sets the height of the caption.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFormSkinState.CaptionFontString">
      <summary>
            Gets/sets the XML-serializable string representation of the CaptionFont property.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NProgressBarRenderInfo">
      <summary>
            Provides information needed to render a NProgressBar.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NProgressBarRenderInfo.ProgressBounds">
      <summary>
            Gets/sets the rectangle which represents the progress area.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NProgressBarRenderInfo.Properties">
      <summary>
            Gets/sets the object that contains common information about a NProgressBar control.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NProgressBarRenderer">
      <summary>
            Summary description for NProgressBarRenderer.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NProgressBarRenderer.DrawProgress(System.Drawing.Graphics,Nevron.UI.WinForm.Controls.NProgressBarRenderInfo)">
      <summary>
            Renders the progress rectangle.
            </summary>
      <param name="g">The graphics surface to draw onto.</param>
      <param name="info">The info needed to render.</param>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.PopupCloseResult.Accept">
      <summary>
            The popup is closed after its "AcceptKey" is pressed.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.PopupCloseResult.Cancel">
      <summary>
            The popup is closed after its "CancelKey" is pressed.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.PopupCloseResult.UserInput">
      <summary>
            The popup is closed due to a user input that automatically triggers the Close process
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.PopupBorderStyle">
      <summary>
            Sepcifies the available border styles for a NPopup instance.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.PopupBorderStyle.None">
      <summary>
            No border is specified
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.PopupBorderStyle.OnePixel">
      <summary>
            One-pixel border. The border color is the value of the Palette.Border property.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.PopupBorderStyle.TwoPixels">
      <summary>
            Two pixels border.
            The outer border color is the value of the Palette.Border property.
            The inner border color is the value of the Palette.SecondaryBorder property.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.PopupAnimation">
      <summary>
            Specifies the possible animation values when displaying a pop-up notify window.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.PopupAnimation.None">
      <summary>
            No animation is applied.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.PopupAnimation.Slide">
      <summary>
            Sliding effect is applied.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.PopupAnimation.Fade">
      <summary>
            Fading effect is applied. 
             </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.PopupAnimation.SlideFade">
      <summary>
            Both Slide and Fade effects are applied.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.PopupAnimationDirection">
      <summary>
            Specifies the possible animation directions when displaying a pop-up notify window.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.PopupAnimationDirection.Automatic">
      <summary>
            The direction is automatically choosen depending on the location of the Windows Taskbar
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.PopupAnimationDirection.LeftToRight">
      <summary>
            Left to right animation.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.PopupAnimationDirection.RightToLeft">
      <summary>
            Right to left animation.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.PopupAnimationDirection.TopToBottom">
      <summary>
            Top to bottom animation.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.PopupAnimationDirection.BottomToTop">
      <summary>
            Bottom to top animation.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NParentControlDesigner">
      <summary>
            Summary description for NParentControlDesigner.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NLightUIPaintContext">
      <summary>
            Painting context used to measure/paint NLightUIItem instances.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListGridInfo.HLineStyle">
      <summary>
            Gets/sets the style of horizontal lines.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListGridInfo.VLineStyle">
      <summary>
            Gets/sets the style of vertical lines.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListGridInfo.IsEmpty">
      <summary>
            Determines whether the info is empty (neither lines are defined).
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NArrow">
      <summary>
            Represents the arrows of NMapNavigator control. 
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NArrow.Bounds">
      <summary>
            Gets the bounding rectangle of the arrow.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NArrow.Capture">
      <summary>
            Gets a value indicating whether this arrow has captured the mouse.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NArrow.InteractiveState">
      <summary>
            Gets the InteractiveState of the arrow.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NArrow.Parent">
      <summary>
            Gets the parent NMapNavigator.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NArrow.Direction">
      <summary>
            Gets the arrow direction.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NInputBox">
      <summary>
            Represents a simple input box for getting string input from the user.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NInputBox.Show(System.String)">
      <summary>
            Shows a modal input box with the specified title and returns the text, the user has
            entered or null if the user pressed Esc.
            </summary>
      <param name="title">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NCommandRenderer">
      <summary>
            Represents a renderer for NCommandParent object and its items.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NCommandRenderer.DrawCommand(Nevron.UI.WinForm.Controls.NCommand,System.Drawing.Graphics)">
      <summary>
            Draws the specified command on the graphics device.
            </summary>
      <param name="comm">
      </param>
      <param name="g">
      </param>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NMenuRenderer.LeftColumnWidth">
      <summary>
            Gets the left column width.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NCommandProperties">
      <summary>
            Encapsulates the common command properties.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NCommandProperties.Dispose">
      <summary>
            Disposes all the resources used by the NPalette.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandProperties.Font">
      <summary>
            Gets/sets the local Font value to be used when drawing command's text. If null, the current parent's Font will be used.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandProperties.Text">
      <summary>
            Gets/sets the text associated with the command.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandProperties.TooltipText">
      <summary>
            Gets/sets the tooltip text to be displayed when the command is selected.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandProperties.ImageIndex">
      <summary>
            Gets/sets the image index from the assigned image list.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandProperties.SelectedImageIndex">
      <summary>
            Gets/sets the image index to use when the command is hovered(selected).
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandProperties.PressedImageIndex">
      <summary>
            Gets/sets the image index to use when the command is pressed(pushed).
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandProperties.ID">
      <summary>
            Gets/sets the unique identifier of the command.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandProperties.Tag">
      <summary>
            Gets/sets the additional data associated with the command.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandProperties.FadeImage">
      <summary>
            Gets/sets a value whether the command image(if any) will be faded when drawn in default state.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandProperties.ImageShadow">
      <summary>
            Gets/sets a value whether the command image(if any) will have shadow when hovered.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandProperties.BeginGroup">
      <summary>
            Gets/sets a value whether the command will begin a group.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandProperties.MenuCenteredText">
      <summary>
            Gets/sets a value whether the text will be centered if the command is parented by a NMenuWindow.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandProperties.ShowArrowStyle">
      <summary>
            Gets/sets a value whether the command will indicate with arrow that it contains children commands.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandProperties.DropDownBehavior">
      <summary>
            Gets/sets the drop-down behavior of the command.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandProperties.CloseMenuOnClick">
      <summary>
            Gets/sets a value indicating whether the command will close its parent menu (if the parent is a menu window) when clicked.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandProperties.TooltipImage">
      <summary>
            Gets/sets a value indicating whether command's image will be displayed in its tooltip.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandProperties.TooltipShortcut">
      <summary>
            Gets/sets a value indicating whether command's shortcut will be displayed in its tooltip.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandProperties.TooltipHeading">
      <summary>
            Gets/sets a value indicating whether command's tooltip will display the text of the command as a heading.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandProperties.ImageList">
      <summary>
            Gets/sets the ImageList for the command and its children commands.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandProperties.Shortcut">
      <summary>
            Gets/sets the keyboard shortcut associated with the command.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandProperties.Description">
      <summary>
            Gets the human readable description of the INShortcutProvider object.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandProperties.Style">
      <summary>
            Gets/sets the style of the command.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandProperties.Designable">
      <summary>
            Gets/sets a value whether this command might be changed at run-time.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandProperties.Selectable">
      <summary>
            Gets/sets a value whether the command is selectable.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandProperties.Visible">
      <summary>
            Gets/sets a value indicationg whether the command will be visible.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandProperties.MenuOptions">
      <summary>
            Gets/sets the menu options used to specify the command's child menu appearance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandProperties.MenuWindowType">
      <summary>
            Gets/sets the type of the desired menu window. Note: The specified type must have parameterless public constructor!
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandProperties.ImageInfo">
      <summary>
            Gets/sets the object containing information about command's image.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NCommandGroup">
      <summary>
            Represent a group of commands with own layout.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NControlHostCommand">
      <summary>
            Represents a base implementation for a command that hosts control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NControlHostCommand.HostedControl">
      <summary>
            Gets the control hosted by the command.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NControlHostCommand.Focused">
      <summary>
            Gets a value indicating whether the hosted control contains focus.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NControlHostCommand.PrefferedWidth">
      <summary>
            Gets/sets the preffered width of the hosted control.
            This value will be used if the control is resized by a layout operation.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NControlHostCommand.PrefferedHeight">
      <summary>
            Gets/sets the preffered height of the hosted control.
            This value will be used if the control is resized by a layout operation.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NControlHostCommand.ControlText">
      <summary>
            Gets/sets the text displayed by the hosted control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NControlHostCommand.ExceedBoundsLogic">
      <summary>
            Gets/sets a value indicating how the command will be treated when it exceeds the allowed bounds.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NControlHostCommand.Enabled">
      <summary>
            Gets/sets a value whether the command is enabled.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandGroup.Commands">
      <summary>
            Gets the NCommandCollection for this command group.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandGroup.Columns">
      <summary>
            Gets/sets the number of command colums in the command group.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandGroup.CommandSize">
      <summary>
            Gets/sets the size of a single command in the group.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NListBoxItemCollection">
      <summary>
            Represents a collection of items in a NListBox object.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NListBoxItemCollection.Add(System.Object)">
      <summary>
            Adds a new item to the collection.
            Note that if the object is not a NListBoxItem a new item will be created
            automatically and the object will be set as its tag.
            </summary>
      <param name="o">The item to add.</param>
      <returns>The index of the newly added item.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NListBoxItemCollection.AddRange(System.Object[])">
      <summary>
            Adds a group of items to the list of items for a ListBox.
            </summary>
      <param name="objects">The group of items to add.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NListBoxItemCollection.Insert(System.Int32,System.Object)">
      <summary>
      </summary>
      <param name="index">
      </param>
      <param name="o">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NListBoxItemCollection.Remove(System.Object)">
      <summary>
      </summary>
      <param name="o">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NListBoxItemCollection.Contains(System.Object)">
      <summary>
      </summary>
      <param name="o">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NListBoxItemCollection.IndexOf(System.Object)">
      <summary>
      </summary>
      <param name="o">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NListBoxItemCollection.Clear">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NListBoxItemCollection.SetIndex(System.Int32,System.Int32)">
      <summary>
      </summary>
      <param name="oldIndex">
      </param>
      <param name="newIndex">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NListBoxItemCollection.CheckedItems">
      <summary>
            Gets the checked items in the collection (this will return an array of NListBoxItem objects rather than the core objects added to the collection).
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NButtonBaseInfo">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NButtonBaseInfo.ToString">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NButtonBaseInfo.Copy(Nevron.UI.WinForm.Controls.NButtonBaseInfo)">
      <summary>
            Copies the entire information from the provided info.
            </summary>
      <param name="info">
      </param>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NButtonBaseInfo.ShowFocusRect">
      <summary>
            Gets/sets a value indicating whether the button will display a focus rect when it contains focus.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NButtonBaseInfo.WrapText">
      <summary>
            Gets/sets a value indicating whether button's text will support wrapping.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NButtonBaseInfo.ImageSize">
      <summary>
            Gets/sets the image size for the NButton.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NButtonBaseInfo.BorderOffset">
      <summary>
            Gets/sets the padding from button edges.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NButtonBaseInfo.TooltipInfo">
      <summary>
            Gets the NTooltipInfo instance which describes a screen tip to be displayed upon different mouse events.
            </summary>
    </member>
    <member name="T:Nevron.UI.NStandard3DFrameStyle">
      <summary>
            Summary description for NStandard3DFrameStyle.
            </summary>
    </member>
    <member name="T:Nevron.UI.NUIFrameStyle">
      <summary>
            Summary description for NUIFrameStyle.
            </summary>
    </member>
    <member name="M:Nevron.UI.NUIFrameStyle.GetInflate">
      <summary>
            Gets the non-client inflate to be applied on a themable element.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NStandard3DFrameStyle.ShouldSerializeLightColor">
      <summary>
            Determines whether the LightColor member should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NStandard3DFrameStyle.ShouldSerializeLightLightColor">
      <summary>
            Determines whether the LightLightColor member should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NStandard3DFrameStyle.ShouldSerializeDarkColor">
      <summary>
            Determines whether the DarkColor member should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NStandard3DFrameStyle.ShouldSerializeDarkDarkColor">
      <summary>
            Determines whether the DarkDarkColor member should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NStandard3DFrameStyle.ShouldSerializeStyle">
      <summary>
            Determines whether the Style member should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.NStandard3DFrameStyle.PredefinedFrameStyle">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.NStandard3DFrameStyle.LightColor">
      <summary>
            Gets/sets the color used to draw light lines
            </summary>
    </member>
    <member name="P:Nevron.UI.NStandard3DFrameStyle.LightLightColor">
      <summary>
            Gets/sets the color used to draw lightLight lines
            </summary>
    </member>
    <member name="P:Nevron.UI.NStandard3DFrameStyle.DarkColor">
      <summary>
            Gets/sets the color used to draw dark lines
            </summary>
    </member>
    <member name="P:Nevron.UI.NStandard3DFrameStyle.DarkDarkColor">
      <summary>
            Gets/sets the color used to draw darkDark lines
            </summary>
    </member>
    <member name="P:Nevron.UI.NStandard3DFrameStyle.Style">
      <summary>
            Gets/sets the style of this frame.
            </summary>
    </member>
    <member name="T:Nevron.UI.ProgressParts">
      <summary>
            Summary description for NProgressBarParts.
            </summary>
    </member>
    <member name="T:Nevron.UI.LayoutEngines">
      <summary>
            Summary description for LayoutEngines.
            </summary>
    </member>
    <member name="T:Nevron.UI.ToolStrips.INCommand">
      <summary>
            Summary description for INCommand.
            </summary>
    </member>
    <member name="M:Nevron.UI.ToolStrips.INCommand.CanExecute">
      <summary>
            Determines whether the command might be executed.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.ToolStrips.INCommand.Enabled">
      <summary>
            Gets/sets a value whether the command is initially enabled.
            This differs from the CanExecute method for a command might be enabled and might not be executed at a time.
            </summary>
    </member>
    <member name="P:Nevron.UI.ToolStrips.INCommand.Name">
      <summary>
            Gets/sets the name of the command.
            </summary>
    </member>
    <member name="P:Nevron.UI.ToolStrips.INCommand.Tag">
      <summary>
            Gets/sets additional data associated with the command.
            </summary>
    </member>
    <member name="T:Nevron.UI.NPopupPlacementInfo">
      <summary>
            Summary description for NPopupPlacementInfo.
            </summary>
    </member>
    <member name="M:Nevron.UI.NPopupPlacementInfo.ShouldSerializeOffset">
      <summary>
            Determines whether the Offset property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NPopupPlacementInfo.ShouldSerializeMode">
      <summary>
            Determines whether the PlacementMode property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NPopupPlacementInfo.ShouldSerializeHAlign">
      <summary>
            Determines whether the HAlign property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NPopupPlacementInfo.ShouldSerializeVAlign">
      <summary>
            Determines whether the VAlign property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NPopupPlacementInfo.ShouldSerializeScreenFitMode">
      <summary>
            Determines whether the ScreenFitMode property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NPopupPlacementInfo.ShouldSerializeBounds">
      <summary>
            Determines whether the PlacementBounds property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.NPopupPlacementInfo.Bounds">
      <summary>
            Gets/sets the placement bounds.
            </summary>
    </member>
    <member name="P:Nevron.UI.NPopupPlacementInfo.Offset">
      <summary>
            Gets/sets the offset to be applied when calculating the popup's bounds.
            </summary>
    </member>
    <member name="P:Nevron.UI.NPopupPlacementInfo.Mode">
      <summary>
            Gets/sets the placement mode.
            </summary>
    </member>
    <member name="P:Nevron.UI.NPopupPlacementInfo.HAlign">
      <summary>
            Gets/sets the horizontal alignment.
            </summary>
    </member>
    <member name="P:Nevron.UI.NPopupPlacementInfo.VAlign">
      <summary>
            Gets/sets the vertical alignment.
            </summary>
    </member>
    <member name="P:Nevron.UI.NPopupPlacementInfo.ScreenFitMode">
      <summary>
            Gets/sets the screen fitting.
            </summary>
    </member>
    <member name="T:Nevron.UI.NImageAndTextLayout">
      <summary>
            Summary description for NUIItemLayout.
            </summary>
    </member>
    <member name="T:Nevron.UI.NPushButtonElement">
      <summary>
            Represents a standard push button.
            </summary>
    </member>
    <member name="T:Nevron.UI.NButtonBaseElement">
      <summary>
            The base class for all buttons.
            </summary>
    </member>
    <member name="M:Nevron.UI.NButtonBaseElement.PerformClick">
      <summary>
            Raises the Click event.
            </summary>
    </member>
    <member name="T:Nevron.UI.NImageUIEditor">
      <summary>
            Summary description for NImageUIEditor.
            </summary>
    </member>
    <member name="T:Nevron.UI.NFlagsEnumUIEditor">
      <summary>
            Summary description for NFlagsEnumUIEditor.
            </summary>
    </member>
    <member name="T:Nevron.UI.NPropertyMaster">
      <summary>
            Summary description for NPropertyMaster.
            </summary>
    </member>
    <member name="T:Nevron.UI.NFlagsEnumFlagAttribute">
      <summary>
            Identifies that the specified enum field
            </summary>
    </member>
    <member name="T:Nevron.SmartShapes.NRemoveSectionsVerb">
      <summary>
            The NRemoveSectionsVerb verb is used for the visual removal of path sheet sections
            </summary>
    </member>
    <member name="M:Nevron.SmartShapes.NRemoveSectionsVerb.Execute">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.SmartShapes.NRemoveSectionsVerb.ShapeSheet">
      <summary>
            Reference to the path sheet from which to remove sections
            </summary>
    </member>
    <member name="T:Nevron.SmartShapes.NGeometrySection">
      <summary>
            The NGeometrySection class represents a formula section, 
            which is used for the formula definition of a graphics path inside a shape sheet.
            </summary>
    </member>
    <member name="T:Nevron.FormulaSheet.NFormulaSection">
      <summary>
            The NFormulaSection class represents a category of named formula cells, 
            which can optionally contain a collection of formula rows.
            </summary>
      <remarks>
            The named formula cells of a section are obtained from the Cells property. 
            <para>
            The rows of a section are obtained from the Rows property. 
            </para></remarks>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaSection.Clone">
      <summary>
            Creates an identical copy of this object
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaSection.UpdateReferences(Nevron.INReferenceProvider)">
      <summary>
      </summary>
      <param name="provider">
      </param>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaSection.CreateNonSerializedObjects">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaSection.GetReferenceProvider">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaSection.ProvideReference(System.Type)">
      <summary>
      </summary>
      <param name="referenceType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaSection.ToString">
      <summary>
            Overriden to return the section title
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaSection.InvalidateCache">
      <summary>
            Invalidates the cached of the section and all its formula cells and rows
            </summary>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaSection.CreateCellsDataGrid(Nevron.Editors.NFormulaSheetEditorUC)">
      <summary>
            Creates a data grid, which can be used for the preview and editing of the section formula cells
            </summary>
      <param name="editor">editor, which will host the grid</param>
      <returns>cells data grid, or null if the section has no cells</returns>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaSection.CreateRowsDataGrid(Nevron.Editors.NFormulaSheetEditorUC)">
      <summary>
            Creates a data grid, which can be used for the preview and editing of the section formula rows
            </summary>
      <param name="editor">editor, which will host the grid</param>
      <returns>rows data grid, or null if the section has no rows</returns>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaSection.GetColNameIndex(System.String)">
      <summary>
            Gets the index of the specified col name
            </summary>
      <remarks>
            This implementation parses an Excel-like column name (e.g. A, B, C, AA, AB, BA, BC etc.) and converts it to a valid index
            </remarks>
      <param name="colName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaSection.GetColName(System.Int32)">
      <summary>
            Gets the name of the column at the specified index
            </summary>
      <remarks>
            This implementation returns an Excel-like column name (e.g. A, B, C, AA, AB, BA, BC etc.)
            </remarks>
      <param name="index">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaSection.GetMaxColCount">
      <summary>
            Gets the maximum number of columns for this section
            </summary>
      <remarks>
            This implementation returns the maximumn number of cells from all rows
            </remarks>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaSection.OnRowsChanged">
      <summary>
            Called by the rows collection, when its rows has changed
            </summary>
      <remarks>
            This implementation calls the OnSectionRowsChanged method of the sheet
            </remarks>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaSection.OnCellsChanged">
      <summary>
            Called by the cells dictionary, when its cells has changed
            </summary>
      <remarks>
            This implementation calls the OnSectionCellsChanged method of the sheet
            </remarks>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaSection.GetVerbs">
      <summary>
            Gets the verbs of this section
            </summary>
      <returns>verbs</returns>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaSection.CreateDefaultRow">
      <summary>
            Creates an instance of the default row applicable for this section
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaSection.CellsSealed">
      <summary>
            Determines whether the cells of this section are sealed.
            When the cells of the section are sealed you cannot add or remove named cells from this section
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaSection.GetCellsDataGridColumnInfos(Nevron.Editors.NFormulaSheetEditorUC)">
      <summary>
            Gets information about the cells data grid columns
            </summary>
      <param name="editor">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaSection.GetCellsDataGridRowValues(System.Int32)">
      <summary>
            Gets the cells data table row values for the specified row index
            </summary>
      <param name="rowIndex">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaSection.GetRowsDataGridColumnInfos(Nevron.Editors.NFormulaSheetEditorUC)">
      <summary>
            Gets information about the rows data grid columns
            </summary>
      <param name="editor">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaSection.GetRowsDataGridRowValues(System.Int32)">
      <summary>
            Gets the rows data table row values for the specified row index
            </summary>
      <param name="rowIndex">
      </param>
      <returns>
      </returns>
    </member>
    <member name="F:Nevron.FormulaSheet.NFormulaSection.DefaultCellNameColumnWidth">
      <summary>
            Default width of the cell name columns 
            </summary>
    </member>
    <member name="F:Nevron.FormulaSheet.NFormulaSection.DefaultFormulaColumnWidth">
      <summary>
            Default width of the formula cells columns
            </summary>
    </member>
    <member name="F:Nevron.FormulaSheet.NFormulaSection.DefaultRowNumberColumnWidth">
      <summary>
            Default width of the row number column 
            </summary>
    </member>
    <member name="F:Nevron.FormulaSheet.NFormulaSection.PreferredRowHeight">
      <summary>
            Default width of the row height column 
            </summary>
    </member>
    <member name="F:Nevron.FormulaSheet.NFormulaSection.DefaultDataGridFontName">
      <summary>
            Defines the default font name of the data grid, which is created to display the section cells 
            </summary>
    </member>
    <member name="F:Nevron.FormulaSheet.NFormulaSection.DefaultDataGridFontSize">
      <summary>
            Defines the default font size of the data grid, which is created to display the section cells 
            </summary>
    </member>
    <member name="P:Nevron.FormulaSheet.NFormulaSection.Name">
      <summary>
            Gets/sets the section name, which is used to reference the section
            </summary>
    </member>
    <member name="P:Nevron.FormulaSheet.NFormulaSection.Title">
      <summary>
            Gets/sets the section title, which is used to provide the user with a human 
            readable description of the section
            </summary>
    </member>
    <member name="P:Nevron.FormulaSheet.NFormulaSection.Rows">
      <summary>
            Gets/sets the section collection of rows (can be null)
            </summary>
    </member>
    <member name="P:Nevron.FormulaSheet.NFormulaSection.Cells">
      <summary>
            Gets/sets the section dictionary of cells (can be null)
            </summary>
    </member>
    <member name="P:Nevron.FormulaSheet.NFormulaSection.Sheet">
      <summary>
            Gets a reference to the sheet hosting the section
            </summary>
    </member>
    <member name="M:Nevron.SmartShapes.NGeometrySection.Clone">
      <summary>
            Creates an identical copy of this object
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.SmartShapes.NGeometrySection.Dispose">
      <summary>
            Disposes the cached local graphics path
            </summary>
    </member>
    <member name="M:Nevron.SmartShapes.NGeometrySection.AddMoveTo(System.String,System.String)">
      <summary>
            Adds a MoveTo command expressed with formulas
            </summary>
      <param name="x">
      </param>
      <param name="y">
      </param>
    </member>
    <member name="M:Nevron.SmartShapes.NGeometrySection.AddLineTo(System.String,System.String)">
      <summary>
            Adds a LineTo command expressed with formulas
            </summary>
      <param name="x">
      </param>
      <param name="y">
      </param>
    </member>
    <member name="M:Nevron.SmartShapes.NGeometrySection.AddBezierCurveTo(System.String,System.String,System.String,System.String,System.String,System.String)">
      <summary>
            Adds a BezierCurveTo command expressed with formulas
            </summary>
      <param name="x">
      </param>
      <param name="y">
      </param>
    </member>
    <member name="M:Nevron.SmartShapes.NGeometrySection.AddArcTo(System.String,System.String,System.String)">
      <summary>
            Adds an ArcTo command expressed with formulas
            </summary>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="bow">
      </param>
    </member>
    <member name="M:Nevron.SmartShapes.NGeometrySection.AddEllipticalArcTo(System.String,System.String,System.String,System.String,System.String,System.String)">
      <summary>
            Adds an EllipticalArcTo command expressed with formulas
            </summary>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="controlX">
      </param>
      <param name="controlY">
      </param>
      <param name="angle">
      </param>
      <param name="ratio">
      </param>
    </member>
    <member name="M:Nevron.SmartShapes.NGeometrySection.AddCircularArcTo(System.String,System.String,System.String,System.String)">
      <summary>
            Adds a CircularArcTo command expressed with formulas
            </summary>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="controlX">
      </param>
      <param name="controlY">
      </param>
    </member>
    <member name="M:Nevron.SmartShapes.NGeometrySection.AddMoveTo(System.Single,System.Single)">
      <summary>
            Adds a MoveTo command expressed with constants
            </summary>
      <param name="x">
      </param>
      <param name="y">
      </param>
    </member>
    <member name="M:Nevron.SmartShapes.NGeometrySection.AddLineTo(System.Single,System.Single)">
      <summary>
            Adds a LineTo command expressed with constants
            </summary>
      <param name="x">
      </param>
      <param name="y">
      </param>
    </member>
    <member name="M:Nevron.SmartShapes.NGeometrySection.AddBezierCurveTo(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Adds a BezierCurveTo command expressed with constants
            </summary>
      <param name="x">
      </param>
      <param name="y">
      </param>
    </member>
    <member name="M:Nevron.SmartShapes.NGeometrySection.AddArcTo(System.Single,System.Single,System.Single)">
      <summary>
            Adds an ArcTo command expressed with constants
            </summary>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="bow">
      </param>
    </member>
    <member name="M:Nevron.SmartShapes.NGeometrySection.AddEllipticalArcTo(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Adds an EllipticalArcTo command expressed with constants
            </summary>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="controlX">
      </param>
      <param name="controlY">
      </param>
      <param name="angle">
      </param>
      <param name="ratio">
      </param>
    </member>
    <member name="M:Nevron.SmartShapes.NGeometrySection.AddCircularArcTo(System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Adds a CircularArcTo command expressed with constants
            </summary>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="controlX">
      </param>
      <param name="controlY">
      </param>
    </member>
    <member name="M:Nevron.SmartShapes.NGeometrySection.AddMoveTo(Nevron.FormulaSheet.NSingleFormulaCell,Nevron.FormulaSheet.NSingleFormulaCell)">
      <summary>
            Adds a MoveTo command
            </summary>
      <param name="x">
      </param>
      <param name="y">
      </param>
    </member>
    <member name="M:Nevron.SmartShapes.NGeometrySection.AddLineTo(Nevron.FormulaSheet.NSingleFormulaCell,Nevron.FormulaSheet.NSingleFormulaCell)">
      <summary>
            Adds a LineTo command 
            </summary>
      <param name="x">
      </param>
      <param name="y">
      </param>
    </member>
    <member name="M:Nevron.SmartShapes.NGeometrySection.AddArcTo(Nevron.FormulaSheet.NSingleFormulaCell,Nevron.FormulaSheet.NSingleFormulaCell,Nevron.FormulaSheet.NSingleFormulaCell)">
      <summary>
            Adds an ArcTo command 
            </summary>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="bow">
      </param>
    </member>
    <member name="M:Nevron.SmartShapes.NGeometrySection.AddBezierCurveTo(Nevron.FormulaSheet.NSingleFormulaCell,Nevron.FormulaSheet.NSingleFormulaCell,Nevron.FormulaSheet.NSingleFormulaCell,Nevron.FormulaSheet.NSingleFormulaCell,Nevron.FormulaSheet.NSingleFormulaCell,Nevron.FormulaSheet.NSingleFormulaCell)">
      <summary>
            Adds a BezierCurveTo command
            </summary>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="firstControlX">
      </param>
      <param name="firstControlY">
      </param>
      <param name="secondControlX">
      </param>
      <param name="secondControlY">
      </param>
    </member>
    <member name="M:Nevron.SmartShapes.NGeometrySection.AddEllipticalArcTo(Nevron.FormulaSheet.NSingleFormulaCell,Nevron.FormulaSheet.NSingleFormulaCell,Nevron.FormulaSheet.NSingleFormulaCell,Nevron.FormulaSheet.NSingleFormulaCell,Nevron.FormulaSheet.NSingleFormulaCell,Nevron.FormulaSheet.NSingleFormulaCell)">
      <summary>
            Adds an EllipticalArcTo command
            </summary>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="controlX">
      </param>
      <param name="controlY">
      </param>
      <param name="angle">
      </param>
      <param name="ratio">
      </param>
    </member>
    <member name="M:Nevron.SmartShapes.NGeometrySection.AddCircularArcTo(Nevron.FormulaSheet.NSingleFormulaCell,Nevron.FormulaSheet.NSingleFormulaCell,Nevron.FormulaSheet.NSingleFormulaCell,Nevron.FormulaSheet.NSingleFormulaCell)">
      <summary>
            Adds a CircularArcTo command
            </summary>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="controlX">
      </param>
      <param name="controlY">
      </param>
    </member>
    <member name="M:Nevron.SmartShapes.NGeometrySection.GetColNameIndex(System.String)">
      <summary>
            Gets the index of the specified col name
            </summary>
      <remarks>
            Overriden to return the index of the predefined col names
            </remarks>
      <param name="colName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.SmartShapes.NGeometrySection.GetColName(System.Int32)">
      <summary>
            Gets the name of the column at the specified index
            </summary>
      <remarks>
            Overriden to return the following col names: X, Y, A, B, C, D
            </remarks>
      <param name="index">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.SmartShapes.NGeometrySection.GetMaxColCount">
      <summary>
            Gets the maximum number of columns for this section
            </summary>
      <remarks>
            Overriden to return 6.
            </remarks>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.SmartShapes.NGeometrySection.CreateDefaultRow">
      <summary>
            Overriden to create a new instance of the NLineToRow class
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.SmartShapes.NGeometrySection.GetVerbs">
      <summary>
            Overriden to add the Add Row verb
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.SmartShapes.NGeometrySection.InvalidateCache">
      <summary>
            Invalidates the cached of the section and all its formula cells and rows
            </summary>
      <remarks>
            Overriden to invalidate the cached local graphics path
            </remarks>
    </member>
    <member name="M:Nevron.SmartShapes.NGeometrySection.GetRowsDataGridColumnInfos(Nevron.Editors.NFormulaSheetEditorUC)">
      <summary>
            Overriden to include the non editable Type column 
            </summary>
      <param name="editor">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.SmartShapes.NGeometrySection.GetRowsDataGridRowValues(System.Int32)">
      <summary>
            Overriden to insert the path command type
            </summary>
      <param name="rowIndex">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.SmartShapes.NGeometrySection.CellsSealed">
      <summary>
            Overriden to return true
            </summary>
      <returns>
      </returns>
    </member>
    <member name="F:Nevron.SmartShapes.NGeometrySection.DefaultCommandTypeColumnWidth">
      <summary>
            Default width of the command type columns 
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NGeometrySection.Visible">
      <summary>
            Gets a reference to the Visible formula cell
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NGeometrySection.CloseFigures">
      <summary>
            Gets a reference to the CloseFigures formula cell
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NGeometrySection.LocalPath">
      <summary>
            Get the path, which this geometry section represents (in local coordinates)
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NGeometrySection.LocalGraphicsPath">
      <summary>
            Get the graphics path, which this geometry section represents (in local coordinates)
            </summary>
    </member>
    <member name="T:Nevron.SmartShapes.NSmartShapeDocumentSerializer">
      <summary>
            The NSmartShapeDocumentSerializer class facilitates the persistency of smart shape documents.
            </summary>
    </member>
    <member name="M:Nevron.SmartShapes.NSmartShapeDocumentSerializer.LoadFromFile(System.String,Nevron.Serialization.PersistencyFormat,Nevron.Serialization.INSerializationFilter)">
      <summary>
            Loads a smart shape document from a file in the specified format
            </summary>
      <param name="filePath">file path</param>
      <param name="format">persistency format</param>
      <param name="filter">serialization filter</param>
      <returns>true if the operation succedded, otherwise false</returns>
    </member>
    <member name="M:Nevron.SmartShapes.NSmartShapeDocumentSerializer.LoadFromStream(System.IO.Stream,Nevron.Serialization.PersistencyFormat,Nevron.Serialization.INSerializationFilter)">
      <summary>
            Loads a smart shape document from a stream in the specified format
            </summary>
      <param name="stream">stream</param>
      <param name="format">persistency format</param>
      <param name="filter">serialization filter</param>
      <returns>true if the operation succedded, otherwise false</returns>
    </member>
    <member name="M:Nevron.SmartShapes.NSmartShapeDocumentSerializer.LoadFromFile">
      <summary>
            Loads a smart shape document from a file
            </summary>
      <remarks>
            This method will show a open file dialog, configured with the currently known document formats
            </remarks>
      <returns>the loaded document if succeeded, otherwise null</returns>
    </member>
    <member name="M:Nevron.SmartShapes.NSmartShapeDocumentSerializer.LoadFromFile(System.String)">
      <summary>
            Loads a document from the specified file
            </summary>
      <param name="fileName">file to load from (the extension determines the format)</param>
      <returns>the loaded document if succeeded, otherwise null</returns>
    </member>
    <member name="M:Nevron.SmartShapes.NSmartShapeDocumentSerializer.SaveToFile(Nevron.SmartShapes.NSmartShapeDocument)">
      <summary>
            Saves the specified document to file
            </summary>
      <remarks>
            This method will show a save file dialog, configured for the supported document formats
            </remarks>
      <param name="document">document to save</param>
      <returns>true if the operation succedded, otherwise false</returns>
    </member>
    <member name="M:Nevron.SmartShapes.NSmartShapeDocumentSerializer.SaveToFile(Nevron.SmartShapes.NSmartShapeDocument,System.String)">
      <summary>
            Saves the specified document document to the specified file
            </summary>
      <param name="document">document to save</param>
      <param name="fileName">file to save to (the extension determines the format)</param>
      <returns>true if the operation succedded, otherwise false</returns>
    </member>
    <member name="M:Nevron.SmartShapes.NSmartShapeDocumentSerializer.SaveToFile(Nevron.SmartShapes.NSmartShapeDocument,System.String,Nevron.Serialization.PersistencyFormat,Nevron.Serialization.INSerializationFilter)">
      <summary>
            Saves the specified document to file in the specified format
            </summary>
      <param name="document">document to save</param>
      <param name="filePath">file path</param>
      <param name="format">persistency format</param>
      <param name="filter">serialization filter</param>
      <returns>true if the operation succedded, otherwise false</returns>
    </member>
    <member name="M:Nevron.SmartShapes.NSmartShapeDocumentSerializer.SaveToStream(Nevron.SmartShapes.NSmartShapeDocument,System.IO.Stream,Nevron.Serialization.PersistencyFormat,Nevron.Serialization.INSerializationFilter)">
      <summary>
            Saves the specified document to stream in the specified format
            </summary>
      <param name="document">document to save</param>
      <param name="stream">stream</param>
      <param name="format">persistency format</param>
      <param name="filter">serialization filter</param>
      <returns>true if the operation succedded, otherwise false</returns>
    </member>
    <member name="P:Nevron.SmartShapes.NSmartShapeDocumentSerializer.Serializer">
      <summary>
            Gets a reference to the serialier used to perform the serialization
            </summary>
    </member>
    <member name="T:Nevron.NewGraphics.Pdf.l1IlIII1.Selector">
      <summary>
            A collection of information that uniquely identifies a particular ImportedObjectTable.
            </summary>
    </member>
    <member name="T:Nevron.NewGraphics.Pdf.l1IlIIII.Keys">
      <summary>
            Predefined keys common to all font dictionaries.
            </summary>
    </member>
    <member name="T:Nevron.NewGraphics.Pdf.l1I1llll.Keys">
      <summary>
            Predefined keys of this dictionary.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NGlassEffectStyle">
      <summary>
            Represents a paint effect that emulates the reflection of glass cap over a shape
            lit from a controllable direction
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NPaintEffectStyle">
      <summary>
            The base of all effects that can be applied after a shape or panel is painted on
            a 2D drawing surface
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NPaintEffectStyle.OnDrawPreview(Nevron.GraphicsCore.lIIIIllI,Nevron.GraphicsCore.NSizeF)">
      <summary>
            Draws a preview of the style on the specified device.
            </summary>
      <param name="device">
      </param>
      <param name="size">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NPaintEffectStyle.GetDescription">
      <summary>
            Returns a short description of this backplane style.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NPaintEffectStyle.GetPaintableRect(Nevron.GraphicsCore.NRectangleF,Nevron.GraphicsCore.l1IlllI1)">
      <summary>
            Obtains the paintable rectangle with this style.
            </summary>
      <param name="shapeRect">
      </param>
      <param name="lengthConverter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NPaintEffectStyle.Paint(Nevron.GraphicsCore.lIIIIllI,System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.GraphicsPath)">
      <summary>
            Paints the effect over the specified graphics path, with an optional clip path
            </summary>
      <param name="device">
      </param>
      <param name="path">
      </param>
      <param name="clipPath">
      </param>
    </member>
    <member name="P:Nevron.GraphicsCore.NPaintEffectStyle.Shape">
      <summary>
            Gets/sets the paint effect shape
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NPaintEffectStyle.CornerRounding">
      <summary>
            Gets/sets the corner rounding when Shape is RoundedRect
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NGlassEffectStyle.CreateSpotlightFillStyle(System.Boolean,Nevron.GraphicsCore.NColor)">
      <summary>
            Creates a fill style resembling a spot light
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NGlassEffectStyle.LightColor">
      <summary>
            The color of the glass edge effect on the lit side
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NGlassEffectStyle.DarkColor">
      <summary>
            Gets/sets the color of the glass edge effect on the dark side
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NGlassEffectStyle.LightDirection">
      <summary>
            Gets/sets the direction of the light (in degrees) 
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NGlassEffectStyle.LightSpread">
      <summary>
            Gets/sets the spread (in degrees) of the light applied at the specified direction
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NGlassEffectStyle.EdgeDepth">
      <summary>
            Gets/sets the depth of glass edge effect
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NGlassEffectStyle.EdgeOffset">
      <summary>
            Gets/sets the offset of the glass edge effect from the shape bounds
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NGelEffectStyle">
      <summary>
            Represent a gel effect applied of a shape
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NGelEffectStyle.Margins">
      <summary>
            Gets/sets the margins of the gel effect relative to the shape it is applied to
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NGelEffectStyle.BeginColor">
      <summary>
            Gets/sets the color of the appearance
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NGelEffectStyle.EndColor">
      <summary>
            Gets/sets the end color of gel effect
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NRadialFrameStyle">
      <summary>
            Represents a radial frame style
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NRadialFrameStyle.OnDrawPreview(Nevron.GraphicsCore.lIIIIllI,Nevron.GraphicsCore.NSizeF)">
      <summary>
            Draws a preview of the style on the specified device.
            </summary>
      <param name="device">
      </param>
      <param name="size">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NRadialFrameStyle.GetDescription">
      <summary>
            Returns a short description of this image frame style
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRadialFrameStyle.GetPaintableRect(Nevron.GraphicsCore.NRectangleF,Nevron.GraphicsCore.l1IlllI1)">
      <summary>
            Overriden. Obtains the paintable rectangle associated with this image frame style.
            </summary>
      <param name="shapeRect">
      </param>
      <param name="lengthConverter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRadialFrameStyle.GetAttributeByName(System.String)">
      <summary>
            Gets a child or descendant attribute by its name
            </summary>
      <param name="attributeName">child name or full attribute name</param>
      <returns>a reference to the attribute</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRadialFrameStyle.GetAttributeName(Nevron.Dom.INAttribute)">
      <summary>
            Gets the name of the specified child attribute
            </summary>
      <param name="attribute">child attribute</param>
      <returns>name of the attribute</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRadialFrameStyle.SetAttributeByName(System.String,Nevron.Dom.INAttribute)">
      <summary>
            Sets a child or descendant attribute by its name
            </summary>
      <param name="attributeName">
      </param>
      <param name="attribute">
      </param>
    </member>
    <member name="P:Nevron.GraphicsCore.NRadialFrameStyle.FrameStyleType">
      <summary>
            Gets the fill style type.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NRadialFrameStyle.Attributes">
      <summary>
            Gets an array of the child attributes of this attribute
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.GraphicsCore.INCacheableRenderSurface">
      <summary>
            Implemented by render surfaces that can cache their content
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.INKeyboardEventProcessor">
      <summary>
            Implemented by objects, which can process keyboard events
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.INKeyboardEventProcessor.OnKeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
      <summary>
            Called when a key is down
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.INKeyboardEventProcessor.OnKeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
      <summary>
            Called when a key is pressed
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.INKeyboardEventProcessor.OnKeyUp(System.Object,System.Windows.Forms.KeyEventArgs)">
      <summary>
            Called when a key is up
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="T:Nevron.GraphicsCore.NEmfImage">
      <summary>
            Represents an image in EMF format
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NEmfImage.Dispose">
      <summary>
            Releases all resources used by the object
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NEmfImage.SaveToFile(System.String,Nevron.GraphicsCore.INFileFormat)">
      <summary>
            Saves the image to the file with the specified raster image format.
            </summary>
      <param name="fileName">
      </param>
      <param name="fileFormat">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NEmfImage.SaveToStream(System.IO.Stream,Nevron.GraphicsCore.INFileFormat)">
      <summary>
            Obtains an image form the image renderer and saves it to the specified stream.
            </summary>
      <param name="stream">
      </param>
      <param name="fileFormat">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NEmfImage.CopyToClipboard">
      <summary>
            Places a bitmap generated from the image renderer on the clipboard.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NEmfImage.Size">
      <summary>
            Returns the size of the image in pixels.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Text.NParagraphEndFragment">
      <summary>
            Summary description for NParagraphEndFragment.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Text.NTextFragment">
      <summary>
            Summary description for NTextFragment.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Text.NFragment">
      <summary>
            The base of all fragment elements.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Text.NElement">
      <summary>
            Summary description for NStyleNode.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Text.NNode">
      <summary>
            Summary description for NTextNode.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NNode.Clone">
      <summary>
            Creates an exact copy of this object
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.Text.NNode.ParentNode">
      <summary>
            Obtains the parent node
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.Text.NNode.RootNode">
      <summary>
            Obtains the root of this node
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Text.INFrameElement">
      <summary>
            Summary description for INFrameElement.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NElement.AddStyleEntry(Nevron.GraphicsCore.StyleEntry,System.Object)">
      <summary>
            Adds a style entry to the element
            </summary>
      <param name="styleEntry">
      </param>
      <param name="value">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NElement.RemoveStyleEntry(Nevron.GraphicsCore.StyleEntry)">
      <summary>
            Removes a style entry from the element
            </summary>
      <param name="styleEntry">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NElement.ContainsStyleEntry(Nevron.GraphicsCore.StyleEntry)">
      <summary>
            Returns true if the element contains the specified style entry
            </summary>
      <param name="styleEntry">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NElement.GetStyleEntryValue(Nevron.GraphicsCore.StyleEntry)">
      <summary>
            Obtains the style entry value.
            </summary>
      <param name="styleEntry">
      </param>
      <returns>Returns null if the element does not contain the specified style entry</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NElement.CloneWithNewUniqueId(System.Collections.Hashtable)">
      <summary>
            Creates an identical copy of the element, which differs only by the element unique id
            </summary>
      <param name="mapUIds">map of uids, which must be populated with the made unique id changes</param>
      <returns>cloning, which differs by unique Id only</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NElement.ReplaceForeignUniqueIds(System.Collections.Hashtable,System.Boolean)">
      <summary>
            Replaces any foreign unique ids (references to other nodes)
            </summary>
      <param name="mapUIds">map of uids which is used to find the new foreign uid value</param>
      <param name="makeNotFoundEmpty">indicates whether the not found foreign uids must be set to Guid.Empty</param>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NElement.OnAttributePropertyChanging(System.String,System.String,System.Object)">
      <summary>
            Called by child or descendants attributes when an attribute property is changing
            </summary>
      <param name="attributeFullName">full attribute name</param>
      <param name="propertyName">attribute property</param>
      <param name="newValue">new property value</param>
      <returns>true if the change is acceptable, otherwise false</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NElement.OnAttributePropertyChanged(System.String,System.String)">
      <summary>
            Called by child or descendants attributes when an attribute property has changed
            </summary>
      <param name="attributeFullName">full attribute name</param>
      <param name="propertyName">attribute property</param>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NElement.OnAttributeChanged(System.String)">
      <summary>
            Called by child or descendants attributes when an attribute has changed
            </summary>
      <param name="attributeFullName">full attribute name</param>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NElement.GetAttributeName(Nevron.Dom.INAttribute)">
      <summary>
            Gets the name of the specified child attribute
            </summary>
      <param name="attribute">child attribute</param>
      <returns>name of the attribute</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NElement.GetAttributeByName(System.String)">
      <summary>
            Gets a child or descendant attribute by its name
            </summary>
      <param name="attributeName">child attribute name or full attribute name</param>
      <returns>a reference to the attribute</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NElement.SetAttributeByName(System.String,Nevron.Dom.INAttribute)">
      <summary>
            Sets a child or descendant attribute by its name
            </summary>
      <param name="attributeName">attribute name</param>
      <param name="attribute">attribute to set</param>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NElement.UpdateReferences(Nevron.INReferenceProvider)">
      <summary>
            Updates the references stored by the object
            </summary>
      <remarks>
            Overriden to cashe references to the document, layer and history service. 
            </remarks>
      <param name="provider">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NElement.StartTransaction(System.String)">
      <summary>
            Starts a new transaction
            </summary>
      <remarks>
            Safely calls the StartTransaction method of the history service (if connected to history service)
            </remarks>
      <param name="description">transaction description</param>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NElement.Commit">
      <summary>
            Commits the current transaction
            </summary>
      <remarks>
            Safely calls the Commit method of the history service (if connected to history service)
            </remarks>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NElement.Rollback">
      <summary>
            Rolls back the current transaction
            </summary>
      <remarks>
            Safely calls the Rollback method of the history service (if connected to history service)
            </remarks>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NElement.RecordProperty(System.String)">
      <summary>
            Records the state of the specified property before it is changed
            </summary>
      <remarks>
            Safely calls the RecordPropertyChange method of the history service (if connected to history service)
            </remarks>
      <param name="propertyName">property name</param>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NElement.StartProperty(System.String)">
      <summary>
            Records the state of the specified property before it is changed and pauses the history service. Pair it with the EndProperty method.
            </summary>
      <remarks>
            Safely calls the RecordPropertyChange method of the history service (if connected to history service) and pauses it.
            </remarks>
      <param name="propertyName">property name</param>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NElement.EndProperty">
      <summary>
            Resumes the history service. Pair it with the StartProperty method.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NElement.RecordState(System.String,System.String)">
      <summary>
            Records the entire state of the node
            </summary>
      <remarks>
            Safely calls the RecordElementStateChange method of the history service (if connected to a history service).
            When this operation is undone or redone from history, the history will call the 
            OnStateChangingFromHistory and OnStateChangedFromHistory methods with the specified hint.
            </remarks>
      <param name="description">history operation description</param>
      <param name="hint">state change hint</param>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NElement.RecordState(System.String,System.String[],System.String)">
      <summary>
            Records the state of the specified node fields
            </summary>
      <remarks>
            Safely calls the RecordElementStateChange method of the history service (if connected to a history service).
            When this operation is undone or redone from history, the history will call the 
            OnStateChangingFromHistory and OnStateChangedFromHistory methods with the specified hint.
            </remarks>
      <param name="description">history operation description</param>
      <param name="fields">fields to record</param>
            /// <param name="hint">state change hint</param></member>
    <member name="M:Nevron.GraphicsCore.Text.NElement.PauseHistoryService">
      <summary>
            Safely pauses the history service
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NElement.ResumeHistoryService">
      <summary>
            Safely resumes the history service
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.Text.NElement.Style">
      <summary>
            Gets the style associated with this element
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.Text.NElement.UniqueId">
      <summary>
            Gets/sets the unique id of the element
            </summary>
      <remarks>
            The set implementation has been provided for Cloning with new Ids. Do not call it directly.
            </remarks>
    </member>
    <member name="P:Nevron.GraphicsCore.Text.NElement.Id">
      <summary>
            Gets/sets the id of the element
            </summary>
      <remarks>
            The set implementation has been provided, so that the document can assign a valid id. Do not call it directly
            </remarks>
    </member>
    <member name="P:Nevron.GraphicsCore.Text.NElement.Attributes">
      <summary>
            Gets an array of the child attributes of this container
            </summary>
      <returns>attributes of the container</returns>
    </member>
    <member name="P:Nevron.GraphicsCore.Text.NFragment.Paragraph">
      <summary>
            Obtains the paragraph that contains this fragment
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Text.NHyperLinkFragment">
      <summary>
            Summary description for NHyperLinkFragment.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Text.NStringFragment">
      <summary>
            Represents a string in the text document.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Text.INSplittable">
      <summary>
            Implemented by splittable elements.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Text.INMergeable">
      <summary>
            Implemented by elements that can merge with others.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.INMergeable.CanMerge(Nevron.GraphicsCore.Text.NElement)">
      <summary>
            Returns true if this element can merge with the passed element.
            </summary>
      <param name="element">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.INMergeable.Merge(Nevron.GraphicsCore.Text.NElement)">
      <summary>
            Merges the element with this one.
            </summary>
      <param name="element">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NStringFragment.CanMerge(Nevron.GraphicsCore.Text.NElement)">
      <summary>
            Returns true if this element can merge with the passed element.
            </summary>
      <param name="element">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NStringFragment.Merge(Nevron.GraphicsCore.Text.NElement)">
      <summary>
            Merges the element with this one.
            </summary>
      <param name="element">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NStringFragment.HasDecoration(Nevron.GraphicsCore.TextDecoration)">
      <summary>
            Returns true if the fragment has the specifed decoration
            </summary>
      <param name="textDecoration">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NStringFragment.RequiresDecorationBoundsBox(Nevron.GraphicsCore.TextDecoration)">
      <summary>
            Returns true if the specified decoration requires a bounding box
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NStringFragment.BeginDecorationBatchRender(Nevron.GraphicsCore.lIIIIllI,Nevron.GraphicsCore.TextDecoration)">
      <summary>
            Activates the styles needed to paint the specified decoration
            </summary>
      <param name="device">
      </param>
      <param name="textDecoration">
      </param>
    </member>
    <member name="T:Nevron.GraphicsCore.Shapes.NGraphicsPathContext">
      <summary>
            Summary description for NGraphicsPathContext.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NImageRepository">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NImageRepository.ContainsAlias(System.String)">
      <summary>
            Returns true if the repository contains the specified alias
            </summary>
      <param name="alias">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NImageRepository.RegisterImage(System.String,System.String)">
      <summary>
            Registers an image file and its alias
            </summary>
      <param name="alias">
      </param>
      <param name="fileName">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NImageRepository.RegisterImage(System.String,System.Drawing.Bitmap)">
      <summary>
            Registers an image bitmap and its alias
            </summary>
      <param name="alias">
      </param>
      <param name="image">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NImageRepository.UnRegisterImage(System.String)">
      <summary>
            Unregisters the image with the specified alias from the repository
            </summary>
      <param name="alias">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NImageRepository.FindImageFromAlias(System.String)">
      <summary>
            Returns the image associated with the specified alias
            </summary>
      <param name="alias">
      </param>
      <returns>
      </returns>
    </member>
    <member name="F:Nevron.GraphicsCore.NImageRepository.Instance">
      <summary>
            Singleton instance
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NIndexedColor">
      <summary>
            Represents an indexed color. The indexed color actual representation depends on the current
            palette applied on the graphics context.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NColor">
      <summary>
            The base of all color definitions
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.INColor">
      <summary>
            Implemented by colors
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.INColor.GetArgbColorValue(Nevron.GraphicsCore.INDevice)">
      <summary>
            Gets the ARGB color representation of this color on the specified device
            </summary>
      <param name="device">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NColor.GetArgbColorValue(Nevron.GraphicsCore.INDevice)">
      <summary>
            Gets the ARGB color representation of this color on the specified device
            </summary>
      <param name="device">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NColor.GetArgbColorValueF(Nevron.GraphicsCore.INDevice)">
      <summary>
            Gets the ARGB color representation of this color on the specified device
            </summary>
      <param name="device">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NColor.Invert">
      <summary>
            Returns the inverse of this color
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NColor.ToGrayscale">
      <summary>
            Returns a grayscale color
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NColor.ToColor">
      <summary>
            Returns the System.Drawing color representation of this color
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NColor.Clone">
      <summary>
            Creates an exact replica of this object
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NColor.FromString(System.String)">
      <summary>
            Creates an NColor derived object based on its string representation
            </summary>
      <param name="str">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NColor.ColorFromString(System.String)">
      <summary>
      </summary>
      <param name="str">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NColor.GetIntensity(System.Drawing.Color)">
      <summary>
            Returns the intensity of the color.
            </summary>
      <param name="color">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NColor.GetIntensity(System.Drawing.Color@)">
      <summary>
            Returns the intensity of the color.
            </summary>
      <param name="color">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NColor.ConvertToGrayScale(System.Drawing.Color)">
      <summary>
            Converts the color to its grayscale equivalent.
            </summary>
      <param name="color">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NColor.ConvertToGrayScale(System.Drawing.Color@)">
      <summary>
            Converts the color to its grayscale equivalent.
            </summary>
      <param name="color">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NColor.GetRValue(System.UInt32)">
      <summary>
            Returns the red color component from a uint encoded color
            </summary>
      <param name="rgb">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NColor.GetGValue(System.UInt32)">
      <summary>
            Returns the green color component from a uint encoded color
            </summary>
      <param name="rgb">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NColor.GetBValue(System.UInt32)">
      <summary>
            Returns the blue color component from a uint encoded color
            </summary>
      <param name="rgb">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NColor.Invert(System.Drawing.Color)">
      <summary>
            Inverts the color
            </summary>
      <param name="color">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NColor.AdjustColorIntensity(System.Drawing.Color,System.Single)">
      <summary>
            Increases or decreases the color intensity by a given factor.
            </summary>
      <param name="color">
      </param>
      <param name="factor">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NColor.ColorType">
      <summary>
            Gets the type of the color (ARGB, Indexed etc.)
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NColor.Intensity">
      <summary>
            Returns the intensity of this color
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NColor.IsTransparent">
      <summary>
            Returns true if the color is fully transparent
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NColor.IsTranslucent">
      <summary>
            Returns true if the color is parially transparent
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NIndexedColor.GetArgbColorValue(Nevron.GraphicsCore.INDevice)">
      <summary>
            Gets the ARGB color representation of this color on the specified device
            </summary>
      <param name="device">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NIndexedColor.GetArgbColorValueF(Nevron.GraphicsCore.INDevice)">
      <summary>
            Gets the ARGB color representation of this color on the specified device
            </summary>
      <param name="device">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NIndexedColor.Invert">
      <summary>
            Returns the inverse of this color
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NIndexedColor.ToGrayscale">
      <summary>
            Returns a grayscale color
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NIndexedColor.ToColor">
      <summary>
            Returns the System.Drawing color representation of this color
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NIndexedColor.ToString">
      <summary>
            Returns the string representation of this NColor object.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NIndexedColor.Equals(System.Object)">
      <summary>
            Returns true if the objects are equal
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NIndexedColor.GetHashCode">
      <summary>
            Overriden to avoid compilation warnings
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NIndexedColor.Clone">
      <summary>
            Creates an exact replica of this object
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NIndexedColor.Index">
      <summary>
            Gets the index of the color in the current graphics context palette
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NIndexedColor.ColorType">
      <summary>
            Gets the type of the color (ARGB, Indexed etc.)
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NIndexedColor.Intensity">
      <summary>
            Returns the intensity of this color
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NIndexedColor.IsTransparent">
      <summary>
            Returns true if the color is fully transparent
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NIndexedColor.IsTranslucent">
      <summary>
            Returns true if the color is parially transparent
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NCircleF">
      <summary>
            The NCircleF structure represents a circle in 2D space defined by it's center and radius
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.INClosedFigurePrimitive">
      <summary>
            Summary description for INClosedFigurePrimitive.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.INGeometryPrimitive">
      <summary>
            The INGeometryPrimitive interface is implemented by structures and classes,
            which can be treated as geometry primitives.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.INGeometryPrimitive.Translate(System.Single,System.Single)">
      <summary>
            Translates the primitive with the specified amounts.
            </summary>
      <param name="dx">
      </param>
      <param name="dy">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.INGeometryPrimitive.Translate(Nevron.GraphicsCore.NPointF)">
      <summary>
            Translates the primitive with the specified offset.
            </summary>
      <param name="offset">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.INGeometryPrimitive.AddToGraphicsPath(System.Drawing.Drawing2D.GraphicsPath)">
      <summary>
            Appends the primitive to the specified graphics path.
            </summary>
      <param name="path">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.INGeometryPrimitive.ContainsOnOutline(Nevron.GraphicsCore.NPointF,System.Single)">
      <summary>
            Determines whether the outline of the primitive contains the specified point.
            </summary>
      <param name="point">
      </param>
      <param name="weight">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.INGeometryPrimitive.ContainsOnOutline(Nevron.GraphicsCore.NPointF,System.Drawing.Pen)">
      <summary>
            Determines whether the outline of the primitive contains the specified point.
            </summary>
      <param name="point">
      </param>
      <param name="pen">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.INGeometryPrimitive.Bounds">
      <summary>
            Gets the minimal enclosing rectangle.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.INGeometryPrimitive.BoundsRange">
      <summary>
            Gets the minimal enclosing 2D range.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.INGeometryPrimitive.IsFlat">
      <summary>
            Determines whether this is a flat primitive.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.INClosedFigurePrimitive.Contains(Nevron.GraphicsCore.NPointF)">
      <summary>
            Determines whether the primitive interior contains the specified point
            </summary>
      <param name="point">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.INClosedFigurePrimitive.Contains(Nevron.GraphicsCore.NPointF,System.Drawing.Drawing2D.FillMode)">
      <summary>
            Determines whether the primitive interior contains the specified point
            </summary>
      <param name="point">
      </param>
      <param name="fillMode">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NCircleF.Translate(System.Single,System.Single)">
      <summary>
            Translates the primitive with the specified amounts
            </summary>
      <param name="dx">
      </param>
      <param name="dy">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NCircleF.Translate(Nevron.GraphicsCore.NPointF)">
      <summary>
            Translates the primitive with the specified offset
            </summary>
      <param name="offset">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NCircleF.AddToGraphicsPath(System.Drawing.Drawing2D.GraphicsPath)">
      <summary>
            Appends the primitive to the specified graphics path
            </summary>
      <param name="path">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NCircleF.ContainsOnOutline(Nevron.GraphicsCore.NPointF,System.Single)">
      <summary>
            Determines whether the outline of the circle contains the specified point
            </summary>
      <param name="point">
      </param>
      <param name="weight">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NCircleF.ContainsOnOutline(Nevron.GraphicsCore.NPointF,System.Drawing.Pen)">
      <summary>
            Determines whether the outline of the rectangle contains the specified point
            </summary>
      <param name="point">
      </param>
      <param name="pen">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NCircleF.Contains(Nevron.GraphicsCore.NPointF)">
      <summary>
            Determines whether the circle interior contains the specified point.
            </summary>
      <param name="point">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NCircleF.Contains(Nevron.GraphicsCore.NPointF,System.Drawing.Drawing2D.FillMode)">
      <summary>
            Determines whether the primitive interior contains the specified point
            </summary>
      <param name="point">
      </param>
      <param name="fillMode">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NCircleF.Equals(System.Object)">
      <summary>
      </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NCircleF.GetHashCode">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NCircleF.ToString">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NCircleF.IntersectWith(Nevron.GraphicsCore.NLineF,Nevron.GraphicsCore.NPointFList@)">
      <summary>
            Intersects this circle with the specified line
            </summary>
      <param name="line">line with which to intersect</param>
      <param name="intersectionPoints">resulting intersection points (valid only if the method has returned true)</param>
      <returns>true if this circle intersects with the line, otherwise false</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NCircleF.IntersectWith(Nevron.GraphicsCore.NLineSegmentF,Nevron.GraphicsCore.NPointFList@)">
      <summary>
            Intersects this circle with the specified line segment
            </summary>
      <param name="line">line with which to intersect</param>
      <param name="intersectionPoints">resulting intersection points (valid only if the method has returned true)</param>
      <returns>true if this circle intersects with the line, otherwise false</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NCircleF.IntersectWith(Nevron.GraphicsCore.NRayF,Nevron.GraphicsCore.NPointFList@)">
      <summary>
            Intersects this circle with the specified ray
            </summary>
      <param name="ray">ray with which to intersect</param>
      <param name="intersectionPoints">resulting intersection points (valid only if the method has returned true)</param>
      <returns>true if this circle intersects with the ray, otherwise false</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NCircleF.IntersectsWith(Nevron.GraphicsCore.NLineF)">
      <summary>
            Determines whether this circle intersects with the specified line
            </summary>
      <param name="line">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NCircleF.AreaIntersectsWith(Nevron.GraphicsCore.NCircleF)">
      <summary>
            Determines whether this circle area intersects with the specified circle area
            </summary>
      <param name="circle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NCircleF.OutlineIntersectsWith(Nevron.GraphicsCore.NCircleF)">
      <summary>
            Determines whether this circle outline intersects with the specified circle outline
            </summary>
      <param name="circle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NCircleF.IntersectsWith(Nevron.GraphicsCore.NRayF)">
      <summary>
            Determines whether this circle intersects with the specified ray
            </summary>
      <param name="ray">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NCircleF.AreaIntersectsWith(Nevron.GraphicsCore.NRectangleF)">
      <summary>
            Determines whether this circle intersects with the specified rectangle
            </summary>
      <param name="rect">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NCircleF.PointFromAngle(System.Single)">
      <summary>
            Gets the point on the circle rim, which corresponds to the specified angle (in radians)
            </summary>
      <param name="angle">angle (in radians)</param>
      <returns>point on the circle rim</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NCircleF.AngleFromPoint(Nevron.GraphicsCore.NPointF)">
      <summary>
            Gets the angle (in radians) of the ray connecting the point with the circle center
            </summary>
      <param name="point">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NCircleF.IntersectionArea(Nevron.GraphicsCore.NCircleF)">
      <summary>
            Computes the intersection area of this circle with the specified circle
            </summary>
      <param name="circle">
      </param>
      <returns>zero if circles do not intersect, otherwise returns the intersection area</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NCircleF.SectorArea(System.Single)">
      <summary>
            Gets the smaller sector area of the two possible circular sectors 
            defined by the specified angle (in radians).
            </summary>
      <param name="angle">sector angle (in radias)</param>
      <returns>
      </returns>
    </member>
    <member name="F:Nevron.GraphicsCore.NCircleF.Center">
      <summary>
            Circle center point
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NCircleF.Radius">
      <summary>
            Circle radius
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NCircleF.FromThreePoints(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
      <summary>
            Creates a circle from three points
            </summary>
      <remarks>
            If the points are coliner returns the NCircleF.Empty
            </remarks>
      <param name="pt1">
      </param>
      <param name="pt2">
      </param>
      <param name="pt3">
      </param>
      <returns>
      </returns>
    </member>
    <member name="F:Nevron.GraphicsCore.NCircleF.Empty">
      <summary>
            The empty circle
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NCircleF.Bounds">
      <summary>
            Gets the minimal enclosing rectangle
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NCircleF.BoundsRange">
      <summary>
            Gets the minimal enclosing 2D range
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NCircleF.IsFlat">
      <summary>
            Determines whether this is a flat primitive
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NCircleF.Diameter">
      <summary>
            Gets the diameter of the circle
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NCircleF.Area">
      <summary>
            Gets the circle area (PI * Radius * Radius)
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NCircleF.Perimeter">
      <summary>
            Gets the circle perimeter (2 * PI * Radius)
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NCircleF.IsEmpty">
      <summary>
            Determines whether the circle is empty (its Radius is 0)
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NCircleF.CenterVector">
      <summary>
            Gets the circle center as a vector
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NPointFList">
      <summary>
            Represents a list of NPointF values.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NPointFList.Clone">
      <summary>
            Creates an exact replica of this object.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NPointFList.Translate(System.Single,System.Single)">
      <summary>
            Translates all points in the list.
            </summary>
      <param name="dx">
      </param>
      <param name="dy">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NPointFList.Rotate(System.Single,Nevron.GraphicsCore.NPointF)">
      <summary>
            Rotates all points in the list around the specified point.
            </summary>
      <param name="angle">The angle (in radians).</param>
      <param name="pin">The pin point.</param>
    </member>
    <member name="M:Nevron.GraphicsCore.NPointFList.Scale(System.Single,System.Single,Nevron.GraphicsCore.NPointF)">
      <summary>
            Scales all points in the list around the specified point
            </summary>
      <param name="scaleX">
      </param>
      <param name="scaleY">
      </param>
      <param name="pin">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NPointFList.Transform(Nevron.GraphicsCore.NMatrix2DF)">
      <summary>
            Transforms all points in the list with the specified transform
            </summary>
      <param name="transform">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NPointFList.Simplify(System.Single)">
      <summary>
            Returns a simplified version of this sequence of points using an improved version
            Douglas and Peucker algorithm (uses path hulls) which improves the worst case running
            time from O(n^2) to O(n * log2(n)). Topology is preserved.
            </summary>
      <param name="tolerance">The tolerance (if all points from i to j are within tolerance
            with the line segment i-j then the chain i, i+1, ..., j is simplified to i, j).</param>
      <returns>Returns a simplified version of this sequence of points.</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NPointFList.GetNearestPoint(Nevron.GraphicsCore.NPointF)">
      <summary>
            Gets the point in the list, which is nearest to the specified point. If the list is empty returns the point itself
            </summary>
      <param name="pt">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NPointFList.ToPointFArray">
      <summary>
            Creates a PointF array, which contains the points in this list
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NPointFList.ToNPointFArray">
      <summary>
            Creates a NPointF array, which contains the points in this list
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NPointFList.Bounds">
      <summary>
            Gets the bounds of the points contained in this list.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NPointFList.BoundsRange">
      <summary>
            Gets the bounds range of the points contained in this list.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NPointFList.Barycenter">
      <summary>
            Gets the barycenter of the current points list.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NMatrix2DF">
      <summary>
            The NMatrix2DF structure represents an affine 2D transformation
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NMatrix2DF.GetHashCode">
      <summary>
            Overriden because Equals was overriden
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NMatrix2DF.Equals(System.Object)">
      <summary>
            Overriden to compare the matrix elements
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NMatrix2DF.Reset">
      <summary>
            Resets this matrix object to have the elements of the identity matrix.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NMatrix2DF.Translate(System.Single,System.Single)">
      <summary>
            Translates the matrix
            </summary>
      <remarks>
            Appends a translate matrix to this matrix.
            </remarks>
      <param name="dx">
      </param>
      <param name="dy">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NMatrix2DF.Scale(System.Single,System.Single)">
      <summary>
            Applies the specified scale to this matrix 
            </summary>
      <remarks>
            Appends a scale matrix to this matrix.
            </remarks>
      <param name="scaleX">
      </param>
      <param name="scaleY">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NMatrix2DF.Scale(System.Single,System.Single,System.Drawing.PointF)">
      <summary>
            Applies the specified scale to this matrix and preserves the location of the specified pin
            </summary>
      <param name="scaleX">
      </param>
      <param name="scaleY">
      </param>
      <param name="pin">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NMatrix2DF.Scale(System.Single,System.Single,Nevron.GraphicsCore.NPointF)">
      <summary>
            Applies the specified scale to this matrix and preserves the location of the specified pin
            </summary>
      <param name="scaleX">
      </param>
      <param name="scaleY">
      </param>
      <param name="pin">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NMatrix2DF.Rotate(System.Single)">
      <summary>
            Applies a rotation around the 0, 0 point with specified angle
            </summary>
      <remarks>
            Appends a rotation matrix to this matrix.
            </remarks>
      <param name="angle">angle (in radians)</param>
    </member>
    <member name="M:Nevron.GraphicsCore.NMatrix2DF.Rotate(System.Single,System.Drawing.PointF)">
      <summary>
            Applies a rotation around the specified pin point with specified angle
            </summary>
      <param name="angle">angle (in radians)</param>
      <param name="pin">pin point</param>
    </member>
    <member name="M:Nevron.GraphicsCore.NMatrix2DF.Rotate(System.Single,Nevron.GraphicsCore.NPointF)">
      <summary>
            Applies a rotation around the specified pin point with specified angle
            </summary>
      <param name="angle">angle (in radians)</param>
      <param name="pin">pin point</param>
    </member>
    <member name="M:Nevron.GraphicsCore.NMatrix2DF.PrependTranslate(System.Single,System.Single)">
      <summary>
            Prepends a translate matrix to this matrix.
            </summary>
      <param name="dx">translate X</param>
      <param name="dy">translate Y</param>
    </member>
    <member name="M:Nevron.GraphicsCore.NMatrix2DF.PrependScale(System.Single,System.Single)">
      <summary>
            Prepends a scale matrix to this matrix.
            </summary>
      <param name="scaleX">scale X</param>
      <param name="scaleY">scale Y</param>
    </member>
    <member name="M:Nevron.GraphicsCore.NMatrix2DF.PrependRotate(System.Single)">
      <summary>
            Prepends a rotation matrix to this matrix.
            </summary>
      <param name="angle">rotation angle (in radians)</param>
    </member>
    <member name="M:Nevron.GraphicsCore.NMatrix2DF.TransformToBounds(System.Drawing.RectangleF,System.Drawing.RectangleF)">
      <summary>
            Applies a transformation, which fits the old bounds into the new bounds
            </summary>
      <param name="oldBounds">
      </param>
      <param name="newBounds">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NMatrix2DF.TransformToBounds(Nevron.GraphicsCore.NRectangleF,Nevron.GraphicsCore.NRectangleF)">
      <summary>
            Applies a transformation, which fits the old bounds into the new bounds
            </summary>
      <param name="oldBounds">
      </param>
      <param name="newBounds">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NMatrix2DF.Multiply(Nevron.GraphicsCore.NMatrix2DF)">
      <summary>
            Multiplies this matrix with the specified matrix
            </summary>
      <param name="m">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NMatrix2DF.Divide(Nevron.GraphicsCore.NMatrix2DF)">
      <summary>
            Divides this matrix with the specified matrix
            </summary>
      <param name="m">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NMatrix2DF.Invert">
      <summary>
            Inverts this matrix if it is invertible
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NMatrix2DF.ToMatrix">
      <summary>
            Creates a System.Drawing.Drawing2D.Matrix from this matrix
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NMatrix2DF.TransformPoint(System.Drawing.PointF)">
      <summary>
            Transforms the specified point
            </summary>
      <param name="point">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NMatrix2DF.TransformPoint(Nevron.GraphicsCore.NPointF)">
      <summary>
            Transforms the specified point
            </summary>
      <param name="point">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NMatrix2DF.TransformPoints(System.Drawing.PointF[])">
      <summary>
            Transforms the specified points
            </summary>
      <param name="points">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NMatrix2DF.TransformPoints(Nevron.GraphicsCore.NPointF[])">
      <summary>
            Transforms the specified points
            </summary>
      <param name="points">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NMatrix2DF.TransformPoints(Nevron.GraphicsCore.NPointFList)">
      <summary>
            Transforms the specified points
            </summary>
      <param name="points">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NMatrix2DF.TransformRect(System.Drawing.RectangleF)">
      <summary>
            Transforms the specified rectangle
            </summary>
      <remarks>
            This method should only be used for transformations which have no rotation (like the WorldToView transform).
            It is faster than the TransformBounds method, since it only transforms two points (LeftTop and RightBottom) 
            and constructs a new rectangle based on them.
            </remarks>
      <param name="rect">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NMatrix2DF.TransformBounds(System.Drawing.RectangleF)">
      <summary>
            Transforms the specified bounds
            </summary>
      <remarks>
            This method transforms the corners of the specified bounds and then constructs the minimal rectangle, which contains them
            </remarks>
      <param name="bounds">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NMatrix2DF.TransformRect(Nevron.GraphicsCore.NRectangleF)">
      <summary>
            Transforms the specified rectangle
            </summary>
      <remarks>
            This method should only be used for transformations which have no rotation (like the WorldToView transform).
            It is faster than the TransformBounds method, since it only transforms two points (LeftTop and RightBottom) 
            and constructs a new rectangle based on them.
            </remarks>
      <param name="rect">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NMatrix2DF.TransformBounds(Nevron.GraphicsCore.NRectangleF)">
      <summary>
            Transforms the specified bounds
            </summary>
      <remarks>
            This method transforms the corners of the specified bounds and then constructs the minimal rectangle, which contains them
            </remarks>
      <param name="bounds">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NMatrix2DF.TransformPath(System.Drawing.Drawing2D.GraphicsPath)">
      <summary>
            Transforms the specified graphics path
            </summary>
      <param name="path">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NMatrix2DF.InvertPoint(System.Drawing.PointF)">
      <summary>
            Applies the inverted transform to the specified point
            </summary>
      <param name="point">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NMatrix2DF.InvertPoint(Nevron.GraphicsCore.NPointF)">
      <summary>
            Applies the inverted transform to the specified point
            </summary>
      <param name="point">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NMatrix2DF.InvertPoints(System.Drawing.PointF[])">
      <summary>
            Applies the inverted Transform to the specified points
            </summary>
      <param name="points">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NMatrix2DF.InvertPoints(Nevron.GraphicsCore.NPointF[])">
      <summary>
            Applies the inverted Transform to the specified points
            </summary>
      <param name="points">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NMatrix2DF.InvertRect(System.Drawing.RectangleF)">
      <summary>
            Applies the inverted transform to the specified rectangle
            </summary>
      <remarks>
            This method should only be used for transformations, which have no rotation.
            It is faster than the InvertBounds method, since it only untransforms two points (LeftTop and RightBottom) 
            and constructs a new rectangle based on them.
            </remarks>
      <param name="rect">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NMatrix2DF.InvertBounds(System.Drawing.RectangleF)">
      <summary>
            Untransfrom the specified bounds
            </summary>
      <remarks>
            This method untransforms the corners of the specified bounds and then constructs the minimal rectangle, which contains them
            </remarks>
      <param name="bounds">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NMatrix2DF.InvertRect(Nevron.GraphicsCore.NRectangleF)">
      <summary>
            Applies the inverted transform to the specified rectangle
            </summary>
      <remarks>
            This method should only be used for transformations, which have no rotation.
            It is faster than the InvertBounds method, since it only untransforms two points (LeftTop and RightBottom) 
            and constructs a new rectangle based on them.
            </remarks>
      <param name="rect">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NMatrix2DF.InvertBounds(Nevron.GraphicsCore.NRectangleF)">
      <summary>
            Untransfrom the specified bounds
            </summary>
      <remarks>
            This method untransforms the corners of the specified bounds and then constructs the minimal rectangle, which contains them
            </remarks>
      <param name="bounds">
      </param>
      <returns>
      </returns>
    </member>
    <member name="F:Nevron.GraphicsCore.NMatrix2DF.Identity">
      <summary>
            The Identity matrix
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NMatrix2DF.Empty">
      <summary>
            The Empty matrix (all members are equal to 0)
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NMatrix2DF.M11">
      <summary>
            M11 matrix element
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NMatrix2DF.M12">
      <summary>
            M12 matrix element
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NMatrix2DF.M21">
      <summary>
            M21 matrix element
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NMatrix2DF.M22">
      <summary>
            M22 matrix element
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NMatrix2DF.DX">
      <summary>
            DX matrix element
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NMatrix2DF.DY">
      <summary>
            DY matrix element
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NMatrix2DF.IsIdentity">
      <summary>
            Determines whether this is the identity matrix
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NMatrix2DF.IsRotate">
      <summary>
            Determines if the matrix has rotation.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NMatrix2DF.IsScale">
      <summary>
            Determines if the matrix has scale.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NMatrix2DF.IsTranslateOnly">
      <summary>
            Determines if the matrix has only a translation.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NMatrix2DF.IsInvertible">
      <summary>
            Determines whether this matrix is invertible
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NMatrix2DF.Determinant">
      <summary>
            Gets the determinant of this matrix 
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NMatrix2DF.Rotation">
      <summary>
            Obtains the rotation (in radians)
            </summary>
      <remarks>
            The rotatoin is calculated as the angle between the transformed (0, 0);(1, 0) vector and the X axis.
            </remarks>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NMatrix2DF.ScaleX">
      <summary>
            Obtains the X scale
            </summary>
      <remarks>
            The X scale is calculated as the distance of between the transformed (0, 0) and (1, 0) points
            </remarks>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NMatrix2DF.ScaleY">
      <summary>
            Obtains the Y scale
            </summary>
      <remarks>
            The Y scale is calculated as the distance of between the transformed (0, 0) and (0, 1) points
            </remarks>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.GraphicsCore.NTextStyleConverter">
      <summary>
            Serves as a base class for all converters, which can convert text styles.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NTextStyleConverter.Convert(System.Object)">
      <summary>
            Must override to convert the object.
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NTextStyleConverter.CanConvert(System.Type)">
      <summary>
            Determines whether the converter can convert objects of the specified type 
            </summary>
      <param name="type">object type</param>
      <returns>true if objects of this type can be converted, otherwise false</returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NTextStyleConverter.Converts">
      <summary>
            Returns an array of types converted by this object.
            </summary>
      <remarks>
            This implementation will return all known types of text styles.
            </remarks>
    </member>
    <member name="T:Nevron.GraphicsCore.NAngleUnit">
      <summary>
            Represents an angle unit
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NAngleUnit.ToDegrees(System.Single)">
      <summary>
            Returns the angle converted to degrees
            </summary>
      <param name="angle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NAngleUnit.ToRadians(System.Single)">
      <summary>
            Returns the angle converted to radians
            </summary>
      <param name="angle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NAngleUnit.ToGrads(System.Single)">
      <summary>
            Returns the angle converted to grads
            </summary>
      <param name="angle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NAngleUnit.Normalize(System.Single)">
      <summary>
            Normalizes the angle value
            </summary>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NAngleUnit.GetCycle">
      <summary>
            Gets the anglular cycle for this unit
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NAngleUnit.Parse(System.String)">
      <summary>
            Converts the string representation of the angle unit to NAngleUnit
            </summary>
      <param name="str">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NAngleUnit.Clone">
      <summary>
            Creates an identical copy of this objects
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NAngleUnit.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Serializes this measurement unit.
            </summary>
      <param name="info">
      </param>
      <param name="context">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NAngleUnit.GetFromEnum(Nevron.GraphicsCore.AngleUnit)">
      <summary>
            Gets the angle unit singleton corresponding to the specified angle unit
            </summary>
      <param name="unit">
      </param>
      <returns>
      </returns>
    </member>
    <member name="F:Nevron.GraphicsCore.NAngleUnit.Degree">
      <summary>
            The degree angle unit.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NAngleUnit.Radian">
      <summary>
            The radian angle unit.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NAngleUnit.Grad">
      <summary>
            The grad angle unit.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NAngleUnit.AngleUnit">
      <summary>
            Gets the angle unit 
            </summary>
    </member>
    <member name="T:Nevron.FormulaSheet.NDataGridColumnInfo">
      <summary>
            The NDataGridColumnInfo class encapsulates data grid column information, 
            which a formula section needs to create a data grid for its cells or rows.
            </summary>
    </member>
    <member name="F:Nevron.FormulaSheet.NDataGridColumnInfo.Name">
      <summary>
            Column name
            </summary>
    </member>
    <member name="F:Nevron.FormulaSheet.NDataGridColumnInfo.Type">
      <summary>
            Type of values contained in the column
            </summary>
    </member>
    <member name="F:Nevron.FormulaSheet.NDataGridColumnInfo.Style">
      <summary>
            Style
            </summary>
    </member>
    <member name="T:Nevron.FormulaSheet.NBooleanFormulaCell">
      <summary>
            The NBooleanFormulaCell is a formula cell, which has a strong type of Boolean
            </summary>
    </member>
    <member name="M:Nevron.FormulaSheet.NBooleanFormulaCell.Clone">
      <summary>
            Creates an identical copy of this object
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaSheet.NBooleanFormulaCell.GetStrongTypeOptions">
      <summary>
            Overriden to return the boolean constants TRUE and FALSE
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaSheet.NBooleanFormulaCell.SetVariantValue(Nevron.FormulaEngine.NVariant)">
      <summary>
            Overriden to convert the variant to Boolean and store its value
            </summary>
      <param name="val">
      </param>
    </member>
    <member name="M:Nevron.FormulaSheet.NBooleanFormulaCell.GetVariantValue">
      <summary>
            Overriden to get the value as a Boolean variant
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.FormulaSheet.NBooleanFormulaCell.Value">
      <summary>
            Gets/sets the Boolean value of the cell
            </summary>
    </member>
    <member name="P:Nevron.FormulaSheet.NBooleanFormulaCell.IsStronglyTyped">
      <summary>
            Overriden to return true
            </summary>
    </member>
    <member name="P:Nevron.FormulaSheet.NBooleanFormulaCell.StrongType">
      <summary>
            Overriden to return VariantType.Boolean
            </summary>
    </member>
    <member name="T:Nevron.Editors.NStringFormatStyleTypeEditor">
      <summary>
            Provides facilities for visual editing of NStringFormatStyle objects.
            </summary>
    </member>
    <member name="M:Nevron.Editors.NStringFormatStyleTypeEditor.Edit(Nevron.GraphicsCore.NStringFormatStyle,Nevron.GraphicsCore.NStringFormatStyle@)">
      <summary>
            Edits the specified style. 
            </summary>
      <param name="stringFormatStyle">
      </param>
      <param name="stringFormatStyleResult">
      </param>
      <returns>
      </returns>
      <remarks>
            If the function returns true then the out parameter holds a valid style.
            </remarks>
    </member>
    <member name="M:Nevron.Editors.NStringFormatStyleTypeEditor.Edit(Nevron.GraphicsCore.NStringFormatStyle,System.Boolean,Nevron.GraphicsCore.NStringFormatStyle@)">
      <summary>
            Edits the specified style. If automatic is set to true the in parameter must be treated as automatic style.
            </summary>
      <param name="stringFormatStyle">
      </param>
      <param name="automaticStyle">
      </param>
      <param name="stringFormatStyleResult">
      </param>
      <returns>
      </returns>
      <remarks>
            If the function returns true then the out parameter holds a valid style.
            </remarks>
    </member>
    <member name="T:Nevron.Editors.NImageFiltersStyleTypeEditor">
      <summary>
            Provides facilities for visual editing of NImageFiltersStyle objects.
            </summary>
    </member>
    <member name="M:Nevron.Editors.NImageFiltersStyleTypeEditor.Edit(Nevron.GraphicsCore.NImageFiltersStyle,Nevron.GraphicsCore.NImageFiltersStyle@)">
      <summary>
            Edits the specified style. 
            </summary>
      <param name="imageFiltersStyle">
      </param>
      <param name="imageFiltersStyleResult">
      </param>
      <returns>
      </returns>
      <remarks>
            If the function returns true then the out parameter holds a valid style.
            </remarks>
    </member>
    <member name="M:Nevron.Editors.NImageFiltersStyleTypeEditor.Edit(Nevron.GraphicsCore.NImageFiltersStyle,System.Boolean,Nevron.GraphicsCore.NImageFiltersStyle@)">
      <summary>
            Edits the specified style. If automatic is set to true the in parameter must be treated as automatic style.
            </summary>
      <param name="imageFiltersStyle">
      </param>
      <param name="allowAutomatic">
      </param>
      <param name="imageFiltersStyleResult">
      </param>
      <returns>
      </returns>
      <remarks>
            If the function returns true then the out parameter holds a valid style.
            </remarks>
    </member>
    <member name="F:Nevron.Editors.NGallery.RegistryKey">
      <summary>
            Controls the root registry key used by the gallery
            </summary>
    </member>
    <member name="F:Nevron.Editors.NGallery.RegistryBaseKey">
      <summary>
            Controls the registry key base used by the gallery
            </summary>
    </member>
    <member name="T:Nevron.Editors.NBackplaneStyleButton">
      <summary>
            Represents a button, which is used for the editing of a backplane style. Displays a backplane style preview.
            </summary>
    </member>
    <member name="M:Nevron.Editors.NBackplaneStyleButton.EditStyle(Nevron.GraphicsCore.NBackplaneStyle,System.Boolean,Nevron.GraphicsCore.NBackplaneStyle@)">
      <summary>
            Overriden to show the backplane style type editor
            </summary>
      <param name="inStyle">
      </param>
      <param name="automatic">
      </param>
      <param name="outStyle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Editors.NBackplaneStyleButton.CreateDefaultStyle">
      <summary>
            Overriden to create a new backplane style 
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.Editors.NBackplaneStyleTypeEditorNoAutomatic">
      <summary>
            Provides facilities for visual editing of NBackplaneStyle objects.
            </summary>
    </member>
    <member name="T:Nevron.Editors.NBackplaneStyleTypeEditor">
      <summary>
            Provides facilities for visual editing of NBackplaneStyle objects.
            </summary>
    </member>
    <member name="M:Nevron.Editors.NBackplaneStyleTypeEditor.Edit(Nevron.GraphicsCore.NBackplaneStyle,Nevron.GraphicsCore.NBackplaneStyle@)">
      <summary>
            Edits the specified style. 
            </summary>
      <param name="backplaneStyle">
      </param>
      <param name="backplaneStyleResult">
      </param>
      <returns>
      </returns>
      <remarks>
            If the function returns true then the out parameter holds a valid style.
            </remarks>
    </member>
    <member name="M:Nevron.Editors.NBackplaneStyleTypeEditor.Edit(Nevron.GraphicsCore.NBackplaneStyle,System.Boolean,Nevron.GraphicsCore.NBackplaneStyle@)">
      <summary>
            Edits the specified style. If automatic is set to true the in parameter must be treated as automatic style.
            </summary>
      <param name="backplaneStyle">
      </param>
      <param name="automaticStyle">
      </param>
      <param name="backplaneStyleResult">
      </param>
      <returns>
      </returns>
      <remarks>
            If the function returns true then the out parameter holds a valid style.
            </remarks>
    </member>
    <member name="T:Nevron.Editors.NNodeCompositeEditorUC">
      <summary>
            Summary description for NNodeCompositeEditorUC.
            </summary>
    </member>
    <member name="T:Nevron.Editors.NNodeSplitterEditorUC">
      <summary>
            Summary description for NNodeSplitterEditorUC.
            </summary>
    </member>
    <member name="T:Nevron.Editors.NNodeEditorUC">
      <summary>
            Summary description for NNodeEditorUC.
            </summary>
    </member>
    <member name="M:Nevron.Editors.NNodeEditorUC.Dispose(System.Boolean)">
      <summary> 
            Clean up any resources being used.
            </summary>
    </member>
    <member name="M:Nevron.Editors.NNodeSplitterEditorUC.Dispose(System.Boolean)">
      <summary> 
            Clean up any resources being used.
            </summary>
    </member>
    <member name="E:Nevron.Editors.NNodeSplitterEditorUC.ObjectChanged">
      <summary>
            Occurs when the selected object has changed
            </summary>
    </member>
    <member name="T:Nevron.Editors.INDomNodeEditor">
      <summary>
            Summary description for INDomNodeEditor.
            </summary>
    </member>
    <member name="P:Nevron.Editors.INDomNodeEditor.Node">
      <summary>
            Gets / sets the root object 
            </summary>
    </member>
    <member name="M:Nevron.Editors.NNodeCompositeEditorUC.Dispose(System.Boolean)">
      <summary> 
            Clean up any resources being used.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NSkinEntryPair">
      <summary>
            Summary description for NSkinEntryPair.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NFontConverter">
      <summary>
            Summary description for NFontConverter.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NListViewDateTimeSorter">
      <summary>
            Summary description for NListViewDateTimeSorter.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NListViewSorter">
      <summary>
            Summary description for NListViewSorter.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NListBoxProperties.CheckStyle">
      <summary>
            Gets/sets the style of checkboxes (if such are specified).
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NListBoxProperties.CheckBoxes">
      <summary>
            Gets/sets a value indicating whether the NListBox will act as a CheckListBox.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NListBoxProperties.CheckOnClick">
      <summary>
            Gets/sets a value indicating whether an item checked state will change on a left mouse button double click.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NListBoxProperties.ItemHeight">
      <summary>
            Gets/sets the height of an item in the NListBox.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NListBoxProperties.MultiColumn">
      <summary>
            Gets/sets a value indicating whether the NListBox supports multiple columns.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NListBoxProperties.HorizontalScrollbar">
      <summary>
            Gets/sets a value indicating whether a horizontal scrollbar is displayed in the NListBox control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NListBoxProperties.HorizontalExtent">
      <summary>
            Gets/sets the width by which the horizontal scrollbar of a NListBox can scroll.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NListBoxProperties.ScrollAlwaysVisible">
      <summary>
            Gets/sets a value indicating whether the vertical scrollbar of a NListBox is shown at all times.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NListBoxProperties.ColumnWidth">
      <summary>
            Gets/sets the width of the column in a multicolumn NListBox.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NListBoxProperties.ColumnOnLeft">
      <summary>
            Gets/sets a value whether the NListBox will have column on its left side for displaying images.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NListBoxProperties.Sorted">
      <summary>
            Gets/sets a value indicating whether the items in the listbox will be sorted alphabetically.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NListBoxProperties.CheckedItems">
      <summary>
            Gets the checked items in the NListBox.Items collection.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NListBoxProperties.DefaultImageIndex">
      <summary>
            Gets/sets the default image index to be applied on the items(if their own is not specified)
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NWinFormScrollableElement">
      <summary>
            Summary description for NWinFormScrollableElement.
            </summary>
    </member>
    <member name="T:Nevron.UI.NScrollableElement">
      <summary>
            Summary description for NScrollableElement.
            </summary>
    </member>
    <member name="M:Nevron.UI.NScrollableElement.ShouldSerializeScrollMargins">
      <summary>
            Determines whether the ScrollMargins property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NScrollableElement.ShouldSerializeMinimumScrollSize">
      <summary>
            Determines whether the MinimumScrollSize property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.NScrollableElement.HScrollVisibility">
      <summary>
            Gets/sets the visibility of the horizontal scrollbar.
            </summary>
    </member>
    <member name="P:Nevron.UI.NScrollableElement.VScrollVisibility">
      <summary>
            Gets/sets the visibility of the vertical scrollbar.
            </summary>
    </member>
    <member name="P:Nevron.UI.NScrollableElement.ScrollMargins">
      <summary>
            Gets/sets the padding among container edges and scrollbars.
            </summary>
    </member>
    <member name="P:Nevron.UI.NScrollableElement.ViewBounds">
      <summary>
            Gets the viewable area (excluding scrollbars if any) of the element.
            </summary>
    </member>
    <member name="P:Nevron.UI.NScrollableElement.HScroll">
      <summary>
            Gets the internally created horizontal scrollbar.
            </summary>
    </member>
    <member name="P:Nevron.UI.NScrollableElement.VScroll">
      <summary>
            Gets the internally created vertical scrollbar.
            </summary>
    </member>
    <member name="P:Nevron.UI.NScrollableElement.ScrollAmount">
      <summary>
            Gets/sets the scrolled amount.
            </summary>
    </member>
    <member name="P:Nevron.UI.NScrollableElement.ScrollSize">
      <summary>
            Gets/sets the scrolling size.
            </summary>
    </member>
    <member name="P:Nevron.UI.NScrollableElement.MinimumScrollSize">
      <summary>
            Gets/sets minimum scrolling size.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NFrameCaptionButton">
      <summary>
            Represents a button on a frame caption.
            </summary>
    </member>
    <member name="T:Nevron.UI.NCaptionButtonItem">
      <summary>
            Summary description for NCaptionButton.
            </summary>
    </member>
    <member name="T:Nevron.UI.ToolStrips.NButtonItem">
      <summary>
            Summary description for NButtonItem.
            </summary>
    </member>
    <member name="P:Nevron.UI.NCaptionButtonItem.ImageSet">
      <summary>
            Gets the object which contains information about the button state images.
            </summary>
    </member>
    <member name="P:Nevron.UI.NCaptionButtonItem.Glyph">
      <summary>
            Gets/sets the common glyph to be displayed by the button.
            </summary>
    </member>
    <member name="P:Nevron.UI.NCaptionButtonItem.GlyphSize">
      <summary>
            Gets/sets the preferred size for the glyph.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NFrameCaptionButton.InitializeDefault">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.LabelControlRelation">
      <summary>
            Specifies the possible relations between label and control in a NEntryContainer
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NDateTimePicker">
      <summary>
            Represents an extension of the standard Windows Forms DateTimePicker control.
            Makes it consistent with the overall look-and-feel of the library.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NDateTimePicker.ApplyPalette(Nevron.UI.WinForm.Controls.NPalette)">
      <summary>
            Updates from the specified palette.
            </summary>
      <param name="palette">The palette to update from.</param>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDateTimePicker.EnableSkinning">
      <summary>
            Gets/sets a value indicating whether the control will use skin logic.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDateTimePicker.Skin">
      <summary>
            Gets/sets the local NSkin instance to be used when painting this control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDateTimePicker.CurrentSkin">
      <summary>
            Gets the current skin to be used by this instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDateTimePicker.Palette">
      <summary>
            Gets/sets the NPalette used to render the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDateTimePicker.PaletteInheritance">
      <summary>
            Gets/sets a value which Palette value will be applied on a higher level Palette change.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDateTimePicker.Border">
      <summary>
            Gets the NControlBorder object that manages the border around the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDateTimePicker.BorderWidth">
      <summary>
            Gets the preffered width of the border.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDateTimePicker.IsBorderHot">
      <summary>
            Gets a value indicating whether the border should be drawn in its default state (works only if the border is interactive).
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDateTimePicker.DefaultBorderStyle">
      <summary>
            Gets the default border style for the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDateTimePicker.DefaultBaseBorderColor">
      <summary>
            Gets the default base color to use when drawing 3D borders.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDateTimePicker.ShowUpDown">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.UI.NUIElementRenderer">
      <summary>
            Summary description for NUIElementRenderer.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NTreeListColumn">
      <summary>
            Represents a column in a NTreeList control.
            Each node may contain a sub-item, bound to a column.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeListColumn.UpdateReferences(Nevron.INReferenceProvider)">
      <summary>
      </summary>
      <param name="provider">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeListColumn.GetMinimumWidth">
      <summary>
            Gets the minimum possible width for the column.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeListColumn.InitFromDataColumn(System.Data.DataColumn)">
      <summary>
            Initializes the column from a DataColumn instance.
            </summary>
      <param name="column">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeListColumn.UpdateVisibleFilter">
      <summary>
            Forces visible filter update.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListColumn.DefaultWidth">
      <summary>
            Gets the default width of the column.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListColumn.DefaultMinimumWidth">
      <summary>
            Gets the default minimum width of the column.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListColumn.IsGroupedBy">
      <summary>
            Determines whether the default owner tree-list is grouped by this column.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListColumn.PinMode">
      <summary>
            Gets/sets the pin mode of the column.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListColumn.Name">
      <summary>
            Gets/sets the name of the column.
            This value may be used to look-up a column in its parent NTreeList's Columns collection.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListColumn.Comparer">
      <summary>
            Gets/sets the comparer used to sort by this column.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListColumn.Renderer">
      <summary>
            Gets/sets the renderer used to paint subitems belonging to this column.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListColumn.ContentAlign">
      <summary>
            Gets/sets the alignment of content in column's sub-items.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListColumn.Header">
      <summary>
            Gets the item which represents the header part of the column.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListColumn.Sortable">
      <summary>
            Determines whether the owning tree-list may be sorted by this column.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListColumn.CanGroupBy">
      <summary>
            Determines whether the owning tree-list may group-by this column.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListColumn.AutoSizable">
      <summary>
            Determines whether the column may be auto-sized by its owner NTreeList instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListColumn.Visible">
      <summary>
            Determines whether the column is visible.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListColumn.IsVisible">
      <summary>
            Determines whether the column is visible in the current GUI context.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListColumn.Width">
      <summary>
            Gets/sets the width of the column.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListColumn.MinimumWidth">
      <summary>
            Gets/sets the minimum width of the column.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListColumn.Index">
      <summary>
            Gets the zero-based index of this column in the column collection of its owner NTreeList.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListColumn.VisibleIndex">
      <summary>
            Gets the zero-based index of this column in the visible column collection of its owner NTreeList.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListColumn.SortMode">
      <summary>
            Gets the current sort mode of the column.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListColumn.VisibleFilter">
      <summary>
            Gets/sets the INFilter instance which controls the visibility of the tree-nodes which own this column's attached sub-items.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListColumn.ViewBounds">
      <summary>
            Gets the rectangle that encloses the column in the owner's TreeList view.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.TreeListNodeNotesStyle">
      <summary>
            Defines possible styles of displaying notes on per node basis.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.TreeListNodeNotesStyle.Inherit">
      <summary>
            Retrieves the value from its owner NTreeList instance.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.TreeListNodeNotesStyle.Show">
      <summary>
            Displays notes.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.TreeListNodeNotesStyle.Hide">
      <summary>
            Hides notes.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.TreeListGridMode">
      <summary>
            Specifies possible modes of a NTreeList grid.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NDataGridViewProgressBarCell.Clone">
      <summary>
            Creates an exact copy of the cell.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NDataGridViewProgressBarCell.ProgressBarPropertyChanged">
      <summary>
            Fired when a property has changed.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDataGridViewProgressBarCell.EditType">
      <summary>
            Get the type of the cell's hosting editing control. Returns null.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDataGridViewProgressBarCell.ValueType">
      <summary>
            Gets or Sets the data type of the values in the cell.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDataGridViewProgressBarCell.ProgressBarProperties">
      <summary>
            Gets or sets the properties of the progress bar displayed in the cell.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NToolStripSkinRenderer">
      <summary>
            Represents a System.Windows.Forms.ToolStripRenderer override
            which applies Nevron skinning logic to underlying toolstrips.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NToolStripSkinRenderer.NotifyInvalidate">
      <summary>
            Invalidates all toolstrips currently using this renderer.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NToolStripSkinRenderer.EnableSkinning">
      <summary>
            Determines whether skinning logic is enabled.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NToolStripSkinRenderer.Skin">
      <summary>
            Gets/sets the local skin value for the 
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NToolStripSkinRenderer.CurrentSkin">
      <summary>
            Gets the current skin used by the renderer.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NMenuBar.UpdateFormCaption">
      <summary>
            Gets/sets a value whether the menu bar will automatically update the form's caption when a document is maximized.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NMenuBar.MdiEnabled">
      <summary>
            Gets/sets a value whether the menu bar will allow Mdi commands to be displayed.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NComboBoxCommand">
      <summary>
            Represents a NControlHostCommand which hosts a combobox.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NComboBoxCommand.Focused">
      <summary>
            Gets a value indicating whether the combobox contains focus.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NComboBoxCommand.Items">
      <summary>
            Gets the ListBox.ObjectCollection for the hosted NComboBox.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NComboBoxCommand.Editable">
      <summary>
            Gets/sets a value whether the hosted NComboBox object will have an edit portion.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NComboBoxCommand.Context">
      <summary>
            Gets the context shared by this command.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NComboBoxCommand.ListProperties">
      <summary>
            Gets the common properties of the drop-down listbox part.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDockingToolbarCollection.PropertyPage">
      <summary>
            Gets the property page for this object.
            </summary>
    </member>
    <member name="T:Nevron.UI.NTickShape">
      <summary>
            Summary description for NScaleShape.
            </summary>
    </member>
    <member name="T:Nevron.UI.NUIShape">
      <summary>
            Summary description for NUIShape.
            </summary>
    </member>
    <member name="M:Nevron.UI.NUIShape.GetPredefinedShape(Nevron.UI.PredefinedShape)">
      <summary>
      </summary>
      <param name="predefinedShape">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NUIShape.ShouldSerializePreferredSize">
      <summary>
            Determines whether the PreferredSize property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NUIShape.ShouldSerializePadding">
      <summary>
            Determines whether the Padding property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.NUIShape.ShapeType">
      <summary>
            Gets the type of the current shape.
            </summary>
    </member>
    <member name="P:Nevron.UI.NUIShape.PredefinedShape">
      <summary>
            Gets the PredefinedShape value for this shape.
            </summary>
    </member>
    <member name="P:Nevron.UI.NUIShape.ColorTransform">
      <summary>
            Gets/sets the NColorTranform instance to be applied on this shape.
            </summary>
    </member>
    <member name="P:Nevron.UI.NUIShape.SmoothingMode">
      <summary>
            Gets/sets the System.Drawing.Drawing2D.SmoothingMode value to be used when rendering the shape.
            </summary>
    </member>
    <member name="P:Nevron.UI.NUIShape.PreferredSize">
      <summary>
            Gets/sets the preferred size of the shape.
            </summary>
    </member>
    <member name="P:Nevron.UI.NUIShape.Padding">
      <summary>
            Gets/sets the inner padding to be applied when painting the shape to the specified bounds.
            </summary>
    </member>
    <member name="P:Nevron.UI.NTickShape.StrokeStyle">
      <summary>
            Gets/sets the stroke style used to render the ticks.
            </summary>
    </member>
    <member name="T:Nevron.UI.Themes.System.NClassicProgressRenderer">
      <summary>
            Summary description for NClassicProgressRenderer.
            </summary>
    </member>
    <member name="T:Nevron.UI.Themes.System.NProgressRenderer">
      <summary>
            Summary description for NProgressRenderer.
            </summary>
    </member>
    <member name="T:Nevron.UI.NThemePartEntry">
      <summary>
            Summary description for NThemePartEntry.
            </summary>
    </member>
    <member name="T:Nevron.UI.NPolymorphicObjectEditor">
      <summary>
            Summary description for NPolymorphicObjectEditor.
            </summary>
    </member>
    <member name="P:Nevron.UI.NPolymorphicObjectEditor.HasPreview">
      <summary>
            Gets/sets a value whether the preview panel is visible.
            </summary>
    </member>
    <member name="T:Nevron.UI.TrackbarThumbStates">
      <summary>
            Summary description for TrackbarThumbStates.
            </summary>
    </member>
    <member name="T:Nevron.UI.GlobalColorEntry">
      <summary>
            Summary description for GlobalColors.
            </summary>
    </member>
    <member name="T:Nevron.UI.ToolStrips.NToolItemContainer">
      <summary>
            Summary description for NToolItemContainer.
            </summary>
    </member>
    <member name="T:Nevron.UI.ToolStrips.INToolItemContainer">
      <summary>
            Summary description for INToolItemContainer.
            </summary>
    </member>
    <member name="T:Nevron.UI.ToolStrips.NDropDownItem">
      <summary>
            Summary description for NDropDownItem.
            </summary>
    </member>
    <member name="T:Nevron.UI.ToolStrips.INDropDownItem">
      <summary>
            Summary description for INDropDownItem.
            </summary>
    </member>
    <member name="T:Nevron.UI.NHyperLink">
      <summary>
            Represents a hyper link in a rich text.
            </summary>
    </member>
    <member name="T:Nevron.UI.NDropDownButtonElement">
      <summary>
            Represents a button which has a drop-down part.
            </summary>
    </member>
    <member name="T:Nevron.UI.NGlyphItem">
      <summary>
            Represents an item which except image and text may also display a glyph.
            </summary>
    </member>
    <member name="M:Nevron.UI.NGlyphItem.ShouldSerializeDisplayGlyph">
      <summary>
            Determines whether the DisplayGlyph property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NGlyphItem.ShouldSerializeGlyphAlign">
      <summary>
            Determines whether the GlyphAlign property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NGlyphItem.ShouldSerializeGlyphSize">
      <summary>
            Determines whether the GlyphSize property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NGlyphItem.ShouldSerializeGlyphMargins">
      <summary>
            Determines whether the GlyphSpacing property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.NGlyphItem.DisplayGlyph">
      <summary>
            Gets/sets a value indicating whether the glyph will be displayed.
            </summary>
    </member>
    <member name="P:Nevron.UI.NGlyphItem.GlyphAlign">
      <summary>
            Gets/sets the alignment of the glyph within the element's client rectangle.
            </summary>
    </member>
    <member name="P:Nevron.UI.NGlyphItem.GlyphSize">
      <summary>
            Gets/sets the size of the glyph's bounding box.
            </summary>
    </member>
    <member name="P:Nevron.UI.NGlyphItem.GlyphMargins">
      <summary>
            Gets/sets the spacing between the glyph's bounding box and other content.
            </summary>
    </member>
    <member name="M:Nevron.UI.NDropDownButtonElement.ShouldSerializeDropDownDirection">
      <summary>
            Determines whether the DropDownDirection property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="E:Nevron.UI.NDropDownButtonElement.DropDownRequested">
      <summary>
            Fired when the button's state is changing to DropDownButtonStates.DroppedDown
            </summary>
    </member>
    <member name="P:Nevron.UI.NDropDownButtonElement.DropDownDirection">
      <summary>
            Gets/sets the direction of the drop-down arrow.
            </summary>
    </member>
    <member name="T:Nevron.UI.UIRenderCacheEntries">
      <summary>
            Summary description for UIRenderCacheEntries.
            </summary>
    </member>
    <member name="T:Nevron.UI.PropertyNames">
      <summary>
            Summary description for PropertyNames.
            </summary>
    </member>
    <member name="T:Nevron.UI.NStandardBorder">
      <summary>
            Summary description for NStandardBorder.
            </summary>
    </member>
    <member name="T:Nevron.UI.NImageRenderInfo">
      <summary>
            Summary description for NImageRenderInfo.
            </summary>
    </member>
    <member name="T:Nevron.SmartShapes.NTransformSection">
      <summary>
            The NTransformSection class represents a formula section, 
            which is used for the formula definition of a transformation, 
            which transforms the smart shape to the coordinate system of its parent
            </summary>
    </member>
    <member name="M:Nevron.SmartShapes.NTransformSection.Clone">
      <summary>
            Creates an identical copy of this object
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.SmartShapes.NTransformSection.InvalidateCache">
      <summary>
            Invalidates the cached of the section and all its formula cells and rows
            </summary>
      <remarks>
            Overriden to invalidate the cached transformation
            </remarks>
    </member>
    <member name="M:Nevron.SmartShapes.NTransformSection.CellsSealed">
      <summary>
            Overriden to return true
            </summary>
      <returns>
      </returns>
    </member>
    <member name="F:Nevron.SmartShapes.NTransformSection.DefaultName">
      <summary>
            Default name for this section  
            </summary>
    </member>
    <member name="F:Nevron.SmartShapes.NTransformSection.DefaultTitle">
      <summary>
            Default title for this section  
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NTransformSection.Width">
      <summary>
            Gets/sets the Width formula cell
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NTransformSection.Height">
      <summary>
            Gets the Height formula cell
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NTransformSection.Angle">
      <summary>
            Gets the Angle formula cell
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NTransformSection.PinX">
      <summary>
            Gets the PinX formula cell
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NTransformSection.PinY">
      <summary>
            Gets the PinY formula cell
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NTransformSection.LocPinX">
      <summary>
            Gets LocPinX formula cell
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NTransformSection.LocPinY">
      <summary>
            Gets the LocPinY formula cell
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NTransformSection.FlipX">
      <summary>
            Gets the FlipX formula cell
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NTransformSection.FlipY">
      <summary>
            Gets the FlipY formula cell
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NTransformSection.Transform">
      <summary>
            Gets the tranformation, which this section represents
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.SmartShapes.NSmartShapeFactory">
      <summary>
            The base of all shape factories
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NSmartShapeFactory.FillStyle">
      <summary>
            Gets/sets the fill style applied to newly created shapes
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NSmartShapeFactory.StrokeStyle">
      <summary>
            Gets/sets the stroke style applied to newly created shapes
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NSmartShapeFactory.ShadowStyle">
      <summary>
            Gets/sets the shadow style applied to newly created shapes
            </summary>
    </member>
    <member name="T:Nevron.SmartShapes.NShapeSheetSectionsComparer">
      <summary>
            Comparer used for the default sorting of the shape sheet sections
            </summary>
    </member>
    <member name="M:Nevron.SmartShapes.NShapeSheetSectionsComparer.Compare(System.Object,System.Object)">
      <summary>
            Compares object a with object b
            </summary>
      <param name="a">
      </param>
      <param name="b">
      </param>
      <returns>1 if a is larger than b, -1 if a is smaller than b and 0 if a is equal to b</returns>
    </member>
    <member name="M:Nevron.SmartShapes.NShapeSheetSectionsComparer.GetSectionRank(System.Object)">
      <summary>
            Obtains the rank of the the specified section. Throws an exceptin if the object is not a formula section
            </summary>
      <param name="section">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.SmartShapes.NShapeSheet">
      <summary>
            The NShapeSheet class represents a formula sheet, 
            which is used for the formula definition of a smart shape
            </summary>
    </member>
    <member name="M:Nevron.SmartShapes.NShapeSheet.Clone">
      <summary>
            Creates an identical copy of this object
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.SmartShapes.NShapeSheet.UpdateReferences(Nevron.INReferenceProvider)">
      <summary>
      </summary>
      <param name="provider">
      </param>
    </member>
    <member name="M:Nevron.SmartShapes.NShapeSheet.GetControlsRow(System.Int32)">
      <summary>
            Gets the control row, which corresponds to the specified control index
            </summary>
      <param name="index">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.SmartShapes.NShapeSheet.GetResizeHandle(Nevron.GraphicsCore.CompassDirection)">
      <summary>
            Gets the location of the resize handle, which corresponds to the specified compass direction
            </summary>
      <param name="direction">compass direction</param>
      <returns>resize handle location for the specified compass direction (in parent coordinates)</returns>
    </member>
    <member name="M:Nevron.SmartShapes.NShapeSheet.SetResizeHandle(Nevron.GraphicsCore.CompassDirection,Nevron.GraphicsCore.NPointF)">
      <summary>
            Sets the location of the resize handle, which corresponds to the specified compass direction
            </summary>
      <param name="direction">compass direction</param>
      <param name="point">new location of the resize handle (in parent coordinates)</param>
    </member>
    <member name="M:Nevron.SmartShapes.NShapeSheet.Translate(System.Single,System.Single)">
      <summary>
            Translates the shape sheet with the specified amounts
            </summary>
      <param name="dx">y amount (in parent units)</param>
      <param name="dy">x amount (in parent units)</param>
    </member>
    <member name="M:Nevron.SmartShapes.NShapeSheet.Reposition(Nevron.GraphicsCore.NPointF)">
      <summary>
            Repositions the shape so that its pin point is located on the specified coordinate
            </summary>
      <param name="point">in parent coordinates</param>
    </member>
    <member name="M:Nevron.SmartShapes.NShapeSheet.OnSectionsChanged">
      <summary>
            Overriden to update the references to the commonly used sections
            </summary>
    </member>
    <member name="M:Nevron.SmartShapes.NShapeSheet.GetVerbs">
      <summary>
            Overriden to add the insert and remove section verbs
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.SmartShapes.NShapeSheet.EndPointsSection">
      <summary>
            Gets/sets the 1D-endpoints section (can be null)
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NShapeSheet.TransformSection">
      <summary>
            Gets/sets the shape sheet transform section (cannot be null)
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NShapeSheet.ScratchSection">
      <summary>
            Gets/sets the shape sheet scratch section (can be null)
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NShapeSheet.ControlsSection">
      <summary>
            Gets/sets a the controls section (can be null)
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NShapeSheet.UserDefinedCellsSection">
      <summary>
            Gets/sets the users defined cells section (can be null)
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NShapeSheet.GeometrySections">
      <summary>
            Gets an array of the geometry sections contained in this sheet
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NShapeSheet.Transform">
      <summary>
            Gets the transformation, which transforms local to parent coordinates 
            (defined by the TransformSection)
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NShapeSheet.Width">
      <summary>
            Gets/sets the shape width (expressed in parent units)
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NShapeSheet.Height">
      <summary>
            Gets/sets the shape height (expressed in parent units)
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NShapeSheet.Angle">
      <summary>
            Gets/sets the angle of rotation (in radians)
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NShapeSheet.LocPinPoint">
      <summary>
            Gets/sets the pin point (in local coordinates)
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NShapeSheet.PinPoint">
      <summary>
            Gets/sets the pin point (in parent coordinates)
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NShapeSheet.FlipX">
      <summary>
            Gets/sets whether the local coordinate system of the shape sheet is X-flipped 
            in respect to the parent coordinate system
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NShapeSheet.FlipY">
      <summary>
            Gets/sets whether the local coordinate system of the shape sheet is Y-flipped 
            in respect to the parent coordinate system
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NShapeSheet.StartPoint">
      <summary>
            Gets/sets the location of the shape sheet start point (expressed in parent coordinates).
            Applicable only if the HasEndPointsSection property is set to true. 
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NShapeSheet.EndPoint">
      <summary>
            Gets/sets the location of the shape sheet end point (expressed in parent coordinates).
            Applicable only if the HasEndPointsSection property is set to true. 
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NShapeSheet.ControlsCount">
      <summary>
            Gets the count of control points.
            Applicable only if the HasControlsSection property is set to true.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.INWindowRenderSurfaceHost">
      <summary>
            Summary description for INWindowRenderSurfaceHost.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NBitmapImageFormat">
      <summary>
            Describes a BMP image response returned to the client browser.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NRasterImageFormat">
      <summary>
            The base of all raster image formats (BMP, JPEG, PNG etc.).
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.INRasterImageFormat">
      <summary>
            Base raster image format interface.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.INRasterImageFormat.GetImageFormat">
      <summary>
            Obtains a GDI ImageFormat.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.INRasterImageFormat.GetImageCodecInfo">
      <summary>
            Obtains an ImageCodecInfo for this format.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.INRasterImageFormat.GetEncoderParameters">
      <summary>
            Returns the encoder parameters associated with this image Format
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.INRasterImageFormat.PixelFormat">
      <summary>
            Obtains the desired pixel format
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NRasterImageFormat.GetImageFormat">
      <summary>
            Must override to provide the exact image format
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRasterImageFormat.GetEncoderParameters">
      <summary>
            Returns the encoder parameters associated with this format
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRasterImageFormat.GetImageCodecInfo">
      <summary>
            Obtains an ImageCodecInfo for this format.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRasterImageFormat.GetPixelFormatBpp(System.Drawing.Imaging.PixelFormat)">
      <summary>
            Returns the bits per pixels associated with the pixel format.
            </summary>
      <param name="pixelFormat">
      </param>
      <remarks>
            The control supports only 16, 24 and 32 bpp rendering.
            </remarks>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NRasterImageFormat.PixelFormat">
      <summary>
            Gets/sets the pixel format
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NRasterImageFormat.HtmlTextWriterTag">
      <summary>
            The HTML tag corresponding to this image.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NBitmapImageFormat.MimeType">
      <summary>
            Mime type constant for bmp images
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NBitmapImageFormat.GetMimeType">
      <summary>
            Returns the mime type - "image/bmp".
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NBitmapImageFormat.GetExtension">
      <summary>
            Returns the file extension - ".bmp".
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NBitmapImageFormat.GetName">
      <summary>
            Obtains the name of this image format
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NBitmapImageFormat.GetImageFormat">
      <summary>
            Obtains a GDI ImageFormat.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.GraphicsCore.Shapes.NDiagonalCrossShape">
      <summary>
            Summary description for NDiagonalCrossShape.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Shapes.NScaleCommandNode">
      <summary>
            Summary description for NScaleCommandNode.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NGraphics">
      <summary>
            Nevron Graphics Device.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NGraphics.TranslateTransform(System.Single,System.Single)">
      <summary>
            Prepends the specified translation to the transformation matrix of this Graphics object.
            </summary>
      <param name="dx">
      </param>
      <param name="dy">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NGraphics.ScaleTransform(System.Single,System.Single)">
      <summary>
            Applies the specified scaling operation to the transformation matrix of this Graphics object by prepending it to the object's transformation matrix.
            </summary>
      <param name="sx">
      </param>
      <param name="sy">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NGraphics.RotateTransform(System.Single)">
      <summary>
            Applies the specified rotation to the transformation matrix of this Graphics object.
            </summary>
      <param name="angle">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NGraphics.ResetTransform">
      <summary>
            Resets the world transformation matrix of this Graphics object to the identity matrix.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NGraphics.PaintPath(Nevron.GraphicsCore.NFillStyle,Nevron.GraphicsCore.NStrokeStyle,System.Drawing.Drawing2D.GraphicsPath)">
      <summary>
            Fills the interior of a GraphicsPath object with the specified fill style and then Draws the GraphicsPath object with the specified line style.
            </summary>
      <param name="fillStyle">
      </param>
      <param name="strokeStyle">
      </param>
      <param name="path">
      </param>
      <remarks>
            You can pass null values to the fillStyle and strokeStyle parameters. When the fillStyle is null the path is not filled. When the strokeStyle is null the path does not have a border.
            </remarks>
    </member>
    <member name="M:Nevron.GraphicsCore.NGraphics.PaintPathShadow(Nevron.GraphicsCore.NShadowStyle,Nevron.GraphicsCore.NShadowStyle,Nevron.GraphicsCore.NStrokeStyle,System.Drawing.Drawing2D.GraphicsPath)">
      <summary>
            Fills the GraphicsPath object with the specified shadowStyle.
            </summary>
      <param name="interiorShadowStyle">
      </param>
      <param name="borderShadowStyle">
      </param>
      <param name="borderStrokeStyle">
      </param>
      <param name="path">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NGraphics.PaintEllipse(Nevron.GraphicsCore.NFillStyle,Nevron.GraphicsCore.NStrokeStyle,Nevron.GraphicsCore.NRectangleF)">
      <summary>
            Paints an ellipse with the specified fillStyle and strokeStyle.
            </summary>
      <param name="fillStyle">
      </param>
      <param name="strokeStyle">
      </param>
      <param name="rect">
      </param>
      <remarks>
            You can pass null values to the fillStyle and strokeStyle parameters. When the fillStyle is null the ellipse is not filled. When the line style is null the ellipse does not have a border.
            </remarks>
    </member>
    <member name="M:Nevron.GraphicsCore.NGraphics.PaintEllipse(Nevron.GraphicsCore.NShadowStyle,Nevron.GraphicsCore.NRectangleF)">
      <summary>
            Paints an ellipse shadow with the specified shadow style.
            </summary>
      <param name="shadowStyle">
      </param>
      <param name="rect">
      </param>
      <remarks>
            You can pass null values to the fillStyle and strokeStyle parameters. When the fillStyle is null the ellipse is not filled. When the line style is null the ellipse does not have a border.
            </remarks>
    </member>
    <member name="M:Nevron.GraphicsCore.NGraphics.DrawLine(Nevron.GraphicsCore.NStrokeStyle,Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
      <summary>
            Draws a line connecting two NPointF structures.
            </summary>
      <param name="strokeStyle">
      </param>
      <param name="pt1">
      </param>
      <param name="pt2">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NGraphics.DrawLineShadow(Nevron.GraphicsCore.NStrokeStyle,Nevron.GraphicsCore.NShadowStyle,Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
      <summary>
            Draws a line shadow connecting two NPointF structures.
            </summary>
      <param name="strokeStyle">
      </param>
      <param name="shadowStyle">
      </param>
      <param name="pt1">
      </param>
      <param name="pt2">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NGraphics.PaintPolygon(Nevron.GraphicsCore.NFillStyle,Nevron.GraphicsCore.NStrokeStyle,Nevron.GraphicsCore.NPointF[])">
      <summary>
            Paints a polygon defined by an array of Point structures.
            </summary>
      <param name="fillStyle">
      </param>
      <param name="strokeStyle">
      </param>
      <param name="points">
      </param>
      <remarks>
            You can pass null values to the fillStyle and strokeStyle parameters. When the fillStyle is null the polygon is not filled. When the strokeStyle is null the polygon does not draw a border.
            </remarks>
    </member>
    <member name="M:Nevron.GraphicsCore.NGraphics.PaintPolygonShadow(Nevron.GraphicsCore.NShadowStyle,Nevron.GraphicsCore.NPointF[])">
      <summary>
            Paints a polygon shadow defined by an array of Point structures.
            </summary>
      <param name="shadowStyle">
      </param>
      <param name="points">
      </param>
      <remarks>
            You can pass null values to the fillStyle and strokeStyle parameters. When the fillStyle is null the polygon is not filled. When the strokeStyle is null the polygon does not draw a border.
            </remarks>
    </member>
    <member name="M:Nevron.GraphicsCore.NGraphics.PaintRectangle(Nevron.GraphicsCore.NFillStyle,Nevron.GraphicsCore.NStrokeStyle,Nevron.GraphicsCore.NRectangleF)">
      <summary>
            Paints a rectangle specified by a NRectangleF structure.
            </summary>
      <param name="fillStyle">
      </param>
      <param name="strokeStyle">
      </param>
      <param name="rect">
      </param>
      <remarks>
            You can pass null values to the fillStyle and strokeStyle parameters. When the fillStyle is null the rectangle is not filled. When the strokeStyle is null the rectangle does not draw a border.
            </remarks>
    </member>
    <member name="M:Nevron.GraphicsCore.NGraphics.PaintRectangleShadow(Nevron.GraphicsCore.NShadowStyle,Nevron.GraphicsCore.NRectangleF)">
      <summary>
            Paints a rectangle shadow specified by a NRectangleF structure.
            </summary>
      <param name="shadowStyle">
      </param>
      <param name="rect">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NGraphics.PaintText(System.String,Nevron.GraphicsCore.NTextStyle,Nevron.GraphicsCore.NRectangleF)">
      <summary>
            Paints text in the specified rectangle. 
            </summary>
      <param name="text">The text.</param>
      <param name="textStyle">The text style.</param>
      <param name="rect">The rect.</param>
    </member>
    <member name="M:Nevron.GraphicsCore.NGraphics.PaintText(System.String,Nevron.GraphicsCore.NTextStyle,Nevron.GraphicsCore.NPointF)">
      <summary>
            Paints text at the specified location.
            </summary>
      <param name="text">The text.</param>
      <param name="textStyle">The text style.</param>
      <param name="point">The point.</param>
    </member>
    <member name="M:Nevron.GraphicsCore.NGraphics.MeasureText(System.String,Nevron.GraphicsCore.NTextStyle)">
      <summary>
            Measures the specified text when drawn with the specified text style.
            </summary>
      <param name="text">
      </param>
      <param name="textStyle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NGraphics.WriteSvg(System.String@)">
      <summary>
            Writes Svg content if the device is rendering in Svg mode.
            </summary>
      <param name="svg">
      </param>
      <remarks>
            The passed Svg content will be written verbatim in the resulting Svg so you need to provide valid Svg code.
            </remarks>
    </member>
    <member name="M:Nevron.GraphicsCore.NGraphics.ActivateElement(Nevron.Dom.INElement)">
      <summary>
            Sets the current element
            </summary>
      <param name="element">
      </param>
    </member>
    <member name="P:Nevron.GraphicsCore.NGraphics.DpiX">
      <summary>
            Gets the horizontal resolution of this Graphics object.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NGraphics.DpiY">
      <summary>
            Gets the vertical resolution of this Graphics object.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NGraphics.ShapeRenderingMode">
      <summary>
            Gets/sets the image rendering mode associated with this NGraphics object.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NGraphics.TextRenderingMode">
      <summary>
            Gets/sets the rendering mode for text associated with this NGraphics object.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NGraphics.Transform">
      <summary>
            Gets/sets the world transformation for this Graphics object.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NGraphics.ImageRenderingMode">
      <summary>
            Gets/sets the rendering quality for this Graphics object.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NGraphics.RenderTechnology">
      <summary>
            Gets the rendering technology of this NGraphics object
            </summary>
      <value>The render technology.</value>
    </member>
    <member name="P:Nevron.GraphicsCore.NGraphics.DeviceGraphics">
      <summary>
            When the device is in RenderTechnology.GDI mode this property returns the GDI+ graphics object associated with the control.
            </summary>
      <remarks>
            For RenderTechnology.Svg and RenderTechnology.ImageMap the property returns a graphics device used for measurements. 
            </remarks>
    </member>
    <member name="T:Nevron.GraphicsCore.NArgbColorValuePalette">
      <summary>
            Represents a palette mapping byte to ARGB color value
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NArgbColorValuePalette.SetPredefinedPalette(Nevron.GraphicsCore.PredefinedPalette)">
      <summary>
            Sets the entries of the palette to a set of predefined values
            </summary>
      <param name="palette">
      </param>
    </member>
    <member name="F:Nevron.GraphicsCore.NArgbColorValuePalette.Entries">
      <summary>
            The entries of the palette
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NLineSegmentF">
      <summary>
            Represents a line segment defined by two points
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.INOpenFigurePrimitive">
      <summary>
            The INOpenFigurePrimitive is implemented by geometry primitives which represent open figures (figures without filling)
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.INOpenFigurePrimitive.StartPoint">
      <summary>
            Gets/sets the start point of the open figure
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.INOpenFigurePrimitive.EndPoint">
      <summary>
            Gets/sets the end point of the open figure
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NLineSegmentF.Translate(System.Single,System.Single)">
      <summary>
            Translates the primitive with the specified amounts
            </summary>
      <param name="dx">
      </param>
      <param name="dy">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NLineSegmentF.Translate(Nevron.GraphicsCore.NPointF)">
      <summary>
            Translates the primitive with the specified offset
            </summary>
      <param name="offset">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NLineSegmentF.AddToGraphicsPath(System.Drawing.Drawing2D.GraphicsPath)">
      <summary>
            Appends the primitive to the specified graphics path
            </summary>
      <param name="path">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NLineSegmentF.ContainsOnOutline(Nevron.GraphicsCore.NPointF,System.Single)">
      <summary>
            Determines whether the outline of the line contains the specified point
            </summary>
      <param name="point">
      </param>
      <param name="weight">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NLineSegmentF.ContainsOnOutline(Nevron.GraphicsCore.NPointF,System.Drawing.Pen)">
      <summary>
            Determines whether the outline of the line contains the specified point
            </summary>
      <param name="point">
      </param>
      <param name="pen">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NLineSegmentF.Equals(System.Object)">
      <summary>
      </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NLineSegmentF.GetHashCode">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NLineSegmentF.ToString">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NLineSegmentF.IntersectsWith(Nevron.GraphicsCore.NLineSegmentF)">
      <summary>
            Checks if this line segment intersects the given one.
            </summary>
      <param name="lineSegment">The other line segment.</param>
      <returns>True if the current line segment intersects the given one, otherwise false.</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NLineSegmentF.IntersectsWith(Nevron.GraphicsCore.NRectangleF)">
      <summary>
            Checks if this line segment intersects the specified rectangle.
            </summary>
      <param name="rect">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NLineSegmentF.IntersectWith(Nevron.GraphicsCore.NLineSegmentF,Nevron.GraphicsCore.NPointF@)">
      <summary>
            Checks if this line segment intersects the given one and returns the intersection point
            as an out parameter if it does.
            </summary>
      <param name="lineSegment">The other line segment.</param>
      <param name="intersectionPoint">The resulting intersection point.</param>
      <returns>True if the current line segment intersects the given one, otherwise false.</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NLineSegmentF.IntersectWith(Nevron.GraphicsCore.NLineSegmentF,System.Single,Nevron.GraphicsCore.NPointF@)">
      <summary>
            Checks if this line segment intersects the given one with a specified tolerance
            and returns the intersection point as an out parameter if it does.
            </summary>
      <param name="lineSegment">The other line segment.</param>
      <param name="tolerance">The tolerance to use when checking for intersection.</param>
      <param name="intersectionPoint">The resulting intersection point.</param>
      <returns>
            True if the current line segment intersects the given one with
            the specified tolerance, otherwise false.
            </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NLineSegmentF.InflateStart(System.Single)">
      <summary>
            Inflates a line segment from its start point.
            </summary>
      <param name="increment">The increment to apply.</param>
    </member>
    <member name="M:Nevron.GraphicsCore.NLineSegmentF.InflateEnd(System.Single)">
      <summary>
            Inflates a line segment from its end point.
            </summary>
      <param name="increment">The increment to apply.</param>
    </member>
    <member name="M:Nevron.GraphicsCore.NLineSegmentF.ToNLineF">
      <summary>
            Converts a line segment to a line.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NLineSegmentF.GetPoint(System.Single)">
      <summary>
            Gets the point on the specified distance from the start.
            </summary>
      <param name="distanceFromStart">The distance from the start to apply.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NLineSegmentF.DistanceSquare(Nevron.GraphicsCore.NPointF)">
      <summary>
            Gets the distance (to the power of 2) from the line segment to the
            given point. The point on the segment closest to the target point is used.
            </summary>
      <param name="point">The target point.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NLineSegmentF.Distance(Nevron.GraphicsCore.NPointF)">
      <summary>
            Gets the distance from the line segment to the given point.
            The point on the segment closest to the target point is used.
            </summary>
      <param name="point">The target point.</param>
      <returns>
      </returns>
    </member>
    <member name="F:Nevron.GraphicsCore.NLineSegmentF.Start">
      <summary>
            Start point
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NLineSegmentF.End">
      <summary>
            End point
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NLineSegmentF.Bounds">
      <summary>
            Gets the minimal enclosing rectangle
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NLineSegmentF.BoundsRange">
      <summary>
            Gets the minimal enclosing 2D range
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NLineSegmentF.IsFlat">
      <summary>
            Determines whether this is a flat primitive
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NLineSegmentF.StartPoint">
      <summary>
            Gets/sets the start point of the open figure
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NLineSegmentF.EndPoint">
      <summary>
            Gets/sets the end point of the open figure
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NLineSegmentF.Center">
      <summary>
            Gets the line center.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NLineSegmentF.DX">
      <summary>
            Gets the end and start points X difference.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NLineSegmentF.DY">
      <summary>
            Gets the end and start points Y difference .
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NLineSegmentF.LengthSquare">
      <summary>
            Gets the length of the line segment to the power of 2.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NLineSegmentF.Length">
      <summary>
            Gets the length of the line segment.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NLineSegmentF.Slope">
      <summary>
            Gets the line slope (DY / DX).
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NLineSegmentF.Angle">
      <summary>
            Gets the angle, which the line forms with the X axis (in radians).
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NLineF">
      <summary>
            Represents a line in 2D space defined by it's general equasion: Ax + By + C = 0.
            This representation of a line is also called implicit or general line form.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NLineF.IntersectsWith(Nevron.GraphicsCore.NCircleF)">
      <summary>
            Check if this line intersects the specified circle.
            </summary>
      <param name="circle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NLineF.IntersectWith(Nevron.GraphicsCore.NCircleF,Nevron.GraphicsCore.NPointFList@)">
      <summary>
            Check if this line intersects the specified circle and returns the intersection points if it does.
            </summary>
      <param name="circle">The circle to check for intersection with.</param>
      <param name="intersectionPoints">The resulting intersection points (valid only if the method returned true).</param>
      <returns>True if this line intersects with the circle, otherwise false.</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NLineF.IntersectsWith(Nevron.GraphicsCore.NLineF)">
      <summary>
            Checks if this line inthersects the given line.
            If the lines do not intersect then they are parallel.
            </summary>
      <param name="line">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NLineF.IntersectWith(Nevron.GraphicsCore.NLineF,Nevron.GraphicsCore.NPointF@)">
      <summary>
            Checks if this line inthersects the given line and returns the intersection point as
            an out parameter if it does.
            </summary>
      <param name="line">The line to to check for intersetion with.</param>
      <param name="result">The resulting intersection point, if the lines intersect.</param>
      <returns>True if lines intersect, otherwise false.</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NLineF.NormalDistance(Nevron.GraphicsCore.NPointF)">
      <summary>
            Computes the normal distance of a point to the line.
            </summary>
      <param name="point">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NLineF.ToNRayF">
      <summary>
            Converts this line to NRayF.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NLineF.GetPerpLine(Nevron.GraphicsCore.NPointF)">
      <summary>
            Gets a line that is perpendicular to the current line and intersects it at the
            specified point.
            </summary>
      <param name="intersectionPoint">The intersection point.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NLineF.GetLineSegment(Nevron.GraphicsCore.NPointF,System.Single)">
      <summary>
            Gets a line segment lying on the current line, with the specified center
            and the specified length.
            </summary>
      <param name="center">
      </param>
      <param name="offset">
      </param>
      <returns>
      </returns>
    </member>
    <member name="F:Nevron.GraphicsCore.NLineF.A">
      <summary>
            The A parameter of the line
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NLineF.B">
      <summary>
            The B parameter of the line
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NLineF.C">
      <summary>
            The C parameter of the line
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NLineF.FromTwoPoints(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
      <summary>
            Gets a normalized line from two points.
            </summary>
      <param name="point1">
      </param>
      <param name="point2">
      </param>
      <returns>
      </returns>
    </member>
    <member name="F:Nevron.GraphicsCore.NLineF.Empty">
      <summary>
            The empty line (all parameters are equal to 0).
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NLineF.IsEmpty">
      <summary>
            Determines whether the line is empty (that is A and B are equal to 0).
            </summary>
    </member>
    <member name="T:Nevron.Editors.NThemeDesigner">
      <summary>
            Summary description for NThemeEditor.
            </summary>
    </member>
    <member name="T:Nevron.Editors.NShadowStylePreviewRenderer">
      <summary>
            Summary description for NShadowStylePreviewRenderer.
            </summary>
    </member>
    <member name="P:Nevron.Editors.NShadowStylePreviewRenderer.Style">
      <summary>
            Sets the NShadowStyle used to create the preview.
            </summary>
    </member>
    <member name="T:Nevron.Editors.NBackplaneStylePreviewRenderer">
      <summary>
            Summary description for NBackplaneStylePreviewRenderer.
            </summary>
    </member>
    <member name="P:Nevron.Editors.NBackplaneStylePreviewRenderer.Style">
      <summary>
            Sets the NBackplaneStyle used to create the preview.
            </summary>
    </member>
    <member name="T:Nevron.Editors.NInteractivityStyleTypeEditorNoAutomatic">
      <summary>
            Provides facilities for visual editing of NInteractivityStyle objects.
            </summary>
    </member>
    <member name="T:Nevron.Editors.NImageFrameStyleEditorUC">
      <summary>
            The NImageFrameStyleEditorUC visually edits NImageFrameStyle objects.
            </summary>
    </member>
    <member name="M:Nevron.Editors.NImageFrameStyleEditorUC.Dispose(System.Boolean)">
      <summary> 
            Clean up any resources being used.
            </summary>
    </member>
    <member name="P:Nevron.Editors.NImageFrameStyleEditorUC.Style">
      <summary>
            Gets/sets NImageFrameStyle object to edit.
            </summary>
    </member>
    <member name="T:Nevron.Editors.NTextureMappingStyleEditor">
      <summary>
            Summary description for NTextureMappingStyleEditor.
            </summary>
    </member>
    <member name="M:Nevron.Editors.NTextureMappingStyleEditor.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
    </member>
    <member name="T:Nevron.Editors.NFillStyleTypeEditorNoAutomatic">
      <summary>
            Provides facilities for visual editing of NFillStyle objects.
            </summary>
    </member>
    <member name="T:Nevron.Editors.NFillStyleTypeEditor">
      <summary>
            Provides facilities for visual editing of NFillStyle objects.
            </summary>
    </member>
    <member name="M:Nevron.Editors.NFillStyleTypeEditor.Edit(Nevron.GraphicsCore.NFillStyle,Nevron.GraphicsCore.NFillStyle@)">
      <summary>
            Edits the specified style. 
            </summary>
      <param name="fillStyle">
      </param>
      <param name="fillStyleResult">
      </param>
      <returns>
      </returns>
      <remarks>
            If the function returns true then the out parameter holds a valid style.
            </remarks>
    </member>
    <member name="M:Nevron.Editors.NFillStyleTypeEditor.Edit(Nevron.GraphicsCore.NFillStyle,System.Boolean,Nevron.GraphicsCore.NFillStyle@)">
      <summary>
            Edits the specified style. If automatic is set to true the in parameter must be treated as automatic style.
            </summary>
      <param name="fillStyle">
      </param>
      <param name="automaticStyle">
      </param>
      <param name="fillStyleResult">
      </param>
      <returns>
      </returns>
      <remarks>
            If the function returns true then the out parameter holds a valid style.
            </remarks>
    </member>
    <member name="T:Nevron.Editors.NPointEditorUC">
      <summary>
            Edits NPointL objects
            </summary>
    </member>
    <member name="M:Nevron.Editors.NPointEditorUC.Dispose(System.Boolean)">
      <summary> 
            Clean up any resources being used.
            </summary>
    </member>
    <member name="P:Nevron.Editors.NPointEditorUC.Point">
      <summary>
            The size object to edit.
            </summary>
    </member>
    <member name="E:Nevron.Editors.NPointEditorUC.PointChanged">
      <summary>
            Fired when the point has changed.
            </summary>
    </member>
    <member name="T:Nevron.Editors.NDateTimeSpanTypeEditor">
      <summary>
            Summary description for NDateTimeSpanTypeEditor.
            </summary>
    </member>
    <member name="T:Nevron.Editors.NColorTransformTypeEditor">
      <summary>
            Summary description for NColorTransformTypeEditor.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NTooltip">
      <summary>
            Represents an extended Tooltip component.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTooltip.ShowDelay">
      <summary>
            Gets/sets a value indicating the delay before the tooltip is shown.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTooltip.HideDelay">
      <summary>
            Gets/sets a value indicating the delay before the tooltip is closed.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTooltip.Visible">
      <summary>
            Gets a value indicating whether the tooltip is currently visible.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTooltip.Content">
      <summary>
            Gets the NLabelElement instance which represents the content of the tooltip window.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTooltip.Heading">
      <summary>
            Gets the NLabelElement instance which represents the heading of the tooltip window.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTooltip.HasShadow">
      <summary>
            Gets/sets a value whether the tooltip will display shadow (available on Windows XP and later).
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTooltip.EnableSkinning">
      <summary>
            Gets/sets a value whether the tooltip will use the current skin to display itself.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTooltip.HasRounding">
      <summary>
            Gets/sets a value whether the tooltip will be rounded.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTooltip.Displaying">
      <summary>
            Gets a value whether the tooltip is currently in a process of displaying itself.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NTabStripRenderer">
      <summary>
            Summary description for NTabStripRenderer.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NTabPage">
      <summary>
            Represents a page in a NTabControl instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTabPage.Renderer">
      <summary>
            Gets the parent tabcontrol renderer.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTabPage.ImageList">
      <summary>
            Gets the parent tabcontrol imagelist.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTabPage.ToolTipText">
      <summary>
            Gets/sets the tooltip text value for the tab page.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTabPage.ImageIndex">
      <summary>
            Gets/sets the image index for the tabpage.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NTabStrip">
      <summary>
            Represents a strip of NTab objects.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTabStrip.Resume(System.Boolean)">
      <summary>
      </summary>
      <param name="update">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTabStrip.Suspend">
      <summary>
            Performs a suspend logic upon the TabStrip.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTabStrip.EnableSkinning">
      <summary>
            Gets/sets a value indicating whether the control will use skin logic.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTabStrip.Skin">
      <summary>
            Gets/sets the local NSkin instance to be used when painting this control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTabStrip.CurrentSkin">
      <summary>
            Gets the current skin to be used by this instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTabStrip.Renderer">
      <summary>
            Gets/sets the renderer that renders the tabcontrol.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTabStrip.PaletteInheritance">
      <summary>
            Gets/sets a value which Palette value will be applied on a higher level Palette change.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTabStrip.Palette">
      <summary>
            Gets/sets the Palette used to render the tabcontrol.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTabStrip.IsSuspended">
      <summary>
            Gets/sets a value whether this INSuspendable instance is currently suspended
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NTabStrip.SelectedTabChanged">
      <summary>
            Occurs when a selected tab has been changed.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NTabStrip.SelectingTab">
      <summary>
            Occurs before a tab is selected, enabling a handler to cancel a tab change.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTabStrip.HasArrows">
      <summary>
            Gets/sets a value indicating whether the tabstrip control will have scroll arrows.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTabStrip.HasClose">
      <summary>
            Gets/sets a value indicating whether the tabstrip control will have a close button.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTabStrip.HasDropDown">
      <summary>
            Gets/sets a value whether the tabstrip will have a drop-down button for selecting the currently active tab.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTabStrip.Selectable">
      <summary>
            Gets/sets a value whether the strip can accept focus.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTabStrip.TabAlign">
      <summary>
            Gets/sets the tab alignment.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTabStrip.TabFitMode">
      <summary>
            Gets/sets the fitting mode for the tabs.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTabStrip.TabStyle">
      <summary>
            Gets/sets the style of the tabs.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTabStrip.Tabs">
      <summary>
            Gets the collection of NTab objects.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTabStrip.AllowTabReorder">
      <summary>
            Gets/sets a value whether user can reorder tabs using mouse dragging.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTabStrip.SelectedTab">
      <summary>
            Gets/sets the currently selected NTab object.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTabStrip.SelectedIndex">
      <summary>
            Gets/sets the currently selected NTab object.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTabStrip.HotTrack">
      <summary>
            Gets/sets a value whether each tab will display feedback when hovered.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTabStrip.HasBorder">
      <summary>
            Gets/sets a value whether the tabstrip has border.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTabStrip.AutoSizeMask">
      <summary>
            Gets/sets the mask used to perform auto-sizing.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTabStrip.ImageList">
      <summary>
            Gets/sets the image list associated with the tab strip.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTabStrip.TabCurveWidth">
      <summary>
            Gets/sets the width of the curve that is used to round the tabs.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTabStrip.SelectedTabOffset">
      <summary>
            Gets/sets a value indicating the offset of the selected tab.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTabStrip.TabSpace">
      <summary>
            Gets/sets the amount among separate tabs.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTabStrip.TabWidthPadding">
      <summary>
            Gets/sets the horizontal spacing in tabs.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTabStrip.TabHeightPadding">
      <summary>
            Gets/sets the vertical spacing in tabs.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTabStrip.TabBorderPadding">
      <summary>
            Gets/sets the padding of the tabs from the border.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTabStrip.MaxSize">
      <summary>
            Gets/sets the maximum allowed width(height) of a tab.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTabStrip.DrawTextFlags">
      <summary>
            Gets/sets the flags used to draw text.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTabStrip.TextOrientation">
      <summary>
            Gets/sets the orientation for the tabs text.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTabStrip.ShowFocusRect">
      <summary>
            Gets/sets a value whether a selected tab will display focus rectangle if its parent is focused.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTabStrip.SelectedFont">
      <summary>
            Gets/sets the Font object to be used when rendering selected tab's text.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTabStrip.TextVisibility">
      <summary>
            Gets/sets a value indicating who to display text on tabs.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTabStrip.ImageSize">
      <summary>
            Gets/sets the size used to calculate tabs' image bounds.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTabStrip.Transparent">
      <summary>
            Gets/sets a value whether the strip's background will be rendered as transparent.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NStatusBarRenderer">
      <summary>
            Summary description for NStatusBarRenderer.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NScrollBar.EnableSkinning">
      <summary>
            Gets/sets a value indicating whether the control will use skin logic.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NScrollBar.Skin">
      <summary>
            Gets/sets the local NSkin instance to be used when painting this control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NScrollBar.CurrentSkin">
      <summary>
            Gets the current skin to be used by this instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NScrollBar.Renderer">
      <summary>
            Gets/sets the renderer used to draw NHScrollBar object.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NScrollBar.Palette">
      <summary>
            Gets/sets the NPalette used to render the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NScrollBar.PaletteInheritance">
      <summary>
            Gets/sets a value which Palette value will be applied on a higher level Palette change.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NScrollBar.Minimum">
      <summary>
            Gets/sets the minimum position of the thumb.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NScrollBar.Maximum">
      <summary>
            Gets/sets the maximum position of the thumb.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NScrollBar.Value">
      <summary>
            Gets/sets the current value of the NScrollBar.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NScrollBar.SmallChange">
      <summary>
            Gets/sets the small change of the NScrollBar.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NScrollBar.LargeChange">
      <summary>
            Gets/sets the large change of the NScrollBar.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NScrollBar.HotTrack">
      <summary>
            Gets/sets a value whether the scrollbar will track the mouse hover.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NReflectionHelper">
      <summary>
            Summary description for NReflectionHelper.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NDrawImageInfo">
      <summary>
            Encapsulates common information used to draw images.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDrawImageInfo.Default">
      <summary>
            Gets the default NDrawImageOptions object.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDrawImageInfo.DrawMode">
      <summary>
            Gets/sets a value indicating how the image will be drawn.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDrawImageInfo.Alpha">
      <summary>
            Gets/sets a value between 0 and 1 indicating the alpha transparency of the image.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDrawImageInfo.DestinationRect">
      <summary>
            Gets/sets the rectangle in which to draw image.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDrawImageInfo.SourceRect">
      <summary>
            Gets/sets the rectangular part of the image to draw.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDrawImageInfo.Image">
      <summary>
            Gets/sets the image to draw.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDrawImageInfo.Disabled">
      <summary>
            Gets/sets a value indicating whether the image will be drawn disabled.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDrawImageInfo.Shadow">
      <summary>
            Gets/sets a value indicating whether an image shadow will be simulated.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NExpanderArrowImageSet">
      <summary>
            Represents a set of images used by a NExpander istance to draw its collapse/expand glyph.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NExpanderArrowImageSet.CollapseNormal">
      <summary>
            Gets/sets the image to be displayed when the expander is in expanded state and the state of the header is Normal.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NExpanderArrowImageSet.CollapseHot">
      <summary>
            Gets/sets the image to be displayed when the expander is in expanded state and the state of the header is Hot.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NExpanderArrowImageSet.ExpandNormal">
      <summary>
            Gets/sets the image to be displayed when the expander is in collapsed state and the state of the header is Normal.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NExpanderArrowImageSet.ExpandHot">
      <summary>
            Gets/sets the image to be displayed when the expander is in collapsed state and the state of the header is Hot.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NStrokeInfo">
      <summary>
            Provides common information for rendering strokes.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NFillInfo">
      <summary>
            Encapsulates common filling information.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NRenderInfo">
      <summary>
            Base class for all objects which provide render information.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NRenderInfo.InitializeDefault">
      <summary>
            Initializes the object with the default settings.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NRenderInfo.NotifyPropertyChange(System.String)">
      <summary>
            Notifies for a property change.
            </summary>
      <param name="propName">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NRenderInfo.ShouldSerializeColor">
      <summary>
            Determines whether the Color memebr should be serialized by the designer.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NRenderInfo.PropertyChanged">
      <summary>
            Fired whenever a property has changed.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRenderInfo.DefaultColor">
      <summary>
            Gets the default value for the Color member.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRenderInfo.DefaultSmoothingMode">
      <summary>
            Gets the default value for the SmoothingMode member.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRenderInfo.Draw">
      <summary>
            Gets/sets a value whether this render info should be drawn.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRenderInfo.Padding">
      <summary>
            Gets/sets the internal padding to be applied when painting interiors.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRenderInfo.Color">
      <summary>
            Gets/sets the general color for the render info.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRenderInfo.SmoothingMode">
      <summary>
            Gets/sets the smoothing mode to be applied to the device context when this render info is in use.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NFillInfo.CreateBrush(System.Drawing.Rectangle,System.Int32,Nevron.UI.RoundingEdges)">
      <summary>
            Creates a Brush object depending on the current settings.
            </summary>
      <param name="bounds">The rect where the painting will occur.</param>
      <param name="rounding">The rounding to be used. Specify 0 if no rounding is needed.</param>
      <param name="edges">The edges to be rounded.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NFillInfo.InitializeDefault">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NFillInfo.PerformDispose">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NFillInfo.ShouldSerializeFillStyle">
      <summary>
            Determines whether the FillStyle member should be serialized by the designer.
            </summary>FillStyle
            <returns></returns></member>
    <member name="M:Nevron.UI.WinForm.Controls.NFillInfo.ShouldSerializeHatchStyle">
      <summary>
            Determines whether the HatchStyle member should be serialized by the designer.
            </summary>FillStyle
            <returns></returns></member>
    <member name="M:Nevron.UI.WinForm.Controls.NFillInfo.ShouldSerializeTextureMode">
      <summary>
            Determines whether the TextureMode member should be serialized by the designer.
            </summary>FillStyle
            <returns></returns></member>
    <member name="M:Nevron.UI.WinForm.Controls.NFillInfo.ShouldSerializeGradientStyle">
      <summary>
            Determines whether the GradientStyle member should be serialized by the designer.
            </summary>FillStyle
            <returns></returns></member>
    <member name="M:Nevron.UI.WinForm.Controls.NFillInfo.ShouldSerializeGradientAngle">
      <summary>
            Determines whether the GradientAngle member should be serialized by the designer.
            </summary>FillStyle
            <returns></returns></member>
    <member name="M:Nevron.UI.WinForm.Controls.NFillInfo.ShouldSerializeSigmaFocus">
      <summary>
            Determines whether the SigmaFocus member should be serialized by the designer.
            </summary>FillStyle
            <returns></returns></member>
    <member name="M:Nevron.UI.WinForm.Controls.NFillInfo.ShouldSerializeSigmaScale">
      <summary>
            Determines whether the SigmaScale member should be serialized by the designer.
            </summary>FillStyle
            <returns></returns></member>
    <member name="M:Nevron.UI.WinForm.Controls.NFillInfo.ShouldSerializeGradient1">
      <summary>
            Determines whether the Gradient1 member should be serialized by the designer.
            </summary>FillStyle
            <returns></returns></member>
    <member name="M:Nevron.UI.WinForm.Controls.NFillInfo.ShouldSerializeGradient2">
      <summary>
            Determines whether the Gradient2 member should be serialized by the designer.
            </summary>FillStyle
            <returns></returns></member>
    <member name="M:Nevron.UI.WinForm.Controls.NFillInfo.ShouldSerializeSegmentedImage">
      <summary>
            Determines whether the SegmentedImage member should be serialized by the designer.
            </summary>FillStyle
            <returns></returns></member>
    <member name="M:Nevron.UI.WinForm.Controls.NFillInfo.OnSegmentedImagePropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
      <summary>
            Handles any change in the SegmentedImage member.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFillInfo.DefaultFillStyle">
      <summary>
            Gets the default value for the FillStyle member.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFillInfo.DefaultTextureMode">
      <summary>
            Gets the default value for the TextureMode member.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFillInfo.DefaultGradientStyle">
      <summary>
            Gets the default value for the GradientStyle member.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFillInfo.DefaultGradientAngle">
      <summary>
            Gets the default value for the GradientAngle member.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFillInfo.DefaultSigmaFocus">
      <summary>
            Gets the default value for the SigmaFocus member.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFillInfo.DefaultSigmaScale">
      <summary>
            Gets the default value for the SigmaScale member.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFillInfo.DefaultGradient1">
      <summary>
            Gets the default value for the Gradient1 member.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFillInfo.DefaultGradient2">
      <summary>
            Gets the default value for the Gradient2 member.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFillInfo.DefaultSegmentedImage">
      <summary>
            Gets the default value for the SegmentedImage member.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFillInfo.DefaultHatchStyle">
      <summary>
            Gets the default value for the HatchStyle member.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFillInfo.Texture">
      <summary>
            Gets/sets the Image to be used when the FillStyle is FillStyle.Texture
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFillInfo.FillStyle">
      <summary>
            Gets/sets the style of filling.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFillInfo.HatchStyle">
      <summary>
            Gets/sets the hatch style to be used when the FillStyle is FillStyle.Hatch
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFillInfo.TextureMode">
      <summary>
            Gets/sets the rendering mode for the texture.
            Valid when the current fill style is FillStyle.Texture.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFillInfo.GradientStyle">
      <summary>
            Gets/sets the style of the gradient.
            Valid when the current fill style is FillStyle.Gradient.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFillInfo.GradientAngle">
      <summary>
            Gets/sets the angle of the gradient.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFillInfo.SigmaFocus">
      <summary>
            Gets/sets the focus of the sigma bell shape applied on the gradient.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFillInfo.SigmaScale">
      <summary>
            Gets/sets the scale of the sigma bell shape applied on the gradient.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFillInfo.Blend">
      <summary>
            Gets/sets the blending to be used for the gradient.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFillInfo.ColorBlend">
      <summary>
            Gets/sets the color blend object for the gradient.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFillInfo.SegmentedImage">
      <summary>
            Gets/sets the NSegmentedImage instance of thsi fill info.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NStrokeInfo.CreatePen(System.Drawing.Rectangle)">
      <summary>
            Creates a Pen object depending on the current settings.
            </summary>
      <param name="bounds">The bounds where the paint operation will occur.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NStrokeInfo.InitializeDefault">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NStrokeInfo.ShouldSerializeRounding">
      <summary>
            Determines whether the Rounding member should be serialized by the designer.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NStrokeInfo.ShouldSerializePenWidth">
      <summary>
            Determines whether the PenWidth member should be serialized by the designer.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NStrokeInfo.ShouldSerializePenStyle">
      <summary>
            Determines whether the PenStyle member should be serialized by the designer.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NStrokeInfo.ShouldSerializePenAlign">
      <summary>
            Determines whether the PenAlign member should be serialized by the designer.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NStrokeInfo.ShouldSerializeDashStyle">
      <summary>
            Determines whether the DashStyle member should be serialized by the designer.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NStrokeInfo.ShouldSerializeRoundingEdges">
      <summary>
            Determines whether the RoundingEdges member should be serialized by the designer.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NStrokeInfo.DefaultPenWidth">
      <summary>
            Gets the default value for the PenWidth member.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NStrokeInfo.DefaultPenAlign">
      <summary>
            Gets the default value for the PenAlign member.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NStrokeInfo.DefaultPenStyle">
      <summary>
            Gets the default value for the PenStyle member.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NStrokeInfo.DefaultRounding">
      <summary>
            Gets the default value for the Rounding member.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NStrokeInfo.DefaultDashStyle">
      <summary>
            Gets the default value for the DashStyle member.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NStrokeInfo.DefaultRoundingEdges">
      <summary>
            Gets the default value for the RoundingEdges member.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NStrokeInfo.DefaultGradientAngle">
      <summary>
            Gets the default value for the GradientAngle member.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NStrokeInfo.Rounding">
      <summary>
            Gets/sets the rounding used when calculating paths.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NStrokeInfo.PenWidth">
      <summary>
            Gets/sets the width of the pen.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NStrokeInfo.PenStyle">
      <summary>
            Gets/sets the style of the pen. A pen may be created either solid or using a Brush object.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NStrokeInfo.PenAlign">
      <summary>
            Gets/sets the alignment of the pen.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NStrokeInfo.DashStyle">
      <summary>
            Gets/sets the dash style to be used for the pen.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NStrokeInfo.RoundingEdges">
      <summary>
            Gets/sets the edges to be rounded.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NTreeListHeaderRenderer">
      <summary>
            An object which handles rendering of the headers in a NTreeList control.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeListHeaderRenderer.PaintColumnHeader(Nevron.UI.WinForm.Controls.NTreeListPaintContext)">
      <summary>
            Paints the column header using the specified context.
            </summary>
      <param name="context">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeListHeaderRenderer.PaintColumnVerticalLine(Nevron.UI.WinForm.Controls.NTreeListPaintContext,System.Int32)">
      <summary>
            Paints a vertical line, part of a grid, using the provided context.
            </summary>
      <param name="context">
      </param>
      <param name="bottom">The bottom coordinate where the line should end.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeListHeaderRenderer.PaintColumnHeaderItem(Nevron.UI.WinForm.Controls.NTreeListPaintContext,Nevron.UI.WinForm.Controls.NTreeListColumnHeader)">
      <summary>
            Paints a column header item.
            </summary>
      <param name="context">
      </param>
      <param name="item">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeListHeaderRenderer.PaintRowHeaderItem(Nevron.UI.WinForm.Controls.NTreeListPaintContext,Nevron.UI.WinForm.Controls.NTreeListRowHeader)">
      <summary>
            Paints a row header item.
            </summary>
      <param name="context">
      </param>
      <param name="item">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeListHeaderRenderer.PaintTopLeftItem(Nevron.UI.WinForm.Controls.NTreeListPaintContext,Nevron.UI.WinForm.Controls.NTreeListTopLeftHeader)">
      <summary>
            Paints the TopLeftItem of a NTreeList control.
            </summary>
      <param name="context">
      </param>
      <param name="item">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeListHeaderRenderer.PaintGroupByBoxItem(Nevron.UI.WinForm.Controls.NTreeListPaintContext,Nevron.UI.WinForm.Controls.NLightUIItem)">
      <summary>
            Paints the GroupByBox item (if visible).
            </summary>
      <param name="context">
      </param>
      <param name="item">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeListHeaderRenderer.PaintFixedColumnVerticalLine(Nevron.UI.WinForm.Controls.NTreeListPaintContext,System.Int32)">
      <summary>
            Paints a vertical line which separates the fixed from non-fixed columns.
            </summary>
      <param name="context">
      </param>
      <param name="bottom">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeListHeaderRenderer.PaintSortGlyph(Nevron.UI.WinForm.Controls.NTreeListPaintContext,Nevron.UI.WinForm.Controls.NTreeListColumnHeader)">
      <summary>
      </summary>
      <param name="context">
      </param>
      <param name="item">
      </param>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRangeSliderButton.Bounds">
      <summary>
            Gets the bounding rectangle of the NRangeSliderButton.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRangeSliderButton.ArrowRect">
      <summary>
            Gets the rectangle in which the arrow is rendered.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRangeSliderButton.IsThumb">
      <summary>
            Gets a value indicating whether this button is a thumb.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRangeSliderButton.Capture">
      <summary>
            Gets a value indicating whether this button has captured the mouse.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRangeSliderButton.Direction">
      <summary>
            Gets the direction of the button.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRangeSliderButton.Parent">
      <summary>
            Gets the parent NRangeSlider.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRangeSliderButton.InteractiveState">
      <summary>
            Gets the InteractiveState of the button.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NCommandEventPermissions">
      <summary>
            Summary description for NCommandEventPermissions.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandEventPermissions.FireClick">
      <summary>
            Gets/sets a value whether the command will fire a Click event.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandEventPermissions.FirePopup">
      <summary>
            Gets/sets a value whether the command will fire a Popup event.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandEventPermissions.FireClosePopup">
      <summary>
            Gets/sets a value whether the command will fire a ClosePopup event.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandEventPermissions.FireSelect">
      <summary>
            Gets/sets a value whether the command will fire a Select event.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandEventPermissions.FireDeselect">
      <summary>
            Gets/sets a value whether the command will fire a Deselect event.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandEventPermissions.FireQueryUIState">
      <summary>
            Gets/sets a value whether the command will fire a QueryUIState event.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandEventPermissions.AllowBubble">
      <summary>
            Gets/sets a value whether the command will bubble an event up to its parent and command bars manager.
            </summary>
    </member>
    <member name="T:Nevron.UI.NUIShapeTypeEditor">
      <summary>
            Summary description for NUIShapeTypeEditor.
            </summary>
    </member>
    <member name="T:Nevron.UI.NUIFrameStyleTypeEditor">
      <summary>
            Summary description for NUIFrameStyleEditor.
            </summary>
    </member>
    <member name="T:Nevron.UI.NUISmartShape">
      <summary>
            Summary description for NUISmartShape.
            </summary>
    </member>
    <member name="T:Nevron.UI.NStylableShape">
      <summary>
            Summary description for NStylableShape.
            </summary>
    </member>
    <member name="P:Nevron.UI.NStylableShape.FillStyle">
      <summary>
            Gets/sets the fill style for this shape.
            </summary>
    </member>
    <member name="P:Nevron.UI.NStylableShape.StrokeStyle">
      <summary>
            Gets/sets the stroke style for this shape.
            </summary>
    </member>
    <member name="P:Nevron.UI.NUISmartShape.SmartShape">
      <summary>
            Gets/sets the wrapped NSmartShape instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.NUISmartShape.ShapeType">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.UI.NImageShape">
      <summary>
            Summary description for NImagePrimitive.
            </summary>
    </member>
    <member name="P:Nevron.UI.NImageShape.CurrentImage">
      <summary>
            Gets the currently displayed image by the shape.
            </summary>
    </member>
    <member name="P:Nevron.UI.NImageShape.Image">
      <summary>
            Gets/sets the Image of the shape.
            </summary>
    </member>
    <member name="P:Nevron.UI.NImageShape.ImageList">
      <summary>
            Gets/sets the ImageList from which an image will be used.
            </summary>
    </member>
    <member name="P:Nevron.UI.NImageShape.ImageIndex">
      <summary>
            Gets/sets the zero-based index to be used from the specified ImageList.
            </summary>
    </member>
    <member name="P:Nevron.UI.NImageShape.SizeMode">
      <summary>
            Gets/sets the logic to be used when painting image to a specified bounds.
            </summary>
    </member>
    <member name="P:Nevron.UI.NImageShape.UseImageSegmentation">
      <summary>
            Gets/sets a value indicating whether a segmented stretch should be applied (if needed).
            </summary>
    </member>
    <member name="P:Nevron.UI.NImageShape.ExtractImageParts">
      <summary>
            Gets/sets the a value whether the segmented image will cache the parts of the original image.
            </summary>
    </member>
    <member name="P:Nevron.UI.NImageShape.Margins">
      <summary>
            Gets/sets the NPadding structure which defines the image's margins.
            </summary>
    </member>
    <member name="P:Nevron.UI.NImageShape.VisibleSegments">
      <summary>
            Gets/sets the segments that are visible (painted).
            </summary>
    </member>
    <member name="T:Nevron.UI.Themes.System.NUxThemeScrollbarRenderer">
      <summary>
            Summary description for NUxThemeScrollbarRenderer.
            </summary>
    </member>
    <member name="T:Nevron.UI.NThemeManagerController">
      <summary>
            Represents a component which may be used to change the setting of the singleton NThemeManager instance at design-time.
            </summary>
    </member>
    <member name="T:Nevron.UI.DataNavigatorParts">
      <summary>
            Summary description for DataNavigatorParts.
            </summary>
    </member>
    <member name="T:Nevron.UI.RadioBoxStates">
      <summary>
            Summary description for RadioBoxStates.
            </summary>
    </member>
    <member name="T:Nevron.UI.INButtonElement">
      <summary>
            Summary description for INButtonElement.
            </summary>
    </member>
    <member name="T:Nevron.UI.NVScrollBarElement">
      <summary>
            Summary description for NVScrollBarElement.
            </summary>
    </member>
    <member name="M:Nevron.UI.NVScrollBarElement.GetShaftBounds">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NVScrollBarElement.LayoutButtons">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.NVScrollBarElement.GetThumbLocation">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NVScrollBarElement.GetThumbSize">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NVScrollBarElement.OnPropertyChanged(Nevron.UI.NPropertyChangedEventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.NVScrollBarElement.ShouldSerializeButtonWidth">
      <summary>
            Determines whether the ButtonWidth member should be serialized by the designer.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.NVScrollBarElement.MinimumSize">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.NVScrollBarElement.ButtonSize">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.NVScrollBarElement.ButtonHeight">
      <summary>
            Gets/sets the width of a single button.
            </summary>
    </member>
    <member name="T:Nevron.UI.NTickInfo">
      <summary>
            Summary description for NTrackBarTickInfo.
            </summary>
    </member>
    <member name="M:Nevron.UI.NTickInfo.ShouldSerializeLength">
      <summary>
            Determines whether the Length property should be serialize.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NTickInfo.ShouldSerializeFrequency">
      <summary>
            Determines whether the Frequency property should be serialize.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NTickInfo.ShouldSerializeStyle">
      <summary>
            Determines whether the Style property should be serialize.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.NTickInfo.Length">
      <summary>
            Gets/sets the length of the ticks.
            </summary>
    </member>
    <member name="P:Nevron.UI.NTickInfo.Frequency">
      <summary>
            Gets/sets the frequency of the ticks.
            </summary>
    </member>
    <member name="P:Nevron.UI.NTickInfo.Style">
      <summary>
            Gets/sets the style of the ticks.
            </summary>
    </member>
    <member name="T:Nevron.UI.NHitTestContext">
      <summary>
            Summary description for NHitTestContext.
            </summary>
    </member>
    <member name="T:Nevron.SmartShapes.NScratchSection">
      <summary>
            The NScratchSection class represents a formula section, 
            which is used for the intermediate calculation of commonly used expressions in the path figure formula definitions
            </summary>
    </member>
    <member name="M:Nevron.SmartShapes.NScratchSection.Clone">
      <summary>
            Creates an identical copy of this object
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.SmartShapes.NScratchSection.AddScratch(System.String,System.String,System.String,System.String,System.String,System.String)">
      <summary>
            Adds a scratch to the section
            </summary>
      <param name="formulaX">
      </param>
      <param name="formulaY">
      </param>
      <param name="formulaA">
      </param>
      <param name="formulaB">
      </param>
      <param name="formulaC">
      </param>
      <param name="formulaD">
      </param>
    </member>
    <member name="M:Nevron.SmartShapes.NScratchSection.AddScratch(Nevron.FormulaSheet.NSingleFormulaCell,Nevron.FormulaSheet.NSingleFormulaCell,Nevron.FormulaSheet.NSingleFormulaCell,Nevron.FormulaSheet.NSingleFormulaCell,Nevron.FormulaSheet.NSingleFormulaCell,Nevron.FormulaSheet.NSingleFormulaCell)">
      <summary>
            Adds a scratch to the section
            </summary>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="a">
      </param>
      <param name="b">
      </param>
      <param name="c">
      </param>
      <param name="d">
      </param>
    </member>
    <member name="M:Nevron.SmartShapes.NScratchSection.GetColNameIndex(System.String)">
      <summary>
            Gets the index of the specified col name
            </summary>
      <remarks>
            Overriden to return the index of the predefined col names
            </remarks>
      <param name="colName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.SmartShapes.NScratchSection.GetColName(System.Int32)">
      <summary>
            Gets the name of the column at the specified index
            </summary>
      <remarks>
            Overriden to return the following col names: X, Y, A, B, C, D
            </remarks>
      <param name="index">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.SmartShapes.NScratchSection.GetMaxColCount">
      <summary>
            Gets the maximum number of columns for this section
            </summary>
      <remarks>
            Overriden to return 6.
            </remarks>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.SmartShapes.NScratchSection.CreateDefaultRow">
      <summary>
            Overriden to create a new instance of the NScratchRow class
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.SmartShapes.NScratchSection.GetVerbs">
      <summary>
            Overriden to add the add row verb
            </summary>
      <returns>
      </returns>
    </member>
    <member name="F:Nevron.SmartShapes.NScratchSection.DefaultName">
      <summary>
            Default name for this section  
            </summary>
    </member>
    <member name="F:Nevron.SmartShapes.NScratchSection.DefaultTitle">
      <summary>
            Default title for this section  
            </summary>
    </member>
    <member name="T:Nevron.SmartShapes.NSmartShapeSerializer">
      <summary>
            The NSmartShapeSerializer class facilitates the persistency of smart shapes.
            </summary>
    </member>
    <member name="M:Nevron.SmartShapes.NSmartShapeSerializer.LoadFromFile(System.String,Nevron.Serialization.PersistencyFormat,Nevron.Serialization.INSerializationFilter)">
      <summary>
            Loads the persistent document from file in the specified format
            </summary>
      <param name="filePath">file path</param>
      <param name="format">persistency format</param>
      <param name="filter">serialization filter</param>
      <returns>true if the operation succedded, otherwise false</returns>
    </member>
    <member name="M:Nevron.SmartShapes.NSmartShapeSerializer.LoadFromStream(System.IO.Stream,Nevron.Serialization.PersistencyFormat,Nevron.Serialization.INSerializationFilter)">
      <summary>
            Loads the persistent document from stream in the specified format
            </summary>
      <param name="stream">stream</param>
      <param name="format">persistency format</param>
      <param name="filter">serialization filter</param>
      <returns>true if the operation succedded, otherwise false</returns>
    </member>
    <member name="M:Nevron.SmartShapes.NSmartShapeSerializer.LoadFromFile">
      <summary>
            Loads a shape from a file
            </summary>
      <remarks>
            This method will show a open file dialog, configured with the currently known shape formats
            </remarks>
      <returns>the loaded shape if succeeded, otherwise null</returns>
    </member>
    <member name="M:Nevron.SmartShapes.NSmartShapeSerializer.LoadFromFile(System.String)">
      <summary>
            Loads a shape from the specified file
            </summary>
      <param name="fileName">file to load from (the extension determines the format)</param>
      <returns>the loaded shape if succeeded, otherwise null</returns>
    </member>
    <member name="M:Nevron.SmartShapes.NSmartShapeSerializer.SaveToFile(Nevron.SmartShapes.NSmartShape)">
      <summary>
            Saves the specified shape to file
            </summary>
      <remarks>
            This method will show a save file dialog, configured for the supported shape formats
            </remarks>
      <param name="shape">shape to save</param>
      <returns>true if the operation succedded, otherwise false</returns>
    </member>
    <member name="M:Nevron.SmartShapes.NSmartShapeSerializer.SaveToFile(Nevron.SmartShapes.NSmartShape,System.String)">
      <summary>
            Saves the specified shape document to the specified file
            </summary>
      <param name="shape">shape to save</param>
      <param name="fileName">file to save to (the extension determines the format)</param>
      <returns>true if the operation succedded, otherwise false</returns>
    </member>
    <member name="M:Nevron.SmartShapes.NSmartShapeSerializer.SaveToFile(Nevron.SmartShapes.NSmartShape,System.String,Nevron.Serialization.PersistencyFormat,Nevron.Serialization.INSerializationFilter)">
      <summary>
            Saves the specified shape to file in the specified format
            </summary>
      <param name="shape">shape to save</param>
      <param name="filePath">file path</param>
      <param name="format">persistency format</param>
      <param name="filter">serialization filter</param>
      <returns>true if the operation succedded, otherwise false</returns>
    </member>
    <member name="M:Nevron.SmartShapes.NSmartShapeSerializer.SaveToStream(Nevron.SmartShapes.NSmartShape,System.IO.Stream,Nevron.Serialization.PersistencyFormat,Nevron.Serialization.INSerializationFilter)">
      <summary>
            Saves the specified shape to stream in the specified format
            </summary>
      <param name="shape">shape to save</param>
      <param name="stream">stream</param>
      <param name="format">persistency format</param>
      <param name="filter">serialization filter</param>
      <returns>true if the operation succedded, otherwise false</returns>
    </member>
    <member name="M:Nevron.NewGraphics.NTransformableBrush.InitFrom(Nevron.NewGraphics.NGraphicsObject)">
      <summary>
            Initializes a new graphics object from the given one.
            </summary>
      <param name="graphicsObject">
      </param>
    </member>
    <member name="T:Nevron.GraphicsCore.NCustomScriptAttribute">
      <summary>
            Represents a custom script applied on the object.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NInteractivityAttribute">
      <summary>
            Base class for all interactivity attributes/
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NInteractivityAttribute.Clone">
      <summary>
            Creates an exact replica of this object
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NCustomScriptAttribute.VBScript">
      <summary>
            A custom VB script injected into the Html image map.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NCustomScriptAttribute.JScript">
      <summary>
            A custom JScript script injected into the Html image map.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NGlowImageFilter">
      <summary>
            When present in a ImageFilters collection the NGlowImageFilter class instructs the component to lit the edges of the object with the specified glow color.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NGlowImageFilter.GlowType">
      <summary>
            The type of glow effect. 
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NGlowImageFilter.Depth">
      <summary>
            The depth of the glow effect.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NGlowImageFilter.OriginalOpacity">
      <summary>
            Fades out the original image leaving only the glow effect. 
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NGlowImageFilter.Color">
      <summary>
            The color of the glow effect
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NImageFrameStyle">
      <summary>
            Represents an vector image frame around an object
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NImageFrameStyle.SetPredefinedFrameStyle(Nevron.GraphicsCore.PredefinedImageFrame)">
      <summary>
            Configures the NImageFrame object to display a predefined image frame.
            This method is provided for fast and easy setup of the image borders.
            </summary>
      <param name="style">Enumeration value that specifies the desired style.</param>
    </member>
    <member name="M:Nevron.GraphicsCore.NImageFrameStyle.OnDrawPreview(Nevron.GraphicsCore.lIIIIllI,Nevron.GraphicsCore.NSizeF)">
      <summary>
            Draws a preview of the style on the specified device.
            </summary>
      <param name="device">
      </param>
      <param name="size">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NImageFrameStyle.GetDescription">
      <summary>
            Returns a short description of this image frame style
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NImageFrameStyle.GetPaintableRect(Nevron.GraphicsCore.NRectangleF,Nevron.GraphicsCore.l1IlllI1)">
      <summary>
            Overriden. Obtains the paintable rectangle associated with this image frame style.
            </summary>
      <param name="shapeRect">
      </param>
      <param name="lengthConverter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NImageFrameStyle.GetAttributeByName(System.String)">
      <summary>
            Gets a child or descendant attribute by its name
            </summary>
      <param name="attributeName">child name or full attribute name</param>
      <returns>a reference to the attribute</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NImageFrameStyle.GetAttributeName(Nevron.Dom.INAttribute)">
      <summary>
            Gets the name of the specified child attribute
            </summary>
      <param name="attribute">child attribute</param>
      <returns>name of the attribute</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NImageFrameStyle.SetAttributeByName(System.String,Nevron.Dom.INAttribute)">
      <summary>
            Sets a child or descendant attribute by its name
            </summary>
      <param name="attributeName">
      </param>
      <param name="attribute">
      </param>
    </member>
    <member name="P:Nevron.GraphicsCore.NImageFrameStyle.Type">
      <summary>
            The type of the image frame.
            </summary>
      <remarks>
            The type can be one of the values of the ImageFrameType enumeration.
            </remarks>
    </member>
    <member name="P:Nevron.GraphicsCore.NImageFrameStyle.BackgroundColor">
      <summary>
            The background color of the frame.
            </summary>
      <remarks>
            By default this color is set to KnownColor.Control, but you can alter it at any time. For example if you embed the chart in an ASPX page with White background you should set this color to Color.White.
            </remarks>
      <example>
            The following example changes the background color:
            <code lang="VB">
            Dim imageFrame As NImageFrame =  New NImageBackgroundFrame() 
            imageFrame.Type = ImageFrameType.Emboss
            imageFrame.BackgroundColor = Color.White
            NChartControl.Background.Frame = imageFrame
            </code><code>
            NImageFrame imageFrame = new NImageBackgroundFrame();				
            imageFrame.Type = ImageFrameType.Emboss;
            imageFrame.BackgroundColor = Color.White;
            NChartControl.Background.Frame = imageFrame;
            </code></example>
    </member>
    <member name="P:Nevron.GraphicsCore.NImageFrameStyle.FillStyle">
      <summary>
            The fill effect applied on the frame.
            </summary>
      <remarks>
            Gives you access to the NFillEffect object controlling the fill effect applied on 
            the frame.
            </remarks>
      <example>
            The following code applies a gradient on the frame:
            <code lang="VB">
            Dim imageFrame As NImageFrame =  NChartControl.Background.ImageFrame 
            imageFrame.FillEffect.SetPredefinedAdvancedGradient(AdvancedGradientScheme.Ocean2, 11)
            </code><code>
            NImageFrame imageFrame = NChartControl.Background.ImageFrame;
            imageFrame.FillEffect.SetPredefinedAdvancedGradient(AdvancedGradientScheme.Ocean2, 11);
            </code></example>
    </member>
    <member name="P:Nevron.GraphicsCore.NImageFrameStyle.BorderStyle">
      <summary>
            Controls the border of the image frame.
            </summary>
      <remarks>
            Gives you access to the NFillEffect object controlling the fill effect applied on 
            the frame.
            </remarks>
      <example>
            The following code disables the border of the frame:
            <code lang="VB">
            Dim imageFrame As NImageFrame =  NChartControl.Background.ImageFrame 
            imageFrame.Border.Width = 0
            </code><code>
            NImageFrame imageFrame = NChartControl.Background.ImageFrame;
            imageFrame.Border.Width = 0;
            </code></example>
    </member>
    <member name="P:Nevron.GraphicsCore.NImageFrameStyle.ShadowStyle">
      <summary>
            Controls the shadow of the image frame.
            </summary>
      <remarks>
            Gives you access to the NShadowStyle object controlling the shadow applied on 
            the frame.
            </remarks>
      <example>
            The following code sets a gaussian shadow to the image frame:
            <code lang="VB">
            Dim imageFrame As NImageFrame =  NChartControl.Background.ImageFrame 
            imageFrame.Shadow.Type = ShadowType.GaussianBlur
            </code><code>
            NImageFrame imageFrame = NChartControl.Background.ImageFrame;
            imageFrame.Shadow.Type = ShadowType.GaussianBlur;
            </code></example>
    </member>
    <member name="P:Nevron.GraphicsCore.NImageFrameStyle.DarkBorderStyle">
      <summary>
            Obtains the dark border style.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NImageFrameStyle.LightBorderStyle">
      <summary>
            Obtains the dark light border style.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NImageFrameStyle.LightEffectSize">
      <summary>
            Controls the size of the light bevel.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NImageFrameStyle.LightColor">
      <summary>
            The light color of the bevel effect applied on the frame.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NImageFrameStyle.ShadowColor">
      <summary>
            The shadow color of the bevel effect applied on the frame.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NImageFrameStyle.OuterEdgePercent">
      <summary>
            The amount of rounding of the outer edges relative to the corner size.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NImageFrameStyle.InnerEdgePercent">
      <summary>
            The amount of rounding of the inner edges relative to the corner and tube size.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NImageFrameStyle.CornerMargins">
      <summary>
            The tube margins the image frame.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NImageFrameStyle.CornerMarginsLeft">
      <summary>
            Gets/sets the left corner margins
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NImageFrameStyle.CornerMarginsTop">
      <summary>
            Gets/sets the top corner margins
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NImageFrameStyle.CornerMarginsRight">
      <summary>
            Gets/sets the right corner margins
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NImageFrameStyle.CornerMarginsBottom">
      <summary>
            Gets/sets the bottom corner margins
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NImageFrameStyle.TubeMargins">
      <summary>
            The tube margins the image frame.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NImageFrameStyle.TubeMarginsLeft">
      <summary>
            Gets/sets the left tube margins
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NImageFrameStyle.TubeMarginsTop">
      <summary>
            Gets/sets the top tube margins
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NImageFrameStyle.TubeMarginsRight">
      <summary>
            Gets/sets the right tube margins
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NImageFrameStyle.TubeMarginsBottom">
      <summary>
            Gets/sets the bottom tube margins
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NImageFrameStyle.FrameStyleType">
      <summary>
            Returns the type of the frame style
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NImageFrameStyle.Attributes">
      <summary>
            Gets an array of the child attributes of this attribute
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.GraphicsCore.NFontStyle">
      <summary>
            Represents a font style 
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NFontStyle.CreateFont(Nevron.GraphicsCore.NMeasurementUnitConverter)">
      <summary>
            Creates a GDI+ font from this font style
            </summary>
      <param name="converter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NFontStyle.InitFromFont(System.Drawing.Font)">
      <summary>
            Initialized the font of the text style from the properties of a GDI+ font object.
            </summary>
      <remarks>
            The default is Arial 9, but some objects may modify it. Note that it's more efficient to 
            modify the font by using the other font related properties or the SetFont function.
            </remarks>
      <example>
            The following example creates a new label and changes the font
            <code lang="VB">
            Dim label As NLabel =  New NLabel() 
            label.Text = "Hello world"
            label.HorizontalMargin = 0
            label.VerticalMargin = 0
            label.TextProps.HorzAlign = HorzAlignNear
            label.TextProps.VertAlign = HorzAlignNear
            label.TextProps.Font = New Font("Arial", 22)
            NChartControl.Labels.Add(label)
            </code><code>
            NLabel label = new NLabel();
            label.Text = "Hello world";
            label.HorizontalMargin = 0;
            label.VerticalMargin = 0;
            label.TextProps.HorzAlign = HorzAlignNear;
            label.TextProps.VertAlign = HorzAlignNear;
            label.TextProps.Font = new Font("Arial", 22);
            NChartControl.Labels.Add(label);
            </code></example>
    </member>
    <member name="M:Nevron.GraphicsCore.NFontStyle.OnDrawPreview(Nevron.GraphicsCore.lIIIIllI,Nevron.GraphicsCore.NSizeF)">
      <summary>
            Draws a preview of the style on the specified device.
            </summary>
      <param name="device">
      </param>
      <param name="size">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NFontStyle.GetDescription">
      <summary>
            Returns a short description of this style.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NFontStyle.GetPaintableRect(Nevron.GraphicsCore.NRectangleF,Nevron.GraphicsCore.l1IlllI1)">
      <summary>
            Overriden. Obtains the paintable rectangle associated with this font style style.
            </summary>
      <param name="shapeRect">
      </param>
      <param name="lengthConverter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NFontStyle.Name">
      <summary>
            The name of the used font
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NFontStyle.EmSize">
      <summary>
            The em size of the used font
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NFontStyle.Style">
      <summary>
            The style of the used font
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NFontStyle.GdiCharSet">
      <summary>
            The font character set
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NFontStyle.GdiVerticalFont">
      <summary>
            A Boolean value that indicates whether this Font object is derived from a GDI vertical font.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NStrokeBorderStyle">
      <summary>
            Represents a border consisting of a single outline (stroke)
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NBorderStyle">
      <summary>
            Represents a border applied around an an object (shape or panel)
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NBorderStyle.MeasureWidth(Nevron.GraphicsCore.l1IlllI1)">
      <summary>
            Measures the border width
            </summary>
      <param name="lengthConverter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NBorderStyle.Paint(Nevron.GraphicsCore.lIIIIllI,Nevron.GraphicsCore.l1llll1lI)">
      <summary>
            Paints the border given an outline provider
            </summary>
      <param name="device">
      </param>
      <param name="outlineProvider">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NBorderStyle.GetAttributeByName(System.String)">
      <summary>
            Gets a child or descendant attribute by its name
            </summary>
      <param name="attributeName">child name or full attribute name</param>
      <returns>a reference to the attribute</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NBorderStyle.GetAttributeName(Nevron.Dom.INAttribute)">
      <summary>
            Gets the name of the specified child attribute
            </summary>
      <param name="attribute">child attribute</param>
      <returns>name of the attribute</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NBorderStyle.SetAttributeByName(System.String,Nevron.Dom.INAttribute)">
      <summary>
            Sets a child or descendant attribute by its name
            </summary>
      <param name="attributeName">
      </param>
      <param name="attribute">
      </param>
    </member>
    <member name="P:Nevron.GraphicsCore.NBorderStyle.Shape">
      <summary>
            Gets/sets the shape of the border
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NBorderStyle.CornerRounding">
      <summary>
            Gets/sets the corner rounding when Shape is RoundedRect
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NBorderStyle.Attributes">
      <summary>
            Gets an array of the child attributes of this attribute
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NStrokeBorderStyle.OnDrawPreview(Nevron.GraphicsCore.lIIIIllI,Nevron.GraphicsCore.NSizeF)">
      <summary>
            Draws the preview for this appearance style.
            </summary>
      <param name="device">
      </param>
      <param name="size">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NStrokeBorderStyle.GetDescription">
      <summary>
            Returns a short description of this style.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NStrokeBorderStyle.GetPaintableRect(Nevron.GraphicsCore.NRectangleF,Nevron.GraphicsCore.l1IlllI1)">
      <summary>
            Overriden. Obtains the paintable rectangle associated with this image frame style.
            </summary>
      <param name="shapeRect">
      </param>
      <param name="lengthConverter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NStrokeBorderStyle.GetShapeInflate(Nevron.GraphicsCore.l1IlllI1)">
      <summary>
            Obtains the maximum inflate of the shape.
            </summary>
      <param name="lengthConverter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NStrokeBorderStyle.GetAttributeName(Nevron.Dom.INAttribute)">
      <summary>
            Gets the name of the specified child attribute
            </summary>
      <param name="attribute">child attribute</param>
      <returns>name of the attribute</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NStrokeBorderStyle.MeasureWidth(Nevron.GraphicsCore.l1IlllI1)">
      <summary>
            Measures the border width
            </summary>
      <param name="lengthConverter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NStrokeBorderStyle.Paint(Nevron.GraphicsCore.lIIIIllI,Nevron.GraphicsCore.l1llll1lI)">
      <summary>
            Paints the border given an outline provider
            </summary>
      <param name="device">
      </param>
      <param name="outlineProvider">
      </param>
    </member>
    <member name="P:Nevron.GraphicsCore.NStrokeBorderStyle.StrokeStyle">
      <summary>
            Gets/sets the stroke style applied to the outer side of the outline
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NStrokeBorderStyle.Attributes">
      <summary>
            Gets an array of the child attributes of this attribute
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.GraphicsCore.NBackplaneStyle">
      <summary>
            The NBackplaneStyle class represnets an appearance styles, which defines the backplane of an object
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NBackplaneStyle.InitFromBackplaneStyle(Nevron.GraphicsCore.NBackplaneStyle)">
      <summary>
            Initializes the backplane style object from the properties of another backplane style object
            </summary>
      <remarks>
            You may want to use this function instead of Clone because it allows you to modify fill effects that are obtainable only by a get method.
            </remarks>
      <param name="backplaneStyle">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NBackplaneStyle.GetAttributeByName(System.String)">
      <summary>
            Gets a child or descendant attribute by its name
            </summary>
      <param name="attributeName">child name or full attribute name</param>
      <returns>a reference to the attribute</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NBackplaneStyle.GetAttributeName(Nevron.Dom.INAttribute)">
      <summary>
            Gets the name of the specified child attribute
            </summary>
      <param name="attribute">child attribute</param>
      <returns>name of the attribute</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NBackplaneStyle.SetAttributeByName(System.String,Nevron.Dom.INAttribute)">
      <summary>
            Sets a child or descendant attribute by its name
            </summary>
      <param name="attributeName">
      </param>
      <param name="attribute">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NBackplaneStyle.OnDrawPreviewBackground(Nevron.GraphicsCore.lIIIIllI,Nevron.GraphicsCore.NRectangleF)">
      <summary>
            Overriden to draw a backplane background preview 
            </summary>
      <param name="device">
      </param>
      <param name="bounds">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NBackplaneStyle.OnDrawPreview(Nevron.GraphicsCore.lIIIIllI,Nevron.GraphicsCore.NSizeF)">
      <summary>
            Draws a preview of the style on the specified device.
            </summary>
      <param name="device">
      </param>
      <param name="size">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NBackplaneStyle.GetDescription">
      <summary>
            Returns a short description of this backplane style.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NBackplaneStyle.GetPaintableRect(Nevron.GraphicsCore.NRectangleF,Nevron.GraphicsCore.l1IlllI1)">
      <summary>
            Obtains the paintable rectangle associated with this backplane style.
            </summary>
      <param name="shapeRect">
      </param>
      <param name="lengthConverter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NBackplaneStyle.Visible">
      <summary>
            Controls the visibility of the back plane.
            </summary>
      <remarks>
            When set to False the back plane is not displayed. Note that some objects may have 
            a disabled backplane by default - for example the legend data items.
            </remarks>
      <example>
            The following example adds a new data item to the legend and 
            enables the backplane.
            <code lang="VB">
            Dim legend As NLegend = CType((NChartControl.Legends(0)), NLegend)
            legend.Mode = LegendMode.Manual
            Dim item As NLegendDataItem =  New NLegendDataItem() 
            item.Text = "Enable item back plane"
            legend.Data.TextProps.Backplane.Visible = True
            legend.Data.Array.Add(item)
            </code><code>
            NLegend legend = (NLegend)(NChartControl.Legends[0]);
            legend.Mode = LegendMode.Manual;
            NLegendDataItem item = new NLegendDataItem();
            item.Text = "Enable item back plane";
            legend.Data.TextProps.Backplane.Visible = true;
            legend.Data.Array.Add(item);
            </code></example>
    </member>
    <member name="P:Nevron.GraphicsCore.NBackplaneStyle.Shape">
      <summary>
            Defines the style of the backplane.
            </summary>
      <remarks>
            The possible values are: Rectangle, Ellipse, Circle, CutEdgeRectangle and 
            SmoothEdgeRectangle. In the case of CutEdgeRectangle and SmoothEdgeRectangle you 
            can also control the percentage of the edge relative to the width or height of 
            the backplane (whichever one is smaller).
            </remarks>
      <example>
            The following code snippet modifies the backplane style.
            <code lang="VB">
            Dim backplane As NBackplane =  SomeTextProps.Backplane 
            backplane.Style = BackplaneStyle.CutEdgeRectangle
            </code><code>
            NBackplane backplane = SomeTextProps.Backplane;
            backplane.Style = BackplaneStyle.CutEdgeRectangle;
            </code></example>
    </member>
    <member name="P:Nevron.GraphicsCore.NBackplaneStyle.EdgePercent">
      <summary>
            Controls the edge size of the smooth edge or cut edge rectangle.
            </summary>
      <remarks>
            The Style property must be set to SmoothEdgeRectangle or SmoothEdgeRectangle. 
            The property specifies the percentage of the edge occupied by the smooth edge of 
            cut edge in percents of the backplane width or height depending on which one of 
            them is smaller. The default value is 20%.
            </remarks>
      <example>
            The following code snippet modifies the backplane style and edge percent.
            <code lang="VB">
            Dim backplane As NBackplane =  someTextProps.Backplane 
            backplane.Style = BackplaneStyle.CutEdgeRectangle
            backplane.EdgePercent = 30
            </code><code>
            NBackplane backplane = someTextProps.Backplane;
            backplane.Style = BackplaneStyle.CutEdgeRectangle;
            backplane.EdgePercent = 30; 
            </code></example>
    </member>
    <member name="P:Nevron.GraphicsCore.NBackplaneStyle.Inflate">
      <summary>
            Inflates the backplane width and height in pixels.
            </summary>
      <remarks>
            The control automatically determines the dimensions of the backplane depending 
            on the object it is attached to. For example if you have a text object the control 
            will calculate the bounding rectangle of the text and then modify the backplane 
            dimensions so that they match the text bounding rectangle. You can additionally 
            inflate or deflate these dimensions by using the Inflate property. The inflate is 
            always specified in device units (pixels).
            </remarks>
      <example>
        <code lang="VB">
            Dim backplane As NBackplane =  someTextProps.Backplane 
            backplane.Inflate = New NSizeL(4, 4) ' increase the width and height of the backplane with 4 pixels
            </code>
        <code>
            NBackplane backplane = someTextProps.Backplane;
            backplane.Inflate = new NSizeL(4, 4); // increase the width and height of the backplane with 4 pixels
            </code>
      </example>
    </member>
    <member name="P:Nevron.GraphicsCore.NBackplaneStyle.InflateWidth">
      <summary>
            Gets/sets the inflate width
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NBackplaneStyle.InflateHeight">
      <summary>
            Gets/sets the inflate height
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NBackplaneStyle.StandardFrameStyle">
      <summary>
            Gives access to the NStandardFrameStyle object controlling the standard backplane frame.
            </summary>
      <remarks>
            This type of frame resembles the standard Windows frames and can show all types 
            of frames specified by the style of the window (raised, sunken, single etc). 
            </remarks>
      <example>
            The following code configures a Windows-like backplane frame with an inner 
            and outer bevel.
            <code lang="VB">
            backplane.StandardFrame.OuterStyle = BevelStyle.Sunken
            backplane.StandardFrame.InnerStyle = BevelStyle.Sunken
            backplane.StandardFrame.BevelWidth = 1
            </code><code>
            backplane.StandardFrame.OuterStyle = BevelStyle.Sunken;
            backplane.StandardFrame.InnerStyle = BevelStyle.Sunken;
            backplane.StandardFrame.BevelWidth = 1;
            </code></example>
    </member>
    <member name="P:Nevron.GraphicsCore.NBackplaneStyle.FillStyle">
      <summary>
            The fill effect applied on the backplane.
            </summary>
      <remarks>
            Gives you access to the NFillEffect object controlling the fill effect applied on 
            the backplane.
            </remarks>
      <example>
            The following code applies a gradient on the backplane:
            <code lang="VB">
            Dim backplane As NBackplane =  someTextProps.Backplane 
            backplane.FillEffect.SetPredefinedAdvancedGradient(AdvancedGradientScheme.Ocean2, 11)
            </code><code>
            NBackplane backplane = someTextProps.Backplane;
            backplane.FillEffect.SetPredefinedAdvancedGradient(AdvancedGradientScheme.Ocean2, 11);
            </code></example>
    </member>
    <member name="P:Nevron.GraphicsCore.NBackplaneStyle.ShadowStyle">
      <summary>
            Controls the backplane shadow.
            </summary>
      <remarks>
      </remarks>
      <example>
            The following code modifies the color of the legend shadow.
            <code lang="VB">
            Dim legend As NLegend = CType((NChartControl.Legends(0)), NLegend)
            legend.Backplane.Shadow.Color = Color.Blue
            </code><code>
            NLegend legend = (NLegend)(NChartControl.Legends[0]);
            legend.Backplane.ShadowStyle.Color = Color.Blue;
            </code></example>
    </member>
    <member name="P:Nevron.GraphicsCore.NBackplaneStyle.Attributes">
      <summary>
            Gets an array of the child attributes of this attribute
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.GraphicsCore.NRotateAnimation">
      <summary>
            Rotates an object from a given angle to another.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NRotateAnimation.Clone">
      <summary>
            Creates an identical copy of this animation object.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NRotateAnimation.AnchorX">
      <summary>
            Get/Sets the scale X anchor. Must be in the range [0, 1]. By default set to 0.5
            which means the horizontal center.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NRotateAnimation.AnchorY">
      <summary>
            Get/Sets the scale Y anchor. Must be in the range [0, 1]. By default set to 0.5
            which means the vertical center.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NRotateAnimation.StartAngle">
      <summary>
            Gets/Sets the start angle of the rotation (in degrees). By default set to 0.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NRotateAnimation.EndAngle">
      <summary>
            Gets/Sets the end angle of the rotation (in degrees). By default set to 0.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NRotateAnimation.AnimationType">
      <summary>
            Gets the type of this animation.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NTextureMappingStyleKey">
      <summary>
            Summary description for NTextureMappingKey.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NKilometerMetricUnit">
      <summary>
            Represents the kilometer metric measurement unit.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NKilometerMetricUnit.ConvertXValueToPixels(Nevron.GraphicsCore.NMeasurementUnitConverter)">
      <summary>
            Converts this measurement unit to its equivalent in pixels along the X direction.
            </summary>
      <param name="converter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NKilometerMetricUnit.ConvertYValueToPixels(Nevron.GraphicsCore.NMeasurementUnitConverter)">
      <summary>
            Converts this measurement unit to its equivalent in pixels along the Y direction.
            </summary>
      <param name="converter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NKilometerMetricUnit.Abbreviation">
      <summary>
            The abbreviation of this measurement unit.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NKilometerMetricUnit.MetricUnit">
      <summary>
            Gets the english unit of the object.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NKilometerMetricUnit.ScaleToInch">
      <summary>
            The scale to inch of this measurement unit.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NDecimeterMetricUnit">
      <summary>
            Represents the deimeter metric measurement unit.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NDecimeterMetricUnit.ConvertXValueToPixels(Nevron.GraphicsCore.NMeasurementUnitConverter)">
      <summary>
            Converts this measurement unit to its equivalent in pixels along the X direction.
            </summary>
      <param name="converter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NDecimeterMetricUnit.ConvertYValueToPixels(Nevron.GraphicsCore.NMeasurementUnitConverter)">
      <summary>
            Converts this measurement unit to its equivalent in pixels along the Y direction.
            </summary>
      <param name="converter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NDecimeterMetricUnit.Abbreviation">
      <summary>
            The abbreviation of this measurement unit.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NDecimeterMetricUnit.MetricUnit">
      <summary>
            Gets the english unit of the object.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NDecimeterMetricUnit.ScaleToInch">
      <summary>
            The scale to inch of this measurement unit.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NCentimeterMetricUnit">
      <summary>
            Represents the centimeter metric measurement unit.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NCentimeterMetricUnit.ConvertXValueToPixels(Nevron.GraphicsCore.NMeasurementUnitConverter)">
      <summary>
            Converts this measurement unit to its equivalent in pixels along the X direction.
            </summary>
      <param name="converter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NCentimeterMetricUnit.ConvertYValueToPixels(Nevron.GraphicsCore.NMeasurementUnitConverter)">
      <summary>
            Converts this measurement unit to its equivalent in pixels along the Y direction.
            </summary>
      <param name="converter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NCentimeterMetricUnit.Abbreviation">
      <summary>
            The abbreviation of this measurement unit.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NCentimeterMetricUnit.MetricUnit">
      <summary>
            Gets the english unit of the object.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NCentimeterMetricUnit.ScaleToInch">
      <summary>
            The scale to inch of this measurement unit.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NGraphicsMeasurementSystem">
      <summary>
            Represents the GDI+ (Graphics) measurement unit system
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NMeasurementSystem">
      <summary>
            Base class for all measurement systems
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NMeasurementSystem.InitMeasurementUnits">
      <summary>
            Must override to initialize the measurement units in the system
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NMeasurementSystem.GetMeasurementUnitFromAbbreviation(System.String@)">
      <summary>
            Returns the measurement unit associated with the abbreviation or null if none.
            </summary>
      <param name="abbreviation">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NMeasurementSystem.GetMeasurementUnitFromName(System.String@)">
      <summary>
            Returns the measurement unit associated with the name or null if none.
            </summary>
      <param name="name">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NMeasurementSystem.Contains(Nevron.GraphicsCore.NMeasurementUnit)">
      <summary>
            Returns true if the system contains the measurement unit and false otherwise.
            </summary>
      <param name="measurementUnit">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NMeasurementSystem.IndexOf(Nevron.GraphicsCore.NMeasurementUnit)">
      <summary>
            Returns the index of the measurement unit in the measurement unit collection.
            </summary>
      <param name="measurementUnit">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NMeasurementSystem.GetFromEnum(Nevron.GraphicsCore.MeasurementSystem)">
      <summary>
            Obtains the measurement system corresponding to the specified MeasurementSystem enum value
            </summary>
      <param name="measurementSystem">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NMeasurementSystem.Name">
      <summary>
            Gets the system name
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NMeasurementSystem.MeasurementSystem">
      <summary>
            Defines the measurement system
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NMeasurementSystem.MeasurementUnits">
      <summary>
            Obtains an array of the measurement units in the system
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NGraphicsMeasurementSystem.InitMeasurementUnits">
      <summary>
            Overriden to initialize the system with the supported Graphics measurement units
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NGraphicsMeasurementSystem.GraphicsMeasurementSystem">
      <summary>
            The one and only instance of the Graphics measurement system
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NGraphicsMeasurementSystem.Name">
      <summary>
            The name of this measurement system.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NGraphicsMeasurementSystem.MeasurementSystem">
      <summary>
            The enum value of this measurement system.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NPicaEnglishUnit">
      <summary>
            Represents the pica graphics unit. A pica represents 12 points.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NPicaEnglishUnit.ConvertXValueToPixels(Nevron.GraphicsCore.NMeasurementUnitConverter)">
      <summary>
            Converts this measurement unit to its equivalent in pixels along the X direction.
            </summary>
      <param name="converter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NPicaEnglishUnit.ConvertYValueToPixels(Nevron.GraphicsCore.NMeasurementUnitConverter)">
      <summary>
            Converts this measurement unit to its equivalent in pixels along the Y direction.
            </summary>
      <param name="converter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NPicaEnglishUnit.Abbreviation">
      <summary>
            The abbreviation of this measurement unit.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NPicaEnglishUnit.EnglishUnit">
      <summary>
            Gets the english unit of the object.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NPicaEnglishUnit.UnitType">
      <summary>
            The measurement unit type.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NPicaEnglishUnit.ScaleToInch">
      <summary>
            The scale to inch of this measurement unit.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NPicaEnglishUnit.DefaultValueFormat">
      <summary>
            The default value format of this measurement unit.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NEnglishMeasurementSystem">
      <summary>
            Represents the British And American (English) measurement unit system
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NEnglishMeasurementSystem.InitMeasurementUnits">
      <summary>
            Overriden to initialize the system with the supported English measurement units
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NEnglishMeasurementSystem.EnglishMeasurementSystem">
      <summary>
            The one and only instance of the English measurement system
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NEnglishMeasurementSystem.Name">
      <summary>
            The name of the measurement system.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NEnglishMeasurementSystem.MeasurementSystem">
      <summary>
            The enum value of this measurement system.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NMeasurementUnitConverter">
      <summary>
            Measurement unit converter used to convert from one measurement unit to another
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NMeasurementUnitConverter.InitializeAbsoluteMembers(System.Single,System.Single)">
      <summary>
            Initializes the resolution dependent properties of this converter.
            </summary>
      <param name="dpyX">
      </param>
      <param name="dpyY">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NMeasurementUnitConverter.InitializeRelativeMembers(Nevron.GraphicsCore.NSizeF,Nevron.GraphicsCore.NSizeF)">
      <summary>
            Initializes the parent size dependent properties of this converter.
            </summary>
      <param name="rootSize">
      </param>
      <param name="parentSize">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NMeasurementUnitConverter.ConvertSize(Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NMeasurementUnit,System.Drawing.SizeF)">
      <summary>
            Converts a size from one unit to another
            </summary>
      <param name="from">
      </param>
      <param name="to">
      </param>
      <param name="size">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NMeasurementUnitConverter.ConvertSize(Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NSizeF)">
      <summary>
            Converts a size from one unit to another
            </summary>
      <param name="from">
      </param>
      <param name="to">
      </param>
      <param name="size">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NMeasurementUnitConverter.ConvertPoint(Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NMeasurementUnit,System.Drawing.PointF)">
      <summary>
            Converts a point from one unit to another
            </summary>
      <param name="from">
      </param>
      <param name="to">
      </param>
      <param name="point">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NMeasurementUnitConverter.ConvertPoint(Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NPointF)">
      <summary>
            Converts a point from one unit to another
            </summary>
      <param name="from">
      </param>
      <param name="to">
      </param>
      <param name="point">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NMeasurementUnitConverter.ConvertRect(Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NMeasurementUnit,System.Drawing.RectangleF)">
      <summary>
            Converts a rectangle from one unit to another
            </summary>
      <param name="from">
      </param>
      <param name="to">
      </param>
      <param name="rect">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NMeasurementUnitConverter.ConvertRect(Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NRectangleF)">
      <summary>
            Converts a rectangle from one unit to another
            </summary>
      <param name="from">
      </param>
      <param name="to">
      </param>
      <param name="rect">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NMeasurementUnitConverter.ConvertX(Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NMeasurementUnit,System.Single)">
      <summary>
            Converts a X coordinate from one unit to another
            </summary>
      <param name="from">
      </param>
      <param name="to">
      </param>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NMeasurementUnitConverter.ConvertY(Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NMeasurementUnit,System.Single)">
      <summary>
            Converts an Y coordinate from one unit to another
            </summary>
      <param name="from">
      </param>
      <param name="to">
      </param>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NMeasurementUnitConverter.DpiX">
      <summary>
            Obtains the DpiX with which the convert is initialized
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NMeasurementUnitConverter.DpiY">
      <summary>
            Obtains the DpiY with which the convert is initialized
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Text.INBoundable">
      <summary>
            Summary description for INBoundable.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.INRasterImage">
      <summary>
            Implemented by raster images
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.INRasterImage.ConvertToGrayScale">
      <summary>
            Converts the image to grayscale.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.INRasterImage.Bitmap">
      <summary>
            Gets/sets the represented image
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Text.NTextDocumentComponentSerializer">
      <summary>
            Controls text document object serialization.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NTextDocumentComponentSerializer.SaveControlStateToFile(System.String,Nevron.Serialization.PersistencyFormat,Nevron.Serialization.INSerializationFilter)">
      <summary>
            Saves the current state of the text document to a file in the specified format.
            </summary>
      <param name="filePath">A relative or absolute path for the output file.</param>
      <param name="format">The format of the file.</param>
      <param name="filter">A serialization filter.</param>
      <remarks>
            The filter parameters is used only when the format is CustomXML or CustomBinary.
            </remarks>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NTextDocumentComponentSerializer.LoadControlStateFromFile(System.String,Nevron.Serialization.PersistencyFormat,Nevron.Serialization.INSerializationFilter)">
      <summary>
            Loads an existing text document from a file.
            </summary>
      <param name="filePath">A relative or absolute path for the input file.</param>
      <param name="format">The format of the file.</param>
      <param name="filter">A serialization filter.</param>
      <remarks>
            The filter parameters is used only when the format is CustomXML or CustomBinary.
            </remarks>
      <example>
            The following example loads a new state and repaints the control:
            <code lang="VB">
            ntext documentControl1.Serializer.LoadControlStateFromFile("c:\text document.bin", PersistencyFormat.Binary, Nothing)
            ntext documentControl1.Refresh()
            </code><code>
            ntext documentControl1.Serializer.LoadControlStateFromFile("c:\text document.bin", PersistencyFormat.Binary, null);
            ntext documentControl1.Refresh();
            </code></example>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NTextDocumentComponentSerializer.SaveControlStateToStream(System.IO.Stream,Nevron.Serialization.PersistencyFormat,Nevron.Serialization.INSerializationFilter)">
      <summary>
            Saves the text document in the passed stream.
            </summary>
      <param name="stream">The stream to load the state from.</param>
      <param name="format">The format of the stream.</param>
      <param name="filter">A serialization filter.</param>
      <remarks>
            You're responsible for the stream creation and closure. The filter parameter is used only when the format is CustomXML or CustomBinary.
            </remarks>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NTextDocumentComponentSerializer.LoadControlStateFromStream(System.IO.Stream,Nevron.Serialization.PersistencyFormat,Nevron.Serialization.INSerializationFilter)">
      <summary>
            Loads the text document from the passed stream.
            </summary>
      <param name="stream">The stream to save the state to.</param>
      <param name="format">The format of the stream.</param>
      <param name="filter">A serialization filter.</param>
      <remarks>
            You're responsible for the stream creation and closure. The filter parameters is used only when the format is CustomXML or CustomBinary.
            </remarks>
    </member>
    <member name="T:Nevron.GraphicsCore.Shapes.NPieShape">
      <summary>
            Summary description for NPieShape.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Shapes.NLineDiagonalCrossShape">
      <summary>
            Summary description for NLineDiagonalCrossShape.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Shapes.NGraphicsPaintContext">
      <summary>
            Summary description for NGraphicsPaintContext.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NPdfRenderSurface">
      <summary>
            Represents an PDF render surface
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NPdfRenderSurface.PdfDocument">
      <summary>
            Obtains the PDF document rendered on this surface
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NPdfRenderSurface.PdfImageFormat">
      <summary>
            Gets/sets the pdf image format associated with this render surface
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NArgbColor">
      <summary>
            Represents a color in ARGB color space
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NArgbColor.GetArgbColorValue(Nevron.GraphicsCore.INDevice)">
      <summary>
            Gets the ARGB color representation of this color on the specified device
            </summary>
      <param name="device">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NArgbColor.GetArgbColorValueF(Nevron.GraphicsCore.INDevice)">
      <summary>
            Gets the ARGB color representation of this color on the specified device
            </summary>
      <param name="device">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NArgbColor.Invert">
      <summary>
            Returns the inverse of this color
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NArgbColor.ToGrayscale">
      <summary>
            Returns a grayscale color
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NArgbColor.ToColor">
      <summary>
            Returns the System.Drawing color representation of this color
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NArgbColor.ToString">
      <summary>
            Returns the string representation of this NColor object.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NArgbColor.Equals(System.Object)">
      <summary>
            Returns true if the objects are equal
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NArgbColor.GetHashCode">
      <summary>
            Overriden to avoid compilation warnings
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NArgbColor.Clone">
      <summary>
            Creates an exact replica of this object
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NArgbColor.A">
      <summary>
            Gets the alpha component of this color
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NArgbColor.R">
      <summary>
            Gets the red component of this color
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NArgbColor.G">
      <summary>
            Gets the green component of this color
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NArgbColor.B">
      <summary>
            Gets the blue component of this color
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NArgbColor.RGB">
      <summary>
            Gets the RGB components of this color
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NArgbColor.ColorType">
      <summary>
            Gets the type of the color (ARGB, Indexed etc.)
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NArgbColor.Intensity">
      <summary>
            Returns the intensity of this color
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NArgbColor.IsTransparent">
      <summary>
            Returns true if the color is fully transparent
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NArgbColor.IsTranslucent">
      <summary>
            Returns true if the color is parially transparent
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NColorTransform">
      <summary>
            The base for all color transform object
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NColorTransform.TransformColor(Nevron.GraphicsCore.NArgbColorValue)">
      <summary>
            Transforms a color
            </summary>
      <param name="color">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NColorTransform.TransformColor(Nevron.GraphicsCore.NArgbColorValueF@)">
      <summary>
            Transforms a color
            </summary>
      <param name="color">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NColorTransform.TransformBitmap(System.Drawing.Bitmap)">
      <summary>
            Transforms a bitmap
            </summary>
      <param name="bitmap">
      </param>
    </member>
    <member name="T:Nevron.GraphicsCore.NMargins">
      <summary>
            Represents margins as indents from the left, top, right and bottom.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NMargins.Equals(System.Object)">
      <summary>
            Returns true if the objects are equal.
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NMargins.GetHashCode">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="F:Nevron.GraphicsCore.NMargins.Left">
      <summary>
            Left margin
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NMargins.Top">
      <summary>
            Top margin
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NMargins.Right">
      <summary>
            Right margin
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NMargins.Bottom">
      <summary>
            Bottom margin
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NMargins.Empty">
      <summary>
            Empty margins (all members are 0)
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NLightModelConverter">
      <summary>
            The NLightModelConverter class serves as base class for all converters, which can convert lighting models
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NLightModelConverter.Convert(System.Object)">
      <summary>
            Must override to convert the object
            </summary>
      <param name="obj">object to convert</param>
      <returns>converted object</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NLightModelConverter.CanConvert(System.Type)">
      <summary>
            Determines whether the converter can convert objects of the specified type 
            </summary>
      <param name="type">object type</param>
      <returns>true if objects of this type can be converted, otherwise false</returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NLightModelConverter.Converts">
      <summary>
            Returns an array of types converted by this object.
            </summary>
      <remarks>
            This implementation will return all currently known types of lighting models
            </remarks>
    </member>
    <member name="T:Nevron.FormulaSheet.NInsertRowAfterVerb">
      <summary>
            The NInsertRowVerb verb is used for the insertion of a new formula section row, after a specific row
            </summary>
    </member>
    <member name="M:Nevron.FormulaSheet.NInsertRowAfterVerb.Execute">
      <summary>
            Overriden to insert a default row after the row passed as argument
            </summary>
    </member>
    <member name="F:Nevron.FormulaSheet.NInsertRowAfterVerb.Row">
      <summary>
            Reference to the row after which the default section row will be inserted
            </summary>
    </member>
    <member name="T:Nevron.Editors.NThemeExplorer">
      <summary>
            Represents a tree-view which allows for browsing among different theme parts and states.
            </summary>
    </member>
    <member name="T:Nevron.Editors.NSegmentedImageEditorForm">
      <summary>
            Summary description for NSegmentedImageEditorForm.
            </summary>
    </member>
    <member name="T:Nevron.Editors.NTextStylePreviewRenderer">
      <summary>
            Summary description for NTextStylePreviewRenderer.
            </summary>
    </member>
    <member name="P:Nevron.Editors.NTextStylePreviewRenderer.Style">
      <summary>
            Sets the NShadowStyle used to create the preview.
            </summary>
    </member>
    <member name="T:Nevron.Editors.NFormulaSheetTypeEditor">
      <summary>
            Provides facilities for the visual editing of NFormulaSheet objects.
            </summary>
    </member>
    <member name="M:Nevron.Editors.NFormulaSheetTypeEditor.Edit(Nevron.FormulaSheet.NFormulaSheet,Nevron.FormulaSheet.NFormulaSheet@)">
      <summary>
            Edits the specified formula sheet
            </summary>
      <param name="formulaSheet">
      </param>
      <param name="formulaSheetResult">
      </param>
      <returns>
      </returns>
      <remarks>
            If the function returns true then the out parameter holds a valid formula sheet.
            </remarks>
    </member>
    <member name="T:Nevron.Editors.NHostableUserControl">
      <summary>
            Represents a user control, which can be hosted in a NUserControlHostForm. 
            </summary>
    </member>
    <member name="M:Nevron.Editors.NHostableUserControl.GetFormTitle">
      <summary>
            Gets the title of the form
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Editors.NHostableUserControl.GetFormMaximizeBox">
      <summary>
            Indicates whether the host form should have a maximize box
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Editors.NHostableUserControl.GetFormMinimizeBox">
      <summary>
            Indicates whether the host form should have a minimize box
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Editors.NHostableUserControl.GetFormSizable">
      <summary>
            Indicates whether the host form should be sizable
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Editors.NHostableUserControl.GetFormShowCaptionImage">
      <summary>
            Indicates whether the host form should show a caption image
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Editors.NHostableUserControl.GetFormResizeToFit">
      <summary>
            Indicates whether the host form should be resized to fit the user control
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Editors.NHostableUserControl.GetFormButtons">
      <summary>
            Gets a mask describing the buttons which the user control needs from the form
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Editors.NHostableUserControl.GetFormBorderStyle">
      <summary>
            Determises the host form border style (in Windows Default Theme)
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Editors.NHostableUserControl.OnFormOKButtonClicked">
      <summary>
            Called when the form OK button was clicked. Return true to hide the form
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Editors.NHostableUserControl.OnFormCancelButtonClicked">
      <summary>
            Called when the form Cancel button was clicked. Return true to hide the form
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Editors.NHostableUserControl.OnFormApplyButtonClicked">
      <summary>
            Called when the form Apply button was clicked
            </summary>
    </member>
    <member name="M:Nevron.Editors.NHostableUserControl.OnFormCloseButtonClicked">
      <summary>
            Called when the form Close button was clicked. Return true to hide the form
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Editors.NHostableUserControl.ShowInHostForm">
      <summary>
            Shows the user control in a NUserControlHostForm 
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Editors.NHostableUserControl.GetFormOKButton">
      <summary>
            Gets a reference to the OK button of the form 
            </summary>
    </member>
    <member name="M:Nevron.Editors.NHostableUserControl.GetFormCancelButton">
      <summary>
            Gets a reference to the Cancel button of the form 
            </summary>
    </member>
    <member name="M:Nevron.Editors.NHostableUserControl.GetFormApplyButton">
      <summary>
            Gets a reference to the Apply button of the form 
            </summary>
    </member>
    <member name="M:Nevron.Editors.NHostableUserControl.GetFormCloseButton">
      <summary>
            Gets a reference to the Close button of the form 
            </summary>
    </member>
    <member name="P:Nevron.Editors.NHostableUserControl.HostForm">
      <summary>
            Gets a reference to the form which host the user control (can be null)
            </summary>
    </member>
    <member name="T:Nevron.Editors.NImageListBuilder">
      <summary>
            Base for all UI node builders
            </summary>
    </member>
    <member name="T:Nevron.Editors.NListBoxItemBuilder">
      <summary>
            Summary description for NListBoxItemBuilder.
            </summary>
    </member>
    <member name="T:Nevron.Editors.NLocalizationManagerEditor">
      <summary>
            This form is used to edit the current localization manager dictionaries.
            </summary>
    </member>
    <member name="M:Nevron.Editors.NLocalizationManagerEditor.LoadData(System.String)">
      <summary>
            Opens the localization data from the specified file for editing.
            </summary>
      <param name="fileName">
      </param>
    </member>
    <member name="M:Nevron.Editors.NLocalizationManagerEditor.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NUIPanel">
      <summary>
            Represents an extended control with support for scrolling and borders.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NUIPanel.ApplyPalette(Nevron.UI.WinForm.Controls.NPalette)">
      <summary>
            Updates the local palette from the specified one.
            </summary>
      <param name="palette">The palette to update from.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NUIPanel.InitDefaultColors">
      <summary>
            Initializes the default colors (if not explicitly set) to be used for filling.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NUIPanel.OnPaletteChanged(Nevron.UI.WinForm.Controls.NPalette,Nevron.UI.WinForm.Controls.PaletteChangeEventArgs)">
      <summary>
            Handles any change in the Palette member.
            </summary>
      <param name="Palette">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NUIPanel.EnableSkinning">
      <summary>
            Gets/sets a value indicating whether the control will use skin logic.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NUIPanel.Skin">
      <summary>
            Gets/sets the local NSkin instance to be used when painting this control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NUIPanel.CurrentSkin">
      <summary>
            Gets the current skin to be used by this instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NUIPanel.Palette">
      <summary>
            Gets/sets the NPalette used to render the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NUIPanel.PaletteInheritance">
      <summary>
            Gets/sets a value which Palette value will be applied on a higher level Palette change.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NUIPanel.Border">
      <summary>
            Gets the NControlBorder object that manages the border around the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NUIPanel.BorderWidth">
      <summary>
            Gets the preffered width of the border.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NUIPanel.IsBorderHot">
      <summary>
            Gets a value indicating whether the border should be drawn in its default state (works only if the border is interactive).
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NUIPanel.DefaultBorderStyle">
      <summary>
            Gets the default border style for the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NUIPanel.DefaultBaseBorderColor">
      <summary>
            Gets the default base color to use when drawing 3D borders.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NUIPanel.ScrollBarRenderer">
      <summary>
            Gets/sets the renderer which handles scrollbar painting.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NUIPanel.HScrollValueChanged">
      <summary>
            Fired when the value of the HScroll has changed.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NUIPanel.VScrollValueChanged">
      <summary>
            Fired when the value of the VScroll has changed.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NUIPanel.ElementBounds">
      <summary>
            Gets the rectangle to be occupied by the hosted element.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NUIPanel.AutoScroll">
      <summary>
            Gets/sets a value indicating whether the control will automatically display scrollbars.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NUIPanel.HScroll">
      <summary>
            Gets the object containing horizontal properties.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NUIPanel.VScroll">
      <summary>
            Gets the object containing vertical properties.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NUIPanel.MinScrollSize">
      <summary>
            Gets/sets the minimum scroll size.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NUIPanel.ScrollMargin">
      <summary>
            Gets/sets the scroll margin. That is the offset from the scrollbars.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NUIPanel.ClientPadding">
      <summary>
            Gets the NPadding attribute which specified the internal client padding.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NUIPanel.FillInfo">
      <summary>
            Gets the object which controls the filling of the panel.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NTrackBarRenderer">
      <summary>
            Summary description for NTrackBarRenderer.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NScrollBarElementRenderer">
      <summary>
            Represents a class which handles rendering of NScrollBarElement instances.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NScrollBarElementRenderer.Render(System.Drawing.Graphics,Nevron.UI.NScrollBarElement)">
      <summary>
            Renders the entire scrollbar element on the specified graphics surface.
            </summary>
      <param name="g">The graphics surface to draw onto.</param>
      <param name="element">The scrollbar element which is to be painted.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NScrollBarElementRenderer.RenderShaft(System.Drawing.Graphics,Nevron.UI.NScrollBarElement)">
      <summary>
            Renders the shaft portion of the scrollbar.
            </summary>
      <param name="g">The graphics surface to paint onto.</param>
      <param name="element">The scrollbar element which requests the painting.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NScrollBarElementRenderer.RenderThumb(System.Drawing.Graphics,Nevron.UI.NScrollBarElement)">
      <summary>
            Renders the thumb of the scrollbar.
            </summary>
      <param name="g">The graphics surface to paint onto.</param>
      <param name="element">The scrollbar element which requests the painting.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NScrollBarElementRenderer.RenderButton(System.Drawing.Graphics,Nevron.UI.NScrollBarButtonElement)">
      <summary>
            Renders a scrollbar button.
            </summary>
      <param name="g">The graphics surface to paint onto.</param>
      <param name="button">The scrollbar button element which requests the painting.</param>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NScrollBarElementRenderer.Palette">
      <summary>
            Gets the current palette to be used.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NBitmapHelper">
      <summary>
            Summary description for NBitmapHelper.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NBitmapHelper.FromFile(System.String)">
      <summary>
            Loads the specified bitmap without loosing its alpha channel
            </summary>
      <param name="fileName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NListBox">
      <summary>
            Represents a standard ListBox which implements custom drawing and support for custom items.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NListBox.EnableSkinning">
      <summary>
            Gets/sets a value indicating whether the control will use skin logic.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NListBox.Skin">
      <summary>
            Gets/sets the local NSkin instance to be used when painting this control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NListBox.CurrentSkin">
      <summary>
            Gets the current skin to be used by this instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NListBox.PaletteInheritance">
      <summary>
            Gets/sets a value which Palette value will be applied on a higher level Palette change.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NListBox.Renderer">
      <summary>
            Gets/sets the Renderer for the NListBox. Note that if setting the renderer it must be a NListBoxRenderer.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NListBox.Palette">
      <summary>
            Gets/sets the NPalette used to render the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NListBox.ImageList">
      <summary>
            Gets/sets the ImageList associated with the ListBox.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NListBox.Border">
      <summary>
            Gets the NControlBorder object that manages the border around the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NListBox.BorderWidth">
      <summary>
            Gets the preffered width of the border.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NListBox.IsBorderHot">
      <summary>
            Gets a value indicating whether the border should be drawn in its default state (works only if the border is interactive).
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NListBox.DefaultBorderStyle">
      <summary>
            Gets the default border style for the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NListBox.DefaultBaseBorderColor">
      <summary>
            Gets the default base color to use when drawing 3D borders.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NListBox.ScrollBarRenderer">
      <summary>
            Gets/sets the renderer which handles scrollbar painting.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NListBox.UseCustomScrollBars">
      <summary>
            Determines whether to use custom scrollbars or use the default windows ones (better performance).
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NListBox.ClientMouse">
      <summary>
            Gets the current mouse position in client coordinates.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NListBox.CheckedChanged">
      <summary>
            Notifies of an item check state change.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NListBox.ShowFocusRect">
      <summary>
            Gets/sets a value indicating whether the listbox will display a focus rect on its focused item.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NListBox.CheckedItems">
      <summary>
            Gets the checked items in the Items collection.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NListBox.DrawMode">
      <summary>
            Gets/sets the DrawMode for the ListBox.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NListBox.ItemHeight">
      <summary>
            Gets/sets the height of an item in the ListBox.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NListBox.CheckBoxes">
      <summary>
            Gets/sets a value indicating whether the listbox will act as a CheckListBox.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NListBox.CheckStyle">
      <summary>
            Gets/sets the style of checkboxes (if such are specified).
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NListBox.CheckOnClick">
      <summary>
            Gets/sets a value indicating whether an item checked state will change on a left mouse button double click.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NListBox.ColumnOnLeft">
      <summary>
            Gets/sets a value whether the NListBox will have column on its left side for displaying images.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NListBox.SelectedItemTag">
      <summary>
            Gets the Tag property of the currently selected NListBoxItem.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NListBox.DefaultImageIndex">
      <summary>
            Gets/sets the default image index to be applied on the items(if their own is not specified)
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NListBox.ImageSize">
      <summary>
            Gets/sets the size into which to draw item image.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NGrouper">
      <summary>
            Represents a custom group control with header and footer items.
            The Header and Footer UIItems are completely customizable allowing for full control over their appearance.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NShadowDecorator">
      <summary>
            Represents a standard decorator which adds additional decoration - a shadow.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NShadowDecorator.InitializeDefault">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NShadowDecorator.GetRenderRect">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NShadowDecorator.DoPaint(System.Drawing.Graphics)">
      <summary>
      </summary>
      <param name="g">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NShadowDecorator.UpdateFromPalette(Nevron.UI.WinForm.Controls.NPalette)">
      <summary>
      </summary>
      <param name="palette">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NShadowDecorator.ShouldSerializeShadowInfo">
      <summary>
            Determines whether the ShadowInfo member should be serialized by the designer.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NGrouper.InitializeDefault">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NGrouper.RenderFilling(System.Drawing.Graphics)">
      <summary>
      </summary>
      <param name="g">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NGrouper.InitDefaultColors">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NGrouper.RenderHeader(System.Drawing.Graphics)">
      <summary>
            Performs the header render logic.
            </summary>
      <param name="g">The graphics surface to draw onto.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NGrouper.RenderFooter(System.Drawing.Graphics)">
      <summary>
            Performs the footer render logic.
            </summary>
      <param name="g">The graphics surface to draw onto.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NGrouper.ShouldSerializeClientPadding">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NGrouper.ElementBounds">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NGrouper.DisplayRectangle">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NGrouper.HeaderFillInfo">
      <summary>
            Gets the object which contains information about the header filling.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NGrouper.HeaderStrokeInfo">
      <summary>
            Gets the object which contains information about the header stroke.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NGrouper.HeaderItem">
      <summary>
            Gets the NImageAndTextItem instance hosted by the header.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NGrouper.FooterFillInfo">
      <summary>
            Gets the object which contains information about the footer filling.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NGrouper.FooterStrokeInfo">
      <summary>
            Gets the object which contains information about the footer stroke.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NGrouper.FooterItem">
      <summary>
            Gets the NImageAndTextItem instance hosted by the footer.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NFrameCaptionButtonCollection">
      <summary>
            Represents a collection of user defined frame caption buttons
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NFrameCaptionButtonCollection.Add(Nevron.UI.WinForm.Controls.NFrameCaptionButton)">
      <summary>
            Adds a new custom caption button to the frame's caption bar.
            </summary>
      <param name="item">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NFrameCaptionButtonCollection.Remove(Nevron.UI.WinForm.Controls.NFrameCaptionButton)">
      <summary>
            Removes the specified button from the collection.
            </summary>
      <param name="item">
      </param>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NTreeListNodeImageSubItem">
      <summary>
            A NTreeListNodeSubItem which stores Image data.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListNodeImageSubItem.Image">
      <summary>
            Gets/sets the image to be displayed by the item.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListNodeImageSubItem.ImageSize">
      <summary>
            Gets/sets the size of the displayed image.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListNodeImageSubItem.ItemType">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListNodeImageSubItem.DefaultImageSize">
      <summary>
            Gets the default value of the ImageSize property.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NTreeListColumnNotifyData">
      <summary>
            A notify data structure which contains information about a NTreeListColumn instance.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.NLightUINotifyData.NotifyCode">
      <summary>
            The unique code of the notification.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.NLightUINotifyData.PropertyKey">
      <summary>
            Additional memeber which holds the key of a property if the code is ItemPropertyChangedNotification code.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.NLightUINotifyData.Handled">
      <summary>
            Determines whether the notification is handled and no further processing is needed.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.NLightUINotifyData.Cancel">
      <summary>
            Determines whether the notification should be canceled.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.NLightUINotifyData.Data">
      <summary>
            Additional data associated with the notification.
            This varies depending on the notification code.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.NTreeListColumnNotifyData.Column">
      <summary>
            The column associated with the notification
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NFileExplorer">
      <summary>
            Represents a predefined NTreeList control which may be used to explore the file system of the current OS.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NTreeList">
      <summary>
            An extended tree-view with support for displaying tabular hierarchical data.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NTreeList.CreateGroupNode">
      <summary>
            Raised whenever a NTreeListGroupNode instance is required.
            This allows for providing user-defined group nodes.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NTreeList.ColumnNotify">
      <summary>
            Raised upon a child NTreeListColumn notification.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NTreeList.HeaderItemNotify">
      <summary>
            Raised upon a child NTreeListHeaderItem notification.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NTreeList.HeaderItemDragAction">
      <summary>
            Raised upon a child NTreeListHeaderItem drag action.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NTreeList.SubItemNotify">
      <summary>
            Raised upon a child NTreeListNodeSubItem notification.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeList.NotesStyle">
      <summary>
            Gets/sets the notes style to be applied on all NTreeListNode instances.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeList.DefaultColumnHeaderContextMenu">
      <summary>
            Determines whether the default context menu will be displayed when the user right-clicks on a column header.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeList.DefaultRowHeaderContextMenu">
      <summary>
            Determines whether the default context menu will be displayed when the user right-clicks on a row header.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeList.AutoSizeColumns">
      <summary>
            Determines whether the columns will be auto-sized to fit the current viewable width.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeList.EnableGroupBy">
      <summary>
            Determines whether the control will support GroupBy functionality.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeList.IsGrouping">
      <summary>
            Determines whether the control is in a process of grouping by a column.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeList.IsDataBound">
      <summary>
            Determines whether the control is bound to a NTreeListData instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeList.Data">
      <summary>
            Gets the NTreeListData instance bound to this control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeList.TopLeftItem">
      <summary>
            Gets the NTreeListHeaderItem which represents the top-left item.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeList.EnableColumnReorder">
      <summary>
            Determines whether the columns may be reordered using the mouse.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeList.ShowFixedColumnLine">
      <summary>
            Determines whether a visual cues will bve displayed for the fixed columns.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeList.DisplayIndentAsRowStyle">
      <summary>
            Determines whether the indentation area will be treated as part of list rows.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeList.GridInfo">
      <summary>
            Gets/sets the structure which controls the grid appearance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeList.GridColor">
      <summary>
            Gets/sets the color fo the grid lines.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeList.FixedColumnLineWidth">
      <summary>
            Gets/sets the width of the fixed column line.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeList.Columns">
      <summary>
            Gets the collection of all columns contained in the list.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeList.ColumnHeaderHeight">
      <summary>
            Gets/sets the height of the column header in the list.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeList.RowHeaderWidth">
      <summary>
            Gets/sets the width of the row header in the list.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeList.ShowColumnHeader">
      <summary>
            Determines whether the column header is visible or not.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeList.ShowGroupByBox">
      <summary>
            Determines whether the GroupByBox item will be displayed or not.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeList.ShowRowHeader">
      <summary>
            Determines whether the row header is visible or not.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeList.GroupByBoxFillInfo">
      <summary>
            Gets the NFillInfo object which controls filling of the group-by box.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeList.ColumnHeaderFillInfo">
      <summary>
            Gets the NFillInfo object which controls filling of the column header.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeList.ColumnHeaderStrokeInfo">
      <summary>
            Gets the NStrokeInfo object which controls border of the column header.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeList.FixedColumnFillInfo">
      <summary>
            Gets the NFillInfo object which controls filling of the fixed columns.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeList.SortedColumnFillInfo">
      <summary>
            Gets the NFillInfo object which controls filling of the sorted column.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeList.EvenRowFillInfo">
      <summary>
            Gets the NFillInfo object which controls filling of even rows.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeList.OddRowFillInfo">
      <summary>
            Gets the NFillInfo object which controls filling of odd rows.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeList.HeaderNormalState">
      <summary>
            Gets the visual state used to render normal header items.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeList.HeaderHotState">
      <summary>
            Gets the visual state used to render hot header items.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeList.HeaderPressedState">
      <summary>
            Gets the visual state used to render hot items.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeList.HeaderSelectedState">
      <summary>
            Gets the visual state used to render selected header items.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeList.HeaderInactiveSelectedState">
      <summary>
            Gets the visual state used to render selected header items when the control is inactive (does not contain focus).
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeList.HeaderHotSelectedState">
      <summary>
            Gets the visual state used to render selected header items when they are hot (mouse cursor is above them).
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeList.GroupNodeDefaultState">
      <summary>
            Gets the default visual state used to render group nodes.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeList.HeaderRenderer">
      <summary>
            Gets/sets the renderer used to paint header items.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeList.SubItemRenderer">
      <summary>
            Gets/sets the renderer used to paint header items.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeList.ItemsViewRectangle">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeList.ItemsHitTestRectangle">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeList.ColumnHeaderRectangle">
      <summary>
            Gets the rectangle which represents the header area of the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeList.RowHeaderRectangle">
      <summary>
            Gets the rectangle which represents the header area of the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeList.ColumnsWidth">
      <summary>
            Gets the width of the header.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeList.MinimumColumnsWidth">
      <summary>
            Gets the combined minimum width of all columns.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeList.DefaultColumnHeaderHeight">
      <summary>
            Gets the minimum height of the header.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeList.DefaultRowHeaderWidth">
      <summary>
            Gets the minimum height of the header.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeList.DefaultFixedLineWidth">
      <summary>
            Gets the default width of the fixed line.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeList.MinimumGroupByBoxHeight">
      <summary>
            Gets the minimum allowed height for the group-by box.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NFileExplorer.Populate">
      <summary>
            Populates the tree with the root level nodes (logical drives).
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFileExplorer.OpenFilesOnDoubleClick">
      <summary>
            Determines whether the double-clicked file will be opened.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFileExplorer.UseSystemImages">
      <summary>
            Determines whether the nodes will use the corresponding system images.
            Changing this property will not have effect on already created nodes.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NTreeListColumnNumericFilter">
      <summary>
            A NTreeListColumnFilter derivative which works upon numeric sub-items.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NTreeListColumnFilter">
      <summary>
            Base class for all filters which may be applied on a NTreeListColumn object.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeListColumnFilter.Filter(System.Object)">
      <summary>
      </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeListColumnFilter.FilterCore(Nevron.UI.WinForm.Controls.NTreeListNodeSubItem)">
      <summary>
            Basic filter functionality method.
            </summary>
      <param name="item">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeListColumnNumericFilter.FilterCore(Nevron.UI.WinForm.Controls.NTreeListNodeSubItem)">
      <summary>
      </summary>
      <param name="item">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListColumnNumericFilter.Options">
      <summary>
            Gets/sets the CommonNumericOptions value which determines the core filter functionality.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListColumnNumericFilter.PrimaryValue">
      <summary>
            Gets/sets the first value of the filter. Used in all operations.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListColumnNumericFilter.SecondaryValue">
      <summary>
            Gets/sets the second value of the filter. Used in "Between" operation.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NCommandBarsState">
      <summary>
            Represents a class that is responsible for save/load.
            To use this class a NCommandBarsManager should be attached to a parent control.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NCommandBarsState.Save">
      <summary>
            Shows a SaveFileDialog and saves the state to the selected file.
            </summary>
      <returns>true if save succeeded, false otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NCommandBarsState.Save(System.String)">
      <summary>
            Saves the command bars manager state to the specified file
            </summary>
      <param name="path">The full path of the file to save to.</param>
      <returns>true if save succeeded, false otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NCommandBarsState.Save(System.IO.Stream)">
      <summary>
            Saves the command bars manager state to the specified stream
            </summary>
      <param name="stream">The stream to write to. You are responsible for creating and closing it.</param>
      <returns>true if save succeeded, false otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NCommandBarsState.Load">
      <summary>
            Shows an OpenFileDialog and loads an existing state.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NCommandBarsState.Load(System.String)">
      <summary>
            Deserializes a previously saved NCommandBarsManager state.
            </summary>
      <param name="path">The full path to the file that contains serialization info.</param>
      <returns>True if deserialization succeeds, false otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NCommandBarsState.Load(System.IO.Stream)">
      <summary>
            Reads manager data from a stream.
            </summary>
      <param name="stream">The stream to read from.</param>
      <returns>True if reading was successful, false otherwise.</returns>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandBarsState.Manager">
      <summary>
            Gets/sets the NCommandBarsManager the state is attached to.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandBarsState.PersistencyFlags">
      <summary>
            Gets/sets the flags which indicate what parts of the manager need to be serialized
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NColorPool">
      <summary>
            Represents a custom control that mimics the color pool in the standard ColorDialog.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NColorPool.Color">
      <summary>
            Gets/sets the current color of the pool.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NColorPool.Hue">
      <summary>
            Gets/sets the current hue value of the pool.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NColorPool.Saturation">
      <summary>
            Gets/sets the current saturation value of the pool.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NColorPool.Luminance">
      <summary>
            Gets/sets the current Luminance value of the pool.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NColorPicker">
      <summary>
            Represents a composite control with 4 different styles for choosing color values.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NColorPicker.LockUpdate">
      <summary>
            Allows suspending of all color updating methods.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NColorPicker.Color">
      <summary>
            Gets/sets the color currently edited by the NColorPicker.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NColorPicker.CanEditAlpha">
      <summary>
            Gets/sets a value whether the color picker has a scroll to edit alpha value.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NAnimationSurface">
      <summary>
            Summary description for NAnimationSurface.
            </summary>
    </member>
    <member name="T:Nevron.UI.INImageAnimationSurface">
      <summary>
            Summary description for INAnimationSurface.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NAnimationSurface.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NAnimationSurface.ShouldSerializeImage">
      <summary>
            Determines whether the Image property should be serialized by the designer.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NAnimationSurface.AnimationInfo">
      <summary>
            Gets the object containing information about the animation process.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NAnimationSurface.AnimationSurface">
      <summary>
            Gets the rectangular area where to perform animation.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NAnimationSurface.SourceRect">
      <summary>
            Gets the source rectangle of the animation image.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NAnimationSurface.AnimationBegin">
      <summary>
            Fired when an animation operation has been started.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NAnimationSurface.AnimationEnd">
      <summary>
            Fired when the animation operation is finished.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NAnimationSurface.Image">
      <summary>
            Gets/sets the segmented image to be used for animations.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NAnimationSurface.Animating">
      <summary>
            Gets a value whether the control is currently animating itself.
            </summary>
    </member>
    <member name="T:Nevron.UI.NNullableAppearanceStyleTypeEditor">
      <summary>
            Summary description for NNullableTypeEditor.
            </summary>
    </member>
    <member name="T:Nevron.UI.NThemePart">
      <summary>
            Summary description for NThemePart.
            </summary>
    </member>
    <member name="T:Nevron.UI.NSegmentedImage">
      <summary>
            Summary description for NSegmentedBitmap.
            </summary>
    </member>
    <member name="M:Nevron.UI.NSegmentedImage.ShouldSerializeMargins">
      <summary>
            Determines whether the Margins property should be serialized
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.NSegmentedImage.Image">
      <summary>
            Gets/sets the image.
            </summary>
    </member>
    <member name="P:Nevron.UI.NSegmentedImage.Margins">
      <summary>
            Gets the NPadding object which specifies the margins of the object.
            </summary>
    </member>
    <member name="P:Nevron.UI.NSegmentedImage.SizeMode">
      <summary>
            Gets/sets the a value which specifies how the image is treated.
            </summary>
    </member>
    <member name="P:Nevron.UI.NSegmentedImage.UseSegmentedStretch">
      <summary>
            Gets/sets the a value whether segmented stretch to be used if SizeMode is ImageSizeMode.Stretch
            </summary>
    </member>
    <member name="P:Nevron.UI.NSegmentedImage.ExtractImageParts">
      <summary>
            Gets/sets the a value whether the segmented image will cache the parts of the original image.
            </summary>
    </member>
    <member name="P:Nevron.UI.NSegmentedImage.LockEvents">
      <summary>
            Optionally locks event firing.
            </summary>
    </member>
    <member name="P:Nevron.UI.NSegmentedImage.VisibleSegments">
      <summary>
            Gets/sets the segments that are visible (painted).
            </summary>
    </member>
    <member name="T:Nevron.UI.NTriangleShape">
      <summary>
            Summary description for NArrowShape.
            </summary>
    </member>
    <member name="T:Nevron.UI.NPathShape">
      <summary>
            Summary description for NPathShape.
            </summary>
    </member>
    <member name="P:Nevron.UI.NTriangleShape.Direction">
      <summary>
            Gets/sets the direction of the triangle.
            </summary>
    </member>
    <member name="T:Nevron.UI.Themes.System.NClassicScrollbarRenderer">
      <summary>
            Summary description for NClassicScrollbarRenderer.
            </summary>
    </member>
    <member name="T:Nevron.UI.Themes.System.NButtonRenderer">
      <summary>
            Will handle rendering of button parts for a System theme.
            </summary>
    </member>
    <member name="P:Nevron.UI.Themes.System.NButtonRenderer.RenderMask">
      <summary>
            This renderer will handle backgrounds and glyphs
            </summary>
    </member>
    <member name="T:Nevron.UI.Themes.Office2003.Office2003ColorEntry">
      <summary>
            Summary description for Office2003ColorEntry.
            </summary>
    </member>
    <member name="T:Nevron.UI.PopupParts">
      <summary>
            Summary description for PopupParts.
            </summary>
    </member>
    <member name="T:Nevron.UI.NTooltipPlacementInfo">
      <summary>
            Summary description for NTooltipPlacementInfo.
            </summary>
    </member>
    <member name="T:Nevron.UI.ToolStrips.NSplitButtonItem">
      <summary>
            Summary description for NSplitButtonItem.
            </summary>
    </member>
    <member name="T:Nevron.UI.ToolStrips.NToolItemGroup">
      <summary>
            Summary description for NUIItemGroup.
            </summary>
    </member>
    <member name="T:Nevron.UI.ToolStrips.INToolItemGroup">
      <summary>
            Summary description for INToolItemGroup.
            </summary>
    </member>
    <member name="P:Nevron.UI.ToolStrips.NToolItemGroup.IsVisible">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.ToolStrips.NToolItemGroup.Strip">
      <summary>
            Gets the strip that currently parents this item.
            </summary>
    </member>
    <member name="T:Nevron.UI.NProgressBarElement">
      <summary>
            Represents an element which indicates certain progress.
            </summary>
    </member>
    <member name="T:Nevron.UI.NCheckElement">
      <summary>
            Represents the base class for check button elements - RadioBox, CheckBox, CheckButton, RadioButton
            </summary>
    </member>
    <member name="M:Nevron.UI.NCheckElement.SetCheckState(System.Windows.Forms.CheckState)">
      <summary>
            Applies the specified check state to the element.
            Depending on the current instance the specified parameter may be altered.
            </summary>
      <param name="state">
      </param>
    </member>
    <member name="M:Nevron.UI.NCheckElement.OnCheckStateChanged(System.EventArgs)">
      <summary>
            Notifies a change in the current check state.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.NCheckElement.ToggleCheckState">
      <summary>
            Toggles the current check state.
            </summary>
    </member>
    <member name="M:Nevron.UI.NCheckElement.UpdateMutuallyExclusive">
      <summary>
            Updates all the mutually exclusive check elements within the current container.
            </summary>
    </member>
    <member name="M:Nevron.UI.NCheckElement.ShouldSerializeCheckState">
      <summary>
            Determines whether the CheckState property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NCheckElement.ShouldSerializeThreeStates">
      <summary>
            Determines whether the ThreeStates property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NCheckElement.ShouldSerializeAutoCheck">
      <summary>
            Determines whether the AutoCheck property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="E:Nevron.UI.NCheckElement.CheckStateChanged">
      <summary>
            Fired when the CheckState member of the element has changed.
            </summary>
    </member>
    <member name="P:Nevron.UI.NCheckElement.SupportThreeCheckState">
      <summary>
            Determines whether the element supports three states.
            </summary>
    </member>
    <member name="P:Nevron.UI.NCheckElement.IsMutuallyExclusive">
      <summary>
            Determines whether only one check element of the same type is allowed per container
            </summary>
    </member>
    <member name="P:Nevron.UI.NCheckElement.CheckState">
      <summary>
            Gets/sets a value indicating whether the element is currently checked.
            </summary>
    </member>
    <member name="P:Nevron.UI.NCheckElement.ThreeStates">
      <summary>
            Gets/sets a value indicating whether the element will allow the user to select the three available states.
            </summary>
    </member>
    <member name="P:Nevron.UI.NCheckElement.AutoCheck">
      <summary>
            Determines whether the element will automatically update its CheckState on user input.
            </summary>
    </member>
    <member name="P:Nevron.UI.NCheckElement.DefaultCheckState">
      <summary>
            Gets the default CheckState for the element.
            </summary>
    </member>
    <member name="P:Nevron.UI.NCheckElement.DefaultThreeStates">
      <summary>
            Gets the default ThreeStates value for the element.
            </summary>
    </member>
    <member name="P:Nevron.UI.NCheckElement.DefaultAutoCheck">
      <summary>
            Gets the default AutoCheck value for the element.
            </summary>
    </member>
    <member name="T:Nevron.UI.NTextRenderer">
      <summary>
            Summary description for NTextRenderer.
            </summary>
    </member>
    <member name="T:Nevron.UI.NAnimationEventArgs">
      <summary>
            Summary description for NAnimationEventArgs.
            </summary>
    </member>
    <member name="P:Nevron.UI.NAnimationEventArgs.Context">
      <summary>
            Gets the context associated with the current animation process.
            </summary>
    </member>
    <member name="P:Nevron.UI.NAnimationEventArgs.Animatable">
      <summary>
            Gets the INAnimatable instance associated with the animation operation.
            </summary>
    </member>
    <member name="P:Nevron.UI.NAnimationEventArgs.Animation">
      <summary>
            Gets the INAnimatable instance associated with the animation operation.
            </summary>
    </member>
    <member name="T:Nevron.SmartShapes.NLineToRow">
      <summary>
            The NLineToRow class represents a path command row, 
            which plots a line from the previous command (X, Y) cells to this row (X, Y) cells.
            </summary>
    </member>
    <member name="M:Nevron.SmartShapes.NLineToRow.Clone">
      <summary>
            Creates an identical copy of this object
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.SmartShapes.NLineToRow.CreatePathCommand">
      <summary>
            Creates a path command, which represents this path command row type
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.SmartShapes.NLineToRow.Type">
      <summary>
            Overriden to return LineTo
            </summary>
    </member>
    <member name="T:Nevron.NewGraphics.Pdf.lIll1lIl.Keys">
      <summary>
            Predefined keys of this dictionary.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NShadowStyle">
      <summary>
            Base class for all shadow classes
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NShadowStyle.IsPrimitiveStyle">
      <summary>
            Returns true if this appearance style is a primitive appearance style (fill style, stroke style or shadow style).
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NShadowStyle.OnDrawPreview(Nevron.GraphicsCore.lIIIIllI,Nevron.GraphicsCore.NSizeF)">
      <summary>
            Draws a preview of the style on the specified device.
            </summary>
      <param name="device">
      </param>
      <param name="size">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NShadowStyle.GetDescription">
      <summary>
            Returns a short description of this shadow style.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NShadowStyle.GetPaintableRect(Nevron.GraphicsCore.NRectangleF,Nevron.GraphicsCore.l1IlllI1)">
      <summary>
            Obtains the paintable rectangle associated with this shadow style.
            </summary>
      <param name="shapeRect">
      </param>
      <param name="lengthConverter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NShadowStyle.Type">
      <summary>
            Controls the type of the shadow
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NShadowStyle.Offset">
      <summary>
            Controls the shadow offset
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NShadowStyle.OffsetX">
      <summary>
            Gets/sets the X shadow offset 
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NShadowStyle.OffsetY">
      <summary>
            Gets/sets the Y shadow offset 
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NShadowStyle.Color">
      <summary>
            Specifies the color of the shadow
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NShadowStyle.FadeLength">
      <summary>
            Controls the length of the fading area
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NShadowStyle.Scale">
      <summary>
            Scales the shadow.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NListStyle">
      <summary>
            Defines the appearance of list items when drawing formatted texts.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NListStyle.OnDrawPreview(Nevron.GraphicsCore.lIIIIllI,Nevron.GraphicsCore.NSizeF)">
      <summary>
            Draws a preview of the style on the specified device.
            </summary>
      <param name="device">
      </param>
      <param name="size">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NListStyle.GetDescription">
      <summary>
            Returns a short description of this image frame style
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NListStyle.GetPaintableRect(Nevron.GraphicsCore.NRectangleF,Nevron.GraphicsCore.l1IlllI1)">
      <summary>
            Overriden. Obtains the paintable rectangle associated with this image frame style.
            </summary>
      <param name="shapeRect">
      </param>
      <param name="lengthConverter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NListStyle.GetAttributeByName(System.String)">
      <summary>
            Gets a child or descendant attribute by its name
            </summary>
      <param name="attributeName">child name or full attribute name</param>
      <returns>a reference to the attribute</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NListStyle.GetAttributeName(Nevron.Dom.INAttribute)">
      <summary>
            Gets the name of the specified child attribute
            </summary>
      <param name="attribute">child attribute</param>
      <returns>name of the attribute</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NListStyle.SetAttributeByName(System.String,Nevron.Dom.INAttribute)">
      <summary>
            Sets a child or descendant attribute by its name
            </summary>
      <param name="attributeName">
      </param>
      <param name="attribute">
      </param>
    </member>
    <member name="P:Nevron.GraphicsCore.NListStyle.FillStyle">
      <summary>
            The fill effect applied on the list items.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NListStyle.BorderStyle">
      <summary>
            Controls the border of the list items.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NListStyle.ShadowStyle">
      <summary>
            Controls the shadow of the list items.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NListStyle.ImageFiltersStyle">
      <summary>
            The image filters style applied on list items.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NListStyle.FontStyle">
      <summary>
            Gets / sets the font style used to draw the text of list items.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NListStyle.BulletIndent">
      <summary>
            Gets/sets the indent of the bullet.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NListStyle.ParagraphIndent">
      <summary>
            Gets/sets the indent of the text following the list items.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NListStyle.FirstLineIndent">
      <summary>
            Gets/sets the indent of the first text line following the list item.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NListStyle.HozrAlign">
      <summary>
            Gets / sets the horizontal alignment of the list items text or shape.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NListStyle.Attributes">
      <summary>
            Gets an array of the child attributes of this attribute
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.GraphicsCore.NBlurImageFilter">
      <summary>
            When present in a ImageFilters collection the NBlurImageFilter class instructs the component to apply horizontal and vertical convolution matrices to the image. 
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NBlurImageFilter.SetParams(Nevron.GraphicsCore.BlurType,Nevron.GraphicsCore.NSizeL,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Updates all parameters of the blur filter.
            </summary>
      <remarks>
            It is recommended to use this function if you modify most of the parameters of the filter to optimize performance.
            </remarks>
      <param name="type">
      </param>
      <param name="size">
      </param>
      <param name="alphaChannelOnly">
      </param>
      <param name="blurLeft">
      </param>
      <param name="blurTop">
      </param>
      <param name="blurRight">
      </param>
      <param name="blurBottom">
      </param>
    </member>
    <member name="P:Nevron.GraphicsCore.NBlurImageFilter.Size">
      <summary>
            The size of the horizontal and vertical blur matrices.
            </summary>
      <remarks>
            This property defines the size of blurring applied on the image in pixels. By default set to (5, 5).
            </remarks>
    </member>
    <member name="P:Nevron.GraphicsCore.NBlurImageFilter.BlurLeft">
      <summary>
            When set to true the left corners of the image will be blured.
            </summary>
      <remarks>
            The size of the blur area depends on the Width property of the blur size. By default set to true.
            </remarks>
    </member>
    <member name="P:Nevron.GraphicsCore.NBlurImageFilter.BlurTop">
      <summary>
            When set to true the top corners of the image will be blured.
            </summary>
      <remarks>
            The size of the blur area depends on the Height property of the blur size. By default set to true.
            </remarks>
    </member>
    <member name="P:Nevron.GraphicsCore.NBlurImageFilter.BlurRight">
      <summary>
            When set to true the right corners of the image will be blured.
            </summary>
      <remarks>
            The size of the blur area depends on the Width property of the blur size. By default set to true.
            </remarks>
    </member>
    <member name="P:Nevron.GraphicsCore.NBlurImageFilter.BlurBottom">
      <summary>
            When set to true the bottom corners of the image will be blured.
            </summary>
      <remarks>
            The size of the blur area depends on the Height property of the blur size.
            </remarks>
    </member>
    <member name="P:Nevron.GraphicsCore.NBlurImageFilter.AlphaChannelOnly">
      <summary>
            Whether or not to blur the alpha channel or all color channels of the image (ARGB).
            </summary>
      <remarks>
            Blurring the alpha channel only is faster than blurring the RGBA channels, but will produce good results only for black images or for blur filters with small convolution kernel.
            </remarks>
    </member>
    <member name="T:Nevron.GraphicsCore.NRectangleL">
      <summary>
            The NRectangleL class represents a rectangle, the location and dimensions of which are expressed with NLength units
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangleL.Equals(System.Object)">
      <summary>
            Overriden to compare the margins lengths
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangleL.ToString">
      <summary>
            Obtains the string representation of this margins.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangleL.Parse(System.String@,Nevron.GraphicsCore.NMeasurementSystemManager)">
      <summary>
            Converts the string representation of a margins structure to its NRectangleL equivalent.
            </summary>
      <param name="s">
      </param>
      <param name="measurementSystemManager">
      </param>
      <returns>
      </returns>
    </member>
    <member name="F:Nevron.GraphicsCore.NRectangleL.Left">
      <summary>
            Left margin.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NRectangleL.Top">
      <summary>
            Top margin.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NRectangleL.Width">
      <summary>
            Width margin.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NRectangleL.Height">
      <summary>
            Height margin.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NRectangleL.Empty">
      <summary>
            The empty (0, 0, 0, 0) margins.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NResolution">
      <summary>
            Describes a device horizontal and vertical resolution in dots per inch.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NResolution.Equals(System.Object)">
      <summary>
      </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NResolution.GetHashCode">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NResolution.ToString">
      <summary>
            Returns the string representation of this object
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NResolution.FromWindowHandle(System.IntPtr)">
      <summary>
            Obtains the resolution from a specified window handle
            </summary>
      <param name="hwnd">
      </param>
    </member>
    <member name="P:Nevron.GraphicsCore.NResolution.DpiX">
      <summary>
            Obtains the horizontal resolution.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NResolution.DpiY">
      <summary>
            Obtains the vertical resolution.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NResolution.ScreenResolution">
      <summary>
            Obtains the screen device resolution.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Text.INParagraphRenderingContext">
      <summary>
            Summary description for INParagraphRenderingContext.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.INOverlayPaintableRenderSurface">
      <summary>
            Implemented by overlay paintable render surfaces
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.INOverlayPaintableRenderSurface.BeforeOverlayPaint(System.Object,System.Windows.Forms.PaintEventArgs)">
      <summary>
            Called before any overlay drawing commands are executed to the device attached to this render surface
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.INOverlayPaintableRenderSurface.AfterOverlayPaint(System.Object,System.Windows.Forms.PaintEventArgs)">
      <summary>
            Called after any overlay drawing commands are executed to the device attached to this render surface
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.INImageMap">
      <summary>
            Base image map interface.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.INImageMap.Clear">
      <summary>
            Resets the state of the image map.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.INImageMap.FindObject(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.l1lll11II@)">
      <summary>
            Finds the object at the given point.
            </summary>
      <param name="pt">
      </param>
      <param name="sceneTreeItemIdPair">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.GraphicsCore.INMouseEventProcessor">
      <summary>
            Implemented by objects, which can process mouse events
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.INMouseEventProcessor.OnMouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
      <summary>
            Called when the mouse is down
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.INMouseEventProcessor.OnMouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
      <summary>
            Called when the mouse is moved inside the object
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.INMouseEventProcessor.OnMouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
      <summary>
            Called when the mouse is up
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.INMouseEventProcessor.OnMouseLeave(System.Object,System.EventArgs)">
      <summary>
            Called when the mouse is leaving the object
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.INMouseEventProcessor.OnMouseHover(System.Object,System.EventArgs)">
      <summary>
            Called when the mouse hovers the object
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.INMouseEventProcessor.OnMouseEnter(System.Object,System.EventArgs)">
      <summary>
            Called when the mouse enters the object
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.INMouseEventProcessor.OnMouseWheel(System.Object,System.Windows.Forms.MouseEventArgs)">
      <summary>
            Called when the mouse wheel is scrolled
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="T:Nevron.GraphicsCore.NPdfImageFormat">
      <summary>
            Represents the PDF image format.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NPdfImageFormat.MimeType">
      <summary>
            Mime type constant for pdf documents
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NPdfImageFormat.GetMimeType">
      <summary>
            Returns the mime type of the image.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NPdfImageFormat.GetExtension">
      <summary>
            Returns the file extension of the image.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NPdfImageFormat.GetName">
      <summary>
            Obtains the name of this image format.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NPdfImageFormat.HtmlTextWriterTag">
      <summary>
            Gets the HTML tag corresponding to this image.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NPdfImageFormat.CompressContentStream">
      <summary>
            Gets or sets a value indicating whether the content stream of the pdf document is compressed.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Text.NRangeElementEnumerator">
      <summary>
            Enumerates all elements in the specified range in the document
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Text.NRangeEnumerator">
      <summary>
            Summary description for NRangeEnumerator.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.Text.NRangeEnumerator.Position">
      <summary>
            Obtains the current position in the text document
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NRangeElementEnumerator.MoveNext">
      <summary>
            Advances the enumerator to the next node in the container, which satifies the specified filter
            </summary>
      <returns>true if advance succeeded, false if the end of the container was reached</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NRangeElementEnumerator.Reset">
      <summary>
            Resets the enumerator (positions it before the first node in the container)
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.Text.NRangeElementEnumerator.Current">
      <summary>
            Obtains the current node in the container or throws an exception if the enumerator was not started or has ended
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Text.Builders.NTextDocumentBuilder">
      <summary>
            Summary description for NTextDocumentBuilder.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.Builders.NTextDocumentBuilder.Rebuild(Nevron.GraphicsCore.Text.NTextDocument,System.Object)">
      <summary>
            Rebuilds the document from the specified source
            </summary>
      <param name="document">
      </param>
      <param name="source">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.Builders.NTextDocumentBuilder.Build(System.Object)">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.TextObject.NMultiLineTextObject">
      <summary>
            Summary description for NMultiLineTextObject.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Shapes.NTriangleShape">
      <summary>
            Summary description for NTriangleShape.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Shapes.NPolygonGraphicsNode">
      <summary>
            Summary description for NPolygonGraphicsNode.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.Shapes.NPolygonGraphicsNode.Paint(Nevron.GraphicsCore.Shapes.NGraphicsPaintContext)">
      <summary>
            Paints this node.
            </summary>
      <param name="context">
      </param>
    </member>
    <member name="T:Nevron.GraphicsCore.Shapes.NFontStyleCommandNode">
      <summary>
            Summary description for NFontStyleCommandNode.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NWindowGdiRenderSurface">
      <summary>
            Summary description for NAbstractGdiRenderSurface.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NGdiRenderSurface">
      <summary>
            The base of all GDI render surfaces.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.INGdiRenderSurface">
      <summary>
            Implemented by GDI+ render surfaces.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NGdiRenderSurface.Graphics">
      <summary>
            Obtains the GDI graphics device associated with the surface.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.INPaintableRenderSurface">
      <summary>
            Implemented by render surfaces that can paint content painters
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.INPaintableRenderSurface.Paint(System.Object,System.Windows.Forms.PaintEventArgs,Nevron.GraphicsCore.l1lllll1I)">
      <summary>
            Called to paint the render surface on the specified args and with the specified content
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.INControlStyleDependentRenderSurface">
      <summary>
            Implemented by render surfaces with control style requirments for the outer control
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NWindowGdiRenderSurface.Paint(System.Object,System.Windows.Forms.PaintEventArgs,Nevron.GraphicsCore.l1lllll1I)">
      <summary>
            Called to paint the render surface on the specified args and with the specified content
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
      <param name="contentPainter">
      </param>
    </member>
    <member name="T:Nevron.GraphicsCore.N2DDeviceSWF">
      <summary>
            Represents a 2D SWF device.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.N2DDeviceSWF.ActivateElement(Nevron.Dom.INElement)">
      <summary>
            Activates an element.
            </summary>
      <param name="element">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.N2DDeviceSWF.ActivateAtomicElement(Nevron.Dom.INAtomicElement)">
      <summary>
            Activates an atomic element.
            </summary>
      <param name="atomicElement">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.N2DDeviceSWF.ActivateAtom(System.Int32)">
      <summary>
            Activates an atom.
            </summary>
      <param name="atomId">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.N2DDeviceSWF.BeginSprite">
      <summary>
            Begins a new sprite.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.N2DDeviceSWF.EndSprite">
      <summary>
            Ends the current sprite and nullifies the current animation style.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.N2DDeviceSWF.SupportsAnimation">
      <summary>
            Determines whether this device supports animation.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.N2DDeviceSWF.AutoAnimations">
      <summary>
            Determines whether this will automatically enable animations
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.N2DDeviceSWF.AnimationBounds">
      <summary>
            Gets or sets the animation bounds. Regarded only when AnimationBoundsMode is set to context
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.N2DDeviceSWF.AnimationsStyle">
      <summary>
            Gets/Sets the animations style on a device that supports animations.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NQuadraticBezierCurveF.ToString">
      <summary>
            Retsurns the string representation of this curve.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NQuadraticBezierCurveF.Subdivide">
      <summary>
            Subdivides the current quadratic bezier curve into two halves.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NQuadraticBezierCurveF.StartPoint">
      <summary>
            Gets/Sets the start point of the quadratic bezier curve.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NQuadraticBezierCurveF.ControlPoint">
      <summary>
            Gets/Sets the control point of the quadratic bezier curve.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NQuadraticBezierCurveF.EndPoint">
      <summary>
            Gets/Sets the end point of the quadratic bezier curve.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NQuadraticBezierCurveF.MiddlePoint">
      <summary>
            Gets the middle point of the quadratic bezier curve.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NArcF">
      <summary>
            Represents an arc of a circle in 2D space, defined by two points and a bow parameter
            </summary>
      <remarks>
            The arc is defined by two points, and bow parameter, which is the distance from the arc's 
            midpoint to the midpoint of its chord.
            </remarks>
    </member>
    <member name="M:Nevron.GraphicsCore.NArcF.Translate(System.Single,System.Single)">
      <summary>
            Translates the primitive with the specified amounts
            </summary>
      <param name="dx">
      </param>
      <param name="dy">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NArcF.Translate(Nevron.GraphicsCore.NPointF)">
      <summary>
            Translates the primitive with the specified offset
            </summary>
      <param name="offset">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NArcF.AddToGraphicsPath(System.Drawing.Drawing2D.GraphicsPath)">
      <summary>
            Appends the primitive to the specified graphics path
            </summary>
      <param name="path">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NArcF.ContainsOnOutline(Nevron.GraphicsCore.NPointF,System.Single)">
      <summary>
            Determines whether the outline of the primitive contains the specified point
            </summary>
      <param name="point">
      </param>
      <param name="weight">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NArcF.ContainsOnOutline(Nevron.GraphicsCore.NPointF,System.Drawing.Pen)">
      <summary>
      </summary>
      <param name="point">
      </param>
      <param name="pen">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NArcF.Equals(System.Object)">
      <summary>
      </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NArcF.GetHashCode">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NArcF.ToString">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NArcF.ToNCircleSegmentF">
      <summary>
            Converts this arc to NCircleSegmentF
            </summary>
      <returns>
      </returns>
    </member>
    <member name="F:Nevron.GraphicsCore.NArcF.Start">
      <summary>
            Start point
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NArcF.End">
      <summary>
            End point
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NArcF.Bow">
      <summary>
            Bow (distance from the arc's midpoint to the midpoint of its chord)
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NArcF.StartPoint">
      <summary>
            Gets/sets the start point of the open figure
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NArcF.EndPoint">
      <summary>
            Gets/sets the end point of the open figure
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NArcF.Bounds">
      <summary>
            Gets the minimal enclosing rectangle
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NArcF.BoundsRange">
      <summary>
            Gets the minimal enclosing 2D range
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NArcF.IsFlat">
      <summary>
            Determines whether this is a flat primitive
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NPathFigure">
      <summary>
            The NPathFigure class represents a figure, which can be drawn using an arbitrary set of path commands 
            without lifting the drawing cursor. A path figure can either be open or closed.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NPathFigure.Clone">
      <summary>
            Creates an exact replica of this object
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NPathFigure.AddToGraphicsPath(System.Drawing.Drawing2D.GraphicsPath)">
      <summary>
            Adds this figure to the specified graphics path
            </summary>
      <param name="path">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NPathFigure.Close">
      <summary>
            Closes the path figure, if it is not already closed
            </summary>
      <remarks>
            The implementation adds a line command, which connect the last with the first command and marks the figure as closed
            </remarks>
    </member>
    <member name="M:Nevron.GraphicsCore.NPathFigure.Open">
      <summary>
            Opens the path figure, if it is not already open
            </summary>
      <remarks>
            This implementation removes the last command and marks the figure as open
            </remarks>
    </member>
    <member name="M:Nevron.GraphicsCore.NPathFigure.Translate(System.Single,System.Single)">
      <summary>
            Translates this figure with the specified amounts
            </summary>
      <param name="dx">
      </param>
      <param name="dy">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NPathFigure.Scale(System.Single,System.Single,Nevron.GraphicsCore.NPointF)">
      <summary>
            Scales the figure around the specified pin with the specified scale factors
            </summary>
      <param name="scaleX">x scale</param>
      <param name="scaleY">y scale</param>
      <param name="pin">pin</param>
    </member>
    <member name="M:Nevron.GraphicsCore.NPathFigure.ConnectWithLastCommand(System.Single,System.Single)">
      <summary>
            Connects the last path command with the specified start point coordinates
            </summary>
      <remarks>
            If the figure is empty this method will add a MoveTo command to the start point.
            If the last command location is different from start point it will add a LineTo command.
            </remarks>
      <param name="startX">
      </param>
      <param name="startY">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NPathFigure.ReplaceCommand(Nevron.GraphicsCore.NPathCommand,Nevron.GraphicsCore.NPathCommand)">
      <summary>
            Replaces the specified old command with the specified new command
            </summary>
      <param name="oldCommand">
      </param>
      <param name="newCommand">
      </param>
    </member>
    <member name="P:Nevron.GraphicsCore.NPathFigure.Tag">
      <summary>
            Custom object associated with the figure
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NPathFigure.IsClosed">
      <summary>
            Determines whether this figure has been closed
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NPathFigure.IsEmpty">
      <summary>
            Determines whether the figure is empty (contains no commands)
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NPathFigure.Commands">
      <summary>
            Obtains a list of the path commands contained in this figure
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NPathFigure.FirstCommand">
      <summary>
            Obtains the first command in the commands list
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NPathFigure.LastCommand">
      <summary>
            Obtains the last command in the commands list
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NPathFigure.Bounds">
      <summary>
            Gets the bounds of this figure
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NGradAngleUnit">
      <summary>
            Represents the grad angle unit
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NGradAngleUnit.ToDegrees(System.Single)">
      <summary>
            Returns the angle converted to degrees
            </summary>
      <param name="angle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NGradAngleUnit.ToRadians(System.Single)">
      <summary>
            Returns the angle converted to radians
            </summary>
      <param name="angle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NGradAngleUnit.ToGrads(System.Single)">
      <summary>
            Returns the angle converted to grads
            </summary>
      <param name="angle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NGradAngleUnit.GetCycle">
      <summary>
            Gets the anglular cycle for this unit
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NGradAngleUnit.Normalize(System.Single)">
      <summary>
            Normalizes an angle measured in grads
            </summary>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NGradAngleUnit.ToString">
      <summary>
            Returns the string representation of this object
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NGradAngleUnit.AngleUnit">
      <summary>
            Gets the angle unit 
            </summary>
    </member>
    <member name="T:Nevron.FormulaSheet.NFormulaCellDictionary">
      <summary>
            The NFormulaCellDictionary class represents a dictionary for strongly named formula cells
            </summary>
      <remarks>
            A reference to this class can be obtained from the Cells property of the NFormulaSection class. 
            It is used to store the named cells of a formula section.
            </remarks>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaCellDictionary.Clone">
      <summary>
            Creates an identical copy of this object
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaCellDictionary.UpdateReferences(Nevron.INReferenceProvider)">
      <summary>
      </summary>
      <param name="provider">
      </param>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaCellDictionary.CreateNonSerializedObjects">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaCellDictionary.GetReferenceProvider">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaCellDictionary.ProvideReference(System.Type)">
      <summary>
      </summary>
      <param name="parentType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaCellDictionary.Add(System.String,Nevron.FormulaSheet.NFormulaCell)">
      <summary>
            Adds a cell with the specified name in the dictionary
            </summary>
      <param name="cellName">
      </param>
      <param name="cell">
      </param>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaCellDictionary.Contains(System.String)">
      <summary>
            Determines whether the dictionary contains a cell with the specified name
            </summary>
      <param name="cellName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaCellDictionary.IndexOf(System.String)">
      <summary>
            Gets the index of the cell with the specified name
            </summary>
      <param name="cellName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaCellDictionary.Remove(System.String)">
      <summary>
            Removes the cell with the specified name from the dictionary
            </summary>
      <param name="cellName">
      </param>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaCellDictionary.Clear">
      <summary>
            Clears the content of the dictionary
            </summary>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaCellDictionary.GetName(Nevron.FormulaSheet.NFormulaCell)">
      <summary>
            Gets the name of the specified formula cell
            </summary>
      <param name="cell">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaCellDictionary.GetAt(System.Int32)">
      <summary>
            Gets the cell at the specified index
            </summary>
      <param name="index">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaCellDictionary.OnChanged">
      <summary>
            Called when the collection items have changed
            </summary>
      <remarks>
            This implementation calls the OnCellsChanged method of the section
            </remarks>
    </member>
    <member name="P:Nevron.FormulaSheet.NFormulaCellDictionary.Count">
      <summary>
            Obtains the count of cells in the dictionary
            </summary>
    </member>
    <member name="T:Nevron.Editors.NBackgroundStylePreviewRenderer">
      <summary>
            Summary description for NBackgroundStylePreviewRenderer.
            </summary>
    </member>
    <member name="P:Nevron.Editors.NBackgroundStylePreviewRenderer.Style">
      <summary>
            Sets the NBackplaneStyle used to create the preview.
            </summary>
    </member>
    <member name="T:Nevron.Editors.NAnimationsStylePreviewRenderer">
      <summary>
            Summary description for NAnimationsStylePreviewRenderer.
            </summary>
    </member>
    <member name="P:Nevron.Editors.NAnimationsStylePreviewRenderer.Style">
      <summary>
            Sets the NAnimationsStyle used to create the preview.
            </summary>
    </member>
    <member name="M:Nevron.Editors.NPaintEffectStyleEditorUC.Dispose(System.Boolean)">
      <summary> 
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="T:Nevron.Editors.NFlagEnumEditor">
      <summary>
            UITypeEditor for flag enums.
            </summary>
    </member>
    <member name="T:Nevron.Editors.NFormulaSheetEditorUC">
      <summary>
            The NFormulaSheetEditorUC class is a WinForms UserControl, 
            which can be used for the visual editing of a formula sheet
            </summary>
    </member>
    <member name="M:Nevron.Editors.NFormulaSheetEditorUC.Dispose(System.Boolean)">
      <summary> 
            Clean up any resources being used.
            </summary>
    </member>
    <member name="M:Nevron.Editors.NFormulaSheetEditorUC.OnResize(System.EventArgs)">
      <summary>
            Overriden to refresh the data grids
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="P:Nevron.Editors.NFormulaSheetEditorUC.ViewStyle">
      <summary>
            Gets/sets the style in which the sheet cells are displayed
            </summary>
    </member>
    <member name="P:Nevron.Editors.NFormulaSheetEditorUC.FormulaSheet">
      <summary>
            Gets/sets the formula sheet edited by the editor
            </summary>
    </member>
    <member name="P:Nevron.Editors.NFormulaSheetEditorUC.SelectedSection">
      <summary>
            Gets a reference to the currently selected section from the sheet
            </summary>
    </member>
    <member name="P:Nevron.Editors.NFormulaSheetEditorUC.SelectedRow">
      <summary>
            Gets a reference to the currently selected section row
            </summary>
    </member>
    <member name="P:Nevron.Editors.NFormulaSheetEditorUC.SelectedSectionCell">
      <summary>
            Gets a reference to the currently selected section cell
            </summary>
    </member>
    <member name="E:Nevron.Editors.NFormulaSheetEditorUC.SelectedSectionCellChanged">
      <summary>
            Fired when the current cell of the selected section cells has changed
            </summary>
    </member>
    <member name="E:Nevron.Editors.NFormulaSheetEditorUC.SelectedRowCellChanged">
      <summary>
            Fired when the current cell of the selected section rows has changed
            </summary>
    </member>
    <member name="E:Nevron.Editors.NFormulaSheetEditorUC.SelectedSectionChanged">
      <summary>
            Fired when the currently selected section has changed
            </summary>
    </member>
    <member name="T:Nevron.Editors.NDomTreeEditorUC">
      <summary>
            Summary description for NDomTreeEditorUC.
            </summary>
    </member>
    <member name="M:Nevron.Editors.NDomTreeEditorUC.Dispose(System.Boolean)">
      <summary> 
            Clean up any resources being used.
            </summary>
    </member>
    <member name="E:Nevron.Editors.NDomTreeEditorUC.SelectedObjectChanged">
      <summary>
            Occurs when the selected object has changed
            </summary>
    </member>
    <member name="T:Nevron.Editors.NNodeContainerTabEditorUC">
      <summary>
            Summary description for NNodeContainerTabEditorUC.
            </summary>
    </member>
    <member name="M:Nevron.Editors.NNodeContainerTabEditorUC.Dispose(System.Boolean)">
      <summary> 
            Clean up any resources being used.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.StickHint">
      <summary>
            Specifies the possible hints to be used when sticking Forms.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.StickHint.None">
      <summary>
            No stick should be applied.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.StickHint.Move">
      <summary>
            The stick request comes from moving a Form.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.StickHint.Size">
      <summary>
            The stick request comes from sizing a Form.
            </summary>
    </member>
    <member name="T:Nevron.UI.NTrackBarElement">
      <summary>
            Represents a standard Windows trackbar
            </summary>
    </member>
    <member name="P:Nevron.UI.NTrackBarElement.ThumbSize">
      <summary>
            Gets/sets the width(height) of the thumb.
            If this value is acceptable it will be used. Otherwise automatic value will be calculated.
            </summary>
    </member>
    <member name="P:Nevron.UI.NTrackBarElement.TickInfo">
      <summary>
            Gets/sets the NTickInfo structure containing information about the decorations ticks.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.CommandEventArgs.Command">
      <summary>
            Gets the NCommand object associated with the event.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.CommandEventArgs.Handled">
      <summary>
            Gets/sets a value whether the event is handled.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.CommandPropertyEventArgs.PropertyName">
      <summary>
            Gets the affected property.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.CommandPropertyChangedEventArgs.OldValue">
      <summary>
            Gets the old value of the property.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.CommandPropertyChangingEventArgs.Cancel">
      <summary>
            Gets/sets a value whether the property changing should be canceled.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.CommandPropertyChangingEventArgs.NewValue">
      <summary>
            Gets the new value that will be applied on the affected property.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.MeasureCommandEventArgs.Graphics">
      <summary>
            Gets the Graphics object to measure against.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.MeasureCommandEventArgs.Size">
      <summary>
            Gets/sets the size of the command.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.MeasureCommandEventArgs.TextSize">
      <summary>
            Gets/sets the size of the text rect for the command.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.MeasureCommandEventArgs.ShortcutSize">
      <summary>
            Gets/sets the size of the text rect for the command.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.DrawCommandEventArgs.Graphics">
      <summary>
            Gets the Graphics object to draw onto.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.CommandCancelEventArgs.Cancel">
      <summary>
            Gets/sets a value whether the event should be canceled.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.CommandContextEventArgs.Context">
      <summary>
            Gets the NCommandContext object associated with the event.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.CommandContextCancelEventArgs.Cancel">
      <summary>
            Gets/sets a value whether the event should be canceled.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NListBoxItemCheckEventArgs.Item">
      <summary>
            Gets the NListBoxItem which state has changed.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NListBoxItemCheckEventArgs.Checked">
      <summary>
            Gets/sets a value indicating whether the item is checked.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.ScrollBarEventArgs.ScrollBar">
      <summary>
            Gets the NScrollBar which value has changed.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.ScrollBarEventArgs.OldValue">
      <summary>
            Gets the value before the change.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.RangeSliderEventArgs.RangeSlider">
      <summary>
            Gets the NNRangeSlide which value has changed.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.RangeSliderEventArgs.OldValue">
      <summary>
            Gets the value before the change.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.RangeSliderEventArgs.OldRange">
      <summary>
            Gets the range before the change.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.PropertyChangingEventArgs.Cancel">
      <summary>
            Gets/sets a value whether to cancel the property change.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.PropertyChangingEventArgs.PropertyName">
      <summary>
            Gets the name of the property that is changing.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.PropertyChangingEventArgs.NewValue">
      <summary>
            Gets/sets the new value that is about to be be assigned to the property.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NListBoxItem">
      <summary>
            Represents an item in a NListBox object.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NListBoxItem.Tag">
      <summary>
            Gets/sets the object that is accosiated with this item.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NListBoxItem.Text">
      <summary>
            Gets/sets the text that is accosiated with this item.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NListBoxItem.ImageIndex">
      <summary>
            Gets/sets the image index that is accosiated with this item.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NListBoxItem.Checked">
      <summary>
            Gets/sets a value whether the item is checked.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NListBoxItem.ImageSize">
      <summary>
            Gets/sets the size into which to draw item image. By default if no size is specified the one from the parent listbox is used.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NListBoxItem.Focused">
      <summary>
            Gets a value whether the item is currently the focused one.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NListBoxItem.ListBox">
      <summary>
            Gets the NListBox object that contains this item.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NListBoxItem.Index">
      <summary>
            Gets the index of the item in its parent collection.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NListBoxItem.Height">
      <summary>
            Gets/sets the height of the item. If 0 height is ItemHeight value of the parent list box.
            Works only if parent listbox DrawMode is set to DrawMode.OwnerDrawVariable.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NFontListBoxRenderer">
      <summary>
            Summary description for NFontListBoxRenderer.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NTaskDialog">
      <summary>
            Represents a modern replacement of the standard MessageBox plus feature-rich user-input dialog.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.NComponent">
      <summary>
            Base implementation of the IComponent interface.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.NComponent.Site">
      <summary>
            Gets/sets the ISite instance of this component.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.NComponent.Container">
      <summary>
            Gets the IContainer instance where this component resides.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.NComponent.DesignMode">
      <summary>
            Determines whether the component is currently in design mode.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTaskDialog.ApplyPalette(Nevron.UI.WinForm.Controls.NPalette)">
      <summary>
            Applies the specified palette.
            </summary>
      <param name="palette">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTaskDialog.ShowNonModal">
      <summary>
            Runs NTaskDialog.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTaskDialog.ShowNonModal(System.Windows.Forms.IWin32Window)">
      <summary>
            Runs NTaskDialog with specified owner.
            </summary>
      <param name="owner">Any object that implements System.Windows.Forms.IWin32Window that represents the top-level window that will own the modal dialog box.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTaskDialog.ShowNonModal(System.Windows.Forms.IWin32Window,Nevron.GraphicsCore.NRectangle)">
      <summary>
      </summary>
      <param name="owner">
      </param>
      <param name="screenBounds">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTaskDialog.Close">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTaskDialog.ShouldSerializePalette">
      <summary>
            Determines whether the Palette property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTaskDialog.Palette">
      <summary>
            Gets/sets the NPalette used to render the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTaskDialog.PaletteInheritance">
      <summary>
            Gets/sets a value which Palette value will be applied on a higher level Palette change.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NTaskDialog.Notify">
      <summary>
            Fired whenever an event occurs in the dialog.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTaskDialog.Content">
      <summary>
            Gets the NLabelElement which represents the content of the dialog.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTaskDialog.Footer">
      <summary>
            Gets the NLabelElement which represents the footer of the dialog.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTaskDialog.Verification">
      <summary>
            Gets the NCheckBoxElement which represents the verification part of the dialog.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTaskDialog.ProgressBar">
      <summary>
            Gets the NProgressBarElement which will be displayed if the ProgressType is ProgressBar.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTaskDialog.MarqueeProgress">
      <summary>
            Gets the NMarqueeProgressElement which will be displayed if the ProgressType is Marquee.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTaskDialog.FrameAppearance">
      <summary>
            Gets/sets the NFrameAppearance which controls the frame look-and-feel of the dialog.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTaskDialog.UseCustomFrame">
      <summary>
            Gets/sets a value indicating whether the dialog will use custom frame or the default one provided by the system.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTaskDialog.UsePaletteRenderer">
      <summary>
            Gets/sets a value indicating whether the dialog's elements will be displayed using a palette-base logic.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTaskDialog.Cancelable">
      <summary>
            Gets/sets a value indicating whether the dialog may be canceled (closed).
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTaskDialog.Minimizable">
      <summary>
            Gets/sets a value indicating whether the dialog may be minimized to the system TaskBar.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTaskDialog.DropShadow">
      <summary>
            Gets/sets a value indicating whether the dialog will drop a shadow.
            Available on Windows Xp and later.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTaskDialog.EnableTimer">
      <summary>
            Gets/sets a value indicating whether the dialog will start a callback timer when loaded.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTaskDialog.Title">
      <summary>
            Gets/sets the title of the dialog.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTaskDialog.UserButtons">
      <summary>
            Gets/sets an array of user-defined buttons to be displayed by the dialog.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTaskDialog.LargeUserButtons">
      <summary>
            Gets/sets an array of user-defined buttons which will be layouted vertically straight beyond the content.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTaskDialog.RadioButtons">
      <summary>
            Gets/sets an array of user-defined radio buttons to be displayed below the content.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTaskDialog.CheckedRadioButton">
      <summary>
            Gets the currently checked radio button.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTaskDialog.PreferredWidth">
      <summary>
            Gets/sets the preferred width for the dialog.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTaskDialog.DefaultButtonId">
      <summary>
            Gets/sets the ID of the default button.
            If -1 the first button is defaulted.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTaskDialog.TimerInterval">
      <summary>
            Gets/sets the interval of the timer (if enabled).
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTaskDialog.PredefinedButtons">
      <summary>
            Gets/sets the predefined buttons for this dialog.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTaskDialog.ProgressType">
      <summary>
            Gets/sets the type of the progress to be displayed by the task dialog.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTaskDialog.CaptionImage">
      <summary>
            Gets/sets the image to be displayed on the dialog's caption.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTaskDialog.EnableSkinning">
      <summary>
            Determines whether the NSkinManager.Instance.Skin will be applied on the task dialog.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTaskDialog.DisplayPosition">
      <summary>
            Determines how the location of the dialog is calculated.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NFormRenderer">
      <summary>
            Summary description for NFormRenderer.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NPopup">
      <summary>
            Represents a generic control which pops on the screen and has short life-time - such as menu windows, tool-tips, combo-box drop-down, etc.
            The popup is completely customizable regarding appearance, behavior, animations, even shadows.
            Introduced is completely innovative placement logic allowing for precise positioning and alignment of the popup - either to a target, custom bounds or the mouse.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NPopup.GetDisplayPadding">
      <summary>
            Gets the currently used internal padding.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NPopup.ShouldSerializeShadowOffset">
      <summary>
            Determines whether the ShadowOffset property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NPopup.ShouldSerializeOpacity">
      <summary>
            Determines whether the Opacity property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NPopup.ShouldSerializeRounding">
      <summary>
            Determines whether the Rounding property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NPopup.ShouldSerializeHasShadow">
      <summary>
            Determines whether the HasShadow property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NPopup.ShouldSerializeTopMost">
      <summary>
            Determines whether the TopMost property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NPopup.ShouldSerializeCanActivate">
      <summary>
            Determines whether the TopMost property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NPopup.ShouldSerializeLayered">
      <summary>
            Determines whether the Layered property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NPopup.ShouldSerializeDynamicLayered">
      <summary>
            Determines whether the DynamicLayered property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NPopup.ShouldSerializeEnableSkinning">
      <summary>
            Determines whether the EnableSkinning property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NPopup.ShouldSerializeEnableHook">
      <summary>
            Determines whether the EnableHook property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NPopup.ShouldSerializeAnimationInfo">
      <summary>
            Determines whether the AnimationInfo property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NPopup.ShouldSerializePadding">
      <summary>
            Determines whether the Padding property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NPopup.ShouldSerializeSizingHeight">
      <summary>
            Determines whether the SizingHeight property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NPopup.ShouldSerializeSizeStyle">
      <summary>
            Determines whether the SizeStyle property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NPopup.ShouldSerializePlacementInfo">
      <summary>
            Determines whether the PlacementInfo property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NPopup.ShouldSerializeSize">
      <summary>
            Determines whether the Size property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NPopup.ShouldSerializeShadowColor">
      <summary>
            Determines whether the ShadowColor property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NPopup.ShouldSerializePalette">
      <summary>
            Determines whether the Palette property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NPopup.ShouldSerializeBorderStyle">
      <summary>
            Determines whether the BorderStyle property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPopup.ShadowOffset">
      <summary>
            Gets/sets the offset to be applied on the shadow (if specified).
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPopup.Opacity">
      <summary>
            Gets/sets the opacity of the popup.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPopup.Rounding">
      <summary>
            Gets/sets the rounding style for the popup.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPopup.HasShadow">
      <summary>
            Gets/sets a value indicating whether the popup will drop a shadow.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPopup.TopMost">
      <summary>
            Gets/sets a value indicating whether the popup will be above all other windows (top-most).
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPopup.CanActivate">
      <summary>
            Determines whether the popup may become the current active window.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPopup.EnableMouseInput">
      <summary>
            Determines whether the popup may receive mouse messages.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPopup.EnableHook">
      <summary>
            Gets/sets a value indicating whether a windows message filter will be installed. If false the popup will not be closed automatically.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPopup.Layered">
      <summary>
            Gets/sets a value indicating whether the popup will use the extended WS_EX_LAYERED style for applying transparency and animations.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPopup.DynamicLayered">
      <summary>
            Gets/sets a value indicating whether the popup will update its window style while sizing. Improves performance greatly.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPopup.IsDisplayed">
      <summary>
            Determines whether the popup is currently visible.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPopup.LockOwnerFormNCPaint">
      <summary>
            Determines whether the popup's hook will lock non-client painting of its owner form while active.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPopup.AnimationInfo">
      <summary>
            Gets/sets the structure which contains information whether the popup should be animated when displayed and/or closed.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPopup.Animating">
      <summary>
            Gets a value indicating whether the popup is currently animating itself.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPopup.Padding">
      <summary>
            Gets/sets the inner padding of the popup.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPopup.SizingHeight">
      <summary>
            Gets/sets the height of the sizing gripper (if available)
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPopup.SizeStyle">
      <summary>
            Gets/sets the size style for the popup.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPopup.PlacementTarget">
      <summary>
            Gets/sets the Control instance which will be treated as a placement target.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPopup.ShadowColor">
      <summary>
            Gets/sets the color of the shadow.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPopup.PlacementInfo">
      <summary>
            Gets the object containing informating about positioning the popup.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPopup.Size">
      <summary>
            Gets/sets the size of the popup.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPopup.Location">
      <summary>
            Gets/sets the Location of the popup.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPopup.HostedControl">
      <summary>
            Gets/sets the control hosted on the popup.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPopup.Element">
      <summary>
            Gets the INUIElement instance to be hosted on the popup.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPopup.Palette">
      <summary>
            Gets/sets the NPalette used to render the popup.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPopup.PaletteInheritance">
      <summary>
            Gets/sets a value which Palette value will be applied on a higher level Palette change.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPopup.BorderStyle">
      <summary>
            Gets/sets the border style of the popup.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPopup.Background">
      <summary>
            Gets/sets the NUIShape which describes the filling of the popup.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPopup.ActivateOnDisplay">
      <summary>
            Determines whether the popup will be activated when displayed.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPopup.CloseResult">
      <summary>
            Gets the close result of the popup.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPopup.CancelKey">
      <summary>
            Gets/sets the key which closes the popup with a PopupCloseResult.Cancel
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPopup.AcceptKey">
      <summary>
            Gets/sets the key which closes the popup with a PopupCloseResult.Accept
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPopup.Owner">
      <summary>
            Gets/sets the Form instance which owns this popup.
            If null, the popup's owner will be the Desktop Window.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPopup.CanHaveShadow">
      <summary>
            Determines whether a NPopup may display shadow.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NMapNavigator">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NMapNavigator.Suspend">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NMapNavigator.Resume(System.Boolean)">
      <summary>
      </summary>
      <param name="update">
      </param>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NMapNavigator.EnableSkinning">
      <summary>
            Gets or sets a value indicating whether the control will use skin logic.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NMapNavigator.Skin">
      <summary>
            Gets or sets the local NSkin instance to be used when painting this control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NMapNavigator.CurrentSkin">
      <summary>
            Gets the current skin to be used by this instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NMapNavigator.Palette">
      <summary>
            Gets or sets the NPalette used to render the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NMapNavigator.PaletteInheritance">
      <summary>
            Gets or sets a value which Palette value will be applied on a higher level Palette change.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NMapNavigator.Renderer">
      <summary>
            Gets or sets the renderer used to draw NMapNavigator object.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NMapNavigator.ArrowClick">
      <summary>
            Fires when an arrow was clicked.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NMapNavigator.CoordinatesChanged">
      <summary>
            Fires when the value of X or Y coordiantes has changed.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NMapNavigator.IsCyclic">
      <summary>
            Gets/Sets whether the postion will start from the beginning when it reaches the end.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NMapNavigator.Step">
      <summary>
            Gets/Sets the length of step when an arrow was clicked.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NMapNavigator.X">
      <summary>
            Gets/Sets X coordinate in the navigation area.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NMapNavigator.Y">
      <summary>
            Gets/Sets Y coordinate in the navigation area.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NMapNavigator.TopLeft">
      <summary>
            Gets/Sets the top left point in the navigation area.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NMapNavigator.BottomRight">
      <summary>
            Gets/Sets the bottom right point in the navigation area.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NMapNavigator.Transparency">
      <summary>
            Gets or sets a value that indicates the transparency value of the background. 
            The value for the transparency can range from totally opaque (0) to totally transparent (255).
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NMapNavigator.ShowAdditionalArrows">
      <summary>
            Gets/Sets whether the additional arrows (NorthWest, NorthEast, SouthWest, SouthEast) should be displayed.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NMapNavigator.ShowResetArrow">
      <summary>
            Gets/Sets whether the reset arrow should be displayed.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NMapNavigator.ShowBorder">
      <summary>
            Gets/Sets whether the border circle should be displayed.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NCommandManager">
      <summary>
            Represents a top-level manager of all command contexts.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NCommandManager.GetContextsByRangeID(System.Int32,System.Boolean)">
      <summary>
            Gets all the contexts that match the specified range id and optionally excludes the ones marked as non-editorbrowsable.
            </summary>
      <param name="rangeID">The range id to search for.</param>
      <param name="includeNonBrowsable">Specifies whether to include the contexts markes as non-editorbrowsable.</param>
      <returns>An ArrayList populated with all the matches.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NCommandManager.GetEditorBrowsableContexts">
      <summary>
            Gets all the contexts that might appear in the "Customize" dialog. If a context is assigned a RangeID and that range is markes as non-browsable the context will also be non-browsable.
            </summary>
      <returns>An ArrayList populated with all the matches</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NCommandManager.GetCommandsByID(System.Int32)">
      <summary>
            Searches among all commands and gets the ones that match the specified id.
            </summary>
      <param name="id">The id to search for.</param>
      <returns>An arrayList populated with all the matches.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NCommandManager.GetAllCommands">
      <summary>
            Collects all the commands that are currently available in the framework.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NCommandManager.GetAllCommands(System.Boolean)">
      <summary>
            Collects all the visible (contained by parent) commands that are currently available in the framework.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NCommandManager.GetContexts(Nevron.UI.WinForm.Controls.ContextType)">
      <summary>
            Gets all the contexts that mathc the specifed context type.
            </summary>
      <param name="type">The ContextType to search for.</param>
      <returns>An ArrayList populated with all the matches.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NCommandManager.ProcessShortcut(System.Windows.Forms.KeyEventArgs)">
      <summary>
            Processes a keyboard shortcut combination.
            The search begins within the context collection and if a valid shortcut is found
            the Execute() method is called and the manager is told that the event is processed.
            Then the search begins for every avalilable command. If a valid shortcut is fount the
            PerformClick() method is called.
            </summary>
      <param name="e">The KeyEventArgs to examine.</param>
      <returns>True if a valid shortcut was found, false otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NCommandManager.IsRangeEditorBrowsable(System.Int32)">
      <summary>
            Searches among all the ranges to find out if a range with such id exists and if true is it marked as editor browsable.
            </summary>
      <param name="rangeID">The RangeID to search for.</param>
      <returns>True if a match is found and that match is marked as editor browsable, false otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NCommandManager.Dispose">
      <summary>
            Disposes all the contexts stored by the manager.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandManager.PropertyPage">
      <summary>
            Gets the NPropertyPage to edit this object.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NFontComboBoxCommandContext">
      <summary>
            Summary description for NFontComboBoxCommandContext.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NComboBoxCommandContext">
      <summary>
            Summary description for NComboBoxCommandContext.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NCommandContext">
      <summary>
            Represents a common, shareable context through different command visualizations.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NCommandContext.GetSerializationData">
      <summary>
            Gets the serialization data for this command context
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NCommandContext.Clone">
      <summary>
            Creates an idenctical copy of this object
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NCommandContext.CreateCommand">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NCommandContext.CanExecute">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NCommandContext.Execute">
      <summary>
            Executes the context.
            </summary>
      <returns>True if executing was successful, false otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NCommandContext.GetEnabled">
      <summary>
            Checks if commands sharing this context should be enabled.
            </summary>
      <returns>true if should be enabled, false otherwise</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NCommandContext.SetEnabled(System.Boolean)">
      <summary>
            Enables all the commands sharing that context.
            </summary>
      <param name="enable">True to enable the commands, false otherwise.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NCommandContext.GetChecked">
      <summary>
            Checks if commands sharing this context should be checked.
            </summary>
      <returns>true if should be checked, false otherwise</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NCommandContext.SetChecked(System.Boolean)">
      <summary>
            Checks all the commands sharing this context.
            </summary>
      <param name="check">True to check the commands, false otherwise.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NCommandContext.GetCommands">
      <summary>
            Gets the commands currently sharing this context.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NCommandContext.GetNestedContexts">
      <summary>
            Gets all the nested contexts, including all branches of the context tree.
            </summary>
      <returns>An array populated with the nested contexts.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NCommandContext.GetNestedContexts(Nevron.UI.WinForm.Controls.ContextType)">
      <summary>
            Gets all the nested contexts, including all branches of the context tree, that match the specified ContextType.
            </summary>
      <param name="type">The ContextType to search for.</param>
      <returns>An array populated with the matched nested contexts.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NCommandContext.UpdateCommands">
      <summary>
            Forces the parents of all commands currently sharing this context 
            to re-measure and refresh their commands.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NCommandContext.CreateContext(System.String,System.Int32,System.Windows.Forms.ImageList,System.Int32,System.Int32,Nevron.UI.WinForm.Controls.NShortcut,System.Boolean)">
      <summary>
            Creates a new NCommandContext object with its properties initialized.
            </summary>
      <param name="text">
      </param>
      <param name="id">
      </param>
      <param name="images">
      </param>
      <param name="imageIndex">
      </param>
      <param name="rangeID">
      </param>
      <param name="sc">
      </param>
      <param name="beginGroup">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandContext.Manager">
      <summary>
            Gets a refrence to a NCommandBarsManager object. Might be null.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandContext.Description">
      <summary>
            Gets the human readable description of the INShortcutProvider
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NCommandContext.Executing">
      <summary>
            Fired when a command is about to be executed. Set the Cancel property
            of the EventArgs to true to prevent the command from being executed.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NCommandContext.Executed">
      <summary>
            Fired when a command has been executed.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandContext.RangeID">
      <summary>
            Gets/sets the id of the range this context belongs to.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandContext.TooltipText">
      <summary>
            Gets/sets the text that will be displayed when the mouse hovers a command sharing this context.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandContext.ContextType">
      <summary>
            Gets the type of the current context.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandContext.Contexts">
      <summary>
            Gets nested contexts for this context.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandContext.ParentContext">
      <summary>
            Gets the context that contains this context. Might be null.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandContext.TopContext">
      <summary>
            Gets the top context that contains this context. Might return this context.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandContext.IsTopLevel">
      <summary>
            Gets a value whether this context is not parented by any other context.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandContext.EditorBrowsable">
      <summary>
            Gets/sets a value indicating whether the context will appear in the "Customize" dialog of the NCommandBarsManager.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandContext.Properties">
      <summary>
            Gets/sets the command properties for this context.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NComboBoxCommandContext.Items">
      <summary>
            Gets the ListBox.ObjectCollection for the NComboBox.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NComboBoxCommandContext.ListProperties">
      <summary>
            Gets the common properties of the drop-down listbox part.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NComboBoxCommandContext.Editable">
      <summary>
            Gets/sets a value whether the NComboBox object will have an edit portion.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NComboBoxCommandContext.PrefferedWidth">
      <summary>
            Gets/sets the preffered width of the combobox.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NComboBoxCommandContext.PrefferedHeight">
      <summary>
            Gets/sets the preffered height of the combobox.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NComboBoxCommandContext.ComboBox">
      <summary>
            Gets the NComboBox associated with the context.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NColorPickContextMenu">
      <summary>
            Represents a predefined context menu useful for selecting colors.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NMenuWindow.MenuOptions">
      <summary>
            Gets/sets the NMenuOptions object used to specify the NMenuWindow behavior.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NMenuWindow.Alignment">
      <summary>
            Gets the current alignment of the NMenuWindow.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NColorPickContextMenu.Color">
      <summary>
            Gets/sets the color value for the NColorPickContextMenu.
            </summary>
    </member>
    <member name="T:Nevron.UI.NThemeClass">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.UI.NToolStripRendererBase">
      <summary>
            Summary description for NCommandStripRendererBase.
            </summary>
    </member>
    <member name="T:Nevron.UI.NThemeStyleEntry">
      <summary>
            Summary description for NThemeStateEntry.
            </summary>
    </member>
    <member name="T:Nevron.UI.NColorTable">
      <summary>
            Represents a table of colors.
            All colors are resolved by integer ID.
            </summary>
    </member>
    <member name="M:Nevron.UI.NColorTable.GetColor(System.Int32)">
      <summary>
            Gets the color value for the specified id.
            </summary>
      <param name="id">The id of the color.</param>
      <returns>The color value if the key is contained, Color.Empty otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.NColorTable.SetColor(System.Int32,System.Drawing.Color)">
      <summary>
            Registers the specified Color to the table with the specified id.
            </summary>
      <param name="id">The id of the color.</param>
            /// <param name="value">Color value to register.</param></member>
    <member name="P:Nevron.UI.NColorTable.Count">
      <summary>
            Gets the count of the contained colors.
            </summary>
    </member>
    <member name="P:Nevron.UI.NColorTable.Colors">
      <summary>
            Gets all the colors contained in the table.
            </summary>
    </member>
    <member name="P:Nevron.UI.NThemeEventArgs.Theme">
      <summary>
            Gets the current theme associated with the event.
            </summary>
    </member>
    <member name="P:Nevron.UI.NThemeChangeEventArgs.PartStateInfo">
      <summary>
            Gets the part state info associated with the change
            </summary>
    </member>
    <member name="P:Nevron.UI.NThemeChangeEventArgs.Hint">
      <summary>
            Gets the change hint.
            </summary>
    </member>
    <member name="P:Nevron.UI.NThemeChangingEventArgs.Cancel">
      <summary>
            Gets/sets whether the current operation will be canceled.
            </summary>
    </member>
    <member name="T:Nevron.UI.GenericPartStates">
      <summary>
            Summary description for ArrowButtonStates.
            </summary>
    </member>
    <member name="T:Nevron.UI.ToolStrips.NVisualCommand">
      <summary>
            A command which might be visualized by a NToolItem instance.
            </summary>
    </member>
    <member name="T:Nevron.UI.ToolStrips.NCommand">
      <summary>
            Summary description for NCommand.
            </summary>
    </member>
    <member name="M:Nevron.UI.ToolStrips.NCommand.Execute">
      <summary>
            Performs instance specific action.
            </summary>
      <returns>True if execition was successful, false otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.ToolStrips.NCommand.Execute(System.Object)">
      <summary>
            Performs instance specific action using an additional optional parameter.
            </summary>
      <param name="param">An optional parameter.</param>
      <returns>True if execition was successful, false otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.ToolStrips.NCommand.CanExecute">
      <summary>
            Determines whether the command can be executed.
            </summary>
      <returns>True if command can be executed, false otherwise.</returns>
    </member>
    <member name="P:Nevron.UI.ToolStrips.NCommand.Enabled">
      <summary>
            Gets/sets a value indicating whether the command is currently enabled.
            This may differ from the state-specific value of the CanExecute method.
            </summary>
    </member>
    <member name="P:Nevron.UI.ToolStrips.NCommand.Name">
      <summary>
            Gets/sets the human readable name of the command.
            </summary>
    </member>
    <member name="E:Nevron.UI.ToolStrips.NCommand.Executing">
      <summary>
            Fired just before the command is about to be executed. Cancelable.
            </summary>
    </member>
    <member name="E:Nevron.UI.ToolStrips.NCommand.Executed">
      <summary>
            Fired after the command has been executed.
            </summary>
    </member>
    <member name="P:Nevron.UI.ToolStrips.NCommand.Site">
      <summary>
            Gets/sets the Site of this command.
            </summary>
    </member>
    <member name="T:Nevron.UI.ToolStrips.INVisualCommand">
      <summary>
            Summary description for INVisualCommand.
            </summary>
    </member>
    <member name="M:Nevron.UI.ToolStrips.INVisualCommand.CreateItem">
      <summary>
            Creates an item which will represents this visual command.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.ToolStrips.INVisualCommand.Items">
      <summary>
            Gets all the items associated with the current command.
            </summary>
    </member>
    <member name="M:Nevron.UI.ToolStrips.NVisualCommand.CreateItem">
      <summary>
            Creates a NCommandItem instance that will represent this command visually.
            </summary>
      <returns>The newly created item.</returns>
    </member>
    <member name="P:Nevron.UI.ToolStrips.NVisualCommand.Items">
      <summary>
            Gets an array of all the items that share this command.
            </summary>
    </member>
    <member name="P:Nevron.UI.ToolStrips.NVisualCommand.Image">
      <summary>
            Gets/sets the image used by this item.
            </summary>
    </member>
    <member name="P:Nevron.UI.ToolStrips.NVisualCommand.ImageList">
      <summary>
            Gets/sets the imagelist to be used by this item.
            </summary>
    </member>
    <member name="P:Nevron.UI.ToolStrips.NVisualCommand.Text">
      <summary>
            Gets/sets the text displayed by this item.
            </summary>
    </member>
    <member name="P:Nevron.UI.ToolStrips.NVisualCommand.TextAlign">
      <summary>
            Gets/sets the text displayed by this item.
            </summary>
    </member>
    <member name="P:Nevron.UI.ToolStrips.NVisualCommand.ContentAlign">
      <summary>
            Gets/sets the text displayed by this item.
            </summary>
    </member>
    <member name="P:Nevron.UI.ToolStrips.NVisualCommand.ImageTextRelation">
      <summary>
            Gets/sets the text displayed by this item.
            </summary>
    </member>
    <member name="P:Nevron.UI.ToolStrips.NVisualCommand.TextRenderMode">
      <summary>
            Gets/sets the text displayed by this item.
            </summary>
    </member>
    <member name="T:Nevron.UI.ToolStrips.NDropDownCommand">
      <summary>
            Summary description for NDropDownCommand.
            </summary>
    </member>
    <member name="T:Nevron.UI.ToolStrips.NCommandManager">
      <summary>
            Represents a manager of INCommand instances.
            </summary>
    </member>
    <member name="T:Nevron.UI.NUINodeComposite">
      <summary>
            Represents a UI node container whose children collection is freely modifiable
            </summary>
    </member>
    <member name="T:Nevron.UI.NUINodeContainer">
      <summary>
            Represents a UI Node which may contain other nodes.
            This brunch in the UI hierarchy does not allow free modification of the children collection. It just represents a generic container.
            </summary>
    </member>
    <member name="M:Nevron.UI.NUINodeContainer.UpdateReferences(Nevron.INReferenceProvider)">
      <summary>
      </summary>
      <param name="provider">
      </param>
    </member>
    <member name="M:Nevron.UI.NUINodeContainer.Children(Nevron.Filters.INFilter)">
      <summary>
            Obtains the child nodes of this node
            </summary>
      <param name="filter">filter to use, or null if no filter must be applied</param>
      <returns>list of child nodes, which satisfy the filter</returns>
    </member>
    <member name="M:Nevron.UI.NUINodeContainer.GetEnumerator(Nevron.Filters.INFilter)">
      <summary>
            Obtains a child node enumerator 
            </summary>
      <param name="filter">filter to use, or null if no filter must be applied</param>
      <returns>node enumerator</returns>
    </member>
    <member name="M:Nevron.UI.NUINodeContainer.GetEnumerator">
      <summary>
            Obtains a child node enumerator 
            </summary>
      <returns>node enumerator</returns>
    </member>
    <member name="M:Nevron.UI.NUINodeContainer.IndexOfChild(Nevron.Dom.INNode)">
      <summary>
            Obtains the index of the specified node within this container.
            </summary>
      <param name="node">The node which index is to be retrieved.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NUINodeContainer.AccumulateChildren(Nevron.Filters.INFilter,Nevron.Dom.NNodeList)">
      <summary>
            Accumulates the children contained in this node, which satisfy the filter to the provided node list
            </summary>
      <param name="filter">filter to use, or null if no filter must be applied</param>
      <param name="list">list to which to append the child nodes, which satisfy the filter</param>
    </member>
    <member name="M:Nevron.UI.NUINodeContainer.Descendants(Nevron.Filters.INFilter,System.Int32)">
      <summary>
            Obtains the descentant nodes of this node
            </summary>
      <param name="filter">filter to use, or null if no filter must be applied</param>
      <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
      <returns>list of child nodes, which satisfy the filter</returns>
    </member>
    <member name="M:Nevron.UI.NUINodeContainer.IsChild(Nevron.Dom.INNode)">
      <summary>
            Determines whether the specfied node is contained within this container.
            </summary>
      <param name="node">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NUINodeContainer.ChildrenCount(Nevron.Filters.INFilter)">
      <summary>
            Returns the number of child nodes which satisfy the specified filter
            </summary>
      <param name="filter">filter to use, or null if no filter should be applied</param>
      <returns>children count, which satisfy the filter</returns>
    </member>
    <member name="M:Nevron.UI.NUINodeContainer.SetChildIndex(Nevron.Dom.INNode,System.Int32)">
      <summary>
            Sets a new index of the specified child node
            </summary>
      <param name="node">node whose index to change</param>
      <param name="index">new index</param>
      <returns>previous node index</returns>
    </member>
    <member name="M:Nevron.UI.NUINodeContainer.IsDescendant(Nevron.Dom.INNode,System.Int32)">
      <summary>
            Queries whether the specified node is a descendant of this node
            </summary>
      <param name="node">node to look for</param>
      <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
      <returns>true if the node is a descendant node, otherwise false</returns>
    </member>
    <member name="M:Nevron.UI.NUINodeContainer.DescendantsCount(Nevron.Filters.INFilter,System.Int32)">
      <summary>
            Returns the number of descendant nodes, which satisfy the specified filter
            </summary>
      <param name="filter">filter to use, or null if no filter should be applied</param>
      <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
      <returns>count of descendants, which satisfy the filter</returns>
    </member>
    <member name="M:Nevron.UI.NUINodeContainer.GetChildAt(System.Int32)">
      <summary>
            Obtains the child at the specified index.
            </summary>
      <param name="index">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NUINodeContainer.AccumulateDescendants(Nevron.Filters.INFilter,System.Int32,Nevron.Dom.NNodeList)">
      <summary>
            Accumulates the descendants contained in this node, which satisfy the filter to the provided node list
            </summary>
      <param name="filter">filter to use, or null if no filter must be applied</param>
      <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
      <param name="list">list to which to append the descendant nodes, which satisfy the filter</param>
    </member>
    <member name="M:Nevron.UI.NUINodeContainer.OnChildPropertyChanging(Nevron.UI.INUINode,Nevron.UI.NPropertyChangingEventArgs)">
      <summary>
            Gets notified that a child property is about to change.
            This notification allows the parent node to examine the property and eventually to cancel it.
            </summary>
      <param name="sender">The sender of the notification. It may differ from the originator of the event.</param>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.NUINodeContainer.OnChildPropertyChanged(Nevron.UI.INUINode,Nevron.UI.NPropertyChangedEventArgs)">
      <summary>
            Gets notified that a child property has changed.
            This notification allows the parent node to perform optional update after the change.
            </summary>
      <param name="sender">The sender of the notification. It may differ from the originator of the event.</param>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.NUINodeContainer.OnChildContextMenuRequested(Nevron.UI.INUINode,Nevron.UI.NContextMenuEventArgs)">
      <summary>
            Gets notified that a child context menu has been requested and the child did not provide such.
            This notification allows the parent node to provide a context menu depending on the originator of the request.
            </summary>
      <param name="sender">The sender of the notification. It may differ from the originator of the event.</param>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.NUINodeContainer.OnInserting(System.Int32,Nevron.Dom.INNode)">
      <summary>
            Called when a node is about to be inserted in the base array list
            </summary>
      <param name="index">index at which the node will be inserted</param>
      <param name="node">node which will be inserted</param>
    </member>
    <member name="M:Nevron.UI.NUINodeContainer.OnInserted(System.Int32,Nevron.Dom.INNode)">
      <summary>
            Called when a node has been inserted in the base array list
            </summary>
      <remarks>
            This implementation fires the NodeInserted event if the implementation is connected to an event sink service
            </remarks>
      <param name="index">index at which the node was inserted</param>
      <param name="node">node which was inserted</param>
    </member>
    <member name="M:Nevron.UI.NUINodeContainer.OnRemoving(Nevron.Dom.INNode)">
      <summary>
            Called when a node is about to be removed from the base array list
            </summary>
      <param name="node">node which will be removed</param>
    </member>
    <member name="M:Nevron.UI.NUINodeContainer.OnRemoved(Nevron.Dom.INNode)">
      <summary>
            Called when a node has been removed from the base array list
            </summary>
      <remarks>
            This implementation fires the NodeRemoved event if the implementation is connected to an event sink service
            </remarks>
      <param name="node">node which was removed</param>
    </member>
    <member name="M:Nevron.UI.NUINodeContainer.OnStartRemoveAll">
      <summary>
            Called before all nodes have been removed from the base array list
            </summary>
    </member>
    <member name="M:Nevron.UI.NUINodeContainer.OnEndRemoveAll">
      <summary>
            Called after all nodes have been removed from the base array list
            </summary>
    </member>
    <member name="M:Nevron.UI.NUINodeContainer.OnAbortRemoveAll">
      <summary>
            Called to abort the remove all nodes operation if possible
            </summary>
    </member>
    <member name="M:Nevron.UI.NUINodeContainer.OnIndexChanging(Nevron.Dom.INNode,System.Int32,System.Int32)">
      <summary>
            Called when the index of the specified node is about to change
            </summary>
      <param name="node">node whose index in the base array is changing</param>
      <param name="curIndex">current node index</param>
      <param name="newIndex">new node index</param>
    </member>
    <member name="M:Nevron.UI.NUINodeContainer.OnIndexChanged(Nevron.Dom.INNode,System.Int32,System.Int32)">
      <summary>
            Called when the index of the specified node has changed
            </summary>
      <param name="node">node whose index has changed</param>
      <param name="curIndex">current node index</param>
      <param name="oldIndex">old node index</param>
    </member>
    <member name="M:Nevron.UI.NUINodeContainer.TunnelPropertyChanging(Nevron.Dom.INNode,Nevron.UI.NPropertyChangingEventArgs)">
      <summary>
            Notifies all children for a pending property change.
            This method allows the children nodes to examine the property and even cancel it.
            </summary>
      <param name="sender">The sender of the notification. May differ from the originator of the event.</param>
      <param name="e">The arguments associated with the event.</param>
    </member>
    <member name="M:Nevron.UI.NUINodeContainer.TunnelPropertyChanged(Nevron.Dom.INNode,Nevron.UI.NPropertyChangedEventArgs)">
      <summary>
            Notifies all children for a property change.
            This method allows the children nodes to perform additional updates.
            </summary>
      <param name="sender">The sender of the notification. May differ from the originator of the event.</param>
      <param name="e">The arguments associated with the event.</param>
    </member>
    <member name="M:Nevron.UI.NUINodeContainer.InitializeDefault">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.NUINodeContainer.OnPropertyChanging(Nevron.UI.NPropertyChangingEventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.NUINodeContainer.OnPropertyChanged(Nevron.UI.NPropertyChangedEventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="P:Nevron.UI.NUINodeContainer.EventSinkService">
      <summary>
            Gets/sets the event sink service for the node.
            </summary>
    </member>
    <member name="P:Nevron.UI.NUINodeContainer.ShouldTunnelPropertyChanging">
      <summary>
            Gets/sets a value whether this node will tunnel its property changing event to its children.
            </summary>
    </member>
    <member name="P:Nevron.UI.NUINodeContainer.ShouldTunnelPropertyChanged">
      <summary>
            Gets/sets a value whether this node will tunnel its property changed event to its children.
            </summary>
    </member>
    <member name="M:Nevron.UI.NUINodeComposite.AddChild(Nevron.Dom.INNode)">
      <summary>
            Adds a child node
            </summary>
      <param name="node">node to add</param>
    </member>
    <member name="M:Nevron.UI.NUINodeComposite.InsertChild(System.Int32,Nevron.Dom.INNode)">
      <summary>
            Inserts a child node at the specified index
            </summary>
      <param name="index">index at which to insert the child node</param>
      <param name="node">node to insert</param>
    </member>
    <member name="M:Nevron.UI.NUINodeComposite.CanInsertChild(System.Int32,Nevron.Dom.INNode)">
      <summary>
            Queries whether the specified node can be inserted at the specified index
            </summary>
      <param name="index">index at which the child node will be inserted</param>
      <param name="node">child node to insert</param>
      <returns>true if the node can be inserted at the specified index, otherwise false</returns>
    </member>
    <member name="M:Nevron.UI.NUINodeComposite.RemoveChild(Nevron.Dom.INNode)">
      <summary>
            Removes the specified child node from the container children
            </summary>
      <param name="node">child node to remove</param>
    </member>
    <member name="M:Nevron.UI.NUINodeComposite.RemoveChildAt(System.Int32)">
      <summary>
            Removes the child node at the specified index
            </summary>
      <param name="index">index of child node to remove</param>
    </member>
    <member name="M:Nevron.UI.NUINodeComposite.RemoveAllChildren">
      <summary>
            Removes all children
            </summary>
    </member>
    <member name="M:Nevron.UI.NUINodeComposite.CanRemoveChild(Nevron.Dom.INNode)">
      <summary>
            Queries whether the specified child node can be removed
            </summary>
      <param name="node">child node to remove</param>
      <returns>true if the node can be removed, otherwise false</returns>
    </member>
    <member name="T:Nevron.UI.NColorItem">
      <summary>
            Summary description for NColorItem.
            </summary>
    </member>
    <member name="T:Nevron.UI.MarqueeProgressSizeMode">
      <summary>
            Specifies the possible modes for calculating the size of the chunk in a NMarqueeProgressElement.
            </summary>
    </member>
    <member name="T:Nevron.UI.ItemStateChangeReason">
      <summary>
            Enumerates the possible reasons for a state change of a NUIItem instance.
            </summary>
    </member>
    <member name="F:Nevron.UI.ItemStateChangeReason.User">
      <summary>
            Explicitly specified by the user.
            </summary>
    </member>
    <member name="F:Nevron.UI.ItemStateChangeReason.MouseEnter">
      <summary>
            State change triggerred from the MouseEnter event.
            </summary>
    </member>
    <member name="F:Nevron.UI.ItemStateChangeReason.MouseMove">
      <summary>
            State change triggerred from the MouseMove event.
            </summary>
    </member>
    <member name="F:Nevron.UI.ItemStateChangeReason.MouseDown">
      <summary>
            State change triggerred from the MouseDown event.
            </summary>
    </member>
    <member name="F:Nevron.UI.ItemStateChangeReason.MouseUp">
      <summary>
            State change triggerred from the MouseUp event.
            </summary>
    </member>
    <member name="F:Nevron.UI.ItemStateChangeReason.MouseLeave">
      <summary>
            State change triggerred from the MouseLeave event.
            </summary>
    </member>
    <member name="F:Nevron.UI.ItemStateChangeReason.KeyDown">
      <summary>
            State change triggerred from the KeyDown event.
            </summary>
    </member>
    <member name="F:Nevron.UI.ItemStateChangeReason.KeyUp">
      <summary>
            State change triggerred from the KeyUp event.
            </summary>
    </member>
    <member name="F:Nevron.UI.ItemStateChangeReason.VisibleChanged">
      <summary>
            State change triggerred from the VisibleChanged event.
            </summary>
    </member>
    <member name="F:Nevron.UI.ItemStateChangeReason.EnabledChanged">
      <summary>
            State change triggerred from the EnabledChanged event.
            </summary>
    </member>
    <member name="F:Nevron.UI.ItemStateChangeReason.TimerTick">
      <summary>
            State change triggerred from a timer tick.
            </summary>
    </member>
    <member name="F:Nevron.UI.ItemStateChangeReason.ResetState">
      <summary>
            State change triggered from a ResetState method call.
            </summary>
    </member>
    <member name="T:Nevron.UI.NPanelElement">
      <summary>
            Concrete implementation of a NScrollableElement.
            </summary>
    </member>
    <member name="T:Nevron.UI.NItemContainer">
      <summary>
            Summary description for NItemContainer.
            </summary>
    </member>
    <member name="T:Nevron.UI.NGdiCache">
      <summary>
            Summary description for NGdiCache.
            </summary>
    </member>
    <member name="T:Nevron.NewGraphics.Pdf.lIl1l1lI.Keys">
      <summary>
            Predefined keys of this dictionary.
            </summary>
    </member>
    <member name="T:Nevron.NewGraphics.Pdf.lIl1l11l.Keys">
      <summary>
            Predefined keys of this dictionary.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NLightModel">
      <summary>
            The NLightModel class controls the light effects applied to a 3D scene.
            It allows you to enable and disable scene lighting, to load predefined 
            light schemes and control global light properties as well as gives access 
            to the collection of light sources.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NLightModel.SetPredefinedLightModel(Nevron.GraphicsCore.PredefinedLightModel)">
      <summary>
            Configures the object to use a predefined light model.
            </summary>
      <param name="predefinedLightModel">
      </param>
      <remarks>
            The function automatically enables lighting, creates one or more light 
            sources with predefined settings and places them in the LightSources 
            collection. After loading the predefined light model you can modify the 
            parameters of individual light sources to customize the lighting effect.
            </remarks>
    </member>
    <member name="M:Nevron.GraphicsCore.NLightModel.IsPredefinedLightModel(Nevron.GraphicsCore.PredefinedLightModel)">
      <summary>
            Determines if the current light model equals the predefined light model.
            </summary>
      <param name="predefinedLightModel">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NLightModel.GetCurrentPredefinedLightModel(Nevron.GraphicsCore.PredefinedLightModel@)">
      <summary>
            Determines if the current light model is a predefined light model.
            </summary>
      <param name="predefinedLightModel">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NLightModel.Equals(System.Object)">
      <summary>
            Determines whether the light models are equal.
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NLightModel.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NLightModel.LightSources">
      <summary>
            Represents the collection of light sources that are applied to the scene.
            </summary>
      <remarks>
            With the help of this collection you can add, remove and modify the 
            lights applied to the 3D scene. The number of lights in the current 
            Microsoft OpenGL implementation is limited to eight. This is why 
            you cannot add more than eight lights to the collection.
            </remarks>
    </member>
    <member name="P:Nevron.GraphicsCore.NLightModel.EnableLighting">
      <summary>
            Enables/disables the lighting effects.
            </summary>
      <remarks>
            When lighting is turned off, all lighting properties (light sources 
            and materials) are discarded and have no effect on the rendered scene. 
            By default the lighting is enabled. You can disable it to increase 
            the rendering performance or in case that lighting effects are not 
            really necessary (for example in 2D charts).
            </remarks>
    </member>
    <member name="P:Nevron.GraphicsCore.NLightModel.LocalViewpointLighting">
      <summary>
            Enables/disables local viewpoint lighting. The local viewpoint 
            lighting controls the way OpenGL calculates specular reflection angles. 
            </summary>
      <remarks>
            Turning this feature on will only take effect if there are specular 
            reflections in the scene (specular reflections are produced by light 
            sources and materials with bright specular colors). The result is a 
            more realistic lighting effect for the price of a slight performance 
            decrease. The default value is false.
            </remarks>
    </member>
    <member name="P:Nevron.GraphicsCore.NLightModel.GlobalAmbientLight">
      <summary>
            Specifies the color of the global ambient light.
            </summary>
      <remarks>
            The global ambient light affects the brightness and color of the 
            whole 3D scene and is not dependent on light sources. It takes 
            effect only when lighting is enabled. Note that since all object 
            are influenced by the global ambient light it is recommended to 
            assign shades of gray to this color because otherwise the scene 
            will have a color attenuation.
            </remarks>
    </member>
    <member name="P:Nevron.GraphicsCore.NLightModel.ParentNode">
      <summary>
            Obtains the parent node
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NLightModel.RootNode">
      <summary>
            Obtains the root of this node
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NCapStyle">
      <summary>
            Represents a cap style applied to a shape begin or end point
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NCapStyle.OnDrawPreview(Nevron.GraphicsCore.lIIIIllI,Nevron.GraphicsCore.NSizeF)">
      <summary>
            Draws the preview for this appearance style.
            </summary>
      <param name="device">
      </param>
      <param name="size">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NCapStyle.GetDescription">
      <summary>
            Returns a short description of this style.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NCapStyle.GetPaintableRect(Nevron.GraphicsCore.NRectangleF,Nevron.GraphicsCore.l1IlllI1)">
      <summary>
            Obtains the paintable rectangle associated with this appearance style
            </summary>
      <param name="shapeRect">
      </param>
      <param name="lengthConverter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NCapStyle.GetAttributeByName(System.String)">
      <summary>
            Gets a child or descendant attribute by its name
            </summary>
      <param name="attributeName">child name or full attribute name</param>
      <returns>a reference to the attribute</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NCapStyle.GetAttributeName(Nevron.Dom.INAttribute)">
      <summary>
            Gets the name of the specified child attribute
            </summary>
      <param name="attribute">child attribute</param>
      <returns>name of the attribute</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NCapStyle.SetAttributeByName(System.String,Nevron.Dom.INAttribute)">
      <summary>
            Sets a child or descendant attribute by its name
            </summary>
      <param name="attributeName">
      </param>
      <param name="attribute">
      </param>
    </member>
    <member name="P:Nevron.GraphicsCore.NCapStyle.Style">
      <summary>
            Gets/sets the cap style
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NCapStyle.Offset">
      <summary>
            Gets/sets the offset of the cap from the line begin or end point
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NCapStyle.FillStyle">
      <summary>
            Gets/sets the fill style of the line cap
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NCapStyle.StrokeStyle">
      <summary>
            Gets/sets the stroke style of the line cap
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NCapStyle.Attributes">
      <summary>
            Gets an array of the child attributes of this attribute
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.GraphicsCore.NEdgeBorderStyle">
      <summary>
            Represents a border style consisting of three stripes with controllable filling and width
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NEdgeBorderStyle.OnDrawPreview(Nevron.GraphicsCore.lIIIIllI,Nevron.GraphicsCore.NSizeF)">
      <summary>
            Draws the preview for this appearance style.
            </summary>
      <param name="device">
      </param>
      <param name="size">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NEdgeBorderStyle.GetDescription">
      <summary>
            Returns a short description of this style.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NEdgeBorderStyle.GetPaintableRect(Nevron.GraphicsCore.NRectangleF,Nevron.GraphicsCore.l1IlllI1)">
      <summary>
            Overriden. Obtains the paintable rectangle associated with this image frame style.
            </summary>
      <param name="shapeRect">
      </param>
      <param name="lengthConverter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NEdgeBorderStyle.GetShapeInflate(Nevron.GraphicsCore.l1IlllI1)">
      <summary>
            Obtains the maximum inflate of the shape.
            </summary>
      <param name="lengthConverter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NEdgeBorderStyle.GetAttributeName(Nevron.Dom.INAttribute)">
      <summary>
            Gets the name of the specified child attribute
            </summary>
      <param name="attribute">child attribute</param>
      <returns>name of the attribute</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NEdgeBorderStyle.MeasureWidth(Nevron.GraphicsCore.l1IlllI1)">
      <summary>
            Measures the border width
            </summary>
      <param name="lengthConverter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NEdgeBorderStyle.Paint(Nevron.GraphicsCore.lIIIIllI,Nevron.GraphicsCore.l1llll1lI)">
      <summary>
            Paints the border given an outline provider
            </summary>
      <param name="device">
      </param>
      <param name="outlineProvider">
      </param>
    </member>
    <member name="P:Nevron.GraphicsCore.NEdgeBorderStyle.OuterStrokeStyle">
      <summary>
            Gets/sets the stroke style applied to the outer side of the outline
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NEdgeBorderStyle.InnerStrokeStyle">
      <summary>
            Gets/sets the stroke style applied to the inner side of the outline
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NEdgeBorderStyle.OuterBevelWidth">
      <summary>
            Gets/sets the width of the outer bevel
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NEdgeBorderStyle.MiddleBevelWidth">
      <summary>
            Gets/sets the width of the middle bevel
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NEdgeBorderStyle.InnerBevelWidth">
      <summary>
            Gets/sets the width of the inner bevel
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NEdgeBorderStyle.OuterBevelFillStyle">
      <summary>
            Gets/sets the fill style the outer bevel
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NEdgeBorderStyle.MiddleBevelFillStyle">
      <summary>
            Gets/sets the fill style the middle bevel
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NEdgeBorderStyle.InnerBevelFillStyle">
      <summary>
            Gets/sets the fill style the inner bevel
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NEdgeBorderStyle.Attributes">
      <summary>
            Gets an array of the child attributes of this attribute
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.GraphicsCore.NCompositeKey2">
      <summary>
            Summary description for NCompositeKey2.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Text.INFrameManager">
      <summary>
            Implemented by elements that create frames
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.INFrameManager.UnloadFrame">
      <summary>
            Unloads a frame from its parent frame composite element
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.INFrameManager.ReloadFrame">
      <summary>
            Reloads a frame in its parent frame composite
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NVectorImageMapNode.AddShape(Nevron.GraphicsCore.l111IIIl)">
      <summary>
            Adds a shape to the node
            </summary>
      <param name="shape">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NVectorImageMapNode.WriteToImageMapWriter(Nevron.GraphicsCore.INImageMapWriter)">
      <summary>
      </summary>
      <param name="imageMapWriter">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NVectorImageMapNode.ContainsPoint(Nevron.GraphicsCore.NPointF)">
      <summary>
            Returns true if the geometry contains the point
            </summary>
      <param name="point">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NVectorImageMapNode.IsContainedInRect(Nevron.GraphicsCore.NRectangleF)">
      <summary>
            Returns true if the geometry intersects the rect
            </summary>
      <param name="rect">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NVectorImageMapNode.IntersectsWithRect(Nevron.GraphicsCore.NRectangleF)">
      <summary>
            Returns true if the geometry intersects the rect
            </summary>
      <param name="rect">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.GraphicsCore.NHtmlMapContext">
      <summary>
            The HTML Image Map context.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NHtmlMapContext.MapName">
      <summary>
            The map name.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NHtmlMapContext.ImageName">
      <summary>
            The map image name.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NHtmlMapContext.Accuracy">
      <summary>
            Accuracy of the image map in pixels.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NHtmlMapContext.ClientScript">
      <summary>
            The client side script used to encode the image map.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NHtmlMapContext.PostbackEventReference">
      <summary>
            A postback event reference.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NHtmlMapContext.Dimensions">
      <summary>
            The dimensions of the image map in pixels.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NHtmlMapContext.Resolution">
      <summary>
            The resolution of the image map.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NHtmlMapContext.ImageMapMode">
      <summary>
            The mode of image map generation.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NHtmlMapContext.HasGeneratedArea">
      <summary>
            Indicates if the image map generation has produced at least one image map area.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NHtmlMapContext.GenerateEmptyAreas">
      <summary>
            Whether the image map writer must generate empty areas
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NPngImageFormat">
      <summary>
            Describes a PNG image response returned to the client browser
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NPngImageFormat.MimeType">
      <summary>
            Mime type constant for png images
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NPngImageFormat.GetMimeType">
      <summary>
            Returns the mime type - "image/png".
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NPngImageFormat.GetExtension">
      <summary>
            Returns the file extension - ".png"
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NPngImageFormat.GetName">
      <summary>
            Obtains the name of this image format
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NPngImageFormat.ToString">
      <summary>
            Obtains the String representation of this NPNGImageForrmat instance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NPngImageFormat.GetImageFormat">
      <summary>
            Obtains a Png ImageFormat.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.GraphicsCore.Text.NElementComposite">
      <summary>
            Summary description for NElementComposite.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Text.INChildElementObserver">
      <summary>
            Summary description for INChildElementObserver.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NElementComposite.GetChildFromId(System.Int32)">
      <summary>
            Obtains a child element by its id
            </summary>
      <param name="id">id of the node</param>
      <returns>reference to the element if it was found, otherwise null</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NElementComposite.GetChildFromUniqueId(System.Guid)">
      <summary>
            Obtains a child element by its unique id
            </summary>
      <param name="uid">unique id of the element</param>
      <returns>reference to the element if it was found, otherwise null</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NElementComposite.GetDescendantFromId(System.Int32,System.Int32)">
      <summary>
            Obtains a element node by its id
            </summary>
      <param name="id">id of the element</param>
      <param name="depth">required depth, or -1 if the entire subtree must be explored</param>
      <returns>reference to the element if it was found, otherwise null</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NElementComposite.GetDescendantFromUniqueId(System.Guid,System.Int32)">
      <summary>
            Obtains a child element by its unique id
            </summary>
      <param name="uid">unique id of the node</param>
      <param name="depth">required depth, or -1 if the entire subtree must be explored</param>
      <returns>reference to the element if it was found, otherwise null</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NElementComposite.CanMerge(Nevron.GraphicsCore.Text.NElement)">
      <summary>
            Returns true if this element can merge with the passed element.
            </summary>
      <param name="element">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NElementComposite.Merge(Nevron.GraphicsCore.Text.NElement)">
      <summary>
            Merges the element with this one.
            </summary>
      <param name="element">
      </param>
    </member>
    <member name="T:Nevron.GraphicsCore.Text.Builders.NXmlTextDocumentBuilder">
      <summary>
            Summary description for NXmlTextDocumentBuilder.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Shapes.NVLineShape">
      <summary>
            Summary description for NVLineShape.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Shapes.NCrossShape">
      <summary>
            Summary description for NCrossShape.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Shapes.NSmoothEdgeRectCalloutShape">
      <summary>
            Summary description for NSmoothEdgeRectCalloutShape.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Shapes.NCalloutShape">
      <summary>
            Summary description for NCalloutShape.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Shapes.IN2DCalloutShape">
      <summary>
            Implemented by callout shapes
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Shapes.NPolygonPathSegment">
      <summary>
            Summary description for NPolygonPathSegment.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Shapes.NCurvePathSegment">
      <summary>
            Summary description for NCurvePathSegment.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Shapes.NTransformCommandNode">
      <summary>
            Summary description for NTransformCommandNode.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NAbstractGdiRenderSurface">
      <summary>
            Represents an abstract gdi render surface (not attached to a specfic bitmap or window
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NImageFillStyleKeyToBitmapConverter">
      <summary>
            Summary description for NImageFillStyleKeyToBitmapConverter.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NImageFillStyleKeyToBitmapConverter.ConvertKey(Nevron.GraphicsCore.l111IIl1,Nevron.GraphicsCore.NSize,System.Drawing.Imaging.PixelFormat)">
      <summary>
            Converts a fill style key to a bitmap with the specified size and pixel format
            </summary>
      <param name="key">
      </param>
      <param name="size">
      </param>
      <param name="pixelFormat">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.GraphicsCore.NGrayScaleColorTransform">
      <summary>
            Converts colors to their grayscale equivalent based on the color intensity
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NGrayScaleColorTransform.TransformColor(Nevron.GraphicsCore.NArgbColorValue)">
      <summary>
            Transforms a color
            </summary>
      <param name="color">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NGrayScaleColorTransform.TransformColor(Nevron.GraphicsCore.NArgbColorValueF@)">
      <summary>
            Transforms a color
            </summary>
      <param name="color">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NGrayScaleColorTransform.TransformBitmap(System.Drawing.Bitmap)">
      <summary>
            Transforms a bitmap
            </summary>
      <param name="bitmap">
      </param>
    </member>
    <member name="T:Nevron.GraphicsCore.NEllipseF">
      <summary>
            The NEllipseF structure represents an ellipse in 2D space defined by it's center, 
            lengths of the major and minor axes and angle, which the ellipse major axis forms with the X-axis
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NEllipseF.Translate(System.Single,System.Single)">
      <summary>
            Translates the primitive with the specified amounts
            </summary>
      <param name="dx">
      </param>
      <param name="dy">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NEllipseF.Translate(Nevron.GraphicsCore.NPointF)">
      <summary>
            Translates the primitive with the specified offset
            </summary>
      <param name="offset">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NEllipseF.AddToGraphicsPath(System.Drawing.Drawing2D.GraphicsPath)">
      <summary>
            Appends the primitive to the specified graphics path
            </summary>
      <param name="path">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NEllipseF.ContainsOnOutline(Nevron.GraphicsCore.NPointF,System.Single)">
      <summary>
            Determines whether the outline of the rectangle contains the specified point
            </summary>
      <param name="point">
      </param>
      <param name="weight">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NEllipseF.ContainsOnOutline(Nevron.GraphicsCore.NPointF,System.Drawing.Pen)">
      <summary>
            Determines whether the outline of the rectangle contains the specified point
            </summary>
      <param name="point">
      </param>
      <param name="pen">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NEllipseF.Contains(Nevron.GraphicsCore.NPointF)">
      <summary>
            Determines whether the rectangle contains the specified point
            </summary>
      <param name="point">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NEllipseF.Contains(Nevron.GraphicsCore.NPointF,System.Drawing.Drawing2D.FillMode)">
      <summary>
            Determines whether the primitive interior contains the specified point
            </summary>
      <param name="point">
      </param>
      <param name="fillMode">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NEllipseF.Equals(System.Object)">
      <summary>
      </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NEllipseF.GetHashCode">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NEllipseF.ToString">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NEllipseF.Normalize">
      <summary>
            Normalizes the ellipse
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NEllipseF.PointFromAngle(System.Single)">
      <summary>
            Gets the point on the ellipse rim, which corresponds to the specified angle (in radians)
            </summary>
      <param name="angle">angle (in radians), measured from the major ellipse axis</param>
      <returns>point on the ellipse rim</returns>
    </member>
    <member name="F:Nevron.GraphicsCore.NEllipseF.Center">
      <summary>
            The center of the ellipse
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NEllipseF.A">
      <summary>
            The semi major ellipse axis length
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NEllipseF.B">
      <summary>
            The semi minor ellipse axis length
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NEllipseF.Angle">
      <summary>
            Angle of the ellipse major axis and the X-axis (in radians)
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NEllipseF.FromThreePointsAngleAndRatio(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF,System.Single,System.Single)">
      <summary>
            Creates a normalized ellipse from three points, angle between the ellipse major axis and the X-axis and ratio between the major and minor axes
            </summary>
      <remarks>
            If the points are coliner returns the NEllipseF.Empty
            </remarks>
      <param name="pt1">
      </param>
      <param name="pt2">
      </param>
      <param name="pt3">
      </param>
      <param name="angle">angle (in radians)</param>
      <param name="ratio">ration between the major and minor ellipse axes, must be &gt;= 1</param>
      <returns>
      </returns>
    </member>
    <member name="F:Nevron.GraphicsCore.NEllipseF.Empty">
      <summary>
            The empty ellipse
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NEllipseF.Bounds">
      <summary>
            Gets the minimal enclosing rectangle
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NEllipseF.BoundsRange">
      <summary>
            Gets the minimal enclosing 2D range
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NEllipseF.IsFlat">
      <summary>
            Determines whether this is a flat primitive
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NEllipseF.IsEmpty">
      <summary>
            Determines whether the ellipse is with zero a or b
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NEllipseF.IsNormalized">
      <summary>
            Determines whether the ellipse is normalized (a &gt;= b)
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NEllipseF.Focus1">
      <summary>
            Gets the first focus of the ellipse
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NEllipseF.Focus2">
      <summary>
            Gets the second focus of the ellipse
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NEllipseF.FocusDistance">
      <summary>
            Gets the distance of the focuses from the ellipse center (also known as c parameter)
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NEllipseF.Eccentricity">
      <summary>
            Gets the eccentricity of the ellipse (the position of the focus as a fraction of the semimajor axis - computed as c / a)
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NEllipseF.Ratio">
      <summary>
            Gets the ratio between the major and minor ellipse axes - computed as a / b
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NEllipseF.Perimeter">
      <summary>
            Gets the ellipse perimeter 
            </summary>
      <remarks>
            Uses an approximation
            </remarks>
    </member>
    <member name="P:Nevron.GraphicsCore.NEllipseF.Area">
      <summary>
            Gets the ellipse area (PI * a * b)
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NEllipseF.InscribedCircleTransform">
      <summary>
            Obtains a transformation, which transforms the ellipse curve to the curve of the inscribed circle
            </summary>
      <remarks>
            The inscribed circle is a circle with center the center of the ellipse and with radius b
            </remarks>
    </member>
    <member name="P:Nevron.GraphicsCore.NEllipseF.InscribedCircle">
      <summary>
            Gets the circle, which can be insribed in the ellipse
            </summary>
      <remarks>
            The inscribed circle is a circle with center the center of the ellipse and with radius b
            </remarks>
    </member>
    <member name="T:Nevron.FormulaSheet.NRemoveRowVerb">
      <summary>
            The NRemoveRowVerb verb is used for the removal of a formula section row
            </summary>
    </member>
    <member name="M:Nevron.FormulaSheet.NRemoveRowVerb.Execute">
      <summary>
            Overriden to remove the row from its section
            </summary>
    </member>
    <member name="F:Nevron.FormulaSheet.NRemoveRowVerb.Row">
      <summary>
            Reference to the row which to remove from the section
            </summary>
    </member>
    <member name="T:Nevron.FormulaSheet.NRemoveCellsVerb">
      <summary>
            The NRemoveCellsVerb verb is used for the visual removal of named cells from a formula section
            </summary>
    </member>
    <member name="M:Nevron.FormulaSheet.NRemoveCellsVerb.Execute">
      <summary>
            Overriden to prompt the user to visually choose the cells, which must be removed.
            Removes the cells from the section if the user clicked the OK button.
            </summary>
    </member>
    <member name="F:Nevron.FormulaSheet.NRemoveCellsVerb.Section">
      <summary>
            Reference to the formula section from which to remove the cells
            </summary>
    </member>
    <member name="T:Nevron.Editors.NSizeLEditorUC">
      <summary>
            The NSizeLEditorUC is a user control which can be used for the visual editing of a NSizeL object
            </summary>
    </member>
    <member name="M:Nevron.Editors.NSizeLEditorUC.Dispose(System.Boolean)">
      <summary> 
            Clean up any resources being used.
            </summary>
    </member>
    <member name="E:Nevron.Editors.NSizeLEditorUC.SizeLChanged">
      <summary>
            Fired when the size has changed.
            </summary>
    </member>
    <member name="P:Nevron.Editors.NSizeLEditorUC.SizeL">
      <summary>
            The size object to edit.
            </summary>
    </member>
    <member name="T:Nevron.Editors.NMarginsEditorUC">
      <summary>
            Edits a NMarginsL object.
            </summary>
    </member>
    <member name="M:Nevron.Editors.NMarginsEditorUC.Dispose(System.Boolean)">
      <summary> 
            Clean up any resources being used.
            </summary>
    </member>
    <member name="P:Nevron.Editors.NMarginsEditorUC.Margins">
      <summary>
            Gets/sets the margins object to edit.
            </summary>
    </member>
    <member name="E:Nevron.Editors.NMarginsEditorUC.MarginsChanged">
      <summary>
            Fired when the margins object has changed
            </summary>
    </member>
    <member name="T:Nevron.Editors.NLengthEditor">
      <summary>
            Length editor
            </summary>
    </member>
    <member name="M:Nevron.Editors.NLengthEditor.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
    </member>
    <member name="P:Nevron.Editors.NLengthEditor.Length">
      <summary>
            Gets/sets the length to edit.
            </summary>
    </member>
    <member name="T:Nevron.Editors.NDomEditorHostForm">
      <summary>
            Summary description for NDomEditorHostForm.
            </summary>
    </member>
    <member name="M:Nevron.Editors.NDomEditorHostForm.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
    </member>
    <member name="T:Nevron.Editors.NDataGridFillStyleColumnStyle">
      <summary>
            Column style, which can be used for the visual editing of fill styles 
            inside a DataGrid
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.INStickyObjectWrapper">
      <summary>
            Wraps an object which may be used by other objects to "stick" to its bounds.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NTreeNodeTextFilter">
      <summary>
            A predefined filter which matches the Text value of a NTreeNode.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeNodeFilter.Filter(System.Object)">
      <summary>
            Examines the node and determines whether it satisfies the current filter.
            </summary>
      <param name="obj">The node to examine.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeNodeFilter.FilterCore(Nevron.UI.WinForm.Controls.NTreeNode)">
      <summary>
            Preform the core filter functionality.
            </summary>
      <param name="node">The node to examine.</param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeNodeFilter.VisibleOnly">
      <summary>
            Determines whether only visible nodes will be considered.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeNodeFilter.BranchesOnly">
      <summary>
            Determines whether only branch nodes will be considered.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeNodeFilter.LeavesOnly">
      <summary>
            Determines whether only leaf nodes will be considered.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeNodeStringFilter.CaseSensitive">
      <summary>
            Determines whether the string search will be case sensitive.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeNodeStringFilter.Options">
      <summary>
            Gets/sets the common string options to be applied.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeNodeStringFilter.Text">
      <summary>
            Gets/sets the text to be compared when the Match method is called
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeNodeTextFilter.FilterCore(Nevron.UI.WinForm.Controls.NTreeNode)">
      <summary>
            Determines whether the specified node's text matches this filter.
            </summary>
      <param name="node">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NTreeNodeNameFilter">
      <summary>
            A predefined filter which matches the Text value of a NTreeNode.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeNodeNameFilter.FilterCore(Nevron.UI.WinForm.Controls.NTreeNode)">
      <summary>
            Determines whether the specified node's text matches this filter.
            </summary>
      <param name="node">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NTabShrinkInfo">
      <summary>
            Summary description for NTabShrinkInfo.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NStatusBarPanelCollection">
      <summary>
            Summary description for NStatusBarPanelCollection.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NStatusBarPanelCollection.Add(Nevron.UI.WinForm.Controls.NStatusBarPanel)">
      <summary>
            Adds a new NStatusBarPanel object to the collection.
            </summary>
      <param name="panel">The panel lto add.</param>
      <returns>The index at which the panel was inserted.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NStatusBarPanelCollection.AddRange(Nevron.UI.WinForm.Controls.NStatusBarPanel[])">
      <summary>
            Add a range of NStatusBarPanels to the collection.
            </summary>
      <param name="panels">The NStatusBarPanel array to add.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NStatusBarPanelCollection.Insert(System.Int32,Nevron.UI.WinForm.Controls.NStatusBarPanel)">
      <summary>
            Inserts a NStatusBarPanel at the specified index.
            </summary>
      <param name="index">The desired index.</param>
      <param name="panel">The panel to insert.</param>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NFilterMessageEventArgs">
      <summary>
            Summary description for EventArguments.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFilterMessageEventArgs.Filtered">
      <summary>
            Gets/sets a value indicating whether the associated Message is filtered.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFilterMessageEventArgs.ExitLoop">
      <summary>
            Gets/sets a value indicating whether the associated message loop should be exitted.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFilterMessageEventArgs.Message">
      <summary>
            Gets/sets the associated Message.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NKeyboardManager">
      <summary>
            Summary description for NKeyboardManager.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NUIDocument">
      <summary>
            Summary description for NDocumentInfo.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NUIDocument.Host">
      <summary>
            Gets the INDocumentHost instance where the document resides.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NUIDocument.Text">
      <summary>
            Gets/sets the text (title) for the document.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NUIDocument.TooltipText">
      <summary>
            Gets/sets the tooltip associated with the document.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NUIDocument.Key">
      <summary>
            Gets/sets a string that uniquely identifies this document.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NUIDocument.ID">
      <summary>
            Gets/sets a globally unique identifier for this document.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NUIDocument.Tag">
      <summary>
            Gets/sets an additional data associated with the document.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NUIDocument.ImageIndex">
      <summary>
            Gets/sets the image index for the document. Will be uses when the document style of the framework is MdiTabbed.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NUIDocument.Icon">
      <summary>
            Gets/sets the icon to be used when the document view is MdiStandard.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NUIDocument.SmallIcon">
      <summary>
            Gets/sets the icon to be used when the document view is MdiStandard.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NUIDocument.CurrentIcon">
      <summary>
            Gets the icon currently used by the host of the document.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NUIDocument.CurrentSmallIcon">
      <summary>
            Gets the icon currently used by the host of the document.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NUIDocument.Client">
      <summary>
            Gets/sets the client control of the document.
            Using this architecture allows one document to be hosted on different hosts.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NUIDocument.PrefferedBounds">
      <summary>
            Gets/sets the preffered bounds of the document. Valid if hosted by a NMdiChild instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NUIDocument.Manager">
      <summary>
            Gets the current INDocumentManager instance associated with the document.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NUIDocument.DefaultIcon">
      <summary>
            Gets/sets the default icon to be applied on all documents.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NUIDocument.DefaultSmallIcon">
      <summary>
            Gets/sets the default small icon to be applied on all documents.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NHeaderColumnExtendedInfoCollection">
      <summary>
            Represents a strongly-typed collection of NHeaderColumnExtendedInfo objects.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NColorListBox">
      <summary>
            Represents a predefined ListBox for displaying color values.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NColorListBox.Color">
      <summary>
            Gets/sets the currently selected color.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NGalleryPanel">
      <summary>
            Summary description for NGalleryPanel.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NScrollableUIElementHost">
      <summary>
            Summary description for NGalleryPanel.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NScrollableUIElementHost.EnableSkinning">
      <summary>
            Determines whether the panel will use the current skin to render its child elements.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NScrollableUIElementHost.Skin">
      <summary>
            Gets/sets the local NSkin instance to be used when painting this control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NScrollableUIElementHost.CurrentSkin">
      <summary>
            Gets the current skin to be used by this instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NScrollableUIElementHost.ScrollMargins">
      <summary>
            Gets/sets the margins applied on the scrollable area.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NScrollableUIElementHost.ScrollAmount">
      <summary>
            Gets/sets the current scroll amount.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NScrollableUIElementHost.MinimumScrollSize">
      <summary>
            Gets/sets the minimum scrolling size.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NScrollableUIElementHost.HScrollSmallChange">
      <summary>
            Gets/sets the small change value of the horizontal scrollbar.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NScrollableUIElementHost.VScrollSmallChange">
      <summary>
            Gets/sets the small change value of the vertical scrollbar.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NScrollableUIElementHost.HScrollVisibility">
      <summary>
            Gets/sets the visibility of the horizontal scrollbar.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NScrollableUIElementHost.VScrollVisibility">
      <summary>
            Gets/sets the visibility of the vertical scrollbar.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NScrollableUIElementHost.UseCustomScrollbars">
      <summary>
            Determines whether the control will use custom scrollbars, synchronized with the Nevron look-and-feel or will let system paint them.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NGalleryPanel.ItemFromPoint(Nevron.GraphicsCore.NPoint)">
      <summary>
            Gets the item which contains the specified point.
            </summary>
      <param name="pt">The point to examine.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NGalleryPanel.ItemFromPoint(Nevron.GraphicsCore.NPoint,System.Boolean)">
      <summary>
            Gets the item which contains the specified point and is completely or partially in the vieable area.
            </summary>
      <param name="pt">The point to examine.</param>
      <param name="inViewOnly">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NGalleryPanel.GetCaptureItem">
      <summary>
            Gets the item which is has captured the mouse.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NGalleryPanel.GetItems(Nevron.UI.ItemState)">
      <summary>
            Gets an array of items with the specified state.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NGalleryPanel.GetItems(Nevron.UI.ItemState,System.Boolean)">
      <summary>
            Gets an array of items with the specified state.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NGalleryPanel.SelectRange(System.Int32,System.Int32)">
      <summary>
            Selects range of items.
            </summary>
      <param name="startIndex">Starting index of the range</param>
      <param name="endIndex">Ending index of the range</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NGalleryPanel.SelectNext(System.Boolean,System.Boolean)">
      <summary>
            Selects the next item (starting from the last selected).
            </summary>
      <param name="wrap">True to wrap index moving, false otherwise.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NGalleryPanel.EnsureVisible(Nevron.UI.WinForm.Controls.NGalleryItem)">
      <summary>
            Scrolls the specfied item into view.
            </summary>
      <param name="item">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NGalleryPanel.DeselectAllButOne(Nevron.UI.WinForm.Controls.NGalleryItem)">
      <summary>
            Deselects all items except the specified one.
            </summary>
      <param name="theOne">The one item which should remain selected.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NGalleryPanel.DeselectAll">
      <summary>
            Deselects all items.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NGalleryPanel.LoadSmallSystemImages">
      <summary>
            Loads the small images used by the system.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NGalleryPanel.LoadLargeSystemImages">
      <summary>
            Loads the large images used by the system.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NGalleryPanel.ItemClick">
      <summary>
            Notifies for an item click.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NGalleryPanel.ItemSelectionChanged">
      <summary>
            Notifies for a change in an item's Selected property.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NGalleryPanel.ItemSize">
      <summary>
            Gets/sets the size of a single item.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NGalleryPanel.ItemLayout">
      <summary>
            Gets/sets the layout used to arrange items.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NGalleryPanel.SelectionMode">
      <summary>
            Gets/sets the selection mode of the panel.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NGalleryPanel.Items">
      <summary>
            Gets the collection of items parented by this panel.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NGalleryPanel.SelectedItems">
      <summary>
            Gets an array with all the selected items.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NGalleryPanel.LastSelected">
      <summary>
            Gets the last selected item.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NGalleryPanel.UseBodySkinning">
      <summary>
            Determines whether the panel will use the provided skin entry for its body or will visualize itself using the fill, stroke and shadow settings.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NGalleryPanel.HideSelection">
      <summary>
            Determines whether the panel will hide its selected items when not focused.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NGalleryPanel.ShowFocusRect">
      <summary>
            Determines whether the last selected item will display a focused rectangle.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NGalleryItemCollection">
      <summary>
            Summary description for NGalleryItemCollection.
            </summary>
    </member>
    <member name="T:Nevron.UI.NCaptionElement">
      <summary>
            Represents a generic caption.
            </summary>
    </member>
    <member name="P:Nevron.UI.NCaptionElement.Content">
      <summary>
            Gets the NUIItem instance which represents the content of the Caption.
            </summary>
    </member>
    <member name="P:Nevron.UI.NCaptionElement.ButtonsAlign">
      <summary>
            Gets/sets how the buttons are aligned within the parent caption.
            </summary>
    </member>
    <member name="P:Nevron.UI.NCaptionElement.ButtonsMargins">
      <summary>
            Gets/sets the NPadding object which controls the outer spacing of the buttons within the rect occupied by them.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.DockEdgeChangingEventArgs">
      <summary>
            Contains information about an upcoming dock edge change in a DockableForm
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.DockEdgeChangingEventArgs.NewDockEdge">
      <summary>
            Gets/sets the new dock edge to be applied on the DockableForm.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NLightUIItemNotifyData">
      <summary>
            A simple storage class which describes an item event.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.NLightUIItemNotifyData.Sender">
      <summary>
            The originator of the action.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NTreeListComparer">
      <summary>
            An IComparer implementation used to sort columns of a NTreeList control.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NLightUIItemComparer">
      <summary>
            An IComparer implementation used to sort items in a NLightUIItemCollection.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NLightUIItemComparer.Compare(System.Object,System.Object)">
      <summary>
            Compares two NLightUIItem instances.
            </summary>
      <param name="o1">An object of type NLightUIItem.</param>
      <param name="o2">An object of type NLightUIItem.</param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItemComparer.Ascending">
      <summary>
            Gets the NTreeListColumn instance this instance is attached to.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeListComparer.Compare(System.Object,System.Object)">
      <summary>
            Compares two NTreeListNode instances.
            </summary>
      <param name="o1">An object of type NTreeListNode.</param>
      <param name="o2">An object of type NTreeListNode.</param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListComparer.Column">
      <summary>
            Gets the NTreeListColumn instance this instance is attached to.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NGlobalMenuOptions.PropertyPage">
      <summary>
            Gets the NPropertyPage to edit this object.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NGlobalMenuOptions.Animation">
      <summary>
            Gets/sets the animation type for menus.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NGlobalMenuOptions.HasShadow">
      <summary>
            Gets/sets a value indicating whether the menu window displays shadow.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NGlobalMenuOptions.ShadowOffset">
      <summary>
            Gets/sets a value between 1 and 10 which specifies the offset for shadows(if any).
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NGlobalMenuOptions.AnimationLength">
      <summary>
            Gets/sets a value between 50 and 500 which specifies the time of menu animation (if any).
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NGlobalMenuOptions.DropDownDelay">
      <summary>
            Gets/sets a value between 100 and 1000 which specifies the delay before a command will display its child menu when hovered.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NGlobalMenuOptions.ShadowColor">
      <summary>
            Gets/sets the color used to fill shadow areas.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NGlobalMenuOptions.DefaultMenuType">
      <summary>
            Gets/sets the default type to be used for all menu windows.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NGlobalMenuOptions.DefaultFont">
      <summary>
            Gets/sets the default Font to be used by all menus.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NCommandBarsEditorConfig">
      <summary>
            Summary description for NCommandBarsEditorConfig.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandBarsEditorConfig.HasPaletteButton">
      <summary>
            Gets/sets a value whether the "Cusomize" dialog will display a "Palette" button.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandBarsEditorConfig.HasKeyboardButton">
      <summary>
            Gets/sets a value whether the "Cusomize" dialog will display a "Keyboard" button.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandBarsEditorConfig.HasMenuOptionsButton">
      <summary>
            Gets/sets a value whether the "Cusomize" dialog will display a "Menu Options" button.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NColorPaneCommand">
      <summary>
            Represents a command which contains a color pane.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NColorPaneCommandBase">
      <summary>
            Summary description for NColorPaneCommandBase.
            </summary>
    </member>
    <member name="T:Nevron.UI.NPartStateInfo">
      <summary>
            Summary description for NPartStateInfo.
            </summary>
    </member>
    <member name="T:Nevron.UI.NImageSegment">
      <summary>
            Summary description for NBitmapSegment.
            </summary>
    </member>
    <member name="T:Nevron.UI.Themes.System.NClassicTrackbarRenderer">
      <summary>
            Summary description for NClassicTrackbarRenderer.
            </summary>
    </member>
    <member name="T:Nevron.UI.Themes.System.NUxThemeButtonRenderer">
      <summary>
            Summary description for NUxThemeButtonRenderer.
            </summary>
    </member>
    <member name="T:Nevron.UI.Themes.System.NSystemTheme">
      <summary>
            The system theme will use dynamic renderers rather than styles.
            </summary>
    </member>
    <member name="P:Nevron.UI.Themes.System.NSystemTheme.UseThemes">
      <summary>
            Gets/sets a value indicating whether system themes (if available) will be used.
            </summary>
    </member>
    <member name="T:Nevron.UI.SizeGripParts">
      <summary>
            Summary description for SizeGripParts.
            </summary>
    </member>
    <member name="T:Nevron.UI.CalculatorParts">
      <summary>
            Summary description for CalculatorParts.
            </summary>
    </member>
    <member name="T:Nevron.UI.CheckButtonStates">
      <summary>
            Summary description for CheckButtonStates.
            </summary>
    </member>
    <member name="T:Nevron.UI.NVerticalStackLayoutEngine">
      <summary>
            Summary description for NVerticalStackLayoutEngine.
            </summary>
    </member>
    <member name="T:Nevron.UI.NLayoutEngine">
      <summary>
            Summary description for NLayoutEngine.
            </summary>
    </member>
    <member name="T:Nevron.UI.INLayoutEngine">
      <summary>
            Summary description for INLayoutEngine.
            </summary>
    </member>
    <member name="M:Nevron.UI.INLayoutEngine.Layout(Nevron.UI.INLayoutContainer)">
      <summary>
            Performs layout logic upon the specified container.
            </summary>
      <param name="container">
      </param>
    </member>
    <member name="P:Nevron.UI.INLayoutEngine.IsLayoutOperationRunning">
      <summary>
            Determines whether a layout operation is currently running.
            </summary>
    </member>
    <member name="T:Nevron.UI.INMessageFilter">
      <summary>
            Summary description for INMessageFilter.
            </summary>
    </member>
    <member name="T:Nevron.UI.INHookParams">
      <summary>
            Summary description for INHookParams.
            </summary>
    </member>
    <member name="T:Nevron.UI.NShaftPartElement">
      <summary>
            Represents part of the shaft in a track element.
            </summary>
    </member>
    <member name="M:Nevron.UI.NShaftPartElement.ShouldMoveThumbOnTracking">
      <summary>
            Determines whether the thumb should be moved while tracking (the shaft is pressed).
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NShaftPartElement.ProcessMouseUp(Nevron.UI.NMouseEventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="T:Nevron.UI.NCheckButtonElement">
      <summary>
            Represents a toggle button.
            </summary>
    </member>
    <member name="T:Nevron.UI.NPaintContext">
      <summary>
            Summary description for NPaintContext.
            </summary>
    </member>
    <member name="P:Nevron.UI.NPaintContext.Style">
      <summary>
            Gets the current style for the paint operation.
            </summary>
    </member>
    <member name="P:Nevron.UI.NPaintContext.Theme">
      <summary>
            Gets the current theme for the paint operation.
            </summary>
    </member>
    <member name="P:Nevron.UI.NPaintContext.Renderer">
      <summary>
            Gets the current renderer for the paint operation.
            </summary>
    </member>
    <member name="P:Nevron.UI.NPaintContext.Param">
      <summary>
            Gets an additional parameter associated with the paint operation.
            </summary>
    </member>
    <member name="T:Nevron.UI.NTextureRenderer">
      <summary>
            Summary description for NTextureRenderer.
            </summary>
    </member>
    <member name="T:Nevron.UI.NColorChannelAnimationTask">
      <summary>
            Summary description for NBitmapAnimationTask.
            </summary>
    </member>
    <member name="T:Nevron.UI.NAnimationTask">
      <summary>
            Represents a single task in an animation effect.
            </summary>
    </member>
    <member name="T:Nevron.UI.INAnimationTask">
      <summary>
            Summary description for INAnimationTask.
            </summary>
    </member>
    <member name="M:Nevron.UI.INAnimationTask.OnAnimationStarted(Nevron.UI.NAnimationEventArgs)">
      <summary>
            Gets notified for the animation start.
            </summary>
      <param name="e">The arguments associated with the event.</param>
    </member>
    <member name="M:Nevron.UI.INAnimationTask.OnAnimationStep">
      <summary>
            Performs a single animation step.
            </summary>
    </member>
    <member name="M:Nevron.UI.INAnimationTask.OnAnimationEnded">
      <summary>
            Gets notified for the animation end.
            </summary>
    </member>
    <member name="M:Nevron.UI.INAnimationTask.CanProcess(Nevron.UI.NAnimationEventArgs)">
      <summary>
            Determines whether the current instance may perform a step using the specified animation arguments.
            </summary>
      <param name="e">The animation arguments.</param>
      <returns>True if a step can be performed, false otherwise.</returns>
    </member>
    <member name="P:Nevron.UI.NColorChannelAnimationTask.ColorChannel">
      <summary>
            Gets/sets the color channel for this animation task.
            </summary>
    </member>
    <member name="T:Nevron.SmartShapes.SmartShape1D">
      <summary>
            Enumerates the 2D smart shapes supported by the N1DSmartShapeFactory class.
            </summary>
    </member>
    <member name="F:Nevron.SmartShapes.SmartShape1D.Bar">
      <summary>
            Bar smart shape
            </summary>
    </member>
    <member name="F:Nevron.SmartShapes.SmartShape1D.Arrow1">
      <summary>
            Arrow smart shape
            </summary>
    </member>
    <member name="F:Nevron.SmartShapes.SmartShape1D.Arrow2">
      <summary>
            Arrow smart shape
            </summary>
    </member>
    <member name="F:Nevron.SmartShapes.SmartShape1D.Arrow3">
      <summary>
            Arrow smart shape
            </summary>
    </member>
    <member name="F:Nevron.SmartShapes.SmartShape1D.Needle1">
      <summary>
            Needle smart shape
            </summary>
    </member>
    <member name="F:Nevron.SmartShapes.SmartShape1D.Needle2">
      <summary>
            Needle smart shape
            </summary>
    </member>
    <member name="F:Nevron.SmartShapes.SmartShape1D.FlexiArrow1">
      <summary>
            Flex arrow smart shape
            </summary>
    </member>
    <member name="F:Nevron.SmartShapes.SmartShape1D.FlexiArrow2">
      <summary>
            Flex arrow smart shape
            </summary>
    </member>
    <member name="F:Nevron.SmartShapes.SmartShape1D.Line">
      <summary>
            Line smart shape
            </summary>
    </member>
    <member name="F:Nevron.SmartShapes.SmartShape1D.Triangle">
      <summary>
            Triangle smart shape
            </summary>
    </member>
    <member name="T:Nevron.SmartShapes.SmartShape2D">
      <summary>
            Enumerates the 2D smart shapes supported by the N2DSmartShapeFactory class.
            </summary>
    </member>
    <member name="F:Nevron.SmartShapes.SmartShape2D.Rect">
      <summary>
            Rect smart shape
            </summary>
    </member>
    <member name="F:Nevron.SmartShapes.SmartShape2D.Triangle">
      <summary>
            Triangle smart shape
            </summary>
    </member>
    <member name="F:Nevron.SmartShapes.SmartShape2D.InvertedTriangle">
      <summary>
            Inverted triangle smart shape
            </summary>
    </member>
    <member name="F:Nevron.SmartShapes.SmartShape2D.Trapezoid">
      <summary>
            Trapezoid smart shape
            </summary>
    </member>
    <member name="F:Nevron.SmartShapes.SmartShape2D.InvertedTrapezoid">
      <summary>
            Inverted trapezoid smart shape
            </summary>
    </member>
    <member name="F:Nevron.SmartShapes.SmartShape2D.Ellipse">
      <summary>
            Ellipse smart shape
            </summary>
    </member>
    <member name="F:Nevron.SmartShapes.SmartShape2D.Cross">
      <summary>
            Cross smart shape
            </summary>
    </member>
    <member name="F:Nevron.SmartShapes.SmartShape2D.LineCross">
      <summary>
            Line cross smart shape
            </summary>
    </member>
    <member name="F:Nevron.SmartShapes.SmartShape2D.RoundedRectShape">
      <summary>
            Rounded rectangle smart shape
            </summary>
    </member>
    <member name="T:Nevron.SmartShapes.ControlBehavior">
      <summary>
            Enumerates the possible ways in which controls X and Y coordinates can behave 
            </summary>
    </member>
    <member name="F:Nevron.SmartShapes.ControlBehavior.Proportional">
      <summary>
            The coordinate is defined proportionally to the respective path dimension (Width or Height).
            For example Height*0.6.
            </summary>
    </member>
    <member name="F:Nevron.SmartShapes.ControlBehavior.Locked">
      <summary>
            The coordinate is locked to its original value. The control handle does not update this coordinate.
            </summary>
    </member>
    <member name="F:Nevron.SmartShapes.ControlBehavior.OffsetFromNearSide">
      <summary>
            The coordinate is defined with a constant distance from the near side (Left or Top)
            </summary>
    </member>
    <member name="F:Nevron.SmartShapes.ControlBehavior.OffsetFromCenter">
      <summary>
            The coordinate is defined with a constant distance from the center
            </summary>
    </member>
    <member name="F:Nevron.SmartShapes.ControlBehavior.OffsetFromFarSide">
      <summary>
            The coordinate is defined with a constant distance from the far side (Right or Bottom)
            </summary>
    </member>
    <member name="T:Nevron.NewGraphics.Pdf.lIl1I111.Keys">
      <summary>
            Predefined keys of this dictionary.
            </summary>
    </member>
    <member name="T:Nevron.Grid.INCellControl">
      <summary>
            Summary description for INGridControl.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NDirectionalLightSource">
      <summary>
            Represents a directional light source in a 3D scene. Directional light sources are treated as 
            if they are located infinitely far away from the scene. A directional light source has only 
            a direction vector, but no location. The effect of an infinite location is that the rays of 
            light can be considered parallel by the time they reach an object. An example of a real-world 
            directional light source is the sun. Directional lights are rendered faster than point lights 
            and spot lights.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NLightSource">
      <summary>
            NLightSource is an abstract base class that represents a light source 
            in a 3D scene. It can control the light source emission characteristics 
            and coordinate mode. 
            </summary>
    </member>
    <member name="T:Nevron.Editors.INDomEditableNode">
      <summary>
            Summary description for INDomEditable.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NLightSource.Equals(System.Object)">
      <summary>
            Determines whether the light sources are equal.
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NLightSource.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NLightSource.Ambient">
      <summary>
            The ambient color emitted by this light source.
            </summary>
      <remarks>
            The ambient color of the individual light sources is added to the 
            global ambient color in the scene. In general adding ambient light 
            makes the scene brighter.
            </remarks>
    </member>
    <member name="P:Nevron.GraphicsCore.NLightSource.Specular">
      <summary>
            The specular color emitted by this light source.
            </summary>
      <remarks>
            Unlike ambient light, specular light comes from a particular direction 
            and bounces off the surfaces in the 3D scene in a preferred direction.
            </remarks>
    </member>
    <member name="P:Nevron.GraphicsCore.NLightSource.Diffuse">
      <summary>
            The diffuse color emitted by this light source. 
            </summary>
      <remarks>
            Diffuse light comes from a particular direction so it is brighter 
            if it comes squarely down on a surface than if it barely glances off 
            the surface. Once it hits the surface however it is scattered 
            equally in all directions. 
            </remarks>
    </member>
    <member name="P:Nevron.GraphicsCore.NLightSource.CoordinateMode">
      <summary>
            Gets/sets a value indicating whether the light source position 
            and direction are specified in model space or in camera space.
            </summary>
      <remarks>
            Light sources that are defined in model space remain static in relation to the 
            scene when the camera is moved. Light sources that are defined in camera space 
            are "attached" to the camera. By default the coordinates are specified in model space.
            </remarks>
    </member>
    <member name="P:Nevron.GraphicsCore.NLightSource.ParentNode">
      <summary>
            Obtains the parent node
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NLightSource.RootNode">
      <summary>
            Obtains the root of this node
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NDirectionalLightSource.Equals(System.Object)">
      <summary>
            Determines whether the light sources are equal.
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NDirectionalLightSource.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NDirectionalLightSource.Direction">
      <summary>
            A vector which specifies the direction of the light source.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NInteractivityAttributeCollection">
      <summary>
            Holds interactivity attributes.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NImageMapObjectAttribute">
      <summary>
            When present in the attributes collection the control will add the region of the visual object to the
            image map object that is provided to the client side JavaScript for hit testing in AJAX mode.
            </summary>
      <remarks>
            This attriute assumes no additional built-in unctionality, provided for the visual object.
            The image map area, created for the visual object will be available on the client
            for implementation of custom functionality in client side JavaScript (e.g. the visual
            object will be hit-testable at the client and will be present in a collection of
            hit-testable objects for enumeration).
            </remarks>
    </member>
    <member name="M:Nevron.GraphicsCore.NImageMapObjectAttribute.Equals(System.Object)">
      <summary>
            Determines whether instances of the same type are equivalent.
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NImageMapObjectAttribute.GetHashCode">
      <summary>
            The hash code for the current object.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.GraphicsCore.NTextStyle">
      <summary>
            Controls the font, appearance and formatting of text objects.
            </summary>
      <remarks>
            The text style is a composite attribute, which cantains the following additional attributes:
            <list type="bullet"><item><term>Font Style</term><description>
            If the string format is set to Simple - controls the font of the displayed text.
            If the string format is set to XML - controls the default font of the XML formatted text
            </description></item><item><term>String Fortmat</term><description>
            Controls the displayed string formatting. The most important property of this 
            attribute is the StringFormatType property, which lets you specify whether the displayed 
            string is a simple string or is an XML formatted string.
            </description></item><item><term>Fill Style</term><description>
            If the string format is set to Simple - controls the fill style of the displayed text.
            If the string format is set to XML - controls the default fill style of the XML formatted text
            </description></item><item><term>Shadow Style</term><description>
            If the string format is set to Simple - controls the shadow style of the displayed text.
            If the string format is set to XML - controls the default shadow style of the XML formatted text
            </description></item><item><term>Border Style</term><description>
            If the string format is set to Simple - controls the border style of the displayed text.
            If the string format is set to XML - controls the default border style of the XML formatted text
            </description></item><item><term>Backplane Style</term><description>
            Controls the backplane of the displayed text
            </description></item></list></remarks>
    </member>
    <member name="M:Nevron.GraphicsCore.NTextStyle.GetDescription">
      <summary>
            Returns a short description of this NTextStyle object.
            </summary>
      <remarks>
            The default implementation returns the font name and size
            </remarks>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NTextStyle.OnDrawPreviewBackground(Nevron.GraphicsCore.lIIIIllI,Nevron.GraphicsCore.NRectangleF)">
      <summary>
            Draws the background of the preview for this appearance style.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NTextStyle.OnDrawPreview(Nevron.GraphicsCore.lIIIIllI,Nevron.GraphicsCore.NSizeF)">
      <summary>
            Draws a preview for this appearance style.
            </summary>
      <param name="device">
      </param>
      <param name="size">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NTextStyle.GetPaintableRect(Nevron.GraphicsCore.NRectangleF,Nevron.GraphicsCore.l1IlllI1)">
      <summary>
            Obtains the paintable rectangle associated with this text style.
            </summary>
      <param name="shapeRect">
      </param>
      <param name="lengthConverter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NTextStyle.GetAttributeByName(System.String)">
      <summary>
            Gets a child or descendant attribute by its name
            </summary>
      <param name="attributeName">child name or full attribute name</param>
      <returns>a reference to the attribute</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NTextStyle.GetAttributeName(Nevron.Dom.INAttribute)">
      <summary>
            Gets the name of the specified child attribute
            </summary>
      <param name="attribute">child attribute</param>
      <returns>name of the attribute</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NTextStyle.SetAttributeByName(System.String,Nevron.Dom.INAttribute)">
      <summary>
            Sets a child or descendant attribute by its name
            </summary>
      <param name="attributeName">
      </param>
      <param name="attribute">
      </param>
    </member>
    <member name="P:Nevron.GraphicsCore.NTextStyle.FontStyle">
      <summary>
            The default font style used to draw the text.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NTextStyle.StringFormatStyle">
      <summary>
            Obtains the string format style used to draw the text.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NTextStyle.TextFormat">
      <summary>
            Controls how the control should parse the texts displayed by this NText object.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NTextStyle.ReplaceTabsWithSpaces">
      <summary>
            Whether or not the chart should replace tab characters with spaces.
            </summary>
      <remarks>
            When set to false tab characters are not visualized. Otherwise the control
            replaces tabs with spaces and then renders the text.
            </remarks>
    </member>
    <member name="P:Nevron.GraphicsCore.NTextStyle.TabSizeInSpaces">
      <summary>
            The number of spaces that replace a single tab if ReplaceTabsWithSpaces is set to true.
            </summary>
      <remarks>
            This property also influences the offset of the bullets from the text in XML formatted texts.
            </remarks>
    </member>
    <member name="P:Nevron.GraphicsCore.NTextStyle.BackplaneStyle">
      <summary>
            Gives you access to the NBackplane object of the text.
            </summary>
      <remarks>
            You can use the backplane of the text for various purposes for example to draw the user attention to the text or to increase the readability.
            </remarks>
      <example>
            The code snippet below enables the backplane and changes the color to red.
            <code lang="VB">
            someTextProps.Backplane.Visible = True
            someTextProps.Backplane.FillEffect.SetSolidColor(Color.Red)
            </code><code>
            someTextProps.Backplane.Visible = true;
            someTextProps.Backplane.FillEffect.SetSolidColor(Color.Red);
            </code></example>
    </member>
    <member name="P:Nevron.GraphicsCore.NTextStyle.TextOverlapsImage">
      <summary>
            Controls whether or not the text should use the Z position of the base point.
            </summary>
      <remarks>
            When Nevron Chart for .NET renders objects with associated texts like bars, axes etc. it generates a base point with a Z value equal to the object. You can instruct the NText object whether to render or not at the same Z value as the base point. When set to true the text will always overlap the chart.
            </remarks>
      <example>
            The following example instructs the bar labels to use the Z value of the bar they are attached to. This is why these objects will disappear when overlapped by a chart element closer to the viewer.
            <code lang="VB">
            Dim chart As NChart =  NChartControl.Charts.GetAt(0) 
            Dim bar As NBarSeries = CType(chart.Series.Add(SeriesType.Bar), NBarSeries)
            
            bar.Add(10, "Apples")
            bar.Add(20, "Oranges")
            
            bar.Appearance.LineMode = AppearanceLineMode.Series
            bar.DataLabels.Text.TextOverlapsImage = False
            </code><code>
            NChart chart = NChartControl.Charts.GetAt(0);
            NBarSeries bar = (NBarSeries)chart.Series.Add(SeriesType.Bar);
            			
            bar.Add(10, "Apples");
            bar.Add(20, "Oranges");
            
            bar.Appearance.LineMode = AppearanceLineMode.Series;
            bar.DataLabels.Text.TextOverlapsImage = false;
            </code></example>
    </member>
    <member name="P:Nevron.GraphicsCore.NTextStyle.FillStyle">
      <summary>
            Controls the fill style applied on the text.
            </summary>
      <remarks>
            You may also render texts with different fill styles if TextType is set to TextFormat.Formatted. 
            For more information consult the documentation regarding XML formatted texts.
            </remarks>
      <example>
            The following example creates a new label with different color and font than the default ones.
            <code lang="VB">
            Dim label As NLabel =  New NLabel() 
            label.Text = "Label with different color \n and font"
            label.TextType = TextFormat.Multiline
            label.TextProps.FillStyle = New NColofFillStyle(Color.Aqua)
            label.TextProps.Font = New Font("Arial", 22)
            NChartControl.Labels.Add(label)
            </code><code>
            NLabel label = new NLabel();
            label.Text = "Label with different color \n and font";
            label.TextType = TextFormat.Multiline
            label.TextProps.FillStyle = new NColofFillStyle(Color.Aqua);
            label.TextProps.Font = new Font("Arial", 22);
            NChartControl.Labels.Add(label);
            </code></example>
    </member>
    <member name="P:Nevron.GraphicsCore.NTextStyle.BorderStyle">
      <summary>
            Controls the border applied on the text.
            </summary>
      <remarks>
            By default the text is not rendered with border (border width is set to 0), but you
            can disable this at any time and thus achieve outlined texts. Note that using outlines 
            slows down the text rendering.
            </remarks>
    </member>
    <member name="P:Nevron.GraphicsCore.NTextStyle.ShadowStyle">
      <summary>
            The shadow applied on this text.
            </summary>
      <remarks>
            You must only use solid and gaussian blur shadow types.
            </remarks>
    </member>
    <member name="P:Nevron.GraphicsCore.NTextStyle.Offset">
      <summary>
            Controls the offset of the text origin point from the text base point.
            </summary>
      <remarks>
            The base point and the origin point deserve special attention. It is essential to understand their meaning because they work together to determine the final text position on the screen. The base point is specified by the control and cannot be changed. For example when you have a bar serie it will position the base points for the texts at the top of each bar. Another example are the axes which positions the base points at the major axis ticks. The origin point is always specified relative to the base point. The value is given in pixels. The default value is 0.
            </remarks>
      <example>
            The following example creates a label ten pixels away from the left top corner of the control.
            <code lang="VB">
            Dim label As NLabel =  New NLabel() 
            label.Text = "Offset of the origin point 10"
            label.HorizontalMargin = 0
            label.VerticalMargin = 0
            label.TextProps.HorzAlign = HorzAlignNear
            label.TextProps.VertAlign = HorzAlignNear
            label.TextProps.Offset = New NPointL(10, 10)
            NChartControl.Labels.Add(label)
            </code><code>
            NLabel label = new NLabel();
            label.Text = "Offset of the origin point 10";
            label.HorizontalMargin = 0;
            label.VerticalMargin = 0;
            label.TextProps.HorzAlign = HorzAlignNear;
            label.TextProps.VertAlign = HorzAlignNear;
            label.TextProps.Offset = new NPointL(10, 10);
            NChartControl.Labels.Add(label);
            </code></example>
    </member>
    <member name="P:Nevron.GraphicsCore.NTextStyle.Orientation">
      <summary>
            Controls the orientation of the 2D texts in degrees.
            </summary>
      <remarks>
            The default value is 0. The rotation is counter clockwise.
            </remarks>
      <example>
            The example below creates a vertical label
            <code lang="VB">
            Dim label As NLabel =  New NLabel() 
            label.Text = "Rotated label"
            label.Text.Orientation = 90
            NChartControl.Labels.Add(label)
            </code><code>
            NLabel label = new NLabel();
            label.Text = "Rotated label";
            label.Text.Orientation = 90;
            NChartControl.Labels.Add(label);
            </code></example>
    </member>
    <member name="P:Nevron.GraphicsCore.NTextStyle.Attributes">
      <summary>
            Gets the list of child attributes of this container
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.GraphicsCore.NStrokeStyle">
      <summary>
            Controls the line (or border) parameters of the object it is 
            applied to. With the properties of this object you can modify 
            the line style, color and width.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NStrokeStyle.defaultPattern">
      <summary>
            Default pattern
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NStrokeStyle.defaultFactor">
      <summary>
            Default factor
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NStrokeStyle.defaultLineJoin">
      <summary>
            Default line join
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NStrokeStyle.defaultDashCap">
      <summary>
            Default dash cap
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NStrokeStyle.defaultStartCap">
      <summary>
            Default start line cap
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NStrokeStyle.defaultEndCap">
      <summary>
            Default end line cap
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NStrokeStyle.defaultDashMode">
      <summary>
            Default dash mode
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NStrokeStyle.GetHashCode">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NStrokeStyle.Equals(System.Object)">
      <summary>
            Returns true if the objects are equal
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NStrokeStyle.Equals(Nevron.GraphicsCore.NStrokeStyle)">
      <summary>
            Compares two NStrokeStyle objects
            </summary>
      <param name="strokeStyle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NStrokeStyle.CreatePen(Nevron.GraphicsCore.INDevice)">
      <summary>
            Creates a pen corresponding to the settings of this NStrokeStyle
            </summary>
      <remarks>
            If the NStrokeStyle object cannot produce a valid Pen the 
            function returns null. Otherwise the function returns the newly 
            created Pen object. 
            </remarks>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NStrokeStyle.CreateNPen(Nevron.GraphicsCore.INDevice)">
      <summary>
      </summary>
      <param name="device">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NStrokeStyle.IsPrimitiveStyle">
      <summary>
            Returns true if this appearance style is a primitive appearance style (fill style, stroke style or shadow style).
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NStrokeStyle.OnDrawPreviewBackground(Nevron.GraphicsCore.lIIIIllI,Nevron.GraphicsCore.NRectangleF)">
      <summary>
            Draws the background of the preview for this appearance style.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NStrokeStyle.GetPaintableRect(Nevron.GraphicsCore.NRectangleF,Nevron.GraphicsCore.l1IlllI1)">
      <summary>
            Obtains the paintable rectangle associated with this stroke style.
            </summary>
      <param name="shapeRect">
      </param>
      <param name="lengthConverter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NStrokeStyle.OnDrawPreview(Nevron.GraphicsCore.lIIIIllI,Nevron.GraphicsCore.NSizeF)">
      <summary>
            Draws the preview for this appearance style.
            </summary>
      <param name="device">
      </param>
      <param name="size">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NStrokeStyle.GetDescription">
      <summary>
            Returns a short description of this stroke style.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NStrokeStyle.Invert">
      <summary>
            Obtains the inverted stroke representation
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NStrokeStyle.Color">
      <summary>
            Controls the line color.
            </summary>
      <remarks>
            When line antialising is turned on the component also uses 
            the alpha value of the color to produce a transparent line.
            </remarks>
      <example>
        <code>
            strokeStyle.Color = Color.Blue;
            </code>
      </example>
    </member>
    <member name="P:Nevron.GraphicsCore.NStrokeStyle.Pattern">
      <summary>
            Defines the line pattern.
            </summary>
      <remarks>
            The Pattern and Factor properties define the line by working together to 
            define whether a certain pixel from the line should be drawn or not. The 
            values of the LinePattern enumeration actually represent 16-bit integers 
            whose bit pattern determines which fragments of a line will be drawn when 
            the line is rasterized. Bit zero is used first. For example the value of 
            SolidLine is all ones (0xFFFF). You can create you own patterns by simply 
            setting the bits of the short integer value that you want the line to draw. 
            Suppose for example that you want to draw a line having three empty pixels, 
            then one black then three empty and so forth. The value you should pass to 
            the LinePattern in this case is 0x8888 or in binary 1000100010001000. You 
            must also set the Factor property to 1.
            </remarks>
      <example>
            The following example shows how to accomplish this:
            <code lang="VB">
            strokeStyle.Color = System.Drawing.Color.Black
            strokeStyle.Pattern = CType(0x8888, LinePattern)
            strokeStyle.Factor = 1
            </code><code>
            strokeStyle.Color = System.Drawing.Color.Black;
            strokeStyle.Pattern = (LinePattern)0x8888;
            strokeStyle.Factor = 1;
            </code></example>
    </member>
    <member name="P:Nevron.GraphicsCore.NStrokeStyle.CustomPattern">
      <summary>
            Gets/sets the custom pattern of the line. 
            </summary>
      <remarks>
            This property has effect only if Pattern is set to LinePattern.Custom
            </remarks>
    </member>
    <member name="P:Nevron.GraphicsCore.NStrokeStyle.Width">
      <summary>
            Controls the width of the lines in NLength format. 
            </summary>
      <remarks>
            The default value is 1 pixel. When you set this value to 0 the 
            control will not draw the line.
            </remarks>
      <example>
            Disable the line.
            <code lang="VB">
            strokeStyke.Width = new NLength(0, NGraphicsUnit.Pixel)
            </code><code>
            strokeStyke.Width = new NLength(0, NGraphicsUnit.Pixel);
            </code></example>
    </member>
    <member name="P:Nevron.GraphicsCore.NStrokeStyle.Factor">
      <summary>
            A multiplier for each bit in the line stipple pattern. 
            </summary>
      <remarks>
            The Pattern and Factor properties define the line by working together to define 
            whether a certain pixel from the line should be drawn or not. If factor is 3, 
            for example, each bit in the pattern will be used three times before the next 
            bit in the pattern is used. The factor parameter is clamped to the range [1, 256] 
            and defaults to one. The values of the LinePattern enumeration actually represent 
            16-bit integers whose bit pattern determines which fragments of a line will be 
            drawn when the line is rasterized. 
            </remarks>
      <example>
            The following example shows how to define a custom pattern and modify the factor.
            <code lang="VB">
            strokeStyke.Color = System.Drawing.Color.Black
            strokeStyke.Pattern = CType(0x8888, LinePattern)
            strokeStyke.Factor = 3
            </code><code>
            strokeStyke.Color = System.Drawing.Color.Black;
            strokeStyke.Pattern = (LinePattern)0x8888;
            strokeStyke.Factor = 3;
            </code></example>
    </member>
    <member name="P:Nevron.GraphicsCore.NStrokeStyle.LineJoin">
      <summary>
            Specifies how to join consecutive line or curve segments in a figure (subpath) contained in a GraphicsPath object.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NStrokeStyle.DashCap">
      <summary>
            Gets/sets the cap style used at the end of the dashes that make up dashed lines drawn with this NStrokeStyle object.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NStrokeStyle.Alignment">
      <summary>
            Gets/sets the cap style used at the end of the dashes that make up dashed lines drawn with this NStrokeStyle object.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NStrokeStyle.StartCap">
      <summary>
            Gets/sets the cap style used at the beginning of lines drawn with this stroke style
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NStrokeStyle.EndCap">
      <summary>
            Gets/sets the cap style used at the end of lines drawn with this stroke style
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NStrokeStyle.DashMode">
      <summary>
            Gets or sets the dash mode of the stroke
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NAdvancedGradientPointCollection">
      <summary>
            This class represents an array of advanced gradient points. An advanced 
            gradient consists of a background color and an arbitrary number of color 
            points with different shape and intensity.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NAdvancedGradientPointCollection.Clone">
      <summary>
            Creates an identical copy of this object
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.GraphicsCore.NAdvancedGradientPoint">
      <summary>
            Represents an advanced gradient point.
            </summary>
      <remarks>
            An advanced gradient consists of a background color and an arbitrary 
            number of color points. Each point has properties for shape, color, 
            intensity and rotation (applicable when the shape is line or rectangle).
            </remarks>
    </member>
    <member name="M:Nevron.GraphicsCore.NAdvancedGradientPoint.Clone">
      <summary>
            Creates an identical copy of this object
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NAdvancedGradientPoint.Color">
      <summary>
            The color of the advanced gradient point.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NAdvancedGradientPoint.X">
      <summary>
            The horizontal position of the gradient point.
            </summary>
      <remarks>
            The position is specified in percents of the gradient width.
            </remarks>
    </member>
    <member name="P:Nevron.GraphicsCore.NAdvancedGradientPoint.Y">
      <summary>
            The vertical position of the gradient point.
            </summary>
      <remarks>
            The position is specified in percents of the gradient height.
            </remarks>
    </member>
    <member name="P:Nevron.GraphicsCore.NAdvancedGradientPoint.Angle">
      <summary>
            The angle of rotation of the point shape.
            </summary>
      <remarks>
            The angle is specified in degrees. The gradient point is rotated 
            around its center.
            </remarks>
    </member>
    <member name="P:Nevron.GraphicsCore.NAdvancedGradientPoint.Intensity">
      <summary>
            The intensity of the color point.
            </summary>
      <remarks>
            Smaller values mean that the point influence in the gradient will 
            diminish and vice versa. The default value is 100.
            </remarks>
    </member>
    <member name="P:Nevron.GraphicsCore.NAdvancedGradientPoint.Shape">
      <summary>
            The shape of the advanced gradient point.
            </summary>
      <remarks>
            When the shape is line or rectangle you can also modify the angle 
            parameter of the point.
            </remarks>
    </member>
    <member name="T:Nevron.GraphicsCore.NMetricUnitSerializer">
      <summary>
            Implements graphics units serialization
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NMeasurementUnitSerializer">
      <summary>
            Base class for all measurement unit serializers
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NMeasurementUnitSerializer.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Provided for serialization support
            </summary>
      <param name="info">
      </param>
      <param name="context">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NMeasurementUnitSerializer.GetRealObject(System.Runtime.Serialization.StreamingContext)">
      <summary>
            Provided for serialization support
            </summary>
      <param name="context">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NMetricUnitSerializer.GetRealObject(System.Runtime.Serialization.StreamingContext)">
      <summary>
            Overriden to return an instance of a metric unit
            </summary>
      <param name="context">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.GraphicsCore.NPointGraphicsUnit">
      <summary>
            Represents the point graphics measurement unit.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NGraphicsUnit">
      <summary>
            Serves as base class for all units in the GDI+ (Graphics) measurement system
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NGraphicsUnit.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Serializes this measurement unit.
            </summary>
      <param name="info">
      </param>
      <param name="context">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NGraphicsUnit.GetFromEnum(System.Drawing.GraphicsUnit)">
      <summary>
            Returns the NGraphicsUnit object corresponding to the graphics unit enum value
            </summary>
      <param name="graphicsUnit">
      </param>
      <returns>
      </returns>
    </member>
    <member name="F:Nevron.GraphicsCore.NGraphicsUnit.Display">
      <summary>
            Display
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NGraphicsUnit.Document">
      <summary>
            Document
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NGraphicsUnit.Millimeter">
      <summary>
            Millimeter
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NGraphicsUnit.Inch">
      <summary>
            Inch
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NGraphicsUnit.Pixel">
      <summary>
            Pixel
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NGraphicsUnit.Point">
      <summary>
            Point
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NGraphicsUnit.DefaultValueFormat">
      <summary>
            The default value format of this measurement unit.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NGraphicsUnit.Name">
      <summary>
            The name of this graphics unit.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NGraphicsUnit.GraphicsUnit">
      <summary>
            The graphics unit enum value.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NPointGraphicsUnit.ConvertXValueToPixels(Nevron.GraphicsCore.NMeasurementUnitConverter)">
      <summary>
            Converts this measurement unit to its equivalent in pixels along the X direction.
            </summary>
      <param name="converter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NPointGraphicsUnit.ConvertYValueToPixels(Nevron.GraphicsCore.NMeasurementUnitConverter)">
      <summary>
            Converts this measurement unit to its equivalent in pixels along the Y direction.
            </summary>
      <param name="converter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NPointGraphicsUnit.Abbreviation">
      <summary>
            The abbreviation of this measurement unit.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NPointGraphicsUnit.GraphicsUnit">
      <summary>
            Gets the english unit of the object.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NPointGraphicsUnit.UnitType">
      <summary>
            The measurement unit type.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NPointGraphicsUnit.ScaleToInch">
      <summary>
            The scale to inch of this measurement unit.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NPointGraphicsUnit.DefaultValueFormat">
      <summary>
            The default value format of this measurement unit.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NSizeL">
      <summary>
            Represents a size, defined as an ordered pair of lengths (Width, Height).
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NSizeL.Equals(System.Object)">
      <summary>
            Overriden to compare the contained lengths
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NSizeL.GetHashCode">
      <summary>
            Overriden because equals was overriden 
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NSizeL.ToString">
      <summary>
            Obtains the string representation of this size.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NSizeL.Parse(System.String@,Nevron.GraphicsCore.NMeasurementSystemManager)">
      <summary>
            Converts the string representation of a size structure to its NSizeL equivalent.
            </summary>
      <param name="s">
      </param>
      <param name="measurementSystemManager">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NSizeL.CompareTo(System.Object)">
      <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="F:Nevron.GraphicsCore.NSizeL.Width">
      <summary>
            The Width in NLength format.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NSizeL.Height">
      <summary>
            The Height in NLength format.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NSizeL.IsEmpty">
      <summary>
            Tests whether this NSizeL has zero width and height. 
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NSizeL.Empty">
      <summary>
            The empty (0, 0) size.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.INImageMapRenderSurface">
      <summary>
            Implemented by render surfaces that represent an image map
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.INBitmapRenderSurface">
      <summary>
            Implemented by render surfaces that output to a bitmap
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.INBitmapRenderSurface.GetBitmapHolder(System.Drawing.Imaging.PixelFormat,Nevron.GraphicsCore.NResolution)">
      <summary>
            Gets a bitmap representing the render surface
            </summary>
      <param name="pixelFormat">
      </param>
      <param name="resolution">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.GraphicsCore.INMouseCursor">
      <summary>
            Implemented by objects which can provide a mouse cursor
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.INMouseCursor.Cursor">
      <summary>
            Gets/sets the mouse cursor
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.TextObject.NTextObject">
      <summary>
            Summary description for NTextObject.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.TextObject.INTextObject">
      <summary>
            Summary description for INTextObject.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.TextObject.INTextObject.Measure(Nevron.GraphicsCore.lIIIIllI)">
      <summary>
            Returns the size of the text object in device units
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.TextObject.INTextObject.Paint(Nevron.GraphicsCore.lIIll1l1,System.Drawing.PointF)">
      <summary>
            Paints the text at the specified position
            </summary>
      <param name="context">
      </param>
      <param name="point">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.TextObject.INTextObject.Paint(Nevron.GraphicsCore.lIIll1l1,Nevron.GraphicsCore.NRectangleF)">
      <summary>
            Paints the text in the specified rectangle
            </summary>
      <param name="context">
      </param>
      <param name="bounds">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.TextObject.NTextObject.Measure(Nevron.GraphicsCore.lIIIIllI)">
      <summary>
            Returns the size of the text object in device units
            </summary>
      <param name="device">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.TextObject.NTextObject.Paint(Nevron.GraphicsCore.lIIll1l1,System.Drawing.PointF)">
      <summary>
            Paints the text at the specified position
            </summary>
      <param name="context">
      </param>
      <param name="point">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.TextObject.NTextObject.Paint(Nevron.GraphicsCore.lIIll1l1,Nevron.GraphicsCore.NRectangleF)">
      <summary>
            Paints the text in the specified rectangle
            </summary>
      <param name="context">
      </param>
      <param name="bounds">
      </param>
    </member>
    <member name="T:Nevron.GraphicsCore.Shapes.NCutEdgeRectShape">
      <summary>
            Summary description for NCutEdgeRectShape.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Shapes.NIntersectedTriangleShape">
      <summary>
            Summary description for NIntersectedTriangleShape.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NArgbColorValue">
      <summary>
            Represents a color in ARGB color space as a 4 byte (Int32) value
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NArgbColorValue.ToColor">
      <summary>
            Converts this color value to a System.Drawing color
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NArgbColorValue.ToARGBColorValueF">
      <summary>
            Converts this color to a NArgbColorValueF structure
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NArgbColorValue.ToGrayscale">
      <summary>
            Returns a grayscale ARGB color value
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NArgbColorValue.CompareTo(System.Object)">
      <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NArgbColorValue.Equals(System.Object)">
      <summary>
            Determines whether the colors are equal.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NArgbColorValue.GetHashCode">
      <summary>
            Overriden to avoid compilation warings
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NArgbColorValue.ToString">
      <summary>
            Returns the string representation of this object.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NArgbColorValue.FromString(System.String)">
      <summary>
            Creates a new NArgbColorValue structure from the specified string
            </summary>
      <param name="s">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NArgbColorValue.InterpolateColor(Nevron.GraphicsCore.NArgbColorValue,Nevron.GraphicsCore.NArgbColorValue,System.Single)">
      <summary>
            Returns a color between begin and end color. The coff parameter must be in the range [0, 1].
            </summary>
      <param name="begin">
      </param>
      <param name="end">
      </param>
      <param name="coeff">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NArgbColorValue.A">
      <summary>
            Gets the alpha component of this color
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NArgbColorValue.R">
      <summary>
            Gets the red component of this color
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NArgbColorValue.G">
      <summary>
            Gets the green component of this color
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NArgbColorValue.B">
      <summary>
            Gets the blue component of this color
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NArgbColorValue.Intensity">
      <summary>
            Gets the intensity of this color
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NBezierCurveF">
      <summary>
            The NBezierCurveF structure represents a bezier curve in 2D space defined by four points. 
            The curve starts from the start point and ends on the end point.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NBezierCurveF.Translate(System.Single,System.Single)">
      <summary>
            Translates the primitive with the specified amounts
            </summary>
      <param name="dx">
      </param>
      <param name="dy">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NBezierCurveF.Translate(Nevron.GraphicsCore.NPointF)">
      <summary>
            Translates the primitive with the specified offset
            </summary>
      <param name="offset">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NBezierCurveF.AddToGraphicsPath(System.Drawing.Drawing2D.GraphicsPath)">
      <summary>
            Appends the primitive to the specified graphics path
            </summary>
      <param name="path">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NBezierCurveF.ContainsOnOutline(Nevron.GraphicsCore.NPointF,System.Single)">
      <summary>
            Determines whether the outline of the primitive contains the specified point
            </summary>
      <param name="point">
      </param>
      <param name="weight">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NBezierCurveF.ContainsOnOutline(Nevron.GraphicsCore.NPointF,System.Drawing.Pen)">
      <summary>
            Determines whether the outline of the primitive contains the specified point
            </summary>
      <param name="point">
      </param>
      <param name="pen">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NBezierCurveF.Equals(System.Object)">
      <summary>
      </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NBezierCurveF.GetHashCode">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NBezierCurveF.ToString">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NBezierCurveF.Approximate">
      <summary>
            Approximates the cubic bezier using 4 quadratic beziers.
            </summary>
      <remarks>
            The fixed mid point approach is implemented which is fast and stable. For more
            information visit http://www.timotheegroleau.com/Flash/articles/cubic_bezier_in_flash.htm
            </remarks>
      <returns>
      </returns>
    </member>
    <member name="F:Nevron.GraphicsCore.NBezierCurveF.Start">
      <summary>
            Start point
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NBezierCurveF.FirstControl">
      <summary>
            First control point
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NBezierCurveF.SecondControl">
      <summary>
            Second control point
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NBezierCurveF.End">
      <summary>
            End point
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NBezierCurveF.Bounds">
      <summary>
            Gets the minimal enclosing rectangle
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NBezierCurveF.BoundsRange">
      <summary>
            Gets the minimal enclosing 2D range
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NBezierCurveF.IsFlat">
      <summary>
            Determines whether this is a flat primitive
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NBezierCurveF.StartPoint">
      <summary>
            Gets/sets the start point of the open figure
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NBezierCurveF.EndPoint">
      <summary>
            Gets/sets the end point of the open figure
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NStrokeStyleToGrayScaleConverter">
      <summary>
            The NStrokeStyleToGrayScaleConverter class represents a converter, which converts a stroke style to its gray scale equivalent
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NStrokeStyleConverter">
      <summary>
            The NStrokeStyleConverter class serves as base class for all converters, which can convert stroke styles
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NStrokeStyleConverter.Convert(System.Object)">
      <summary>
            Must override to convert the object
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NStrokeStyleConverter.CanConvert(System.Type)">
      <summary>
            Determines whether the converter can convert objects of the specified type 
            </summary>
      <param name="type">object type</param>
      <returns>true if objects of this type can be converted, otherwise false</returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NStrokeStyleConverter.Converts">
      <summary>
            Returns an array of types converted by this object.
            </summary>
      <remarks>
            This implementation will return all currently known types of stroke styles
            </remarks>
    </member>
    <member name="M:Nevron.GraphicsCore.NStrokeStyleToGrayScaleConverter.Convert(System.Object)">
      <summary>
            Overriden to convert all colors of a stroke stytle to gray scale
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.FormulaSheet.NFormulaRowCollection">
      <summary>
            The NFormulaRowCollection class is a strongly typed collection, containing NFormulaRow instances
            </summary>
      <remarks>
            A reference to this class can be obtained from the Rows property of the NFormulaSection class. 
            This collection does not accept null formula row references.
            </remarks>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaRowCollection.Clone">
      <summary>
            Creates an identical copy of this object
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaRowCollection.UpdateReferences(Nevron.INReferenceProvider)">
      <summary>
      </summary>
      <param name="provider">
      </param>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaRowCollection.CreateNonSerializedObjects">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaRowCollection.GetReferenceProvider">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaRowCollection.ProvideReference(System.Type)">
      <summary>
      </summary>
      <param name="parentType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaRowCollection.Add(Nevron.FormulaSheet.NFormulaRow)">
      <summary>
            Adds the specified row
            </summary>
      <param name="row">row to add</param>
      <returns>index of the row in the collection</returns>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaRowCollection.IndexOf(Nevron.FormulaSheet.NFormulaRow)">
      <summary>
            Determines the index of the row in the collection
            </summary>
      <param name="row">row</param>
      <returns>index of the row or -1 if it is not in the collection</returns>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaRowCollection.Insert(System.Int32,Nevron.FormulaSheet.NFormulaRow)">
      <summary>
            Inserts a the specified row at the specified index
            </summary>
      <param name="index">index</param>
      <param name="row">row</param>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaRowCollection.Remove(Nevron.FormulaSheet.NFormulaRow)">
      <summary>
            Removes the specified row
            </summary>
      <param name="row">row to remove</param>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaRowCollection.RemoveAt(System.Int32)">
      <summary>
            Removes the row at the specified index
            </summary>
      <param name="index">index of row to remove</param>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaRowCollection.Clear">
      <summary>
            Clears the content of the collection
            </summary>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaRowCollection.Contains(Nevron.FormulaSheet.NFormulaRow)">
      <summary>
            Determines whether the specified row is contained in this collection
            </summary>
      <param name="row">row</param>
      <returns>true if the row is contained in this collection, otherwise false</returns>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaRowCollection.OnChanged">
      <summary>
            Called when the collection items have changed
            </summary>
      <remarks>
            This implementation calls the OnRowsChanged method of the section
            </remarks>
    </member>
    <member name="P:Nevron.FormulaSheet.NFormulaRowCollection.Section">
      <summary>
            Gets a reference to the formula section hosting this collection
            </summary>
    </member>
    <member name="P:Nevron.FormulaSheet.NFormulaRowCollection.Count">
      <summary>
            Gets the count of rows in the collection
            </summary>
    </member>
    <member name="T:Nevron.FormulaSheet.NVariantFormulaCell">
      <summary>
            The NVariantFormulaCell is a formula cell, which is not strongly typed and stores a variant as its value
            </summary>
    </member>
    <member name="M:Nevron.FormulaSheet.NVariantFormulaCell.Clone">
      <summary>
            Creates an identical copy of this object
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaSheet.NVariantFormulaCell.SetVariantValue(Nevron.FormulaEngine.NVariant)">
      <summary>
            Overriden to convert the variant to String and store its value
            </summary>
      <param name="val">
      </param>
    </member>
    <member name="M:Nevron.FormulaSheet.NVariantFormulaCell.GetVariantValue">
      <summary>
            Overriden to get the value as a String variant
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.FormulaSheet.NVariantFormulaCell.Value">
      <summary>
            Gets/sets the NVariant value of the cell
            </summary>
    </member>
    <member name="P:Nevron.FormulaSheet.NVariantFormulaCell.IsStronglyTyped">
      <summary>
            Overriden to return true
            </summary>
    </member>
    <member name="P:Nevron.FormulaSheet.NVariantFormulaCell.StrongType">
      <summary>
            Overriden to return VariantType.String
            </summary>
    </member>
    <member name="T:Nevron.Editors.NStandardFrameStyleEditorUC">
      <summary>
            Edits NStandardFrameStyle objects.
            </summary>
    </member>
    <member name="M:Nevron.Editors.NStandardFrameStyleEditorUC.Dispose(System.Boolean)">
      <summary> 
            Clean up any resources being used.
            </summary>
    </member>
    <member name="P:Nevron.Editors.NStandardFrameStyleEditorUC.Style">
      <summary>
            Gets/sets NStandardFrameStyle object to edit.
            </summary>
    </member>
    <member name="T:Nevron.Editors.NStandardFrameStyleButton">
      <summary>
            Represents a button, which is used for the editing of a standard frame style. Displays a standard frame style preview.
            </summary>
    </member>
    <member name="M:Nevron.Editors.NStandardFrameStyleButton.EditStyle(Nevron.GraphicsCore.NStandardFrameStyle,System.Boolean,Nevron.GraphicsCore.NStandardFrameStyle@)">
      <summary>
            Overriden to show the standard frame style type editor
            </summary>
      <param name="inStyle">
      </param>
      <param name="automatic">
      </param>
      <param name="outStyle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Editors.NStandardFrameStyleButton.CreateDefaultStyle">
      <summary>
            Overriden to create a new standard frame style
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.Editors.NHandleStyle">
      <summary>
            Defines the appearance of the smart shape editor handles 
            </summary>
    </member>
    <member name="M:Nevron.Editors.NHandleStyle.Clone">
      <summary>
            Creates an identical copy of this object
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Editors.NHandleStyle.UpdateReferences(Nevron.INReferenceProvider)">
      <summary>
      </summary>
      <param name="provider">
      </param>
    </member>
    <member name="M:Nevron.Editors.NHandleStyle.CreateNonSerializedObjects">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.Editors.NHandleStyle.GetReferenceProvider">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Editors.NHandleStyle.OnChanged">
      <summary>
            Called when the handle style properties have changed
            </summary>
    </member>
    <member name="P:Nevron.Editors.NHandleStyle.Color">
      <summary>
            Handle color
            </summary>
    </member>
    <member name="P:Nevron.Editors.NHandleStyle.Size">
      <summary>
            Handle size
            </summary>
    </member>
    <member name="P:Nevron.Editors.NHandleStyle.Shape">
      <summary>
            Handle shape
            </summary>
    </member>
    <member name="T:Nevron.Editors.NDomListBoxBrowserUC">
      <summary>
            Summary description for NDomListBoxBrowserUC.
            </summary>
    </member>
    <member name="T:Nevron.Editors.NDomBrowserUC">
      <summary>
            Summary description for NDomBrowserUC.
            </summary>
    </member>
    <member name="M:Nevron.Editors.NDomBrowserUC.OnSelectedObjectChanged(System.Object,System.EventArgs)">
      <summary>
            Raises the selected object changed event
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.Editors.NDomBrowserUC.OnSelectedObjectDoubleClicked(System.Object,System.EventArgs)">
      <summary>
            Raises the selected object changed event
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.Editors.NDomBrowserUC.Dispose(System.Boolean)">
      <summary> 
            Clean up any resources being used.
            </summary>
    </member>
    <member name="E:Nevron.Editors.NDomBrowserUC.SelectedObjectChanged">
      <summary>
            Occurs when the selected object has changed
            </summary>
    </member>
    <member name="E:Nevron.Editors.NDomBrowserUC.SelectedObjectDoubleClicked">
      <summary>
            Occurs when the selected object has been double clicked
            </summary>
    </member>
    <member name="M:Nevron.Editors.NDomListBoxBrowserUC.Dispose(System.Boolean)">
      <summary> 
            Clean up any resources being used.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NTabLayout">
      <summary>
            Represents a generic layout manager for tab collections
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTabLayout.SetCollection(Nevron.UI.WinForm.Controls.NTabCollection)">
      <summary>
            Sets the collection of tabs the manager will work with.
            </summary>
      <param name="tabs">The specified collection of tabs.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTabLayout.SetTabInfo(Nevron.UI.WinForm.Controls.NTabInfo)">
      <summary>
            Sets the current NTabInfo with the specified one.
            </summary>
      <param name="info">The new NTabInfo to use.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTabLayout.Measure(Nevron.UI.WinForm.Controls.NMeasureStringInfo)">
      <summary>
            Measures the tabs size using the current NTabInfo struct.
            </summary>
      <param name="measureInfo">The measure parameters</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTabLayout.Layout">
      <summary>
            Performs layout logic to the tabs using the current NTabInfo struct.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NNavigationPaneRenderer">
      <summary>
            Summary description for NNavigationPanelRenderer.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NFontListBox">
      <summary>
            Summary description for NFontListBox.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFontListBox.SelectedFontName">
      <summary>
            Gets/sets the selected font name.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NRichTextLabel">
      <summary>
            Represents a static control with the ability to visualize a NTextDocument object.
            The document may be initialized in two ways - either providing XML-formatted text
            or creating and setting a NTextDocument object directly.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NRichTextLabel.InitializeDefault">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NRichTextLabel.UpdateFromPalette(Nevron.UI.WinForm.Controls.NPalette)">
      <summary>
      </summary>
      <param name="palette">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NRichTextLabel.ShouldSerializeItem">
      <summary>
            Determines whether the internal item constrolling image and text location should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRichTextLabel.Item">
      <summary>
            Gets the NLabelElement that represents the content of the label.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NExpander">
      <summary>
            Represents collapsible group control, identical with the one found in the
            WindowsXP Explorer Bar. A smooth animation is implemented providing a high-level user experience.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NExpander.ApplyPalette(Nevron.UI.WinForm.Controls.NPalette)">
      <summary>
            Updates from the specified palette.
            </summary>
      <param name="palette">The palette to update from.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NExpander.BeginInit">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NExpander.EndInit">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NExpander.PerformCollapse">
      <summary>
            Performs the core logic when the control needs to be collapsed.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NExpander.PerformExpand">
      <summary>
            Performs the core logic when the control needs to be expanded.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NExpander.OnStateChanged(System.EventArgs)">
      <summary>
            Notifies that a change in the control's state has occured.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NExpander.PerformDispose(System.Boolean)">
      <summary>
      </summary>
      <param name="disposing">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NExpander.OnSizeChanged(System.EventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NExpander.OnControlAdded(System.Windows.Forms.ControlEventArgs)">
      <summary>
            Overriden in order to apply our palette to any child control.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NExpander.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NExpander.OnPaletteChanged(Nevron.UI.WinForm.Controls.NPalette,Nevron.UI.WinForm.Controls.PaletteChangeEventArgs)">
      <summary>
            Handles any change in the Palette member.
            </summary>
      <param name="Palette">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NExpander.ShouldSerializeHeaderFont">
      <summary>
            Determines whether the HeaderFont member should be serialized by the designer.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NExpander.ShouldSerializeHeaderImage">
      <summary>
            Determines whether the HeaderImage member should be serialized by the designer.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NExpander.ShouldSerializeArrowImageSet">
      <summary>
            Determines whether the ArrowImageSet member should be serialized by the designer.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NExpander.ShouldSerializeHeaderImageSize">
      <summary>
            Determines whether the HeaderImageSize member should be serialized by the designer.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NExpander.ShouldSerializeBackground">
      <summary>
            Determines whether the Background member should be serialized by the designer.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NExpander.ShouldSerializeHeaderBackground">
      <summary>
            Determines whether the HeaderBackground member should be serialized by the designer.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NExpander.ShouldSerializeHeaderCursor">
      <summary>
            Determines whether the HeaderCursor member should be serialized by the designer.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NExpander.ShouldSerializeAnimationInfo">
      <summary>
            Determines whether the AnimationInfo member should be serialized by the designer.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NExpander.EnableSkinning">
      <summary>
            Gets/sets a value indicating whether the control will use skin logic.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NExpander.Skin">
      <summary>
            Gets/sets the local NSkin instance to be used when painting this control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NExpander.CurrentSkin">
      <summary>
            Gets the current skin to be used by this instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NExpander.Palette">
      <summary>
            Gets/sets the NPalette used to render the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NExpander.PaletteInheritance">
      <summary>
            Gets/sets a value which Palette value will be applied on a higher level Palette change.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NExpander.AnimationInfo">
      <summary>
            Gets the object containing information about the animation process.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NExpander.StateChanged">
      <summary>
            Fired when the current ExpanderState of the control has changed.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NExpander.AnimationBegin">
      <summary>
            Fired when an animation operation has been started.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NExpander.AnimationEnd">
      <summary>
            Fired when the animation operation is finished.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NExpander.ElementBounds">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NExpander.DisplayRectangle">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NExpander.DefaultSize">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NExpander.Text">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NExpander.Animate">
      <summary>
            Gets/sets a value whether the control will perform animation when changing its state.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NExpander.FocusRect">
      <summary>
            Gets/sets a value whether the control will display a focused rectangle around its header when focused.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NExpander.Animating">
      <summary>
            Gets a value indicating whether the control is currently animating itself.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NExpander.Expanding">
      <summary>
            Gets a value indicating whether the control is currently expanding itself.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NExpander.Collapsing">
      <summary>
            Gets a value indicating whether the control is currently collapsing itself.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NExpander.DrawBorder">
      <summary>
            Gets/sets a value whether a border will be drawn around the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NExpander.Renderer">
      <summary>
            Gets/sets the local renderer to be used by this instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NExpander.HeaderFont">
      <summary>
            Gets/sets the font to be used by the header item.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NExpander.ArrowImageSet">
      <summary>
            Gets the object that contains the set of collapse/expand images displayed by the header item.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NExpander.State">
      <summary>
            Gets/sets the current state of the expander.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NExpander.Background">
      <summary>
            Gets/sets the segmented image used to render the background of the expander.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NExpander.HeaderBackground">
      <summary>
            Gets/sets the segmented image used to render the header background of the expander.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NExpander.HeaderCursor">
      <summary>
            Gets/sets the cursor to be used when the mouse moves over the header item.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NTreeListNodeBooleanSubItem">
      <summary>
            A NTreeListNodeSubItem which stores boolean data.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListNodeBooleanSubItem.Value">
      <summary>
            Gets/sets the boolean data of the item.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListNodeBooleanSubItem.CheckState">
      <summary>
            Gets the check state of the item depending of its Value.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListNodeBooleanSubItem.ItemType">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRangeSlider.EnableSkinning">
      <summary>
            Gets/sets a value indicating whether the control will use skin logic.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRangeSlider.Skin">
      <summary>
            Gets/sets the local NSkin instance to be used when painting this control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRangeSlider.CurrentSkin">
      <summary>
            Gets the current skin to be used by this instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRangeSlider.Renderer">
      <summary>
            Gets/sets the renderer used to draw NRangeSlider object.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRangeSlider.Palette">
      <summary>
            Gets/sets the NPalette used to render the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRangeSlider.PaletteInheritance">
      <summary>
            Gets/sets a value which Palette value will be applied on a higher level Palette change.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRangeSlider.Minimum">
      <summary>
            Gets/sets the minimum position of the thumb.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRangeSlider.Maximum">
      <summary>
            Gets/sets the maximum position of the thumb.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRangeSlider.Value">
      <summary>
            Gets/sets the current value of the NRangeSlider.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRangeSlider.Range">
      <summary>
            Gets/sets the range of the NRangeSlider.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRangeSlider.SmallChange">
      <summary>
            Gets/sets the small change of the NRangeSlider.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRangeSlider.LargeChange">
      <summary>
            Gets/sets the large change of the NRangeSlider.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRangeSlider.HotTrack">
      <summary>
            Gets/sets a value whether the range slider will track the mouse hover.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRangeSlider.Orientation">
      <summary>
            Gets the orientation of the NRangeSlider.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NToolbarRenderer">
      <summary>
            Represents a renderer for a NToolbar object.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NColorPane">
      <summary>
            Represents a generic pane to choose among 143 predefined colors.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NColorPaneBase">
      <summary>
            Summary description for NColorPaneBase.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NColorPaneBase.ChangeStyle">
      <summary>
            Gets/sets the logic used for firing ColorChanged event.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NColorPaneBase.Selectable">
      <summary>
            Gets/sets a value whether the ColorPane can be selected(receive focus). False by default.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NColorPaneBase.Color">
      <summary>
            Gets/sets the Color value for this pane.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NColorPaneBase.SelectedIndex">
      <summary>
            Gets/sets the selected index for this palette.
            </summary>
    </member>
    <member name="T:Nevron.UI.NGlyphShape">
      <summary>
            Summary description for NGlyphShape.
            </summary>
    </member>
    <member name="M:Nevron.UI.NGlyphShape.ShouldSerializeGlyphFillStyle">
      <summary>
            Determines whether the GlyphFillStyle property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NGlyphShape.ShouldSerializeGlyphStrokeStyle">
      <summary>
            Determines whether the GlyphStrokeStyle property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.NGlyphShape.GlyphFillStyle">
      <summary>
            Gets/sets the fill style for the glyph.
            </summary>
    </member>
    <member name="P:Nevron.UI.NGlyphShape.GlyphStrokeStyle">
      <summary>
            Gets/sets the stroke style for the glyph.
            </summary>
    </member>
    <member name="T:Nevron.UI.DropDownButtonStates">
      <summary>
            Summary description for DropDownButtonStates.
            </summary>
    </member>
    <member name="T:Nevron.UI.ToolStrips.NDockableToolStripElement">
      <summary>
            Represents a strip of command items.
            </summary>
    </member>
    <member name="T:Nevron.UI.ToolStrips.NToolStripElement">
      <summary>
            Summary description for NToolStrip.
            </summary>
    </member>
    <member name="T:Nevron.UI.ToolStrips.INToolStrip">
      <summary>
            Summary description for INToolStrip.
            </summary>
    </member>
    <member name="P:Nevron.UI.ToolStrips.NDockableToolStripElement.Targets">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.UI.NRepeatButtonElement">
      <summary>
            Represents a push button which can repeatedly fire its Click event.
            If AutoRepeat is true the button will automatically begin repeat when pressed.
            </summary>
    </member>
    <member name="M:Nevron.UI.NRepeatButtonElement.BeginRepeat">
      <summary>
            Begins the repeating. Will continue until canceled.
            </summary>
    </member>
    <member name="M:Nevron.UI.NRepeatButtonElement.EndRepeat">
      <summary>
            Ends repeating operation.
            </summary>
    </member>
    <member name="M:Nevron.UI.NRepeatButtonElement.InitializeDefault">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.NRepeatButtonElement.ShouldSerializeRepeatInterval">
      <summary>
            Determines whether the RepeatInterval property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NRepeatButtonElement.ShouldSerializeAutoRepeat">
      <summary>
            Determines whether the AutoRepeat property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.NRepeatButtonElement.RepeatInterval">
      <summary>
            Gets/sets the interval(in millisecond) between two repeated clicks.
            </summary>
    </member>
    <member name="P:Nevron.UI.NRepeatButtonElement.AutoRepeat">
      <summary>
            Gets/sets a value indicating whether the button will begin automatically repeating when pressed.
            </summary>
    </member>
    <member name="P:Nevron.UI.NRepeatButtonElement.IsRepeating">
      <summary>
            Determines whether the button is currently in a process of repeating.
            </summary>
    </member>
    <member name="P:Nevron.UI.NRepeatButtonElement.DefaultRepeatInterval">
      <summary>
            Gets the default value for the RepeatInterval property.
            </summary>
    </member>
    <member name="P:Nevron.UI.NRepeatButtonElement.DefaultAutoRepeat">
      <summary>
            Gets the default value for the AutoRepeat property.
            </summary>
    </member>
    <member name="T:Nevron.UI.NGripperRenderer">
      <summary>
            Summary description for NGripperRenderer.
            </summary>
    </member>
    <member name="T:Nevron.UI.NBorderRenderer">
      <summary>
            Summary description for NBorderRenderer.
            </summary>
    </member>
    <member name="M:Nevron.UI.NResourceHelper.ImageListFromBitmap(System.Type,System.Drawing.Size,System.Drawing.Color,System.String,System.String)">
      <summary>
            Creates an image list from a bitmap contained in an assembly resource 
            </summary>
      <param name="type">A type containing the assembly of the resource</param>
      <param name="imageSize">The size of the images within the list</param>
      <param name="transparency">Transparent color</param>
      <param name="resource">Resource name</param>
      <param name="path">Path to resource. Path is formed by adding the default namespace and path to embedded resource.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NResourceHelper.BitmapFromResource(System.Type,System.String,System.String)">
      <summary>
            Loads a a resource bitmap
            </summary>
      <param name="type">
      </param>
      <param name="resource">
      </param>
      <param name="path">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NResourceHelper.IconFromResource(System.Type,System.String,System.String)">
      <summary>
            Loads a resource Icon
            </summary>
      <param name="type">
      </param>
      <param name="resource">
      </param>
      <param name="path">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NResourceHelper.LoadCursor(System.Type,System.String,System.String)">
      <summary>
            Loads a resource cursor
            </summary>
      <param name="type">
      </param>
      <param name="resource">
      </param>
      <param name="path">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NResourceHelper.ReadTextResource(System.Reflection.Assembly,System.String,System.String)">
      <summary>
            Loads text from a resource
            </summary>
      <param name="assembly">
      </param>
      <param name="resourceName">
      </param>
      <param name="path">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NResourceHelper.GetResourceStream(System.Type,System.String,System.String)">
      <summary>
            Gets a resource binary stream
            </summary>
      <param name="type">
      </param>
      <param name="resource">
      </param>
      <param name="path">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NResourceHelper.GetResourceStream(System.Reflection.Assembly,System.String,System.String)">
      <summary>
            Gets a resource binary stream
            </summary>
      <param name="assembly">
      </param>
      <param name="resource">
      </param>
      <param name="path">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.UI.NExcludeFlagAttribute">
      <summary>
            Summary description for NExcludeFlagAttribute.
            </summary>
    </member>
    <member name="T:Nevron.UI.INAnimation">
      <summary>
            Represents an object which can animate INAnimatable instances.
            </summary>
    </member>
    <member name="M:Nevron.UI.INAnimation.StartAnimate(Nevron.UI.NAnimationEventArgs)">
      <summary>
            Starts animation operation for the specified INAnimatable instance.
            </summary>
      <param name="e">The arguments containing information about the requested animation.</param>
    </member>
    <member name="M:Nevron.UI.INAnimation.EndAnimate">
      <summary>
            Ends currently running animation operation.
            </summary>
    </member>
    <member name="P:Nevron.UI.INAnimation.Running">
      <summary>
            Gets a value indicating whether the current instance is running.
            </summary>
    </member>
    <member name="P:Nevron.UI.INAnimation.Taks">
      <summary>
            Returns all the animation tasks contained by this animation.
            </summary>
    </member>
    <member name="P:Nevron.UI.INAnimation.Interval">
      <summary>
            Gets/sets the interval of the animation.
            </summary>
    </member>
    <member name="P:Nevron.UI.INAnimation.Steps">
      <summary>
            Gets/sets the steps of the animation.
            </summary>
    </member>
    <member name="T:Nevron.SmartShapes.NControlsSection">
      <summary>
            The NControlsSection class represents a formula section, 
            which is used to expose a set of control points, 
            which can be used for the interactive modification of the smart shape geometry
            </summary>
    </member>
    <member name="M:Nevron.SmartShapes.NControlsSection.Clone">
      <summary>
            Creates an identical copy of this object
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.SmartShapes.NControlsSection.AddControl(System.String,System.String,System.Boolean,Nevron.SmartShapes.ControlBehavior,Nevron.SmartShapes.ControlBehavior,System.String)">
      <summary>
            Adds a control to the section
            </summary>
      <param name="formulaX">
      </param>
      <param name="formulaY">
      </param>
      <param name="visible">
      </param>
      <param name="xBehavior">
      </param>
      <param name="yBehavior">
      </param>
      <param name="tooltip">
      </param>
    </member>
    <member name="M:Nevron.SmartShapes.NControlsSection.AddControl(Nevron.FormulaSheet.NSingleFormulaCell,Nevron.FormulaSheet.NSingleFormulaCell,Nevron.FormulaSheet.NBooleanFormulaCell,Nevron.SmartShapes.NControlBehaviorFormulaCell,Nevron.SmartShapes.NControlBehaviorFormulaCell,Nevron.FormulaSheet.NStringFormulaCell)">
      <summary>
            Adds a control to the section
            </summary>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="visible">
      </param>
      <param name="xBehavior">
      </param>
      <param name="yBehavior">
      </param>
      <param name="tooltip">
      </param>
    </member>
    <member name="M:Nevron.SmartShapes.NControlsSection.GetColNameIndex(System.String)">
      <summary>
            Gets the index of the specified col name
            </summary>
      <remarks>
            Overriden to return the index of the predefined col names
            </remarks>
      <param name="colName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.SmartShapes.NControlsSection.GetColName(System.Int32)">
      <summary>
            Gets the name of the column at the specified index
            </summary>
      <remarks>
            Overriden to return the following col names: X, Y
            </remarks>
      <param name="index">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.SmartShapes.NControlsSection.GetMaxColCount">
      <summary>
            Gets the maximum number of columns for this section
            </summary>
      <remarks>
            Overriden to return 6.
            </remarks>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.SmartShapes.NControlsSection.CreateDefaultRow">
      <summary>
            Overriden to create a new instance of the NControlsRow class
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.SmartShapes.NControlsSection.GetVerbs">
      <summary>
            Overriden to add the add row verb
            </summary>
      <returns>
      </returns>
    </member>
    <member name="F:Nevron.SmartShapes.NControlsSection.DefaultName">
      <summary>
            Default name for this section  
            </summary>
    </member>
    <member name="F:Nevron.SmartShapes.NControlsSection.DefaultTitle">
      <summary>
            Default title for this section  
            </summary>
    </member>
    <member name="T:Nevron.SmartShapes.NCircularArcToRow">
      <summary>
            The NCircularArcToRow class represents a path command row, 
            which plots a circular arc from the previous command (X, Y) cells to this row (X, Y) cells.
            The (A, B) cells define the circle control point.
            </summary>
    </member>
    <member name="M:Nevron.SmartShapes.NCircularArcToRow.Clone">
      <summary>
            Creates an identical copy of this object
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.SmartShapes.NCircularArcToRow.CreatePathCommand">
      <summary>
            Creates a path command, which represents this path command row type
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.SmartShapes.NCircularArcToRow.GetControlPoint(System.Int32)">
      <summary>
            Gets the control point at the specified index
            </summary>
      <param name="index">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.SmartShapes.NCircularArcToRow.SetControlPoint(System.Int32,Nevron.GraphicsCore.NPointF)">
      <summary>
            Sets the control point at the specified index
            </summary>
      <param name="index">
      </param>
      <param name="point">
      </param>
    </member>
    <member name="P:Nevron.SmartShapes.NCircularArcToRow.A">
      <summary>
            Gets a reference to the A formula cell
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NCircularArcToRow.B">
      <summary>
            Gets a reference to the B formula cell
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NCircularArcToRow.Type">
      <summary>
            Overriden to return CircularArcTo
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NCircularArcToRow.ControlsCount">
      <summary>
            Overriden to return 1
            </summary>
    </member>
    <member name="T:Nevron.SmartShapes.NArcToRow">
      <summary>
            The NArcToRow class represents a path command row, 
            which plots an arc from the previous command (X, Y) cells to this row (X, Y) cells.
            The A cell defines the arc bow (the distance from the arc's midpoint to the midpoint of its chord)
            </summary>
    </member>
    <member name="M:Nevron.SmartShapes.NArcToRow.Clone">
      <summary>
            Creates an identical copy of this object
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.SmartShapes.NArcToRow.CreatePathCommand">
      <summary>
            Creates a path command, which represents this path command row type
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.SmartShapes.NArcToRow.A">
      <summary>
            Gets a reference to the A formula cell
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NArcToRow.B">
      <summary>
            Gets a reference to the B formula cell
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NArcToRow.Type">
      <summary>
            Overriden to return ArcTo
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NUrlLinkAttribute">
      <summary>
            Represents an interactivity attribute, used to define a URL link
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NUrlLinkAttribute.Equals(System.Object)">
      <summary>
            Determines whether instances of the same type are equivalent.
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NUrlLinkAttribute.GetHashCode">
      <summary>
            The hash code for the current object.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NUrlLinkAttribute.Url">
      <summary>
            The URL to redirect the browser to when the user clicks on the object.
            </summary>
      <remarks>
            This property works only when you use the chart in Web forms with a response type of HTML image map.
            </remarks>
      <example>
            The following code changes the URL of a label:
            <code lang="VB">
            NChartControl.InteractivityOperations.Add(New NTooltipInteractivityOperation())
            
            Dim label As NLabel =  NChartControl.Labels.AddHeader("Click here to see a cool chart") 
            label.InteractivityStyle.UrlLink.Url = "http://www.nevron.com"
            </code><code>
            NChartControl.InteractivityOperations.Add(new NTooltipInteractivityOperation());
            
            NLabel label = NChartControl.Labels.AddHeader("Click here to see a cool chart");
            label.Interactivity.UrlLink = "http://www.nevron.com";
            </code></example>
    </member>
    <member name="P:Nevron.GraphicsCore.NUrlLinkAttribute.OpenInNewWindow">
      <summary>
            Whether or not to open a new window to show the specified URL Page.
            </summary>
      <remarks>
            This property works only when you use the chart in Web forms with a response type of HTML image map. There also must be a specified URL to redirect the browser to. When set to true the browser will open a new window to display the page.
            </remarks>
      <example>
            The following code changes the URL and browser and opens a new window when the users clicks on the object.
            <code lang="VB">
            NChartControl.InteractivityOperations.Add(New NTooltipInteractivityOperation())
            
            Dim label As NLabel =  NChartControl.Labels.AddHeader("Click here to see a cool chart") 
            label.Interactivity.URL = "http://www.nevron.com"
            label.Interactivity.OpenInNewWindow = True
            </code><code>
            NChartControl.InteractivityOperations.Add(new NTooltipInteractivityOperation());
            
            NLabel label = NChartControl.Labels.AddHeader("Click here to see a cool chart");
            label.Interactivity.URL = "http://www.nevron.com";
            label.Interactivity.OpenInNewWindow = true;
            </code></example>
    </member>
    <member name="T:Nevron.GraphicsCore.NCursorAttribute">
      <summary>
            Represents a cursor applied to the object.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NCursorAttribute.Type">
      <summary>
            The cursor type when the mouse is over the object.
            </summary>
      <remarks>
            For Windows Forms applications you must also add a NCursorChangeInteractivityOperation object to the InteractivityOperations collection of the control. For Web forms you must use a response type of HTML image map or HMTL postback in order for this property to take effect.
            </remarks>
      <example>
            The following code changes the cursor type of a label:
            <code lang="VB">
            NChartControl.InteractivityOperations.Add(New NCursorChangeInteractivityOperation())
            
            Dim label As NLabel =  NChartControl.Labels.AddHeader("Cursor hand") 
            label.InteractivityStyle.CursorType = CursorType.Hand
            </code><code>
            NChartControl.InteractivityOperations.Add(new NCursorChangeInteractivityOperation());
            
            NLabel label = NChartControl.Labels.AddHeader("Cursor hand");
            label.InteractivityStyle.CursorType = CursorType.Hand;
            </code></example>
    </member>
    <member name="P:Nevron.GraphicsCore.NCursorAttribute.Cursor">
      <summary>
            Returns the cursor corresponding to the current cursor type
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NImageFiltersStyle">
      <summary>
            Collection containing the image filters applied on an image before it is displayed.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NImageFiltersStyle.Equals(System.Object)">
      <summary>
            Determines whether the image filter styles are equal.
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NImageFiltersStyle.GetHashCode">
      <summary>
            Overriden because equals was overriden
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NImageFiltersStyle.OnDrawPreview(Nevron.GraphicsCore.lIIIIllI,Nevron.GraphicsCore.NSizeF)">
      <summary>
            Draws a preview of the style on the specified device.
            </summary>
      <param name="device">
      </param>
      <param name="size">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NImageFiltersStyle.GetDescription">
      <summary>
            Returns a short description of this style.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NImageFiltersStyle.GetPaintableRect(Nevron.GraphicsCore.NRectangleF,Nevron.GraphicsCore.l1IlllI1)">
      <summary>
            Obtains the paintable rectangle associated with this image filters collection.
            </summary>
      <param name="shapeRect">
      </param>
      <param name="lengthConverter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.GraphicsCore.NRelativeMeasurementSystem">
      <summary>
            Represents the Relative measurement unit system
            </summary>
      <remarks>
            In the relative system dimensions are specified in percents of the object parent or root
            </remarks>
    </member>
    <member name="M:Nevron.GraphicsCore.NRelativeMeasurementSystem.InitMeasurementUnits">
      <summary>
            Overriden to initialize the system with the supported Relative measurement units
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NRelativeMeasurementSystem.RelativeMeasurementSystem">
      <summary>
            The one and only instance of the Relative measurement system
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NRelativeMeasurementSystem.Name">
      <summary>
            The name of this measurement system.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NRelativeMeasurementSystem.MeasurementSystem">
      <summary>
            The enum value of this measurement system.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NPixelGraphicsUnit">
      <summary>
            Represents the pixel graphics measurement unit.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NPixelGraphicsUnit.ConvertXValueToPixels(Nevron.GraphicsCore.NMeasurementUnitConverter)">
      <summary>
            Converts this measurement unit to its equivalent in pixels along the X direction.
            </summary>
      <param name="converter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NPixelGraphicsUnit.ConvertYValueToPixels(Nevron.GraphicsCore.NMeasurementUnitConverter)">
      <summary>
            Converts this measurement unit to its equivalent in pixels along the Y direction.
            </summary>
      <param name="converter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NPixelGraphicsUnit.Abbreviation">
      <summary>
            The abbreviation of this measurement unit.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NPixelGraphicsUnit.GraphicsUnit">
      <summary>
            Gets the english unit of the object.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NPixelGraphicsUnit.UnitType">
      <summary>
            The measurement unit type.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NPixelGraphicsUnit.ScaleToInch">
      <summary>
            The scale to inch of this measurement unit.
            </summary>
      <remarks>
            This property returns 0 in the case of the pixel graphics unit.
            </remarks>
    </member>
    <member name="P:Nevron.GraphicsCore.NPixelGraphicsUnit.DefaultValueFormat">
      <summary>
            The default value format of this measurement unit.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NGraphicsUnitSerializer">
      <summary>
            Implements graphics units serialization
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NGraphicsUnitSerializer.GetRealObject(System.Runtime.Serialization.StreamingContext)">
      <summary>
            Overriden to return an instance of a graphics unit
            </summary>
      <param name="context">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.GraphicsCore.NYardEnglishUnit">
      <summary>
            Represents the english yard measurement unit.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NYardEnglishUnit.ConvertXValueToPixels(Nevron.GraphicsCore.NMeasurementUnitConverter)">
      <summary>
            Converts this measurement unit to its equivalent in pixels along the X direction.
            </summary>
      <param name="converter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NYardEnglishUnit.ConvertYValueToPixels(Nevron.GraphicsCore.NMeasurementUnitConverter)">
      <summary>
            Converts this measurement unit to its equivalent in pixels along the Y direction.
            </summary>
      <param name="converter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NYardEnglishUnit.Abbreviation">
      <summary>
            The abbreviation of this measurement unit.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NYardEnglishUnit.ScaleToInch">
      <summary>
            The scale to inch of this measurement unit.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NYardEnglishUnit.EnglishUnit">
      <summary>
            Gets the english unit of the object.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NHandEnglishUnit">
      <summary>
            Represents the english hand measurement unit.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NHandEnglishUnit.ConvertXValueToPixels(Nevron.GraphicsCore.NMeasurementUnitConverter)">
      <summary>
            Converts this measurement unit to its equivalent in pixels along the X direction.
            </summary>
      <param name="converter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NHandEnglishUnit.ConvertYValueToPixels(Nevron.GraphicsCore.NMeasurementUnitConverter)">
      <summary>
            Converts this measurement unit to its equivalent in pixels along the Y direction.
            </summary>
      <param name="converter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NHandEnglishUnit.Abbreviation">
      <summary>
            The abbreviation of this measurement unit.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NHandEnglishUnit.EnglishUnit">
      <summary>
            Gets the english unit of the object.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NHandEnglishUnit.ScaleToInch">
      <summary>
            The scale to inch of this measurement unit.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Renderers.INTextRenderer">
      <summary>
            Implemented by text renderers.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.Renderers.INTextRenderer.MeasureText(Nevron.GraphicsCore.NTextStyle,System.String)">
      <summary>
            Returns the size of the text in device units
            </summary>
      <param name="textStyle">
      </param>
      <param name="text">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.Renderers.INTextRenderer.MeasureTextWithBackplane(Nevron.GraphicsCore.NTextStyle,System.String)">
      <summary>
            Returns the size of the text in device units
            </summary>
      <param name="textStyle">
      </param>
      <param name="text">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.Renderers.INTextRenderer.MeasureText(Nevron.GraphicsCore.NTextStyle,System.String,Nevron.GraphicsCore.NRectangleF)">
      <summary>
            Returns the size of the text when displayed in the specified rectangle
            </summary>
      <param name="textStyle">
      </param>
      <param name="text">
      </param>
      <param name="rect">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.Renderers.INTextRenderer.MeasureTextWithBackplane(Nevron.GraphicsCore.NTextStyle,System.String,Nevron.GraphicsCore.NRectangleF)">
      <summary>
            Returns the size of the text when displayed in the specified rectangle
            </summary>
      <param name="textStyle">
      </param>
      <param name="text">
      </param>
      <param name="rect">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.Renderers.INTextRenderer.PaintText(Nevron.GraphicsCore.NTextStyle,System.String,Nevron.GraphicsCore.NPointF,System.Boolean)">
      <summary>
            Paints the text at the specified location
            </summary>
      <param name="textStyle">
      </param>
      <param name="text">
      </param>
      <param name="location">
      </param>
      <param name="recalcLayout">recalculates the layout - set to false if you have called Measure before that</param>
    </member>
    <member name="M:Nevron.GraphicsCore.Renderers.INTextRenderer.PaintTextWithBackplane(Nevron.GraphicsCore.NTextStyle,System.String,Nevron.GraphicsCore.NPointF,System.Boolean)">
      <summary>
            Paints the text at the specified location
            </summary>
      <param name="textStyle">
      </param>
      <param name="text">
      </param>
      <param name="location">
      </param>
      <param name="recalcLayout">recalculates the layout - set to false if you have called Measure before that</param>
    </member>
    <member name="M:Nevron.GraphicsCore.Renderers.INTextRenderer.PaintTextWithBackplaneAndOrientation(Nevron.GraphicsCore.NTextStyle,System.String,Nevron.GraphicsCore.NPointF,System.Boolean)">
      <summary>
            Paints the text at the specified location
            </summary>
      <param name="textStyle">
      </param>
      <param name="text">
      </param>
      <param name="location">
      </param>
      <param name="recalcLayout">recalculates the layout - set to false if you have called Measure before that</param>
    </member>
    <member name="M:Nevron.GraphicsCore.Renderers.INTextRenderer.PaintText(Nevron.GraphicsCore.NTextStyle,System.String,Nevron.GraphicsCore.NRectangleF,System.Boolean,Nevron.GraphicsCore.lII11I1I)">
      <summary>
            Paints the text in the specified bounds
            </summary>
      <param name="textStyle">
      </param>
      <param name="text">
      </param>
      <param name="bounds">
      </param>
      <param name="recalcLayout">recalculates the layout - set to false if you have called Measure with rect before that</param>
      <param name="hint">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.Renderers.INTextRenderer.PaintTextWithBackplane(Nevron.GraphicsCore.NTextStyle,System.String,Nevron.GraphicsCore.NRectangleF,System.Boolean,Nevron.GraphicsCore.lII11I1I)">
      <summary>
            PaintStringHint hint
            </summary>
      <param name="textStyle">
      </param>
      <param name="text">
      </param>
      <param name="bounds">
      </param>
      <param name="recalcLayout">
      </param>
      <param name="hint">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.Renderers.INTextRenderer.PaintTextWithBackplaneAndOrientation(Nevron.GraphicsCore.NTextStyle,System.String,Nevron.GraphicsCore.NRectangleF,System.Boolean,Nevron.GraphicsCore.lII11I1I)">
      <summary>
            Paints the text in the specified bounds
            </summary>
      <param name="textStyle">
      </param>
      <param name="text">
      </param>
      <param name="bounds">
      </param>
      <param name="recalcLayout">
      </param>
      <param name="hint">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.Renderers.INTextRenderer.PaintTextWithBackplaneAndOffset(Nevron.GraphicsCore.NTextStyle,System.String,Nevron.GraphicsCore.NPointF,System.Boolean)">
      <summary>
            Paints the text at the specified location with offset
            </summary>
      <param name="textStyle">
      </param>
      <param name="text">
      </param>
      <param name="location">
      </param>
      <param name="recalcLayout">recalculates the layout - set to false if you have called Measure before that</param>
    </member>
    <member name="M:Nevron.GraphicsCore.Renderers.INTextRenderer.PaintTextWithBackplaneAndOffset(Nevron.GraphicsCore.NTextStyle,System.String,Nevron.GraphicsCore.NRectangleF,System.Boolean,Nevron.GraphicsCore.lII11I1I)">
      <summary>
            Paints the text in the specified bounds
            </summary>
      <param name="textStyle">
      </param>
      <param name="text">
      </param>
      <param name="bounds">
      </param>
      <param name="recalcLayout">
      </param>
      <param name="hint">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.Renderers.INTextRenderer.PaintTextWithOffset(Nevron.GraphicsCore.NTextStyle,System.String,Nevron.GraphicsCore.NPointF,System.Boolean)">
      <summary>
            Paints the text at the specified location
            </summary>
      <param name="textStyle">
      </param>
      <param name="text">
      </param>
      <param name="location">
      </param>
      <param name="recalcLayout">recalculates the layout - set to false if you have called Measure before that</param>
    </member>
    <member name="M:Nevron.GraphicsCore.Renderers.INTextRenderer.PaintTextWithOffset(Nevron.GraphicsCore.NTextStyle,System.String,Nevron.GraphicsCore.NRectangleF,System.Boolean,Nevron.GraphicsCore.lII11I1I)">
      <summary>
            Paints the text at the specified location
            </summary>
      <param name="textStyle">
      </param>
      <param name="text">
      </param>
      <param name="bounds">
      </param>
      <param name="recalcLayout">recalculates the layout - set to false if you have called Measure before that</param>
      <param name="hint">
      </param>
    </member>
    <member name="P:Nevron.GraphicsCore.Renderers.INTextRenderer.LockFontStyle">
      <summary>
            Locks the font style applied trough the text style parameter
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.Renderers.INTextRenderer.FontStyle">
      <summary>
            Sets or gets a locked font style
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.INAccumulationBufferCapableRenderSurface">
      <summary>
            Implemented by accumulation buffer capable render surface
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Text.NTextServiceManager">
      <summary>
            Contains the text DOM services.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Text.NRangeElementFilteredEnumerator">
      <summary>
            Summary description for NFilteredRangeElementEnumerator.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NRangeElementFilteredEnumerator.MoveNext">
      <summary>
            Advances the enumerator to the next node in the container, which satifies the specified filter
            </summary>
      <returns>true if advance succeeded, false if the end of the container was reached</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NRangeElementFilteredEnumerator.Reset">
      <summary>
            Resets the enumerator (positions it before the first node in the container)
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.Text.NRangeElementFilteredEnumerator.Current">
      <summary>
            Obtains the current node in the container or throws an exception if the enumerator was not started or has ended
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Text.NListStyleElement">
      <summary>
            Summary description for NBulletStyleNode.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Shapes.NOvalCalloutShape">
      <summary>
            Summary description for NOvalCalloutShape.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Shapes.NCutEdgeRectCalloutShape">
      <summary>
            Summary description for NCutEdgeRectCalloutShape.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NHatchFillStyleKeyToBitmapConverter">
      <summary>
            Summary description for NHatchFillStyleKeyToBitmapConverter.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NHatchFillStyleKeyToBitmapConverter.ConvertKey(Nevron.GraphicsCore.l111IIl1,Nevron.GraphicsCore.NSize,System.Drawing.Imaging.PixelFormat)">
      <summary>
            Converts a fill style key to a bitmap with the specified size and pixel format
            </summary>
      <param name="key">
      </param>
      <param name="size">
      </param>
      <param name="pixelFormat">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.NewGraphics.NImageBrush.InitFrom(Nevron.NewGraphics.NGraphicsObject)">
      <summary>
            Initializes a new graphics object from the given one.
            </summary>
      <param name="graphicsObject">
      </param>
    </member>
    <member name="T:Nevron.GraphicsCore.NGDIObjectsCache">
      <summary>
            Summary description for NGDIObjectsCache.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NEllipseSegmentF">
      <summary>
            Represents a segment of an ellipse in 2D space, defined by an ellipse and start and sweep angles
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NEllipseSegmentF.Translate(System.Single,System.Single)">
      <summary>
            Translates the primitive with the specified amounts
            </summary>
      <param name="dx">
      </param>
      <param name="dy">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NEllipseSegmentF.Translate(Nevron.GraphicsCore.NPointF)">
      <summary>
            Translates the primitive with the specified offset
            </summary>
      <param name="offset">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NEllipseSegmentF.AddToGraphicsPath(System.Drawing.Drawing2D.GraphicsPath)">
      <summary>
            Appends the primitive to the specified graphics path
            </summary>
      <param name="path">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NEllipseSegmentF.ContainsOnOutline(Nevron.GraphicsCore.NPointF,System.Single)">
      <summary>
            Determines whether the outline of the primitive contains the specified point
            </summary>
      <param name="point">
      </param>
      <param name="weight">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NEllipseSegmentF.ContainsOnOutline(Nevron.GraphicsCore.NPointF,System.Drawing.Pen)">
      <summary>
      </summary>
      <param name="point">
      </param>
      <param name="pen">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NEllipseSegmentF.Equals(System.Object)">
      <summary>
      </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NEllipseSegmentF.GetHashCode">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NEllipseSegmentF.ToString">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NEllipseSegmentF.ToNEllipticalArcF">
      <summary>
            Converts this segment to ToNEllipticalArcF
            </summary>
      <returns>
      </returns>
    </member>
    <member name="F:Nevron.GraphicsCore.NEllipseSegmentF.Ellipse">
      <summary>
            The ellipse to which the arc belongs
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NEllipseSegmentF.StartAngle">
      <summary>
            Starting angle of the arc (in radians). Measured from the major axis of the ellipse
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NEllipseSegmentF.SweepAngle">
      <summary>
            Sweep angle of the arc (in radians).
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NEllipseSegmentF.FromThreePointsAngleAndRatio(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF,System.Single,System.Single)">
      <summary>
            Gets the ellipse segment, which passes throw the tree points and satisfies the angle and ratio parameters
            </summary>
      <param name="start">
      </param>
      <param name="control">
      </param>
      <param name="end">
      </param>
      <param name="angle">angle (in radians)</param>
      <param name="ratio">ration between the major and minor ellipse axes, must be &gt;= 1</param>
      <returns>
      </returns>
    </member>
    <member name="F:Nevron.GraphicsCore.NEllipseSegmentF.Empty">
      <summary>
            The Empty ellipse segment
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NEllipseSegmentF.StartPoint">
      <summary>
            Gets/sets the start point of the open figure
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NEllipseSegmentF.EndPoint">
      <summary>
            Gets/sets the end point of the open figure
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NEllipseSegmentF.Bounds">
      <summary>
            Gets the minimal enclosing rectangle
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NEllipseSegmentF.BoundsRange">
      <summary>
            Gets the minimal enclosing 2D range
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NEllipseSegmentF.IsFlat">
      <summary>
            Determines whether this is a flat primitive
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NEllipseSegmentF.IsEmpty">
      <summary>
            Determines whether the ellipse segment is empty (the ellipse is empty or the sweepAngle is zero)
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NEllipseSegmentF.MiddlePoint">
      <summary>
            Gets the middle point of the segment
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NRadianAngleUnit">
      <summary>
            Represents the radian angle unit
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NRadianAngleUnit.ToDegrees(System.Single)">
      <summary>
            Returns the angle converted to degrees
            </summary>
      <param name="angle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRadianAngleUnit.ToRadians(System.Single)">
      <summary>
            Returns the angle converted to radians
            </summary>
      <param name="angle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRadianAngleUnit.ToGrads(System.Single)">
      <summary>
            Returns the angle converted to grads
            </summary>
      <param name="angle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRadianAngleUnit.GetCycle">
      <summary>
            Gets the anglular cycle for this unit
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRadianAngleUnit.Normalize(System.Single)">
      <summary>
            Normalizes an angle measured in radians
            </summary>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRadianAngleUnit.ToString">
      <summary>
            Returns the string representation of this object
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NRadianAngleUnit.AngleUnit">
      <summary>
            Gets the angle unit 
            </summary>
    </member>
    <member name="T:Nevron.FormulaSheet.NVerbCollection">
      <summary>
            The NVerbCollection class represents a collection of verbs
            </summary>
    </member>
    <member name="M:Nevron.FormulaSheet.NVerbCollection.Add(Nevron.FormulaSheet.NVerb)">
      <summary>
            Adds the specified verb
            </summary>
      <param name="verb">verb to add</param>
      <returns>index of the verb in the collection</returns>
    </member>
    <member name="M:Nevron.FormulaSheet.NVerbCollection.AddRange(Nevron.FormulaSheet.NVerbCollection)">
      <summary>
            Adds the specified verbs to this collection
            </summary>
      <param name="verbs">
      </param>
    </member>
    <member name="M:Nevron.FormulaSheet.NVerbCollection.IndexOf(Nevron.FormulaSheet.NVerb)">
      <summary>
            Determines the index of the verb in the collection
            </summary>
      <param name="verb">verb</param>
      <returns>index of the verb or -1 if it is not in the collection</returns>
    </member>
    <member name="M:Nevron.FormulaSheet.NVerbCollection.Insert(System.Int32,Nevron.FormulaSheet.NVerb)">
      <summary>
            Inserts a the specified verb at the specified index
            </summary>
      <param name="index">index</param>
      <param name="verb">verb</param>
    </member>
    <member name="M:Nevron.FormulaSheet.NVerbCollection.Remove(Nevron.FormulaSheet.NVerb)">
      <summary>
            Removes the specified verb
            </summary>
      <param name="verb">verb to remove</param>
    </member>
    <member name="M:Nevron.FormulaSheet.NVerbCollection.Contains(Nevron.FormulaSheet.NVerb)">
      <summary>
            Determines whether the specified verb is contained in this collection
            </summary>
      <param name="verb">verb</param>
      <returns>true if the verb is contained in this collection, otherwise false</returns>
    </member>
    <member name="M:Nevron.FormulaSheet.NVerbCollection.UpdateLinkLabel(System.Windows.Forms.LinkLabel)">
      <summary>
            Updates the link label to display the verbs in this collection
            </summary>
      <param name="label">
      </param>
    </member>
    <member name="T:Nevron.Editors.NPreviewBase">
      <summary>
            Base preview for a NUIShape instance.
            </summary>
    </member>
    <member name="T:Nevron.Editors.NTextStyleTypeEditor">
      <summary>
            Provides facilities for visual editing of NTextStyle objects.
            </summary>
    </member>
    <member name="M:Nevron.Editors.NTextStyleTypeEditor.PaintValue(System.Drawing.Design.PaintValueEventArgs)">
      <summary>
            Paints the style in the given context.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.Editors.NTextStyleTypeEditor.Edit(Nevron.GraphicsCore.NTextStyle,Nevron.GraphicsCore.NTextStyle@)">
      <summary>
            Edits the specified style. 
            </summary>
      <param name="textStyle">
      </param>
      <param name="textStyleResult">
      </param>
      <returns>
      </returns>
      <remarks>
            If the function returns true then the out parameter holds a valid style.
            </remarks>
    </member>
    <member name="M:Nevron.Editors.NTextStyleTypeEditor.Edit(Nevron.GraphicsCore.NTextStyle,System.Boolean,Nevron.GraphicsCore.NTextStyle@)">
      <summary>
            Edits the specified style. If automatic is set to true the in parameter must be treated as automatic style.
            </summary>
      <param name="textStyle">
      </param>
      <param name="automaticStyle">
      </param>
      <param name="textStyleResult">
      </param>
      <returns>
      </returns>
      <remarks>
            If the function returns true then the out parameter holds a valid style.
            </remarks>
    </member>
    <member name="T:Nevron.Editors.NUserControlHostForm">
      <summary>
            Represents a form, which can host a NHostableUserControl 
            </summary>
    </member>
    <member name="P:Nevron.Editors.NUserControlHostForm.HostedUserControl">
      <summary>
            Gets a reference to the user control hosted by this form
            </summary>
    </member>
    <member name="T:Nevron.Editors.NMarginsEditor">
      <summary>
            Summary description for NMarginsEditor.
            </summary>
    </member>
    <member name="M:Nevron.Editors.NMarginsEditor.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
    </member>
    <member name="P:Nevron.Editors.NMarginsEditor.Margins">
      <summary>
            Gets/sets the margins to edit.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NTabPageCollection">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NTabInfo">
      <summary>
            Provides common NTab information.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NStatusBarPanel">
      <summary>
            Summary description for NStatusBarPanel.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NStatusBarPanel.Padding">
      <summary>
            Gets/sets the padding information to be applied on hosted controls.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NStatusBarPanel.Bounds">
      <summary>
            Gets the bounding rectangle of the NStatusBarPanel.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NStatusBarPanel.Visible">
      <summary>
            Gets/sets a value whether the panel is displayed or not.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NStatusBarPanel.ImageIndex">
      <summary>
            Gets/sets the border style for the NStatusBarPanel.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NStatusBarPanel.Text">
      <summary>
            Gets/sets the text of the panel.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NStatusBarPanel.Control">
      <summary>
            Gets/sets the control hosted by the NStatusBarPanel.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NStatusBarPanel.Index">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NStatusBarPanel.BackColor">
      <summary>
            Gets/sets the Color used to fill the panel's background.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NStatusBarPanel.ForeColor">
      <summary>
            Gets/sets the Color used to draw panel's text.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NScrollBarButton.Bounds">
      <summary>
            Gets the bounding rectangle of the NScrollBarButton.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NScrollBarButton.ArrowRect">
      <summary>
            Gets the rectangle in which the arrow is rendered.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NScrollBarButton.IsThumb">
      <summary>
            Gets a value indicating whether this button is a thumb.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NScrollBarButton.Capture">
      <summary>
            Gets a value indicating whether this button has captured the mouse.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NScrollBarButton.Direction">
      <summary>
            Gets the direction of the button.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NScrollBarButton.Parent">
      <summary>
            Gets the parent NScrollBar.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NScrollBarButton.InteractiveState">
      <summary>
            Gets the InteractiveState of the button.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NRotatorFrameCollection">
      <summary>
            A strongly-typed collection to store NRotatorFrame objects.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NRotatorFrame">
      <summary>
            Represents a frame in a NRotator control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRotatorFrame.Content">
      <summary>
            Gets the generic label which represents the content of the frame.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRotatorFrame.FadeIn">
      <summary>
            Determines whether the frame will be faded into view.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRotatorFrame.FadeOut">
      <summary>
            Determines whether the frame will be faded out of the view.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRotatorFrame.Index">
      <summary>
            Gets the index of this frame in its NRotator owner.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NWaitingBar">
      <summary>
            Represents a custom control that indicates that there is a lengthy operation on the thread.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NWaitingBar.Properties">
      <summary>
            Gets/sets the common NWaitingBar properties.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.PredefinedPopupStyle">
      <summary>
            Specifies the predefined popup styles
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.PopupCaptionButtonId">
      <summary>
            Specifies the predefined caption buttons IDs available on a popup-notify component.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NColorInfo">
      <summary>
            Color info
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NMeasureStringInfo">
      <summary>
            Provides a common information used for measuring strings.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NRange">
      <summary>
            Represents a generic range.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRange.ID">
      <summary>
            Gets/sets the unique identifier for the range.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRange.LowerBound">
      <summary>
            Gets/sets the lower bound of the range.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRange.UpperBound">
      <summary>
            Gets/sets the upper bound of the range.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRange.Name">
      <summary>
            Gets/sets the human readable description for the range.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRange.EditorBrowsable">
      <summary>
            Gets/sets a value indicating whether the range will be browsable for editors.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NMdiChild">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NMdiChild.ApplyPalette(Nevron.UI.WinForm.Controls.NPalette)">
      <summary>
            Updates from the specified palette and 
            </summary>
      <param name="palette">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NMdiChild.InvalidateFrame">
      <summary>
            Invalidates the frame.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NMdiChild.InvalidateFrame(System.Drawing.Rectangle)">
      <summary>
            Invalidates the specified rectangular portion of the frame.
            </summary>
      <param name="invalid">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NMdiChild.InvalidateFrame(System.Drawing.Region)">
      <summary>
            Invalidates the specified region of the frame.
            </summary>
      <param name="invalid">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NMdiChild.NCInvalidate">
      <summary>
            Invalidates the non-client part of the Form
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NMdiChild.NCInvalidate(System.Drawing.Rectangle)">
      <summary>
            Invalidates the non-client part of the Form using the specified rectangular portion.
            </summary>
      <param name="invalid">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NMdiChild.Dispose(System.Boolean)">
      <summary>
      </summary>
      <param name="disposing">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NMdiChild.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
      <summary>
      </summary>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="width">
      </param>
      <param name="height">
      </param>
      <param name="specified">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NMdiChild.OnHandleCreated(System.EventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NMdiChild.OnHandleDestroyed(System.EventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NMdiChild.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NMdiChild.SetFrameAppearance(Nevron.UI.WinForm.Controls.NFrameAppearance)">
      <summary>
            Performs the core logic of applying a frame appearance.
            </summary>
      <param name="appearance">
      </param>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NMdiChild.Palette">
      <summary>
            Gets/sets the NPalette used to render the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NMdiChild.PaletteInheritance">
      <summary>
            Gets/sets a value which Palette value will be applied on a higher level Palette change.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NMdiChild.UseGlobalTemplate">
      <summary>
            Gets/sets a value indicating whether this instance will use the global template provided by the NUIManager.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NMdiChild.ShowCaptionImage">
      <summary>
            Gets/sets a value whether to display the caption image.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NMdiChild.ShowCaptionText">
      <summary>
            Gets/sets a value whether to display the caption text.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NMdiChild.Movable">
      <summary>
            Gets/sets a value indicating whether the user may move the frame using the left mouse button.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NMdiChild.Sizable">
      <summary>
            Gets/sets a value indicating whether the user may resize the frame.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NMdiChild.ClientMouse">
      <summary>
            Gets the current mouse position in client coordinates.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NMdiChild.SystemMenu">
      <summary>
            Gets/sets a value whether a system menu should be displayed when the user right-clicks the frame's caption.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NMdiChild.MinimizeBox">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NMdiChild.MaximizeBox">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NMdiChild.CloseButton">
      <summary>
            Gets/sets a value whether the frame will display a close button allowing the user to "Close" the current instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NMdiChild.HelpButton">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NMdiChild.FrameAppearance">
      <summary>
            Gets/sets the local value for this instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NMdiChild.CurrentFrameAppearance">
      <summary>
            Gets the NFrameAppearance template currently used by this instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NMdiChild.CaptionImage">
      <summary>
            Gets/sets the image to be displayed by the caption.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NMdiChild.CurrentCaptionImage">
      <summary>
            Gets the image displayed by the caption.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NMdiChild.SysMenuCommands">
      <summary>
            Gets an array with all the commands to be displayed when a system menu is requested.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NMdiChild.CreateParams">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NMdiChild.WindowState">
      <summary>
            Gets/sets the window state of the mdi child.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NMdiChild.Text">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NMdiChild.EnableSkinning">
      <summary>
            Determines whether this instance will use the frame appearance provided by the current skin.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NHeaderColumnExtendedInfo">
      <summary>
            Represents an object which contains extended information about an NListView column.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NHeaderColumnExtendedInfo.Column">
      <summary>
            Gets/sets the column this info extends.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NHeaderColumnExtendedInfo.ContentAlign">
      <summary>
            Gets/sets the alignment of the ImageText entity.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NHeaderColumnExtendedInfo.TextAlign">
      <summary>
            Gets/sets the alignment of the Text when image and text are not one entity.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NHeaderColumnExtendedInfo.ImageAlign">
      <summary>
            Gets/sets the alignment of the Image when image and text are not one entity.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NHeaderColumnExtendedInfo.ImageTextRelation">
      <summary>
            Gets/sets the relation between the image and the text.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NHeaderColumnExtendedInfo.Image">
      <summary>
            Gets/sets the Image to be displayed by the column.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NHeaderColumnExtendedInfo.Padding">
      <summary>
            Gets/sets the internal padding for the extended column.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NHeaderColumnExtendedInfo.SortMode">
      <summary>
            Gets/sets the sort mode associated with this column.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NHeaderColumnExtendedInfo.ImageTextEntity">
      <summary>
            Determines whether image and text will be treated as one entity.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NHeaderColumnExtendedInfo.UseRichText">
      <summary>
            Determines whether the text will be rendered using RichText logic.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NDesktopToolbar">
      <summary>
            Represents a System.Windows.Form component which acts like a Desktop Toolbar (AKA APPBAR) and may be pinned to any edge of the desktop.
            The Form may also be undocked and thus acting like a standard Form.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NDesktopToolbar.CanActLikeAppBar">
      <summary>
            Determines whether the Form is valid in the terms of Win32 window and might be registered as a Desktop Toolbar.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NDesktopToolbar.RegisterAppBar">
      <summary>
            Registers the Form as a Desktop Toolbar.
            </summary>
      <returns>True if operation was successful, false otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NDesktopToolbar.UnregisterAppBar">
      <summary>
            Unregisters the 
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NDesktopToolbar.PerformAppBarResize">
      <summary>
            Performs the resize of the Form when already registered as an APPBAR.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NDesktopToolbar.OnAppBarNotification(System.Windows.Forms.Message@)">
      <summary>
            Process a special notification send by the system.
            </summary>
      <param name="m">The Message parameter of the notification.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NDesktopToolbar.OnAppBarActivate">
      <summary>
            Notifies the system that we are activated.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NDesktopToolbar.OnAppBarWindowPosChanged">
      <summary>
            Notifies the system that our position has changed.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NDesktopToolbar.AppBarQueryPos(System.Drawing.Rectangle@)">
      <summary>
            Queries the bounds of the Form when already registered as an APPBAR.
            The system may modify these to fit with other APPBARs or the TASKBAR.
            </summary>
      <param name="r">The modified bounds.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NDesktopToolbar.AppBarSetPos(System.Drawing.Rectangle)">
      <summary>
            Applies the proposed rectangle to the Form.
            </summary>
      <param name="r">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NDesktopToolbar.GetAppBarEdge">
      <summary>
            Retrieves the uEdge value from the current dock style.
            </summary>
      <returns>An integer value through [0, 3].</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NDesktopToolbar.OnWmNCHitTest(System.Windows.Forms.Message@)">
      <summary>
            Perform special handling while docked. For example when docked right only the left border will be sizable.
            </summary>
      <param name="m">The native message sent by the system.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NDesktopToolbar.OnWmExitSizeMove(System.Windows.Forms.Message@)">
      <summary>
            Hook on this notification to properly update the desktop and all other APPBARs.
            </summary>
      <param name="m">The native message sent by the system.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NDesktopToolbar.OnDockEdgeChanging(Nevron.UI.WinForm.Controls.DockEdgeChangingEventArgs)">
      <summary>
            Fires the DockEdgeChanging event.
            </summary>
      <param name="e">The argumenst object containing information about the event.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NDesktopToolbar.OnDockEdgeChanged(System.EventArgs)">
      <summary>
            Performs the core logic of changing the DockableForm's state.
            Also fires the DockEdgeChanged event.
            </summary>
      <param name="e">The argumenst object containing information about the event.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NDesktopToolbar.MakeFloating">
      <summary>
            Unregisters the Form as an APPBAR and makes it floating.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NDesktopToolbar.MakeDocked">
      <summary>
            Makes ourselves docked to one of the four desktop edges.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NDesktopToolbar.SetTaskbarVisibility(System.Boolean)">
      <summary>
            Updates the Form's taskbar visibility.
            </summary>
      <param name="visible">True to show the Form in the taskbar, false otherwise.</param>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NDesktopToolbar.DockEdgeChanging">
      <summary>
            Notifies for an upcoming dock edge change.
            Allows you to examine and change the proposed dock edge or cancel the event.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NDesktopToolbar.DockEdgeChanged">
      <summary>
            Notifies for a change in the current dock edge of the DockableForm.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDesktopToolbar.DefaultFloatingSize">
      <summary>
            Gets the default floating size.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDesktopToolbar.DefaultDockEdge">
      <summary>
            Gets the default dock edge for the appbar.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDesktopToolbar.AvailableBounds">
      <summary>
            Gets the available bounds where the Desktop Toolbar may reside.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDesktopToolbar.Dock">
      <summary>
            Gets/sets the docking edge for the Form.
            Specify DockStyle.None to make the Form floating.
            Note that DockStyle.Fill is not allowed.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDesktopToolbar.AlwaysOnTop">
      <summary>
            Gets/sets a value indicating whether the Form will be always on top (topmost).
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDesktopToolbar.IsDocked">
      <summary>
            Gets a value indicating whether the Form is currently docked somewhere.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDesktopToolbar.IsFloating">
      <summary>
            Gets a value indicating whether the Form is currently floating.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDesktopToolbar.ProposedDockSize">
      <summary>
            Gets/sets the size to be used when docking the Form.
            If the Form is already docked this value is ignored.
            Use Form's Size property instead.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDesktopToolbar.ProposedFloatingSize">
      <summary>
            Gets/sets the size to be used when making the Form floating.
            If the Form is already floating this value is ignored.
            Use Form's Size property instead.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NDataGridView">
      <summary>
            Represents an extended DataGridView control with Nevron look-and-feel and custom behavior features
            like additional column for displaying child relations in a pop-up manner and built-in column context menu.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDataGridView.EnableSkinning">
      <summary>
            Gets/sets a value indicating whether the control will use skin logic.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDataGridView.Skin">
      <summary>
            Gets/sets the local NSkin instance to be used when painting this control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDataGridView.CurrentSkin">
      <summary>
            Gets the current skin to be used by this instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDataGridView.Palette">
      <summary>
            Gets/sets the NPalette used to render control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDataGridView.PaletteInheritance">
      <summary>
            Gets/sets a value which Palette value will be applied on a higher level Palette change.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDataGridView.EnableCellCustomDraw">
      <summary>
            Determines whether the grid's cells will be painted using palette logic.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDataGridView.EnableHeaderCustomDraw">
      <summary>
            Determines whether the grid's header cells will be painted using palette logic.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDataGridView.UseCustomScrollbars">
      <summary>
            Determines whether the grid will use custom scrollbars.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDataGridView.UseColumnContextMenu">
      <summary>
            Determines whether the grid will use custom scrollbars.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDataGridView.DisplayChildRelations">
      <summary>
            Determines whether the grid will handle child relations in the currently displayed data table.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDataGridView.DisplayedTable">
      <summary>
            Gets the currently displayed DataTable.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDataGridView.ChildRelationName">
      <summary>
            Gets/sets the name of the relation to be displayed when a "Details" cell is clicked.
            If null, the first child relation will be displayed.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NTreeListColumnHeaderViewInfo">
      <summary>
            A simple data class which contains information about the header in a NTreeList control.
            You may retrieve a populated object by calling the GetColumnHeaderViewInfo method of a NTreeList.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListColumnHeaderViewInfo.VisibleColumns">
      <summary>
            Gets a list with all the visible columns.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListColumnHeaderViewInfo.VisibleColumnsWidth">
      <summary>
            Gets the combined width of all visible columns.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NTreeListColumnStringFilter">
      <summary>
            A NTreeListColumnFilter derivative which works upon string sub-items.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeListColumnStringFilter.FilterCore(Nevron.UI.WinForm.Controls.NTreeListNodeSubItem)">
      <summary>
      </summary>
      <param name="item">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListColumnStringFilter.Text">
      <summary>
            Gets/sets the text to be used by this filter.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListColumnStringFilter.CaseSensitive">
      <summary>
            Determines whether case-sensitive comparison of text will be performed.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListColumnStringFilter.Options">
      <summary>
            Gets/sets the string operation to be used.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDataGridViewProgressBarColumn.ProgressBarProperties">
      <summary>
            Gets or sets the properties of the progress bar displayed in the cell.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDockingToolbarData.Toolbar">
      <summary>
            Gets/sets the NDockingToolbar object which state will be saved/loaded.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NColorBar">
      <summary>
            Represents a custom control for choosing red, green or blue values
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NColorBar.ValueChanged">
      <summary>
            Fired when the value of the color bar has changed.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NColorBar.EnableSkinning">
      <summary>
            Gets/sets a value indicating whether the control will use skin logic.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NColorBar.Skin">
      <summary>
            Gets/sets the local NSkin instance to be used when painting this control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NColorBar.CurrentSkin">
      <summary>
            Gets the current skin to be used by this instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NColorBar.Value">
      <summary>
            Gets/sets the current value. Must be in the interval [0, 255].
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NColorBar.Mode">
      <summary>
            Gets/sets the color value this bar will edit.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NColorBar.Orientation">
      <summary>
            Gets/sets the orientation for the color bar.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NColorBar.Color">
      <summary>
            Gets/sets the Color that will be displayed by the bar.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NRangeCollection">
      <summary>
            Represents a collection of command ranges.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NButtonRenderer">
      <summary>
            Represents a renderer which handles all BUTTON instances - these are NButton, NCheckBox and NRadioButton.
            </summary>
    </member>
    <member name="T:Nevron.UI.NGdiPlusTextFormat">
      <summary>
            Summary description for NGdiPlusTextFormat.
            </summary>
    </member>
    <member name="P:Nevron.UI.NGdiPlusTextFormat.HAlign">
      <summary>
            Gets/sets the horizontal align of the text within its layout rectangle.
            </summary>
    </member>
    <member name="P:Nevron.UI.NGdiPlusTextFormat.VAlign">
      <summary>
            Gets/sets the vertical align of the text within its layout rectangle.
            </summary>
    </member>
    <member name="P:Nevron.UI.NGdiPlusTextFormat.HotkeyPrefix">
      <summary>
            Gets/sets how hot-key prefixes are displayed.
            </summary>
    </member>
    <member name="P:Nevron.UI.NGdiPlusTextFormat.Trimming">
      <summary>
            Gets/sets the string strimming.
            </summary>
    </member>
    <member name="P:Nevron.UI.NGdiPlusTextFormat.FormatFlags">
      <summary>
            Gets/sets the flags that control text formatting.
            </summary>
    </member>
    <member name="T:Nevron.UI.NThemeManager">
      <summary>
            Represents the global manager of themes.
            </summary>
    </member>
    <member name="T:Nevron.UI.INDropDownContainerElement">
      <summary>
            Summary description for INDropDownContainer.
            </summary>
    </member>
    <member name="T:Nevron.UI.NTooltipInfo">
      <summary>
            Contains information about a tooltip.
            </summary>
    </member>
    <member name="M:Nevron.UI.NTooltipInfo.ShouldSerializeInitialDelay">
      <summary>
            Determines whether the InitialDelay property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NTooltipInfo.ShouldSerializeBetweenDelay">
      <summary>
            Determines whether the BetweenDelay property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NTooltipInfo.ShouldSerializeVisibleDuration">
      <summary>
            Determines whether the VisibleDuration property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NTooltipInfo.ShouldSerializeOpacity">
      <summary>
            Determines whether the Opacity property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NTooltipInfo.ShouldSerializeCaptionText">
      <summary>
            Determines whether the CaptionText property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NTooltipInfo.ShouldSerializeContentText">
      <summary>
            Determines whether the ContentText property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NTooltipInfo.ShouldSerializeFooterText">
      <summary>
            Determines whether the FooterText property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NTooltipInfo.ShouldSerializeArea">
      <summary>
            Determines whether the Area property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NTooltipInfo.ShouldSerializeCaptionImageSize">
      <summary>
            Determines whether the CaptionImageSize property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NTooltipInfo.ShouldSerializeContentImageSize">
      <summary>
            Determines whether the ContentImageSize property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NTooltipInfo.ShouldSerializeFooterImageSize">
      <summary>
            Determines whether the FooterImageSize property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NTooltipInfo.ShouldSerializeBackground">
      <summary>
            Determines whether the Background property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NTooltipInfo.ShouldSerializeAnimationInfo">
      <summary>
            Determines whether the AnimationInfo property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NTooltipInfo.ShouldSerializePlacementInfo">
      <summary>
            Determines whether the Placement property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NTooltipInfo.ShouldSerializePadding">
      <summary>
            Determines whether the Padding property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.NTooltipInfo.CaptionTextRenderMode">
      <summary>
            Gets/sets the text mode to be used when measuring and rendering caption text.
            </summary>
    </member>
    <member name="P:Nevron.UI.NTooltipInfo.ContentTextRenderMode">
      <summary>
            Gets/sets the text mode to be used when measuring and rendering content text.
            </summary>
    </member>
    <member name="P:Nevron.UI.NTooltipInfo.FooterTextRenderMode">
      <summary>
            Gets/sets the text mode to be used when measuring and rendering footer text.
            </summary>
    </member>
    <member name="P:Nevron.UI.NTooltipInfo.HasContent">
      <summary>
            Determines whether this instance contains any visual information to be displayed.
            </summary>
    </member>
    <member name="P:Nevron.UI.NTooltipInfo.InitialDelay">
      <summary>
            Gets/sets the initial delay before the tooltip becomes visible.
            </summary>
    </member>
    <member name="P:Nevron.UI.NTooltipInfo.BetweenDelay">
      <summary>
            Gets/sets the delay between two subsequent displays of a tooltip.
            </summary>
    </member>
    <member name="P:Nevron.UI.NTooltipInfo.VisibleDuration">
      <summary>
            Gets/sets the time (in milliseconds) while the tooltip is visible.
            </summary>
    </member>
    <member name="P:Nevron.UI.NTooltipInfo.Opacity">
      <summary>
            Gets/sets a value between 0-255 which indicates the transparency level of the tooltip.
            0 is completely transparent and 255 is completely opaque.
            </summary>
    </member>
    <member name="P:Nevron.UI.NTooltipInfo.Area">
      <summary>
            Gets/sets the area (in coordinates relative to the Control instance the tip is attached to) which is valid for the tooltip to remain visible.
            </summary>
    </member>
    <member name="P:Nevron.UI.NTooltipInfo.CaptionText">
      <summary>
            Gets/sets the text to be displayed by the tooltip's caption.
            </summary>
    </member>
    <member name="P:Nevron.UI.NTooltipInfo.ContentText">
      <summary>
            Gets/sets the text to be displayed by the tooltip's content.
            </summary>
    </member>
    <member name="P:Nevron.UI.NTooltipInfo.FooterText">
      <summary>
            Gets/sets the text to be displayed by the tooltip's footer.
            </summary>
    </member>
    <member name="P:Nevron.UI.NTooltipInfo.TirggerEvent">
      <summary>
            Gets/sets the event which will force the tooltip to be displayed.
            </summary>
    </member>
    <member name="P:Nevron.UI.NTooltipInfo.HasShadow">
      <summary>
            Gets/sets a value indicating whether the tooltip will drop a shadow.
            </summary>
    </member>
    <member name="P:Nevron.UI.NTooltipInfo.DefaultBorder">
      <summary>
            Determines whether the popup will have a default, 2-pixels border.
            </summary>
    </member>
    <member name="P:Nevron.UI.NTooltipInfo.CanDisplay">
      <summary>
            Gets/sets a value indicating whether the tooltip may be displayed.
            </summary>
    </member>
    <member name="P:Nevron.UI.NTooltipInfo.RemainVisibleOverChildren">
      <summary>
            Determines whether the tooltip should remain visible when the mouse moves over children.
            </summary>
    </member>
    <member name="P:Nevron.UI.NTooltipInfo.CaptionImage">
      <summary>
            Gets/sets the image to be displayed by the tooltip's caption.
            </summary>
    </member>
    <member name="P:Nevron.UI.NTooltipInfo.ContentImage">
      <summary>
            Gets/sets the image to be displayed by the tooltip's content.
            </summary>
    </member>
    <member name="P:Nevron.UI.NTooltipInfo.FooterImage">
      <summary>
            Gets/sets the image to be displayed by the tooltip's footer.
            </summary>
    </member>
    <member name="P:Nevron.UI.NTooltipInfo.CaptionImageSize">
      <summary>
            Gets/sets the size of the tooltip's caption image.
            </summary>
    </member>
    <member name="P:Nevron.UI.NTooltipInfo.ContentImageSize">
      <summary>
            Gets/sets the size of the tooltip's content image.
            </summary>
    </member>
    <member name="P:Nevron.UI.NTooltipInfo.FooterImageSize">
      <summary>
            Gets/sets the size of the tooltip's footer image.
            </summary>
    </member>
    <member name="P:Nevron.UI.NTooltipInfo.Background">
      <summary>
            Gets/sets the NUIshape instance which describes the filling of the tooltip.
            </summary>
    </member>
    <member name="P:Nevron.UI.NTooltipInfo.EnableSkinning">
      <summary>
            Gets/sets a value indicating whether the tooltip will use the current skinning logic.
            </summary>
    </member>
    <member name="P:Nevron.UI.NTooltipInfo.PlacementInfo">
      <summary>
            Gets the object which contains information about the placement of the tooltip.
            </summary>
    </member>
    <member name="P:Nevron.UI.NTooltipInfo.AnimationInfo">
      <summary>
            Gets/sets the animation information about the tooltip.
            </summary>
    </member>
    <member name="P:Nevron.UI.NTooltipInfo.Padding">
      <summary>
            Gets/sets the internal padding of the tooltip.
            </summary>
    </member>
    <member name="P:Nevron.UI.NTooltipInfo.DefaultInitialDelay">
      <summary>
            Gets the default value of the InitialDelay.
            </summary>
    </member>
    <member name="P:Nevron.UI.NTooltipInfo.DefaultBetweenDelay">
      <summary>
            Gets the default value of the BetweenDelay.
            </summary>
    </member>
    <member name="P:Nevron.UI.NTooltipInfo.DefaultVisibleDuration">
      <summary>
            Gets the default value of the VisibleDuration.
            </summary>
    </member>
    <member name="P:Nevron.UI.NTooltipInfo.DefaultOpacity">
      <summary>
            Gets the default value of the Opacity.
            </summary>
    </member>
    <member name="P:Nevron.UI.NTooltipInfo.DefaultArea">
      <summary>
            Gets the default value of the Area property.
            </summary>
    </member>
    <member name="P:Nevron.UI.NTooltipInfo.DefaultPadding">
      <summary>
            Gets the default value of the Padding property.
            </summary>
    </member>
    <member name="T:Nevron.UI.NScrollBarButtonElement">
      <summary>
            Summary description for NScrollBarButtonElement.
            </summary>
    </member>
    <member name="M:Nevron.UI.NScrollBarButtonElement.ProcessMouseDown(Nevron.UI.NMouseEventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="T:Nevron.UI.TrackElementMouseHitCode">
      <summary>
            Enumerates the possible mouse hit codes in a NTrackElement
            </summary>
    </member>
    <member name="F:Nevron.UI.TrackElementMouseHitCode.Nowhere">
      <summary>
            The mouse is in indeterminate position.
            </summary>
    </member>
    <member name="F:Nevron.UI.TrackElementMouseHitCode.ShaftBeforeThumb">
      <summary>
            The mouse is in the shaft area, before the thumb's bounds.
            </summary>
    </member>
    <member name="F:Nevron.UI.TrackElementMouseHitCode.Thumb">
      <summary>
            The mouse is over the thumb.
            </summary>
    </member>
    <member name="F:Nevron.UI.TrackElementMouseHitCode.ShaftAfterThumb">
      <summary>
            The mouse is in the shaft area, after the thumb's bounds.
            </summary>
    </member>
    <member name="T:Nevron.UI.ValueUpdateCode">
      <summary>
            Specifies the requested scroll code.
            </summary>
    </member>
    <member name="F:Nevron.UI.ValueUpdateCode.None">
      <summary>
            No update will occur
            </summary>
    </member>
    <member name="F:Nevron.UI.ValueUpdateCode.Indeterminate">
      <summary>
            Unknown code.
            </summary>
    </member>
    <member name="F:Nevron.UI.ValueUpdateCode.MouseMove">
      <summary>
            The update is associated with a mouse move.
            </summary>
    </member>
    <member name="F:Nevron.UI.ValueUpdateCode.User">
      <summary>
            The update is requested from the user.
            </summary>
    </member>
    <member name="F:Nevron.UI.ValueUpdateCode.SmallChangeDecrement">
      <summary>
            The current value is decremented using the small change.
            </summary>
    </member>
    <member name="F:Nevron.UI.ValueUpdateCode.SmallChangeIncrement">
      <summary>
            The current value is incremented using the small change.
            </summary>
    </member>
    <member name="F:Nevron.UI.ValueUpdateCode.LargeChangeDecrement">
      <summary>
            The current value is decremented using the large change.
            </summary>
    </member>
    <member name="F:Nevron.UI.ValueUpdateCode.LargeChangeIncrement">
      <summary>
            The current value is incremented using the large change.
            </summary>
    </member>
    <member name="T:Nevron.UI.ThumbStyle">
      <summary>
            Specifies the possible thumb style for a NTrackBarElement.
            </summary>
    </member>
    <member name="T:Nevron.UI.TrackBarShaftStyle">
      <summary>
            Specifies the available styles for the shaft line of a NTrackBarElement.
            </summary>
    </member>
    <member name="T:Nevron.UI.NPadding">
      <summary>
            Summary description for NMargins.
            </summary>
    </member>
    <member name="P:Nevron.UI.NPadding.Top">
      <summary>
            Gets/sets the margin from top edge.
            </summary>
    </member>
    <member name="P:Nevron.UI.NPadding.Left">
      <summary>
            Gets/sets the margin from left edge.
            </summary>
    </member>
    <member name="P:Nevron.UI.NPadding.Bottom">
      <summary>
            Gets/sets the margin from bottom edge.
            </summary>
    </member>
    <member name="P:Nevron.UI.NPadding.Right">
      <summary>
            Gets/sets the margin from right edge.
            </summary>
    </member>
    <member name="P:Nevron.UI.NPadding.All">
      <summary>
            Gets/sets the margin from all edges.
            </summary>
    </member>
    <member name="P:Nevron.UI.NPadding.Height">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.NPadding.IsModified">
      <summary>
            Gets a value indicating whether the padding values are modified.
            </summary>
    </member>
    <member name="T:Nevron.UI.NTimerManager">
      <summary>
            Summary description for NTimerManager.
            </summary>
    </member>
    <member name="T:Nevron.UI.NTimer">
      <summary>
            Represents a standard System.Windows.Forms.Timer with two custom fields.
            </summary>
    </member>
    <member name="T:Nevron.UI.NListHelper">
      <summary>
            Summary description for NListHelper.
            </summary>
    </member>
    <member name="T:Nevron.SmartShapes.N2DSmartShapeFactory">
      <summary>
            Summary description for N2DSmartShapeFactory.
            </summary>
    </member>
    <member name="M:Nevron.NewGraphics.NGradientBrush.InitFrom(Nevron.NewGraphics.NGraphicsObject)">
      <summary>
            Initializes a new graphics object from the given one.
            </summary>
      <param name="graphicsObject">
      </param>
    </member>
    <member name="P:Nevron.NewGraphics.NGradientBrush.GradientStops">
      <summary>
            Gets or sets the stops of this gradient
            </summary>
    </member>
    <member name="M:Nevron.NewGraphics.NRadialGradientBrush.InitFrom(Nevron.NewGraphics.NGraphicsObject)">
      <summary>
            Initializes a new graphics object from the given one.
            </summary>
      <param name="graphicsObject">
      </param>
    </member>
    <member name="T:Nevron.NewGraphics.NColorBrush">
      <summary>
            Defines a brush of a single color.
            </summary>
    </member>
    <member name="M:Nevron.NewGraphics.NColorBrush.InitFrom(Nevron.NewGraphics.NGraphicsObject)">
      <summary>
            Initializes a new graphics object from the given one.
            </summary>
      <param name="graphicsObject">
      </param>
    </member>
    <member name="P:Nevron.NewGraphics.NColorBrush.Type">
      <summary>
            Gets the fill type.
            </summary>
    </member>
    <member name="P:Nevron.NewGraphics.NColorBrush.Color">
      <summary>
            Get/Sets the brush color.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NTranslateAnimation">
      <summary>
            Moves an object from one point to another.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NTranslateAnimation.Clone">
      <summary>
            Creates an identical copy of this animation object.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NTranslateAnimation.StartOffset">
      <summary>
            The initial offset of the animated object.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NTranslateAnimation.EndOffset">
      <summary>
            The final offset of the animated object.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NTranslateAnimation.AnimationType">
      <summary>
            Gets the type of this animation.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NStringFormatKey">
      <summary>
            Summary description for NStringFormatKey.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NFormatProviderContainer">
      <summary>
            The NFormatProviderContainer class represents a container for format providers
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NFormatProviderContainer.FindProviderFromMimeType(System.String)">
      <summary>
            Obtains a provider corresponding to the specified mime type
            </summary>
      <param name="mimeType">mime type</param>
      <returns>mime type format provider</returns>
    </member>
    <member name="T:Nevron.GraphicsCore.NSwfImage">
      <summary>
            Represents a SWF image.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NSwfImage.KeepStreamOpened">
      <summary>
            Determines whether to keep the stream opened even after the data is written to it.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NXamlImageFormat">
      <summary>
            Represents the Silverlight xaml format.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NXamlImageFormat.MimeType">
      <summary>
            Mime type constant for xaml documents
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NXamlImageFormat.GetMimeType">
      <summary>
            Returns the mime type of the image.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NXamlImageFormat.GetExtension">
      <summary>
            Returns the file extension of the image.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NXamlImageFormat.GetName">
      <summary>
            Obtains the name of this image format.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NXamlImageFormat.HtmlTextWriterTag">
      <summary>
            Gets the HTML tag corresponding to this image.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NXamlImageFormat.EmbeddedImagesFormat">
      <summary>
            Gets or sets the image format of the images embedded in this flash document.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NXamlImageFormat.FPS">
      <summary>
            Determines the number of frames per second played by the flash movie. More frames lead to
            smoother animations but also a larger and computationally heavier flash file. The default
            is 24.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Text.NObjectFragment">
      <summary>
            The base of all object fragments.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.Text.NObjectFragment.WrappingStyle">
      <summary>
            Gets / sets the object wrapping style.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.Text.NObjectFragment.Size">
      <summary>
            Gets / sets the size of the object.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.Text.NObjectFragment.UseAutomaticSize">
      <summary>
            Gets/sets a value whether the fragment will use it's best size
            or the size explicitly specified by the size property
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Text.NNewLineAtom">
      <summary>
            Summary description for NNewLineAtom.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Text.NTextAtom">
      <summary>
            Represents a text atom
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Shapes.NRingSegmentShape">
      <summary>
            Summary description for NRingSegmentShape.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Shapes.N2DGraphicsShape">
      <summary>
            Summary description for N2DGraphicsShape.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Shapes.NRectangleCalloutShape">
      <summary>
            Summary description for NRectangleCalloutShape.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Shapes.NViewportGraphicsNode">
      <summary>
            Summary description for NViewportGraphicsNode.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Shapes.NLineGraphicsNode">
      <summary>
            Summary description for NLineGraphicsNode.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.Shapes.NLineGraphicsNode.Paint(Nevron.GraphicsCore.Shapes.NGraphicsPaintContext)">
      <summary>
            Paints this node.
            </summary>
      <param name="context">
      </param>
    </member>
    <member name="T:Nevron.GraphicsCore.Shapes.NStrokeStyleCommandNode">
      <summary>
            Summary description for NStrokeStyleCommandNode.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NSwfRenderSurface.CloseSwf">
      <summary>
            Closes the Swf file by finishing the last shape and adding the ShowFrame and the End tags.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NSwfRenderSurface.FlashDocument">
      <summary>
            Gets the flash document associated with the surface.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NSwfRenderSurface.ImageFormat">
      <summary>
            Gets or sets the format specific settings of the flash document rendered on this surface.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.N2DDeviceGDI">
      <summary>
            Represents a 2D GDI plus device.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.N2DDeviceGDI.ActivateStyles(Nevron.GraphicsCore.NFillStyle,Nevron.GraphicsCore.NStrokeStyle,Nevron.GraphicsCore.NImageFiltersStyle)">
      <summary>
            Batch style activation
            </summary>
      <param name="fillStyle">
      </param>
      <param name="strokeStyle">
      </param>
      <param name="imageFiltersStyle">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.N2DDeviceGDI.ClearStyles(Nevron.GraphicsCore.lII11II1)">
      <summary>
            Clears style state and optionally updates the painter 
            </summary>
      <param name="styles">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.N2DDeviceGDI.TranslateTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)">
      <summary>
            Applies the specified translation to the transformation matrix of this Graphics object.
            </summary>
      <param name="dx">
      </param>
      <param name="dy">
      </param>
      <param name="matrixOrder">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.N2DDeviceGDI.ScaleTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)">
      <summary>
            Applies the specified scaling operation to the transformation matrix of this Graphics object by prepending it to the object's transformation matrix.
            </summary>
      <param name="sx">
      </param>
      <param name="sy">
      </param>
      <param name="matrixOrder">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.N2DDeviceGDI.RotateTransform(System.Single,System.Drawing.Drawing2D.MatrixOrder)">
      <summary>
            Applies the specified rotation to the transformation matrix of this Graphics object.
            </summary>
      <param name="angle">
      </param>
      <param name="matrixOrder">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.N2DDeviceGDI.ResetTransform">
      <summary>
            Resets the world transformation matrix of this Graphics object to the identity matrix.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.N2DDeviceGDI.Clear">
      <summary>
            Clears all current drawings fromt he render surface this device is attached to.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.N2DDeviceGDI.Clear(System.Drawing.Color)">
      <summary>
            Clears all current drawings from he render surface this device is attached to and fill it with the specified color.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.N2DDeviceGDI.DrawImage(System.Drawing.Bitmap,Nevron.GraphicsCore.NPointF)">
      <summary>
            Draws the specified Image object, using its original physical size, at the specified location.
            </summary>
      <param name="image">
      </param>
      <param name="point">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.N2DDeviceGDI.DrawImage(System.Drawing.Bitmap,Nevron.GraphicsCore.NRectangleF)">
      <summary>
            Draws the specified Image object to the specified rectangle
            </summary>
      <param name="image">
      </param>
      <param name="rect">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.N2DDeviceGDI.DrawImage(System.Drawing.Bitmap,Nevron.GraphicsCore.NRectangleF,Nevron.GraphicsCore.NRectangleF,System.Drawing.GraphicsUnit)">
      <summary>
            Draws the specified portion of the specified Image object at the specified location and with the specified size.
            </summary>
      <param name="image">
      </param>
      <param name="destRect">
      </param>
      <param name="srcRect">
      </param>
      <param name="srcUnit">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.N2DDeviceGDI.Attach(System.Drawing.Graphics)">
      <summary>
            Attaches the device to the specified Graphics object. The current graphics resolution is used.
            </summary>
      <param name="graphics">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.N2DDeviceGDI.Attach(System.Drawing.Graphics,Nevron.GraphicsCore.NResolution)">
      <summary>
            Attaches the device to the specified Graphics object using the provided resolution.
            </summary>
      <param name="graphics">
      </param>
      <param name="resolution">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.N2DDeviceGDI.Detach">
      <summary>
            Detaches the device from the graphics object
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.N2DDeviceGDI.Graphics">
      <summary>
            Obtains the graphics associated with this device
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.N2DDeviceGDI.SupportsAnimation">
      <summary>
            Determines whether this device supports animation.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.N2DDeviceGDI.AnimationBounds">
      <summary>
            Gets or sets the animation bounds. Regarded only when AnimationBoundsMode is set to context
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.N2DDeviceGDI.RenderTechnology">
      <summary>
            Obtains the rendering technology of the device
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.N2DDeviceGDI.FillStyle">
      <summary>
            Gets / sets the current fill style.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.N2DDeviceGDI.FillColor">
      <summary>
            Sets the current fill color.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.N2DDeviceGDI.StrokeStyle">
      <summary>
            Gets / sets the current stroke style.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.N2DDeviceGDI.ImageFiltersStyle">
      <summary>
            Gets / sets the current image filters style.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.N2DDeviceGDI.Painter">
      <summary>
            Obtains the current painter
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.N2DDeviceGDI.TextureBoundsProvider">
      <summary>
            The bounds providers used to calculate bounds for texture mapping
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.N2DDeviceGDI.ImageFiltersBoundsProvider">
      <summary>
            The bounds privder used to calculate bounds for image filters canvas
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.N2DDeviceGDI.TextureMappingOrientation">
      <summary>
            The orientation applied on textures when mapping them on objects
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.N2DDeviceGDI.ClipPath">
      <summary>
            Sets the current clip path
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.N2DDeviceGDI.ClipInfo">
      <summary>
            Gets / sets the current clip path
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.N2DDeviceGDI.ClipBounds">
      <summary>
            Gets the current clip bounds
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.N2DDeviceGDI.MeasurementUnit">
      <summary>
            Gets / sets the device measurement unit
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.N2DDeviceGDI.PageUnit">
      <summary>
            Gets / sets the page unit of the device
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.N2DDeviceGDI.PageScale">
      <summary>
            Gets / sets the page scale of the device
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.N2DDeviceGDI.Resolution">
      <summary>
            Gets the resolution of this Device object.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.N2DDeviceGDI.ShapeRenderingMode">
      <summary>
            Gets/sets the shape rendering mode
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.N2DDeviceGDI.ImageRenderingMode">
      <summary>
            Gets/sets the image rendering mode.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.N2DDeviceGDI.TextRenderingMode">
      <summary>
            Gets/sets the text rendering mode.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.N2DDeviceGDI.TextRenderingHint">
      <summary>
            Gets/sets the text rendering hint for the device.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.N2DDeviceGDI.Transform">
      <summary>
            Gets/sets the world transformation for this device object.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.N2DDeviceGDI.ExcludedRegionFromImageFilters">
      <summary>
            Gets / sets a region to be excluded from image processing
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.N2DDeviceGDI.DashOffset">
      <summary>
            Gets or sets the current dash offset
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.N2DDeviceGDI.ColorTransform">
      <summary>
            Gets / sets the color transform object associated with this device
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.N2DDeviceGDI.Palette">
      <summary>
            Gets / sets the device color palette
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NTriangleF">
      <summary>
            The NTriangleF structure represents a triangle in 2D space defined by it's three vertices: (A, B, C).
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NTriangleF.Translate(System.Single,System.Single)">
      <summary>
            Translates the primitive with the specified amounts
            </summary>
      <param name="dx">
      </param>
      <param name="dy">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NTriangleF.Translate(Nevron.GraphicsCore.NPointF)">
      <summary>
            Translates the primitive with the specified offset
            </summary>
      <param name="offset">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NTriangleF.AddToGraphicsPath(System.Drawing.Drawing2D.GraphicsPath)">
      <summary>
            Appends the primitive to the specified graphics path
            </summary>
      <param name="path">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NTriangleF.ContainsOnOutline(Nevron.GraphicsCore.NPointF,System.Single)">
      <summary>
            Determines whether the outline of the triaangle contains the specified point
            </summary>
      <param name="point">
      </param>
      <param name="weight">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NTriangleF.ContainsOnOutline(Nevron.GraphicsCore.NPointF,System.Drawing.Pen)">
      <summary>
            Determines whether the outline of the triaangle contains the specified point
            </summary>
      <param name="point">
      </param>
      <param name="pen">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NTriangleF.Contains(Nevron.GraphicsCore.NPointF)">
      <summary>
            Determines whether the triangle contains the specified point
            </summary>
      <param name="point">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NTriangleF.Contains(Nevron.GraphicsCore.NPointF,System.Drawing.Drawing2D.FillMode)">
      <summary>
            Determines whether the primitive interior contains the specified point
            </summary>
      <param name="point">
      </param>
      <param name="fillMode">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NTriangleF.Equals(System.Object)">
      <summary>
      </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NTriangleF.GetHashCode">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NTriangleF.ToString">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="F:Nevron.GraphicsCore.NTriangleF.A">
      <summary>
            The first vertex of the triangle.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NTriangleF.B">
      <summary>
            The second vertex of the triangle.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NTriangleF.C">
      <summary>
            The third vertex of the triangle.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NTriangleF.Bounds">
      <summary>
            Gets the minimal enclosing rectangle
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NTriangleF.BoundsRange">
      <summary>
            Gets the minimal enclosing 2D range
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NTriangleF.IsFlat">
      <summary>
            Determines whether this is a flat primitive
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NTriangleF.Vertices">
      <summary>
            Gets an array of the triangle vertices.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NTriangleF.MediCenter">
      <summary>
            Gets the medi center of the triangle.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NTriangleF.Perimiter">
      <summary>
            Gets the perimiter of the triangle (SideA + SideB + SideC).
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NTriangleF.Area">
      <summary>
            Gets the area of the triangle.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NTriangleF.AreaSigned">
      <summary>
            Gets the signed area of the triangle.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NTriangleF.SideA">
      <summary>
            Gets the side formed by the vertices B and C.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NTriangleF.SideB">
      <summary>
            Gets the side formed by the vertices C and A.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NTriangleF.SideC">
      <summary>
            Gets the side formed by the vertices A and B.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NCircularArcF">
      <summary>
            Represents an arc of a circle in 2D space, defined by three points 
            </summary>
      <remarks>
            The circular arc is defined by three points, which lay on the circle. 
            The arc starts from the start point, passes through the control point and ends in the end point.
            </remarks>
    </member>
    <member name="M:Nevron.GraphicsCore.NCircularArcF.Translate(System.Single,System.Single)">
      <summary>
            Translates the primitive with the specified amounts
            </summary>
      <param name="dx">
      </param>
      <param name="dy">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NCircularArcF.Translate(Nevron.GraphicsCore.NPointF)">
      <summary>
            Translates the primitive with the specified offset
            </summary>
      <param name="offset">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NCircularArcF.AddToGraphicsPath(System.Drawing.Drawing2D.GraphicsPath)">
      <summary>
            Appends the primitive to the specified graphics path
            </summary>
      <param name="path">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NCircularArcF.ContainsOnOutline(Nevron.GraphicsCore.NPointF,System.Single)">
      <summary>
            Determines whether the outline of the primitive contains the specified point
            </summary>
      <param name="point">
      </param>
      <param name="weight">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NCircularArcF.ContainsOnOutline(Nevron.GraphicsCore.NPointF,System.Drawing.Pen)">
      <summary>
      </summary>
      <param name="point">
      </param>
      <param name="pen">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NCircularArcF.Equals(System.Object)">
      <summary>
      </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NCircularArcF.GetHashCode">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NCircularArcF.ToString">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NCircularArcF.ToNCircleSegmentF">
      <summary>
            Converts this arc to NCircleSegmentF
            </summary>
      <returns>
      </returns>
    </member>
    <member name="F:Nevron.GraphicsCore.NCircularArcF.Start">
      <summary>
            Start point
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NCircularArcF.Control">
      <summary>
            Control point
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NCircularArcF.End">
      <summary>
            End point
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NCircularArcF.StartPoint">
      <summary>
            Gets/sets the start point of the open figure
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NCircularArcF.EndPoint">
      <summary>
            Gets/sets the end point of the open figure
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NCircularArcF.Bounds">
      <summary>
            Gets the minimal enclosing rectangle
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NCircularArcF.BoundsRange">
      <summary>
            Gets the minimal enclosing 2D range
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NCircularArcF.IsFlat">
      <summary>
            Determines whether this is a flat primitive
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NCircularArcF.StartAngle">
      <summary>
            Obtains the angle, which the start point forms with the center of the circle 
            to which the arc belongs (in degrees)
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NCircularArcF.SweepAngle">
      <summary>
            Obtains the angle formed by the lines connecting the arc start and end points 
            with the circle center (in radians)
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NCircularArcF.Length">
      <summary>
            Returns the length of the arc
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NPath">
      <summary>
            The NPath class represents one or more geometrical figures, 
            which defined by a standard set of drawing commands
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NPath.Clone">
      <summary>
            Creates an exact replica of this object
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NPath.Translate(System.Single,System.Single)">
      <summary>
            Translates this path with the specified amounts
            </summary>
      <param name="dx">
      </param>
      <param name="dy">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NPath.Scale(System.Single,System.Single,Nevron.GraphicsCore.NPointF)">
      <summary>
            Scales the path around the specified pin with the specified scale factors
            </summary>
      <param name="scaleX">x scale</param>
      <param name="scaleY">y scale</param>
      <param name="pin">pin</param>
    </member>
    <member name="M:Nevron.GraphicsCore.NPath.AddToGraphicsPath(System.Drawing.Drawing2D.GraphicsPath)">
      <summary>
            Adds this path to the specified graphics path (does not apply the FillMode)
            </summary>
      <param name="path">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NPath.CreateGraphicsPath">
      <summary>
            Creates a graphics path from this figure (applies the FillMode)
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NPath.StartFigure">
      <summary>
            Starts a new figure without closing the current figure. 
            All subsequent commands added to the path are added to a new figure
            </summary>
      <returns>a reference to the newly started figure</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NPath.CloseFigure">
      <summary>
            Closes the last figure.
            All subsequent commands added to the path will be added to a new figure
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NPath.CloseAllFigures">
      <summary>
            Closes all open figures in this path. 
            All subsequent commands added to the path will be added to a new figure
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NPath.AddLine(Nevron.GraphicsCore.NLineSegmentF)">
      <summary>
            Adds a line to the path
            </summary>
      <param name="line">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NPath.AddLine(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
      <summary>
            Adds a line to the path
            </summary>
      <param name="start">
      </param>
      <param name="end">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NPath.AddLine(System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Adds a line to the path
            </summary>
      <param name="startX">
      </param>
      <param name="startY">
      </param>
      <param name="endX">
      </param>
      <param name="endY">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NPath.AddLines(Nevron.GraphicsCore.NPointF[])">
      <summary>
            Adds a series of connected lines to the path
            </summary>
      <remarks>
            The points array must contain at least 2 points, which define the first line. 
            Each subsequent point defines the the end point of line segment. 
            The first point is resused from the end point of the previous segment.
            </remarks>
      <param name="points">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NPath.AddBezier(Nevron.GraphicsCore.NBezierCurveF)">
      <summary>
            Adds a bezier curve to the path
            </summary>
      <param name="bezier">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NPath.AddBezier(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
      <summary>
            Adds a bezier curve to the path
            </summary>
      <param name="start">
      </param>
      <param name="first">
      </param>
      <param name="second">
      </param>
      <param name="end">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NPath.AddBezier(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Adds a bezier curve to the path
            </summary>
      <param name="startX">
      </param>
      <param name="startY">
      </param>
      <param name="firstX">
      </param>
      <param name="firstY">
      </param>
      <param name="secondX">
      </param>
      <param name="secondY">
      </param>
      <param name="endX">
      </param>
      <param name="endY">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NPath.AddBeziers(Nevron.GraphicsCore.NPointF[])">
      <summary>
            Adds a series of connected bezier curves to the path
            </summary>
      <remarks>
            The points array must contain at least 4 points, which define the first bezier. 
            Each subsequent group of three points defines the second, third and fourth points of a bezier curve. 
            The first point is resused from the last point of the previous group.
            </remarks>
      <param name="points">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NPath.AddCircularArc(System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Adds a circular arc to the path
            </summary>
      <param name="centerX">
      </param>
      <param name="centerY">
      </param>
      <param name="radius">
      </param>
      <param name="startAngle">
      </param>
      <param name="sweepAngle">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NPath.AddCircularArc(Nevron.GraphicsCore.NPointF,System.Single,System.Single,System.Single)">
      <summary>
            Adds a circular arc to the path
            </summary>
      <param name="center">
      </param>
      <param name="radius">
      </param>
      <param name="startAngle">
      </param>
      <param name="sweepAngle">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NPath.AddCircularArc(Nevron.GraphicsCore.NCircleSegmentF)">
      <summary>
            Adds a circular arc to the path
            </summary>
      <param name="arc">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NPath.AddCircularArc(Nevron.GraphicsCore.NCircularArcF)">
      <summary>
            Adds a circular arc to the path
            </summary>
      <param name="arc">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NPath.AddCircularArc(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
      <summary>
            Adds a circular arc to the path
            </summary>
      <param name="start">
      </param>
      <param name="control">
      </param>
      <param name="end">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NPath.AddCircularArc(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Adds a circular arc to the path
            </summary>
      <param name="startX">
      </param>
      <param name="startY">
      </param>
      <param name="controlX">
      </param>
      <param name="controlY">
      </param>
      <param name="endX">
      </param>
      <param name="endY">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NPath.AddEllipticalArc(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Adds an elliptical arc to the path
            </summary>
      <param name="centerX">x coordinate of the ellipse center</param>
      <param name="centerY">y coordinate of the ellipse center</param>
      <param name="a">ellipse semi major axis</param>
      <param name="b">ellipse semi minor axis</param>
      <param name="angle">angle which the major axis forms with the X axis</param>
      <param name="startAngle">start angle (in radians)</param>
      <param name="sweepAngle">sweep angle (in radians)</param>
    </member>
    <member name="M:Nevron.GraphicsCore.NPath.AddEllipticalArc(Nevron.GraphicsCore.NPointF,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Adds an elliptical arc to the path
            </summary>
      <param name="center">ellipse center</param>
      <param name="a">ellipse semi major axis</param>
      <param name="b">ellipse semi minor axis</param>
      <param name="angle">angle which the major axis forms with the X axis</param>
      <param name="startAngle">start angle (in radians)</param>
      <param name="sweepAngle">sweep angle (in radians)</param>
    </member>
    <member name="M:Nevron.GraphicsCore.NPath.AddEllipticalArc(Nevron.GraphicsCore.NEllipseSegmentF)">
      <summary>
            Adds an elliptical arc to the path
            </summary>
      <param name="arc">ellipse segment</param>
    </member>
    <member name="M:Nevron.GraphicsCore.NPath.AddEllipticalArc(Nevron.GraphicsCore.NEllipticalArcF)">
      <summary>
            Adds an elliptical arc to the path
            </summary>
      <param name="arc">ellipse arc</param>
    </member>
    <member name="M:Nevron.GraphicsCore.NPath.AddEllipticalArc(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF,System.Single,System.Single)">
      <summary>
            Adds an elliptical arc to the path
            </summary>
      <param name="start">arc start point</param>
      <param name="control">arc control point</param>
      <param name="end">arc end point</param>
      <param name="angle">angle of the ellipse major axis and the X axis (in radians)</param>
      <param name="ratio">ration between the ellipse major and minor axes</param>
    </member>
    <member name="M:Nevron.GraphicsCore.NPath.AddEllipticalArc(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Adds an elliptical arc to the path
            </summary>
      <param name="startX">arc start x coordinate</param>
      <param name="startY">arc start y coordinate</param>
      <param name="controlX">arc control x coordinate</param>
      <param name="controlY">arc control y coordinate</param>
      <param name="endX">arc end x coordinate</param>
      <param name="endY">arc end y coordinate</param>
      <param name="angle">angle of the ellipse major axis and the X axis (in radians)</param>
      <param name="ratio">ration between the ellipse major and minor axes</param>
    </member>
    <member name="M:Nevron.GraphicsCore.NPath.AddCircularPie(Nevron.GraphicsCore.NCircleF,System.Single,System.Single)">
      <summary>
            Adds a circular pie to the path
            </summary>
      <param name="circle">circle from which the pie is cut</param>
      <param name="startAngle">the staring angle of the pie (in radians)</param>
      <param name="sweepAngle">the angle between the start angle and the end of the pie (in radians)</param>
    </member>
    <member name="M:Nevron.GraphicsCore.NPath.AddEllipticalPie(Nevron.GraphicsCore.NEllipseF,System.Single,System.Single)">
      <summary>
            Adds an elliptical pie to the path
            </summary>
      <param name="ellipse">ellipse from which the pie is cut</param>
      <param name="startAngle">the staring angle of the pie (in radians)</param>
      <param name="sweepAngle">the angle between the start angle and the end of the pie (in radians)</param>
    </member>
    <member name="M:Nevron.GraphicsCore.NPath.AddEllipticalPie(Nevron.GraphicsCore.NRectangleF,System.Single,System.Single)">
      <summary>
            Adds an elliptical pie to the path
            </summary>
      <param name="rect">a rectangle which represents the bounding rectangle of the ellipse</param>
      <param name="startAngle">the staring angle of the pie (in radians)</param>
      <param name="sweepAngle">the angle between the start angle and the end of the pie (in radians)</param>
    </member>
    <member name="M:Nevron.GraphicsCore.NPath.AddCircle(Nevron.GraphicsCore.NCircleF)">
      <summary>
            Adds a circle to the path
            </summary>
      <param name="circle">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NPath.AddEllipse(Nevron.GraphicsCore.NEllipseF)">
      <summary>
            Adds an ellipse to the path
            </summary>
      <param name="ellipse">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NPath.AddRectangle(Nevron.GraphicsCore.NRectangleF)">
      <summary>
            Adds a rectangle to the path
            </summary>
      <param name="rect">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NPath.AddRoundedRectangle(Nevron.GraphicsCore.NRectangleF,System.Single)">
      <summary>
            Adds a rounded rectangle to the path
            </summary>
      <param name="rect">
      </param>
      <param name="rounding">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NPath.AddPolygon(Nevron.GraphicsCore.NPointF[])">
      <summary>
            Adds a polygon to the path
            </summary>
      <param name="points">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NPath.AddPath(Nevron.GraphicsCore.NPath)">
      <summary>
            Appends the specified path to this path
            </summary>
      <param name="path">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NPath.GetCurrentFigure(System.Boolean)">
      <summary>
            Gets the current figure for adding new commands to it
            </summary>
      <param name="closedFigure">indicates whether the current figure is need for adding an open or closed figure</param>
      <returns>valid path figure instance</returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NPath.Tag">
      <summary>
            Gets/sets a custom object associated with the path
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NPath.Figures">
      <summary>
            Obtains a list of the figures, from which the path is constructed
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NPath.LastFigure">
      <summary>
            Obtains the last figure in the list
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NPath.ContainsClosedFigure">
      <summary>
            Determines whether the path contains at least one closed figure
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NPath.FillMode">
      <summary>
            Gets/sets the fill mode of the path
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NMoveToCommand">
      <summary>
            The NMoveToCommand class represents a command, 
            which moves the drawing cursor to the command location. 
            It is the first command of each path figure.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NMoveToCommand.AddToGraphicsPath(System.Drawing.Drawing2D.GraphicsPath,Nevron.GraphicsCore.NPathCommand)">
      <summary>
            Overriden to start a new figure
            </summary>
      <param name="path">
      </param>
      <param name="prevCommand">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NMoveToCommand.Clone">
      <summary>
            Overriden to create a cloned move to command
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NMoveToCommand.Type">
      <summary>
            Overriden to return MoveTo
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NRayF">
      <summary>
            Represents a ray in 2D space defined by an origin point and it's X and Y directions
            </summary>
      <remarks>
            A point on the ray satisfies the following equasions:
            x = origin.X + directionX * t
            y = origin.Y + directionY * t
            which is the parametric form of a line in 2D space
            </remarks>
    </member>
    <member name="M:Nevron.GraphicsCore.NRayF.PointFromTime(System.Single)">
      <summary>
            Gets the point on the ray, which corresponds to the specified time 
            </summary>
      <param name="time">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRayF.TimeFromPoint(Nevron.GraphicsCore.NPointF)">
      <summary>
            Get the time of the point projection on the line
            </summary>
      <param name="point">
      </param>
      <returns>
      </returns>
    </member>
    <member name="F:Nevron.GraphicsCore.NRayF.Origin">
      <summary>
            The origin through which the ray passes
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NRayF.DirectionX">
      <summary>
            The X direction of the ray
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NRayF.DirectionY">
      <summary>
            The Y direction of the ray
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NRayF.FromTwoPoints(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
      <summary>
            Gets a normalized ray from two points
            </summary>
      <param name="point1">point1 - also used as origin</param>
      <param name="point2">point2 - togehter with point1 defines the ray direction</param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NRayF.IsNormalized">
      <summary>
            Determines whether the ray is normalized (e.g. its direction vector is normalized
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NRayF.DirectionVector">
      <summary>
            Gets the ray direciton as vector
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NRayF.OriginVector">
      <summary>
            Gets the ray origin as vector
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NRange2DF">
      <summary>
            Represents a range from the 2D space defined by its min and max X and Y values
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NRange2DF.Contains(Nevron.GraphicsCore.NPointF)">
      <summary>
            Determines whether the range contains the specified point
            </summary>
      <param name="point">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRange2DF.Contains(System.Single,System.Single)">
      <summary>
            Determines whether the range contains the point with the specified coordinates
            </summary>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRange2DF.Contains(Nevron.GraphicsCore.NRectangleF)">
      <summary>
            Determines whether the range contains the specified rectangle
            </summary>
      <param name="rect">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRange2DF.IntersectsWith(Nevron.GraphicsCore.NRectangleF)">
      <summary>
            Determines whether this range intersects with the specified rectangle
            </summary>
      <param name="rect">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRange2DF.IntersectsWith(Nevron.GraphicsCore.NLineSegmentF)">
      <summary>
            Determines whether this range intersects with the specified line segment
            </summary>
      <param name="lineSegment">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRange2DF.AreaIntersectsWith(Nevron.GraphicsCore.NCircleF)">
      <summary>
            Determines whether this range area intersects with the specified circle area 
            </summary>
      <param name="circle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRange2DF.OutlineIntersectsWith(Nevron.GraphicsCore.NCircleF)">
      <summary>
            Determines whether this range outline intersects with the specified circle outline
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRange2DF.IntersectsWith(Nevron.GraphicsCore.NPolylineF)">
      <summary>
            Determines whether this range intersects with the specified polyline
            </summary>
      <param name="polyline">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRange2DF.ToRectangleF">
      <summary>
            Converts this range to NRectangleF
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRange2DF.ToNRectangleF">
      <summary>
            Converts this rectangle to NRectangleF
            </summary>
      <returns>
      </returns>
    </member>
    <member name="F:Nevron.GraphicsCore.NRange2DF.xmin">
      <summary>
            min x coordinate
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NRange2DF.xmax">
      <summary>
            max x coordinate
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NRange2DF.ymin">
      <summary>
            min y coordinate
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NRange2DF.ymax">
      <summary>
            max y coordinate
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NRange2DF.FromTwoPoints(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
      <summary>
            Creates a normalized 2D range from two points.
            </summary>
      <param name="point1">
      </param>
      <param name="point2">
      </param>
      <returns>
      </returns>
    </member>
    <member name="F:Nevron.GraphicsCore.NRange2DF.Empty">
      <summary>
            The empty range
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NBackplaneStyleInflateConverter">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NBackplaneStyleInflateConverter.Convert(System.Object)">
      <summary>
            Converts the font size of a text style object.
            </summary>
      <param name="obj">the object to be converted</param>
      <returns>returns the converted object</returns>
    </member>
    <member name="T:Nevron.FormulaSheet.NAddRowVerb">
      <summary>
            The NAddRowVerb verb is used for the addition of a new formula section row in a formula section
            </summary>
    </member>
    <member name="M:Nevron.FormulaSheet.NAddRowVerb.Execute">
      <summary>
            Overriden to add a default row in the section passed as argument
            </summary>
    </member>
    <member name="F:Nevron.FormulaSheet.NAddRowVerb.Section">
      <summary>
            Reference to the section in which to add a default row
            </summary>
    </member>
    <member name="T:Nevron.Editors.NStrokeStyleTypeEditorNoAutomatic">
      <summary>
            Provides facilities for visual editing of NStrokeStyle objects.
            </summary>
    </member>
    <member name="T:Nevron.Editors.NStrokeStyleTypeEditor">
      <summary>
            Provides facilities for visual editing of NStrokeStyle objects.
            </summary>
    </member>
    <member name="M:Nevron.Editors.NStrokeStyleTypeEditor.Edit(Nevron.GraphicsCore.NStrokeStyle,Nevron.GraphicsCore.NStrokeStyle@)">
      <summary>
            Edits the specified style. 
            </summary>
      <param name="strokeStyle">
      </param>
      <param name="strokeStyleResult">
      </param>
      <returns>
      </returns>
      <remarks>
            If the function returns true then the out parameter holds a valid style.
            </remarks>
    </member>
    <member name="M:Nevron.Editors.NStrokeStyleTypeEditor.Edit(Nevron.GraphicsCore.NStrokeStyle,System.Boolean,Nevron.GraphicsCore.NStrokeStyle@)">
      <summary>
            Edits the specified style. If automatic is set to true the in parameter must be treated as automatic style.
            </summary>
      <param name="strokeStyle">
      </param>
      <param name="automaticStyle">
      </param>
      <param name="strokeStyleResult">
      </param>
      <returns>
      </returns>
      <remarks>
            If the function returns true then the out parameter holds a valid style.
            </remarks>
    </member>
    <member name="T:Nevron.Editors.NStandardFrameStyleTypeEditorNoAutomatic">
      <summary>
            Provides facilities for visual editing of NStandardFrameStyle objects.
            </summary>
    </member>
    <member name="T:Nevron.Editors.NImageFrameStyleTypeEditor">
      <summary>
            Provides facilities for visual editing of NImageFrameStyle objects.
            </summary>
    </member>
    <member name="M:Nevron.Editors.NImageFrameStyleTypeEditor.Edit(Nevron.GraphicsCore.NImageFrameStyle,Nevron.GraphicsCore.NImageFrameStyle@)">
      <summary>
            Edits the specified style. 
            </summary>
      <param name="imageFrameStyle">
      </param>
      <param name="imageFrameStyleResult">
      </param>
      <returns>
      </returns>
      <remarks>
            If the function returns true then the out parameter holds a valid style.
            </remarks>
    </member>
    <member name="M:Nevron.Editors.NImageFrameStyleTypeEditor.Edit(Nevron.GraphicsCore.NImageFrameStyle,System.Boolean,Nevron.GraphicsCore.NImageFrameStyle@)">
      <summary>
            Edits the specified style. If automatic is set to true the in parameter must be treated as automatic style.
            </summary>
      <param name="imageFrameStyle">
      </param>
      <param name="automaticStyle">
      </param>
      <param name="imageFrameStyleResult">
      </param>
      <returns>
      </returns>
      <remarks>
            If the function returns true then the out parameter holds a valid style.
            </remarks>
    </member>
    <member name="T:Nevron.Editors.NBackgroundStyleTypeEditor">
      <summary>
            Provides facilities for visual editing of NBackgroundStyle objects.
            </summary>
    </member>
    <member name="M:Nevron.Editors.NBackgroundStyleTypeEditor.Edit(Nevron.GraphicsCore.NBackgroundStyle,Nevron.GraphicsCore.NBackgroundStyle@)">
      <summary>
            Edits the specified style. 
            </summary>
      <param name="backgroundStyle">
      </param>
      <param name="backgroundStyleResult">
      </param>
      <returns>
      </returns>
      <remarks>
            If the function returns true then the out parameter holds a valid style.
            </remarks>
    </member>
    <member name="M:Nevron.Editors.NBackgroundStyleTypeEditor.Edit(Nevron.GraphicsCore.NBackgroundStyle,System.Boolean,Nevron.GraphicsCore.NBackgroundStyle@)">
      <summary>
            Edits the specified style. If automatic is set to true the in parameter must be treated as automatic style.
            </summary>
      <param name="backgroundStyle">
      </param>
      <param name="automaticStyle">
      </param>
      <param name="backgroundStyleResult">
      </param>
      <returns>
      </returns>
      <remarks>
            If the function returns true then the out parameter holds a valid style.
            </remarks>
    </member>
    <member name="T:Nevron.Editors.NAnimationsStyleTypeEditor">
      <summary>
            Provides facilities for visual editing of NAnimationsStyle objects.
            </summary>
    </member>
    <member name="M:Nevron.Editors.NAnimationsStyleTypeEditor.Edit(Nevron.GraphicsCore.NAnimationsStyle,Nevron.GraphicsCore.NAnimationsStyle@)">
      <summary>
            Edits the specified style. 
            </summary>
      <param name="animationsStyle">
      </param>
      <param name="animationsStyleResult">
      </param>
      <returns>
      </returns>
      <remarks>
            If the function returns true then the out parameter holds a valid style.
            </remarks>
    </member>
    <member name="M:Nevron.Editors.NAnimationsStyleTypeEditor.Edit(Nevron.GraphicsCore.NAnimationsStyle,System.Boolean,Nevron.GraphicsCore.NAnimationsStyle@)">
      <summary>
            Edits the specified style. If automatic is set to true the in parameter must be treated as automatic style.
            </summary>
      <param name="animationsStyle">
      </param>
      <param name="allowAutomatic">
      </param>
      <param name="animationsStyleResult">
      </param>
      <returns>
      </returns>
      <remarks>
            If the function returns true then the out parameter holds a valid style.
            </remarks>
    </member>
    <member name="T:Nevron.Editors.NNodeContainerEditorUC">
      <summary>
            Summary description for NNodeContainerEditorUC.
            </summary>
    </member>
    <member name="M:Nevron.Editors.NNodeContainerEditorUC.Dispose(System.Boolean)">
      <summary> 
            Clean up any resources being used.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NTreeViewRenderer">
      <summary>
            Represents a NTreeView renderer.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NTabControl.SelectedTabChanged">
      <summary>
            Occurs when a selected tab has been changed.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NTabControl.SelectingTab">
      <summary>
            Occurs before a tab is selected, enabling a handler to cancel a tab change.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NTabControl.ClosingTab">
      <summary>
            Occurs before a tab is selected, enabling a handler to cancel a tab change.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTabControl.EnableSkinning">
      <summary>
            Gets/sets a value indicating whether the control will use skin logic.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTabControl.Skin">
      <summary>
            Gets/sets the local NSkin instance to be used when painting this control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTabControl.CurrentSkin">
      <summary>
            Gets the current skin to be used by this instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTabControl.Renderer">
      <summary>
            Gets/sets the renderer that renders the tabcontrol.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTabControl.PaletteInheritance">
      <summary>
            Gets/sets a value which Palette value will be applied on a higher level Palette change.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTabControl.Palette">
      <summary>
            Gets/sets the Palette used to render the tabcontrol.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTabControl.TabPages">
      <summary>
            Gets the tabpage collection for that tab control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTabControl.TabAlign">
      <summary>
            Gets/sets the tab alignment.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTabControl.TabStyle">
      <summary>
            Gets/sets the style of the tabs.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTabControl.TextOrientation">
      <summary>
            Gets/sets the orientation for the tabs text.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTabControl.TextVisibility">
      <summary>
            Gets/sets the visibility of the tabs text.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTabControl.HasArrows">
      <summary>
            Gets/sets a value indicating whether the tab control will have scroll arrows.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTabControl.HasClose">
      <summary>
            Gets/sets a value indicating whether the tab control will have a close button.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTabControl.TabCurveWidth">
      <summary>
            Gets/sets the width of the curve that is used to round the tabs.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTabControl.ShowToolTips">
      <summary>
            Gets/sets a value whether a tooltip (if any) should be displayed when the mouse hovers a tab.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTabControl.ImageList">
      <summary>
            Gets/sets the image list associated with the tab control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTabControl.SelectedTab">
      <summary>
            Gets/sets the currently selected tabpage
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTabControl.SelectedIndex">
      <summary>
            Gets/sets the index of the currently selected tabpage.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTabControl.AllowTabReorder">
      <summary>
            Gets/sets a value whether user can reorder tabs using mouse dragging.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTabControl.HotTrack">
      <summary>
            Gets/sets a value whether each tab will display feedback when hovered.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTabControl.ShowFocusRect">
      <summary>
            Gets/sets a value whether a selected tab will display focus rectangle if its parent is focused.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTabControl.Selectable">
      <summary>
            Gets/sets a value whether the strip can accept focus.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTabControl.DrawThemeBackground">
      <summary>
            Gets/sets a value whether a theme background when current color scheme is WindowsDefault.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTabControl.TabWidthPadding">
      <summary>
            Gets/sets the horizontal spacing in tabs.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTabControl.TabHeightPadding">
      <summary>
            Gets/sets the vertical spacing in tabs.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTabControl.TabBorderPadding">
      <summary>
            Gets/sets the padding of the tabs from the border.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NSkin.DumpImages(System.String)">
      <summary>
            Extracts all the currently registered images and saves them into the specified folder.
            </summary>
      <param name="directoryPath">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NSkin.ReloadImages(System.String)">
      <summary>
            Reloads all the images, previously dumped to a directory.
            This allows for fast modification of a desired image.
            </summary>
      <param name="dumpDirectory">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NSkin.ShouldSerializePalette">
      <summary>
            Determines whether the Palette property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NSkin.ShouldSerializeColorTransform">
      <summary>
            Determines whether the ColorTransform property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NSkin.Changed">
      <summary>
            Fired whenever the skin changes - if a new entry is inserted or the palette changes.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NSkin.Name">
      <summary>
            Gets/sets the name of the skin.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NSkin.Description">
      <summary>
            Gets/sets the description of the skin (e.g. Shades of blue).
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NSkin.Palette">
      <summary>
            Gets/sets the palette which suits the current skin.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NSkin.ColorTransform">
      <summary>
            Gets/sets the color transform to be applied to the entire skin.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NPanelBar">
      <summary>
            Represents a panel bar, which contains one or more NBand objects.
            </summary>
      <remarks>
            Each NPanelBar instance holds a collection of NBand objects.
            You can gain access to this collection with the help of the Bands property.
            You can specify a border type for the panel bar with the Border property.
            </remarks>
      <example>
            The following example creates a new panel bar with a single band and customizes its most important properties:
            <code lang="VB">
            ' create the panel bar and dock it on the left of the form 
            Dim panelbar As NPanelBar =  New NPanelBar() 
            panelbar.Dock = DockStyle.Left
            Me.Controls.Add(panelbar)
            
            ' customize it
            panelbar.Caption = "My Panel Bar"
            panelbar.CaptionBackColor = SystemColors.ControlDark
            panelbar.BorderStyle = Border.Flat
            
            ' create a simple band
            Dim band As NBand =  New NBand() 
            band.Caption = "My Band"
            panelbar.Bands.Add(band)
            </code><code>
            // create the panel bar and dock it on the left of the form 
            NPanelBar panelbar = new NPanelBar();
            panelbar.Dock = DockStyle.Left;
            this.Controls.Add(panelbar);
            
            // customize it
            panelbar.Caption = "My Panel Bar";
            panelbar.CaptionBackColor = SystemColors.ControlDark;
            panelbar.BorderStyle = Border.Flat;
            
            // create a simple band
            NBand band = new NBand();
            band.Caption = "My Band";
            panelbar.Bands.Add(band);
            </code></example>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NPanelBar.ArrangeBands">
      <summary>
            Arranges all the bands in the NBandCollection
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NPanelBar.GetExpandedBand">
      <summary>
            Returns a reference to the currently expanded band
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPanelBar.Renderer">
      <summary>
            Gets/sets the current renderer for the button.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPanelBar.Palette">
      <summary>
            Gets/sets the NPalette used to render the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPanelBar.PaletteInheritance">
      <summary>
            Gets/sets a value which Palette value will be applied on a higher level Palette change.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPanelBar.Border">
      <summary>
            Gets the NControlBorder object that manages the border around the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPanelBar.DefaultBorderStyle">
      <summary>
            Gets the default border style for the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPanelBar.BorderWidth">
      <summary>
            Gets the preffered width of the border.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPanelBar.IsBorderHot">
      <summary>
            Gets a value indicating whether the border should be drawn in its default state (works only if the border is interactive).
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPanelBar.DefaultBaseBorderColor">
      <summary>
            Gets the default base color to use when drawing 3D borders.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NPanelBar.BandExpanding">
      <summary>
            Notifies of band being expanded
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NPanelBar.BandExpanded">
      <summary>
            Notifies of band being expanded
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPanelBar.Bands">
      <summary>
            Gives you access to the collection of bands maintained by the panel bar.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPanelBar.ImageList">
      <summary>
            Gets/sets the image list for the panel bar.
            </summary>
      <remarks>
            Each band contained in the panel bar can have an icon in its caption, 
            which is specified as an index in the provided image list.
            </remarks>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NBandCollection">
      <summary>
            Represents a collection of NBand objects.
            </summary>
      <remarks>
            An instance of this class can be obtained from the Bands property of the NPanelBar class.
            </remarks>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NBandCollection.Add(Nevron.UI.WinForm.Controls.NBand)">
      <summary>
            Adds a new NBand object to the collection.
            </summary>
      <param name="band">
            The band to add. 
            </param>
      <returns>
            The index at which the band was added.
            </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NBandCollection.AddRange(Nevron.UI.WinForm.Controls.NBand[])">
      <summary>
            Adds range of NBand objects.
            </summary>
      <param name="bands">
            The array of bands to add.
            </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NBandCollection.Remove(Nevron.UI.WinForm.Controls.NBand)">
      <summary>
            Removes the specified NBand object from the collection.
            </summary>
      <param name="band">
            The band to remove.
            </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NBandCollection.Contains(Nevron.UI.WinForm.Controls.NBand)">
      <summary>
            Determines whether the collection contains a NBand object.
            </summary>
      <param name="band">
            The band to check for
            </param>
      <returns>
            true if the band is contained, otherwise false.
            </returns>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NIOHelper">
      <summary>
            Summary description for NIOHelper.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NImageListData.ImageList">
      <summary>
            Gets/sets the ImageList object which data is to be saved/loaded.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NLayeredWindow">
      <summary>
            Represents a generic implementation for layered window (a window with WS_EX_LAYERED style applied).
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NLayeredWindow.ShowWindow(System.Drawing.Point)">
      <summary>
            Displays the window to user using the specified location and current size.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NLayeredWindow.PaintWindow(System.Drawing.Graphics,System.Drawing.Bitmap)">
      <summary>
            Performs painting of the window.
            </summary>
      <param name="g">The graphics to use.</param>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLayeredWindow.Moveable">
      <summary>
            Gets/sets a value whether the user can move the window using left mouse button.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLayeredWindow.Transparent">
      <summary>
            Gets/sets a value whether the user can move the window using left mouse button.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLayeredWindow.TopMost">
      <summary>
            Gets/sets a value whether the user can move the window using left mouse button.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NEntryBox">
      <summary>
            Represents a predefined NEntryContrainer which wraps a NTextBox instance.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NEntryContainer">
      <summary>
            Represents the base class for all entry controls.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NEntryContainer.State">
      <summary>
            Gets the current state of the component.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NEntryContainer.Interactive">
      <summary>
            Gets/sets a value indicating whether the control will be interactive - will display visual cues.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NEntryContainer.FillEntryControlBounds">
      <summary>
            Gets/sets a value indicating whether the entry control's bounds will be filled.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NEntryContainer.LabelControlSpacing">
      <summary>
            Gets/sets the spacing between the label and the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NEntryContainer.Controls">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NEntryContainer.LabelControlRelation">
      <summary>
            Gets/sets the relation between the label and control in this entry container.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NEntryContainer.LabelSize">
      <summary>
            Gets/sets the label size.
            If empty the preferred one is used.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NEntryContainer.EntryControl">
      <summary>
            Gets/sets the entry control for this container.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NEntryBox.EntryControl">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NEntryBox.EditControl">
      <summary>
            Get the wrapped NTextBox instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeNodePath.Path">
      <summary>
            Gets/sets the string representation of the node's path
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NTreeListColumnCollection">
      <summary>
            Represenst a strongly-typed collection of NTreeListColumn instances.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeListColumnCollection.Add(Nevron.UI.WinForm.Controls.NTreeListColumn)">
      <summary>
            Adds the specified column to the collection.
            </summary>
      <param name="column">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeListColumnCollection.AddRange(Nevron.UI.WinForm.Controls.NTreeListColumn[])">
      <summary>
            Adds an array of NTreeListColumn instances to the collection.
            </summary>
      <param name="columns">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeListColumnCollection.Contains(Nevron.UI.WinForm.Controls.NTreeListColumn)">
      <summary>
            Determines whether the specified column is contained.
            </summary>
      <param name="column">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeListColumnCollection.Insert(System.Int32,Nevron.UI.WinForm.Controls.NTreeListColumn)">
      <summary>
            Adds the specified column at the specified index in the collection.
            </summary>
      <param name="index">
      </param>
      <param name="column">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeListColumnCollection.SetChildIndex(Nevron.UI.WinForm.Controls.NTreeListColumn,System.Int32)">
      <summary>
            Applies the desired index of the specified column.
            </summary>
      <param name="column">The column which index is to be set.</param>
      <param name="index">The desired index.</param>
      <returns>True if operation was successful, false otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeListColumnCollection.GetColumnByName(System.String)">
      <summary>
            Retrieves the column with the specified name.
            </summary>
      <param name="name">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeListColumnCollection.GetColumnByName(System.String,System.Boolean)">
      <summary>
            Retrieves the column with the specified name.
            </summary>
      <param name="name">The name to search for.</param>
      <param name="caseSensitive">True if a case-sensitive search should be performed, false otherwise.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeListColumnCollection.ToArray">
      <summary>
            Copies the collection into an array.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeListColumnCollection.NextVisible(Nevron.UI.WinForm.Controls.NTreeListColumn)">
      <summary>
            Gets the next visible column, starting from the specified one.
            </summary>
      <param name="anchor">The column to start searching from.</param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListColumnCollection.FirstVisible">
      <summary>
            Gets the first visible column in the collection.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListColumnCollection.LastVisible">
      <summary>
            Gets the last visible column in the collection.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListColumnCollection.VisibleCount">
      <summary>
            Gets the count of the currently visible columns.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListColumnCollection.VisibleColumnsWidth">
      <summary>
            Gets the width, in pixels, of all visible columns.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListColumnCollection.FixedColumnWidth">
      <summary>
            Gets the combined width, in pixels, of all pinned columns.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListColumnCollection.PreferredColumnsWidth">
      <summary>
            Gets the preferred width of all columns.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListColumnCollection.AutoSizableColumnsPreferredWidth">
      <summary>
            Gets the preferred width of all columns which may be auto-sized.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListColumnCollection.AutoSizableColumnsWidth">
      <summary>
            Gets the current width of all auto-sizable columns.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NTreeListData">
      <summary>
            Represents a base class for a bindable tree-list's data.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeListData.Bind(Nevron.UI.WinForm.Controls.NTreeList)">
      <summary>
            Binds to the specified tree-list.
            Once binded the tree-list may not be freely inserted items and/or columns.
            All previously added nodes will be removed.
            </summary>
      <param name="list">The NTreeList instance to bind to.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeListData.Unbind">
      <summary>
            Unbinds the specified tree from the current instance.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeListData.PopulateData">
      <summary>
            Populates the data.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeListData.CanBind(Nevron.UI.WinForm.Controls.NTreeList)">
      <summary>
            Determines whether the current instance may be bound to the specified tree-list.
            </summary>
      <param name="list">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeListData.UnbindCore">
      <summary>
            Provides basic core implementation of the un-binding.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeListData.PopulateDataCore">
      <summary>
            Performs the core data population method.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeListData.CreateSubItem(System.Object)">
      <summary>
            Creates a sub-item for the specified value.
            Depending on the value's type different NTreeListNodeSubItem instances will be created.
            </summary>
      <param name="value">The value to create item for.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeListData.BeginInit">
      <summary>
            Begins initialization process.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeListData.EndInit(System.Boolean)">
      <summary>
            Ends initialization process.
            </summary>
      <param name="update">True to force an update, false otherwise.</param>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListData.Owner">
      <summary>
            Gets the NTreeList instance which is bound to this data.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListData.IsBound">
      <summary>
            Determines whether the data is bound to a NTreeList instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListData.IsInitializing">
      <summary>
            Determines whether the data is currently in a process of being initialized.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NMaskedTextBox">
      <summary>
            A subclass of the standard .NET MaskedTextBox control which gives it the Nevron look-and-feel.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NMaskedTextBox.EnableSkinning">
      <summary>
            Gets/sets a value indicating whether the control will use skin logic.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NMaskedTextBox.Skin">
      <summary>
            Gets/sets the local NSkin instance to be used when painting this control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NMaskedTextBox.CurrentSkin">
      <summary>
            Gets the current skin to be used by this instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NMaskedTextBox.Palette">
      <summary>
            Gets/sets the NPalette used to render the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NMaskedTextBox.PaletteInheritance">
      <summary>
            Gets/sets a value which Palette value will be applied on a higher level Palette change.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NMaskedTextBox.Border">
      <summary>
            Gets the NControlBorder object that manages the border around the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NMaskedTextBox.BorderWidth">
      <summary>
            Gets the preffered width of the border.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NMaskedTextBox.IsBorderHot">
      <summary>
            Gets a value indicating whether the border should be drawn in its default state (works only if the border is interactive).
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NMaskedTextBox.DefaultBorderStyle">
      <summary>
            Gets the default border style for the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NMaskedTextBox.DefaultBaseBorderColor">
      <summary>
            Gets the default base color to use when drawing 3D borders.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NMaskedTextBox.AutoSize">
      <summary>
            Gets/sets a value whether the TextBox will auto-size itself depending on the current fon height. Valid in single-line mode only.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NFontComboBox">
      <summary>
            Summary description for NFontComboBox.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NFontComboBox.CreateListCore">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NFontComboBox.ShouldSerializeItems">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NFontComboBox.Initialize">
      <summary>
            Populates the control with all the installed fonts using the current display style.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFontComboBox.DisplayStyle">
      <summary>
            Gets/sets the style used to display font names.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFontComboBox.AutoSizeDropDown">
      <summary>
            Gets/sets a value whether the drop-down part will be automatically resized to display the entire content.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NPaletteColorPaneCommand">
      <summary>
            Summary description for NPaletteColorPaneCommand.
            </summary>
    </member>
    <member name="T:Nevron.UI.NGdiTextFormat">
      <summary>
            Summary description for NTextFormatOptions.
            </summary>
    </member>
    <member name="P:Nevron.UI.NGdiTextFormat.WordBreak">
      <summary>
            Gets/sets whether the text will break its words on a new line.
            </summary>
    </member>
    <member name="P:Nevron.UI.NGdiTextFormat.WordEllipsis">
      <summary>
            Gets/sets whether the text will truncate a non-displayable word to ellipsis.
            </summary>
    </member>
    <member name="P:Nevron.UI.NGdiTextFormat.SingleLine">
      <summary>
            Gets/sets whether the text will be single-line only.
            </summary>
    </member>
    <member name="P:Nevron.UI.NGdiTextFormat.Bottom">
      <summary>
            Gets/sets whether the text will be bottom-aligned.
            </summary>
    </member>
    <member name="P:Nevron.UI.NGdiTextFormat.Top">
      <summary>
            Gets/sets whether the text will be top-aligned.
            </summary>
    </member>
    <member name="P:Nevron.UI.NGdiTextFormat.Left">
      <summary>
            Gets/sets whether the text will be left-aligned.
            </summary>
    </member>
    <member name="P:Nevron.UI.NGdiTextFormat.Right">
      <summary>
            Gets/sets whether the text will be right-aligned.
            </summary>
    </member>
    <member name="P:Nevron.UI.NGdiTextFormat.Center">
      <summary>
            Gets/sets whether the text will be centered horizontally.
            </summary>
    </member>
    <member name="P:Nevron.UI.NGdiTextFormat.VCenter">
      <summary>
            Gets/sets whether the text will be centered vertically.
            </summary>
    </member>
    <member name="P:Nevron.UI.NGdiTextFormat.EditControl">
      <summary>
            Gets/sets whether the text will be displayed as if rendered by an edit control.
            </summary>
    </member>
    <member name="P:Nevron.UI.NGdiTextFormat.EndEllipsis">
      <summary>
            Gets/sets whether the non-displayable text will be trimmed to ellipsis.
            </summary>
    </member>
    <member name="P:Nevron.UI.NGdiTextFormat.ExpandTabs">
      <summary>
            Gets/sets whether the tab characters are expanded.
            </summary>
    </member>
    <member name="P:Nevron.UI.NGdiTextFormat.ExternalLeading">
      <summary>
            Gets/sets whether the font external leading will be included in line height.
            </summary>
    </member>
    <member name="P:Nevron.UI.NGdiTextFormat.HidePrefix">
      <summary>
            Gets/sets whether to ingore the ampersands prefix character in the text.
            </summary>
    </member>
    <member name="P:Nevron.UI.NGdiTextFormat.NoPrefix">
      <summary>
            Gets/sets whether to turn off prefix character processing.
            </summary>
    </member>
    <member name="P:Nevron.UI.NGdiTextFormat.PathEllipsis">
      <summary>
            Gets/sets whether to replace the middle of the text with ellipsis so that it fits the bounding rectangle.
            </summary>
    </member>
    <member name="P:Nevron.UI.NGdiTextFormat.PrefixOnly">
      <summary>
            Gets/sets whether to draw a line only at the character following an ampersand character.
            </summary>
    </member>
    <member name="P:Nevron.UI.NGdiTextFormat.RtlLeading">
      <summary>
            Gets/sets whether to draw the text using right-to-left leading.
            </summary>
    </member>
    <member name="P:Nevron.UI.NGdiTextFormat.NoClip">
      <summary>
            Gets/sets whether the text will be clipped to the bounding rectangle or not.
            </summary>
    </member>
    <member name="T:Nevron.UI.Themes.Office2003.NOffice2003ColorTable">
      <summary>
            Summary description for NOffice2003ColorTable.
            </summary>
    </member>
    <member name="T:Nevron.UI.RectCorner">
      <summary>
            Enumerates the possible rect corners.
            </summary>
    </member>
    <member name="T:Nevron.UI.RenderMask">
      <summary>
            Specifies possible passes of a render operation
            </summary>
    </member>
    <member name="F:Nevron.UI.RenderMask.None">
      <summary>
            No rendering.
            </summary>
    </member>
    <member name="F:Nevron.UI.RenderMask.NonClient">
      <summary>
            The non-client area is rendered.
            </summary>
    </member>
    <member name="F:Nevron.UI.RenderMask.Background">
      <summary>
            The background is rendered.
            </summary>
    </member>
    <member name="F:Nevron.UI.RenderMask.Decoration">
      <summary>
            Additional decoration is applied.
            </summary>
    </member>
    <member name="F:Nevron.UI.RenderMask.Glyph">
      <summary>
            The glyph is rendered
            </summary>
    </member>
    <member name="F:Nevron.UI.RenderMask.Content">
      <summary>
            The content is rendered.
            </summary>
    </member>
    <member name="F:Nevron.UI.RenderMask.FocusCues">
      <summary>
            Focus cues are rendered.
            </summary>
    </member>
    <member name="F:Nevron.UI.RenderMask.All">
      <summary>
            All operations are available.
            </summary>
    </member>
    <member name="T:Nevron.UI.ShapeType">
      <summary>
            Enumerates the possible shape types.
            </summary>
    </member>
    <member name="F:Nevron.UI.ShapeType.None">
      <summary>
            No shape.
            </summary>
    </member>
    <member name="F:Nevron.UI.ShapeType.SmartShape">
      <summary>
            The shape is represented by a NSmartShape instance.
            </summary>
    </member>
    <member name="F:Nevron.UI.ShapeType.Image">
      <summary>
            The shape is represended by a NImageShape instance.
            </summary>
    </member>
    <member name="F:Nevron.UI.ShapeType.GraphicsPath">
      <summary>
            The shape is dynamically created using graphics path.
            </summary>
    </member>
    <member name="F:Nevron.UI.ShapeType.Direct">
      <summary>
            The the shape is rendered using direct calls to the device
            </summary>
    </member>
    <member name="T:Nevron.UI.ThemeConstantRelation">
      <summary>
            Specifies a class's constants relation with a theme.
            </summary>
    </member>
    <member name="F:Nevron.UI.ThemeConstantRelation.Class">
      <summary>
            Contains constants for a theme class
            </summary>
    </member>
    <member name="F:Nevron.UI.ThemeConstantRelation.Part">
      <summary>
            Contains constants for a theme class parts
            </summary>
    </member>
    <member name="F:Nevron.UI.ThemeConstantRelation.State">
      <summary>
            Contains constants for a certain part's states
            </summary>
    </member>
    <member name="T:Nevron.UI.ThemeChangeHint">
      <summary>
            Enumerates the possible hints during a NTheme change.
            </summary>
    </member>
    <member name="T:Nevron.UI.PredefinedFrameStyle">
      <summary>
            Enumerates the available frame styles
            </summary>
    </member>
    <member name="F:Nevron.UI.PredefinedFrameStyle.None">
      <summary>
            No frame style.
            </summary>
    </member>
    <member name="F:Nevron.UI.PredefinedFrameStyle.Standard">
      <summary>
            A standard 3-D border
            </summary>
    </member>
    <member name="F:Nevron.UI.PredefinedFrameStyle.SegmentedImage">
      <summary>
            Segmented image which inner part is not drawn
            </summary>
    </member>
    <member name="T:Nevron.UI.UIElementClasses">
      <summary>
            Summary description for UIElementClasses.
            </summary>
    </member>
    <member name="T:Nevron.UI.NDockStyleLayoutEngine">
      <summary>
            Summary description for NDockStyleLayoutEngine.
            </summary>
    </member>
    <member name="T:Nevron.UI.ToolStrips.NCommandRange">
      <summary>
            Summary description for NCommandRange.
            </summary>
    </member>
    <member name="T:Nevron.UI.NUIItemImageSet">
      <summary>
            Represents a set of images used by a NUIItem instance.
            </summary>
    </member>
    <member name="M:Nevron.UI.NUIItemImageSet.PerformDispose">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.NUIItemImageSet.NormalImage">
      <summary>
            Gets/sets the image to be displayed when the button is in Normal state.
            </summary>
    </member>
    <member name="P:Nevron.UI.NUIItemImageSet.InactiveImage">
      <summary>
            Gets/sets the image to be displayed when frame where the button resides is in Inactive state.
            </summary>
    </member>
    <member name="P:Nevron.UI.NUIItemImageSet.HotImage">
      <summary>
            Gets/sets the image to be displayed when the button is in Hot state.
            </summary>
    </member>
    <member name="P:Nevron.UI.NUIItemImageSet.PressedImage">
      <summary>
            Gets/sets the image to be displayed when the button is in Pressed state.
            </summary>
    </member>
    <member name="P:Nevron.UI.NUIItemImageSet.DisabledImage">
      <summary>
            Gets/sets the image to be displayed when the button is disabled state.
            </summary>
    </member>
    <member name="P:Nevron.UI.NUIItemImageSet.ImageStrip">
      <summary>
            Sets an image which contains all of the images. You should specify the ImageStripSize first.
            The order of images should be the following: Normal, Hot, Pressed, Inactive, Disabled
            </summary>
    </member>
    <member name="P:Nevron.UI.NUIItemImageSet.ImageStripSize">
      <summary>
            Gets/sets the size to be used when creating images from a strip.
            </summary>
    </member>
    <member name="T:Nevron.UI.NGlyphCheckElement">
      <summary>
            Represents a check element which CheckState is indicated by a glyph.
            </summary>
    </member>
    <member name="P:Nevron.UI.NGlyphCheckElement.GlyphAlign">
      <summary>
            Gets/sets the alignment of the glyph within the element's client rectangle.
            </summary>
    </member>
    <member name="P:Nevron.UI.NGlyphCheckElement.GlyphSize">
      <summary>
            Gets/sets the size of the glyph's bounding box.
            </summary>
    </member>
    <member name="P:Nevron.UI.NGlyphCheckElement.GlyphMargins">
      <summary>
            Gets/sets the spacing between the glyph's bounding box and other content.
            </summary>
    </member>
    <member name="T:Nevron.UI.NThreadTimerManager">
      <summary>
            Summary description for NThreadTimerManager.
            </summary>
    </member>
    <member name="T:Nevron.UI.NThreadTimer">
      <summary>
            Represents a standard System.Windows.Forms.Timer with two custom fields.
            </summary>
    </member>
    <member name="T:Nevron.UI.NEnvironment">
      <summary>
            Summary description for NEnvironment.
            </summary>
    </member>
    <member name="T:Nevron.UI.NUI">
      <summary>
            Summary description for Constants.
            </summary>
    </member>
    <member name="T:Nevron.UI.NImageAnimator">
      <summary>
            Summary description for NImageAnimator.
            </summary>
    </member>
    <member name="M:Nevron.UI.NImageAnimator.Animate(Nevron.UI.INImageAnimationSurface)">
      <summary>
            Animates the specified image using the information provided by the INImageAnimationSurface instance.
            </summary>
      <param name="surface">The instance that requested the animation.</param>
    </member>
    <member name="T:Nevron.UI.AnimationConstants">
      <summary>
            Summary description for Constants.
            </summary>
    </member>
    <member name="M:Nevron.NewGraphics.NLinearGradientBrush.InitFrom(Nevron.NewGraphics.NGraphicsObject)">
      <summary>
            Initializes a new graphics object from the given one.
            </summary>
      <param name="graphicsObject">
      </param>
    </member>
    <member name="T:Nevron.NewGraphics.NGradientStop">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.NewGraphics.NGradientStop.Equals(System.Object)">
      <summary>
      </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.NewGraphics.NGradientStop.GetHashCode">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.NewGraphics.NGradientStop.Offset">
      <summary>
            Gets or sets the stop offset
            </summary>
    </member>
    <member name="P:Nevron.NewGraphics.NGradientStop.Color">
      <summary>
            Gets or sets the stop color
            </summary>
    </member>
    <member name="T:Nevron.NewGraphics.Pdf.lI1lIl11.Keys">
      <summary>
            Common keys for all streams.
            </summary>
    </member>
    <member name="T:Nevron.Grid.NCellControl">
      <summary>
            Base cell control implementation
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NPostbackAttribute">
      <summary>
            When present in the attributes collection the control will generate postback..
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NPostbackAttribute.Equals(System.Object)">
      <summary>
            Determines whether instances of the same type are equivalent.
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NPostbackAttribute.GetHashCode">
      <summary>
            The hash code for the current object.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.GraphicsCore.NCustomMapAreaAttribute">
      <summary>
            Represents a custom map area attribute applied on the object.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NCustomMapAreaAttribute.VBScriptAttribute">
      <summary>
            A custom VBScript Html image map area attribute added to the each map area element.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NCustomMapAreaAttribute.JScriptAttribute">
      <summary>
            A custom JScript Html image map area attribute added to the each map area element.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NTextListStyle">
      <summary>
            Summary description for NTextListStyle.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NTextListStyle.GetTextFromNumber(System.Int32)">
      <summary>
            Returns the string representation of the number with this list style.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NTextListStyle.Type">
      <summary>
            The type of the text list items.
            </summary>
      <remarks>
            The type can be one of the values of the TextListStyleType enumeration.
            </remarks>
    </member>
    <member name="P:Nevron.GraphicsCore.NTextListStyle.StartNumber">
      <summary>
            Gets / set the starting number for numbered list items.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NShapeListStyle">
      <summary>
            Defines the appearance of shape list items when drawing formatted texts.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NShapeListStyle.Shape">
      <summary>
            Gets / sets the shape used to draw shape list items.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NColorFillStyle">
      <summary>
            Represents a solid color filling.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NColorFillStyle.Invert">
      <summary>
            Returns the inverted fill style
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NColorFillStyle.GetHashCode">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NColorFillStyle.Equals(System.Object)">
      <summary>
            Returns true if the objects are equal
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NColorFillStyle.IsTransparent">
      <summary>
            Returns true if the color represented by this fill style is transparent.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NColorFillStyle.IsTranslucent">
      <summary>
            Returns true if the color represented by this fill style is transparent.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NColorFillStyle.GetPrimaryColor">
      <summary>
            Returns the primary color of this fill style.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NColorFillStyle.IsNativeStretchedInSvg">
      <summary>
            Returns true if this style is natively streteched by SVG.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NColorFillStyle.SetTransparencyPercent(System.Single)">
      <summary>
            Sets the transparency percent of the diffuse and ambient material colors.
            </summary>
      <param name="percent">
      </param>
      <remarks>
            Transparency is discarded for the background object fill style. Note that transparent objects slow down the rendering.
            </remarks>
    </member>
    <member name="M:Nevron.GraphicsCore.NColorFillStyle.GetDescription">
      <summary>
            Returns a short description of this NColorFillStyle object.
            </summary>
      <remarks>
            The default implementation returns the color converted to string.
            </remarks>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NColorFillStyle.OnDrawPreview(Nevron.GraphicsCore.lIIIIllI,Nevron.GraphicsCore.NSizeF)">
      <summary>
            Draws a preview of the style on the specified device.
            </summary>
      <param name="device">
      </param>
      <param name="size">
      </param>
    </member>
    <member name="P:Nevron.GraphicsCore.NColorFillStyle.Color">
      <summary>
            The color of the filling.
            </summary>
      <remarks>
            This property also represents the Diffuse color of the material used to render 
            the fill style when lighting is turned on. This ensures that the color of the 
            fill style will appear the same. When you set the property you also modify the 
            Ambient color of the material. For more information see the topics under the Lighting 
            book in the Users Guide.
            </remarks>
      <example>
            The following example changes the color of the background.
            <code lang="VB">
            NChartControl.Background.FillEffect.Type = FillEffectType.Color
            NChartControl.Background.FillEffect.Color = Color.White
            </code><code>
            NChartControl.Background.FillEffect.Type = FillEffectType.Color;
            NChartControl.Background.FillEffect.Color = Color.White;
            </code></example>
    </member>
    <member name="P:Nevron.GraphicsCore.NColorFillStyle.FillStyleType">
      <summary>
            Gets the fill style type.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NColorFillStyle.Intensity">
      <summary>
            Returns the intensity of this fill style in the range [0, 255].
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NStringFormatKeyFactory">
      <summary>
            Summary description for NStringFormatKeyFactory.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NStringFormatKeyFactory.GetKey(Nevron.GraphicsCore.NStringFormatStyle)">
      <summary>
            Returns a key for a specified string format style
            </summary>
      <param name="stringFormat">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NStringFormatKeyFactory.ResetKey">
      <summary>
            Forces the factory to create a new key
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NDocumentGraphicsUnit">
      <summary>
            Represents the document graphics measurement unit
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NDocumentGraphicsUnit.ConvertXValueToPixels(Nevron.GraphicsCore.NMeasurementUnitConverter)">
      <summary>
            Converts this measurement unit to its equivalent in pixels along the X direction.
            </summary>
      <param name="converter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NDocumentGraphicsUnit.ConvertYValueToPixels(Nevron.GraphicsCore.NMeasurementUnitConverter)">
      <summary>
            Converts this measurement unit to its equivalent in pixels along the Y direction.
            </summary>
      <param name="converter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NDocumentGraphicsUnit.Abbreviation">
      <summary>
            The abbreviation of this measurement unit.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NDocumentGraphicsUnit.GraphicsUnit">
      <summary>
            Gets the english unit of the object.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NDocumentGraphicsUnit.UnitType">
      <summary>
            The measurement unit type.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NDocumentGraphicsUnit.ScaleToInch">
      <summary>
            The scale to inch of this measurement unit.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NFootEnglishUnit">
      <summary>
            Represents the english foot measurement unit.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NFootEnglishUnit.ConvertXValueToPixels(Nevron.GraphicsCore.NMeasurementUnitConverter)">
      <summary>
            Converts this measurement unit to its equivalent in pixels along the X direction.
            </summary>
      <param name="converter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NFootEnglishUnit.ConvertYValueToPixels(Nevron.GraphicsCore.NMeasurementUnitConverter)">
      <summary>
            Converts this measurement unit to its equivalent in pixels along the Y direction.
            </summary>
      <param name="converter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NFootEnglishUnit.Abbreviation">
      <summary>
            The abbreviation of this measurement unit.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NFootEnglishUnit.EnglishUnit">
      <summary>
            Gets the english unit of the object.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NFootEnglishUnit.ScaleToInch">
      <summary>
            The scale to inch of this measurement unit.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.INColorBufferCapableRenderSurface">
      <summary>
            Implemented by render surfaces that have a color buffer
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.INColorBufferCapableRenderSurface.ClearColorBuffer(Nevron.GraphicsCore.NArgbColorValueF)">
      <summary>
            Clears the color with the specified color
            </summary>
      <param name="color">
      </param>
    </member>
    <member name="T:Nevron.GraphicsCore.Text.NRangeAtomEnumerator">
      <summary>
            Enumerates the atom types in the specified document range.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NRangeAtomEnumerator.MoveNext">
      <summary>
            Advances the enumerator to the next atom in the document
            </summary>
      <returns>true if advance succeeded, false if the end of the range was reached</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NRangeAtomEnumerator.Reset">
      <summary>
            Resets the enumerator (positions it before the first node in the container)
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.Text.NRangeAtomEnumerator.Current">
      <summary>
            Obtains the current node in the container or throws an exception if the enumerator was not started or has ended
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Text.Builders.NStringTextDocumentBuilder">
      <summary>
            Builds a text document from a string.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Text.NParagraphEndAtom">
      <summary>
            Summary description for NParagraphEndAtom.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.TextObject.NSingleLineTextObject">
      <summary>
            Summary description for NSingleLineTextObject.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.TextObject.NSingleLineTextObject.Measure(Nevron.GraphicsCore.lIIIIllI)">
      <summary>
            Returns the size of the text object in device units
            </summary>
      <param name="device">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.TextObject.NSingleLineTextObject.Paint(Nevron.GraphicsCore.lIIll1l1,System.Drawing.PointF)">
      <summary>
            Paints the text at the specified position
            </summary>
      <param name="context">
      </param>
      <param name="point">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.TextObject.NSingleLineTextObject.Paint(Nevron.GraphicsCore.lIIll1l1,Nevron.GraphicsCore.NRectangleF)">
      <summary>
            Paints the text in the specified rectangle
            </summary>
      <param name="context">
      </param>
      <param name="bounds">
      </param>
    </member>
    <member name="T:Nevron.GraphicsCore.TextObject.NDOMTextObject">
      <summary>
            Summary description for NDOMTextObject.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Shapes.NCloseAllFiguresPathSegment">
      <summary>
            Summary description for NPathSegmentClosePath.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.IN2DShadowDevice">
      <summary>
            Summary description for IN2DShadowDevice.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NArgbColorValueF">
      <summary>
            Represents a color in ARGB color space as a 4 single (float) values
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NArgbColorValueF.ToColor">
      <summary>
            Converts this color value to a System.Drawing color
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NArgbColorValueF.ToGrayscale">
      <summary>
            Returns a grayscale ARGB color value
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NArgbColorValueF.CompareTo(System.Object)">
      <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NArgbColorValueF.Equals(System.Object)">
      <summary>
            Tests whether the specified object is a NArgbColorValueF structure and is equivalent to this NArgbColorValueF structure.
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.GraphicsCore.NRange1DF">
      <summary>
            The NRange1DF struct represents a 1D range with float values representing its begin and end
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NRange1DF.Combine(Nevron.GraphicsCore.NRange1DF)">
      <summary>
            Combines the the two ranges. 
            </summary>
      <remarks>
            Both ranges must be normalized.
            </remarks>
      <param name="range">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NRange1DF.Inflate(System.Single)">
      <summary>
            Inflates this range with the specified value
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NRange1DF.Translate(System.Single)">
      <summary>
            Translates the range
            </summary>
      <param name="delta">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NRange1DF.GetLength">
      <summary>
            Returns the absolute lenght of this range.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRange1DF.Contains(System.Single)">
      <summary>
            Returns true if the range contains the specified value.
            </summary>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRange1DF.Contains(System.Single,System.Single)">
      <summary>
            Returns true if the range contains the specified value.
            </summary>
      <param name="value">
      </param>
      <param name="epsilon">
      </param>
      <returns>
      </returns>
      <remarks>
            Value is checked agains the range [Begin - epsilon, End + epsilon]. Range must be normalized first.
            </remarks>
    </member>
    <member name="M:Nevron.GraphicsCore.NRange1DF.Normalize">
      <summary>
            Normalizes the range.
            </summary>
      <remarks>
            A normalized  range end value is bigger or equal to the begin value.
            </remarks>
    </member>
    <member name="M:Nevron.GraphicsCore.NRange1DF.Invert">
      <summary>
            Changes the begin and end values of this range.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NRange1DF.IsInverted">
      <summary>
            Returns true if the  range is inverted.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRange1DF.GetOffsetFromValue(System.Single)">
      <summary>
            Returns the distance between the begin or end values of the  range. 
            </summary>
      <param name="value">
      </param>
      <returns>
      </returns>
      <remarks>
            This function return 0 if the value is inside the  range.
            </remarks>
    </member>
    <member name="M:Nevron.GraphicsCore.NRange1DF.FitInRange(Nevron.GraphicsCore.NRange1DF)">
      <summary>
            Tries to fit the passed range into this range.
            </summary>
      <param name="range">
      </param>
      <returns>The amount range was moved in order to fit</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRange1DF.GetBeginValue">
      <summary>
            Gets the normalized begin value
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRange1DF.GetEndValue">
      <summary>
            Gets the normalized end value
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRange1DF.GetValueInRange(System.Single)">
      <summary>
            Returns the nearest value that lies in this range.
            </summary>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRange1DF.GetRangeDisposition(Nevron.GraphicsCore.NRange1DF)">
      <summary>
            Gets the range disposition of this range to another range
            </summary>
      <param name="range">
      </param>
      <returns>
      </returns>
      <remarks>
            Ranges must be normalized
            </remarks>
    </member>
    <member name="M:Nevron.GraphicsCore.NRange1DF.Intersect(Nevron.GraphicsCore.NRange1DF,Nevron.GraphicsCore.NRange1DF@)">
      <summary>
            Calculates the intersection between two ranges
            </summary>
      <param name="range">
      </param>
      <param name="intersection">
      </param>
      <returns>True if intersection exists, false otherwise</returns>
      <remarks>Ranges must be normalized</remarks>
    </member>
    <member name="M:Nevron.GraphicsCore.NRange1DF.IsIntersected(Nevron.GraphicsCore.NRange1DF@)">
      <summary>
            Returns true if the the ranges intersec. 
            </summary>
      <param name="range">
      </param>
      <returns>
      </returns>
      <remarks>Ranges must be normalized</remarks>
    </member>
    <member name="M:Nevron.GraphicsCore.NRange1DF.Equals(System.Object)">
      <summary>
            Returns true if the objects are equal.
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRange1DF.GetHashCode">
      <summary>
            Returns the hash code of this instance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NRange1DF.IsNormalized">
      <summary>
            Returns true if the range is normal.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NFillStyleConverter">
      <summary>
            The NFillStyleConverter class serves as base class for all converters, which can convert fill styles
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NFillStyleConverter.Convert(System.Object)">
      <summary>
            Must override to convert the object
            </summary>
      <param name="obj">object to convert</param>
      <returns>converted object</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NFillStyleConverter.CanConvert(System.Type)">
      <summary>
            Determines whether the converter can convert objects of the specified type 
            </summary>
      <param name="type">object type</param>
      <returns>true if objects of this type can be converted, otherwise false</returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NFillStyleConverter.Converts">
      <summary>
            Returns an array of types converted by this object.
            </summary>
      <remarks>
            This implementation will return all currently known types of fill styles
            </remarks>
    </member>
    <member name="T:Nevron.GraphicsCore.NAngleList">
      <summary>
            Represents a list of angle
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NAngleList.ToDoubleArray(Nevron.GraphicsCore.NAngleUnit)">
      <summary>
            Converts the angle list to a double array in the specified format 
            </summary>
      <param name="unit">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NAngleList.Pack(System.Char)">
      <summary>
            Packs the list to a string representation using the specified delimiter
            </summary>
      <param name="delimiter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NAngleList.Unpack(System.String,System.Char)">
      <summary>
            Unpacks the list from its string representation
            </summary>
      <param name="str">
      </param>
      <param name="delimiter">
      </param>
    </member>
    <member name="T:Nevron.FormulaSheet.NInsertRowVerb">
      <summary>
            The NInsertRowVerb verb is used for the insertion of a new formula section row, at the place of a specific row
            </summary>
    </member>
    <member name="M:Nevron.FormulaSheet.NInsertRowVerb.Execute">
      <summary>
            Overriden to insert a default row at the place of the row passed as argument
            </summary>
    </member>
    <member name="F:Nevron.FormulaSheet.NInsertRowVerb.Row">
      <summary>
            Reference to the row at the place of which the default section row will be inserted
            </summary>
    </member>
    <member name="T:Nevron.FormulaSheet.NFormulaSheetEvaluator">
      <summary>
            The NFormulaSheetEvaluator class is used for the evaluation of the formula cells inside a formula sheet.
            </summary>
      <remarks>
            An instance of this class can be obtained from the CreateEvaluator method of the NFormulaSheet class.
            </remarks>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaSheetEvaluator.EvaluateCellFormula(Nevron.FormulaSheet.NFormulaCell,System.String,Nevron.FormulaEngine.NVariant@,System.String@)">
      <summary>
            Evaluates the formula of the specified cell 
            </summary>
      <param name="cell">cell, which will host or already hosts the specified formula</param>
      <param name="formula">cell formula, which must be evaluated</param>
      <param name="result">cell evaluation result, or null if the evaluation failed</param>
      <param name="error">optional error string, which is only valid if the evaluation failed</param>
      <returns>true if the cell evaluation succeeded, otherwise false</returns>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaSheetEvaluator.IsReferenceName(System.String)">
      <summary>
            Called by the formula engine to determine whether the specified reference is valid
            </summary>
      <param name="refName">
      </param>
      <returns>true if the specified </returns>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaSheetEvaluator.GetReferenceValue(System.String)">
      <summary>
            Called by the formula engine to obtain the value of the specified reference 
            </summary>
      <param name="refName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.FormulaSheet.NFormulaSheetEvaluator.Engine">
      <summary>
            Gets a reference to the formula engine of the evaluator
            </summary>
    </member>
    <member name="T:Nevron.FormulaSheet.NSingleFormulaCell">
      <summary>
            The NSingleFormulaCell is a formula cell, which has a strong type of Single
            </summary>
    </member>
    <member name="M:Nevron.FormulaSheet.NSingleFormulaCell.Clone">
      <summary>
            Creates an identical copy of this object
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaSheet.NSingleFormulaCell.SetVariantValue(Nevron.FormulaEngine.NVariant)">
      <summary>
            Overriden to convert the variant to Single and store its value
            </summary>
      <param name="val">
      </param>
    </member>
    <member name="M:Nevron.FormulaSheet.NSingleFormulaCell.GetVariantValue">
      <summary>
            Overriden to get the value as a Single variant
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.FormulaSheet.NSingleFormulaCell.Value">
      <summary>
            Gets/sets the Single value of the cell
            </summary>
    </member>
    <member name="P:Nevron.FormulaSheet.NSingleFormulaCell.IsStronglyTyped">
      <summary>
            Overriden to return true
            </summary>
    </member>
    <member name="P:Nevron.FormulaSheet.NSingleFormulaCell.StrongType">
      <summary>
            Overriden to return VariantType.Single
            </summary>
    </member>
    <member name="T:Nevron.Editors.NPropertyGridEditorUC">
      <summary>
            Summary description for NPropertyGridEditorUC.
            </summary>
    </member>
    <member name="M:Nevron.Editors.NPropertyGridEditorUC.Dispose(System.Boolean)">
      <summary> 
            Clean up any resources being used.
            </summary>
    </member>
    <member name="P:Nevron.Editors.NPropertyGridEditorUC.Style">
      <summary>
            Get or sets the FillStyle displayed by this editor.
            </summary>
    </member>
    <member name="T:Nevron.Editors.NTextStyleButton">
      <summary>
            Represents a button, which is used for the editing of a text style. Displays a text style preview.
            </summary>
    </member>
    <member name="M:Nevron.Editors.NTextStyleButton.EditStyle(Nevron.GraphicsCore.NTextStyle,System.Boolean,Nevron.GraphicsCore.NTextStyle@)">
      <summary>
            Overriden to show the text style type editor
            </summary>
      <param name="inStyle">
      </param>
      <param name="automatic">
      </param>
      <param name="outStyle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Editors.NTextStyleButton.CreateDefaultStyle">
      <summary>
            Overriden to create a new text style
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Editors.NBorderStyleEditorUC.Dispose(System.Boolean)">
      <summary> 
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="T:Nevron.Editors.NDateTimeSpanEditor">
      <summary>
            Summary description for NDateTimeSpanEditor.
            </summary>
    </member>
    <member name="M:Nevron.Editors.NDateTimeSpanEditor.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
    </member>
    <member name="P:Nevron.Editors.NDateTimeSpanEditor.DateTimeSpan">
      <summary>
            Gets/sets the date time span to edit.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.CommonIndicator">
      <summary>
            Specifies the predefined common indicators.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.TreeViewIndicatorStyle">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NTextBox">
      <summary>
            Represents a custom drawn textbox
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTextBox.EnableSkinning">
      <summary>
            Gets/sets a value indicating whether the control will use skin logic.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTextBox.Skin">
      <summary>
            Gets/sets the local NSkin instance to be used when painting this control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTextBox.CurrentSkin">
      <summary>
            Gets the current skin to be used by this instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTextBox.Renderer">
      <summary>
            Gets/sets the renderer for the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTextBox.Palette">
      <summary>
            Gets/sets the NPalette used to render the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTextBox.PaletteInheritance">
      <summary>
            Gets/sets a value which Palette value will be applied on a higher level Palette change.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTextBox.Border">
      <summary>
            Gets the NControlBorder object that manages the border around the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTextBox.BorderWidth">
      <summary>
            Gets the preffered width of the border.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTextBox.IsBorderHot">
      <summary>
            Gets a value indicating whether the border should be drawn in its default state (works only if the border is interactive).
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTextBox.DefaultBorderStyle">
      <summary>
            Gets the default border style for the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTextBox.DefaultBaseBorderColor">
      <summary>
            Gets the default base color to use when drawing 3D borders.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTextBox.ScrollBarRenderer">
      <summary>
            Gets/sets the renderer which handles scrollbar painting.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTextBox.UseCustomScrollBars">
      <summary>
            Determines whether to use custom scrollbars or use the default windows ones (better performance).
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTextBox.ClientMouse">
      <summary>
            Gets the current mouse position in client coordinates.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTextBox.AutoSize">
      <summary>
            Gets/sets a value whether the TextBox will auto-size itself depending on the current fon height. Valid in single-line mode only.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTextBox.InputMode">
      <summary>
            Gets/sets the input mode for the NTextBox.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTextBox.CanPaste">
      <summary>
            Gets a value whether there is currently a text in the clipboard that might be pasted in the TextBox.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTextBox.DisplayErrorMessage">
      <summary>
            Gets a value whether there an error message will be displayed if invalid character is entered.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTextBox.ErrorMessage">
      <summary>
            Gets/sets the message to be displayed when an invalid character is entered. DisplayErrorMessage should be true in order message to appear.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NTabSeparator">
      <summary>
            Represents a NTab object that serves as separator.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NTab">
      <summary>
            Represents a tab in a NTabStrip control.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTab.Dispose">
      <summary>
            Disposes all the resources used by the NTab object.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTab.ImageList">
      <summary>
            Gets the ImageList provided by parent's strip.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTab.Text">
      <summary>
            Gets/sets the text to be displayed by the tab.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTab.TooltipText">
      <summary>
            Gets/sets the tooltip text to be displayed when the mouse hovers the tab.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTab.ImageIndex">
      <summary>
            Gets/sets the image index to be used from parent strip's ImageList.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NSkinResource">
      <summary>
            Represents an object which describes a skin resource.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NSkinResource.ShouldSerializeAssemblyName">
      <summary>
            Determines whether the AssemblyName should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NSkinResource.ShouldSerializeFilePath">
      <summary>
            Determines whether the FilePath should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NSkinResource.ShouldSerializeSkinName">
      <summary>
            Determines whether the SkinName should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NSkinResource.AssemblyName">
      <summary>
            Gets/sets the name of the assembly that contains the resource.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NSkinResource.FilePath">
      <summary>
            Gets/sets the path to the file to used - either an assembly or a skin file.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NSkinResource.SkinName">
      <summary>
            Gets/sets the name of the skin contained in a compiled assembly.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NSkinResource.ResourceType">
      <summary>
            Gets/sets the resource type.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.RotatorFrameAnimation">
      <summary>
            Specifies possible animation modes for a rotator frame.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.RotatorDirection">
      <summary>
            Specifies the possible directions of rotator transitions.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NWaitingBarProperties">
      <summary>
            Encapsulates the common NWaitingBar properties.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NWaitingBarProperties.Dispose">
      <summary>
            Disposes all the resources used by the NWaitingBarProperties object.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NWaitingBarProperties.PropertyChanged">
      <summary>
            Fired when a property has changed.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NWaitingBarProperties.PropertyChanging">
      <summary>
            Fired when a property is about to be changed.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NWaitingBarProperties.Orientation">
      <summary>
            Gets/sets the orientation of the NWaitingBar.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NWaitingBarProperties.Style">
      <summary>
            Gets/sets the style of the NWaitingBar.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NWaitingBarProperties.Interval">
      <summary>
            Gets/sets the timer interval used while the NWaitingBar is waiting.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NWaitingBarProperties.WaitSize">
      <summary>
            Gets/sets the width(height) of the waiting rect.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NWaitingBarProperties.Position">
      <summary>
            Gets/sets the position of the waiting rectangle.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NWaitingBarProperties.Step">
      <summary>
            Gets/sets the amount(in pixels) used to increment the position of the control when waiting.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NWaitingBarProperties.Text">
      <summary>
            Gets/sets the text to be displayed by the NWaitingBar.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NWaitingBarProperties.DisplayText">
      <summary>
            Gets/sets whether the text will be displayed by the NWaitingBar.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NPopupNotify">
      <summary>
            Represents a popup notify component similar to the one found in Microsoft Office.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NPopupNotify.Show">
      <summary>
            Displays the current popup window to the user.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NPopupNotify.Displayed">
      <summary>
            Fired when the popup is displayed to the user.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NPopupNotify.Closed">
      <summary>
            Fired when the popup is hidden from the user.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NPopupNotify.CaptionButtonClick">
      <summary>
            Fired when the user has clicked a button on the caption.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NPopupNotify.OptionsCommandClick">
      <summary>
            Fired when a command from the Options menu has been clicked.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPopupNotify.Opacity">
      <summary>
            Gets/sets the opacity of the popup. 0 is completely transparent and 255 is completely opaque.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPopupNotify.VisibleSpan">
      <summary>
            Gets/sets the time span (in milliseconds) during which the popup is visible.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPopupNotify.TopMost">
      <summary>
            Gets/sets a value whether the Popup will be above any other windows (TopMost)
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPopupNotify.AutoHide">
      <summary>
            Gets/sets a value whether the Popup will automatically be hidden after the visible span expires.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPopupNotify.Moveable">
      <summary>
            Gets/sets a value whether the Popup will be moveable (the user can drag it when click on the caption).
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPopupNotify.CloseButton">
      <summary>
            Gets/sets a value whether the Popup will display a "Close" button.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPopupNotify.OptionsButton">
      <summary>
            Gets/sets a value whether the Popup will display an "Options" button.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPopupNotify.PreserveLastBounds">
      <summary>
            Gets/sets a value whether the Popup will preserve the last applied bounds.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPopupNotify.FullOpacityOnMouseOver">
      <summary>
            Gets/sets a value whether the Popup will have a complete (255) opacity when the mouse hovers it.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPopupNotify.VisibleOnMouseOver">
      <summary>
            Gets/sets a value whether the Popup will remain visible while the mouse hovers it.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPopupNotify.Animation">
      <summary>
            Gets/sets the animation flags to be used when animating the popup.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPopupNotify.AnimationDirection">
      <summary>
            Gets/sets the animation flags to be used when animating the popup.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPopupNotify.FillInfo">
      <summary>
            Gets the NFillInfo object which controls the filling of the popup.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPopupNotify.CaptionFillInfo">
      <summary>
            Gets the NFillInfo object which controls the filling of the caption.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPopupNotify.StrokeInfo">
      <summary>
            Gets the NStrokeInfo object which controls the border of the popup.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPopupNotify.Palette">
      <summary>
            Gets the NPalette object used to render the popup.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPopupNotify.OptionsCommands">
      <summary>
            Gets the collection of options commands.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPopupNotify.AnimationInterval">
      <summary>
            Gets/sets the interval for the animation process.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPopupNotify.AnimationSteps">
      <summary>
            Gets/sets the steps for the animation process.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPopupNotify.PredefinedStyle">
      <summary>
            Gets/sets the predefined popup style. Note that changing this will substitute the current window instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPopupNotify.Shape">
      <summary>
            Gets/sets the image which determines the shape of the popup. Valid when the predefined popup style is PredefinedPopupStyle.Shaped.
            You must also specify the color which should be treated as transparent.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPopupNotify.ShapeTransparentColor">
      <summary>
            Gets/sets the color from the Shape image that should be treated as transparent.
            Valid when the predefined popup style is PredefinedPopupStyle.Shaped.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPopupNotify.ContentBounds">
      <summary>
            Gets/sets the bounds of the component's Content item. Valid when the predefined popup style is PredefinedPopupStyle.Shaped
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPopupNotify.CaptionBounds">
      <summary>
            Gets/sets the bounds of the component's Caption element.
            Valid when the predefined popup style is PredefinedPopupStyle.Shaped.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPopupNotify.MoveableBounds">
      <summary>
            Gets/sets the bounds which are treated as Moveable - the user may drag the window if click within them.
            Valid when the predefined popup style is PredefinedPopupStyle.Shaped.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPopupNotify.CloseButtonImageSet">
      <summary>
            Gets the image set to be used by the Close button.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPopupNotify.OptionsButtonImageSet">
      <summary>
            Gets the image set to be used by the Options button.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPopupNotify.PreferredBounds">
      <summary>
            Gets/sets the preferred bounds where the popup should appear.
            Leave the Location empty to calculate the default location depending on the Windows taskbar.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPopupNotify.Content">
      <summary>
            Gets the NImageAndTextItem instance which represents the content of the popup.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPopupNotify.Caption">
      <summary>
            Gets the NCaptionElement which represents the caption part of the popup.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPopupNotify.Font">
      <summary>
            Gets/sets the Font for the popup window.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPopupNotify.IsDisplayed">
      <summary>
            Gets a value whether the current popup is displayed.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.ColorPaneType">
      <summary>
            Specifies the possible color pane types
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.SeparatorStyle">
      <summary>
            Specifies the available styles for a separator.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.TabTextVisibility">
      <summary>
            Specifies the available modes for displaying tabs text.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.TabTextVisibility.All">
      <summary>
            Each tab will display text.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.TabTextVisibility.SelectedOnly">
      <summary>
            Only the selected tab will display text.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.BackgroundType">
      <summary>
            Specifies the available background types
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.SizeHint">
      <summary>
            Specifies the possible flags when resizing
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.CheckStyle">
      <summary>
            Specifies the possible check style.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.TabFitMode">
      <summary>
            Specifies the way tabs are arranged within a tabstrip.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.TabFitMode.None">
      <summary>
            No fitting is applied - the best tab size is used.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.TabFitMode.Shrink">
      <summary>
            Tabs are resized to fit the strip bounds(if they are smaller that total tab size).
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.TabFitMode.Multiline">
      <summary>
            If total tab size exceeds the bounds of the strip a new tab row is created.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.ProgressBarStyle">
      <summary>
            Specifies the possible NProgressBar styles.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.ProgressBarStyle.Solid">
      <summary>
            Solid fill
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.ProgressBarStyle.Gradient">
      <summary>
            Gradient fill
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.GripperVisibility">
      <summary>
            Specifies gripper visibility.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.BandState">
      <summary>
            Enumerates the possible states of a NBand object.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.BandState.Collapsed">
      <summary>
            The band is in collapsed mode. This means that only its caption is visible.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.BandState.Expanded">
      <summary>
            The band is in expanded mode.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.BorderPart">
      <summary>
            Specifies how a border will be drawn.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.BorderPart.None">
      <summary>
            No border
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.BorderPart.Left">
      <summary>
            The left part of the border will be drawn
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.BorderPart.Right">
      <summary>
            The right part of the border will be drawn
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.BorderPart.Top">
      <summary>
            The top part of the border will be drawn
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.BorderPart.Bottom">
      <summary>
            The bottom part of the border will be drawn
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.BorderPart.All">
      <summary>
            The entire border is drawn
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.GroupBoxStyle">
      <summary>
            Determines the style of a NGroupBox object.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.GroupBoxStyle.Default">
      <summary>
            The border is default,
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.GroupBoxStyle.LineAtTop">
      <summary>
            Only a line at top is drawn.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.TabAlign">
      <summary>
            Specifies the layout strategy of a NTabControl object.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.TabAlign.Top">
      <summary>
            The tabstrip is top aligned.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.TabAlign.Bottom">
      <summary>
            The tabstrip is bottom aligned.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.TabAlign.Left">
      <summary>
            The tabstrip is left aligned.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.TabAlign.Right">
      <summary>
            The tabstrip is right aligned.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.ColorBarMode">
      <summary>
            Specifies which color value a color bar will display.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.ColorBarMode.Red">
      <summary>
            The color bar will select red value.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.ColorBarMode.Green">
      <summary>
            The color bar will select green value.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.ColorBarMode.Blue">
      <summary>
            The color bar will select blue value.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.ColorBarMode.Custom">
      <summary>
            The color bar will select custom color.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.TextBoxInputMode">
      <summary>
            Specifies the input mode for a NextBox control.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.TextBoxInputMode.Default">
      <summary>
            No character filtering is performed.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.TextBoxInputMode.NumericInteger">
      <summary>
            The textbox will accept only numbers
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.ColorScheme">
      <summary>
            Specifies the available color schemes.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.ShowArrowStyle">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.ShowArrowStyle.Default">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.ShowArrowStyle.Never">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.ShowArrowStyle.Always">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.DropDownBehavior">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.DropDownBehavior.Default">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.DropDownBehavior.AlwaysDropDown">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.DropDownBehavior.NeverDropDown">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.PaletteInheritance">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.PaletteInheritance.None">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.PaletteInheritance.BlendStyle">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.PaletteInheritance.UseThemes">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.PaletteInheritance.ColorTable">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.PaletteInheritance.All">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.ExceedBoundsLogic.None">
      <summary>
            No logic will be applied on the command. Be careful when using this logic - a toolbar may become very large in width when docked vertically.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.ExceedBoundsLogic.Hide">
      <summary>
            Default logic - the command is concealed from the user.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.ExceedBoundsLogic.Resize">
      <summary>
            The command is resized to fit the allowed size.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NGalleryItem">
      <summary>
            Summary description for NPanelItem.
            </summary>
    </member>
    <member name="M:Nevron.UI.INChildElementPropertyObserver.OnChildPropertyChanged">
      <summary>
            Returns true if the notification should be propaged
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NGalleryItem.ShouldSerializeLabel">
      <summary>
            Determines whether the Label member should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NGalleryItem.Selected">
      <summary>
            Gets/sets a value indicating whether this item is selected.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NGalleryItem.Label">
      <summary>
            Gets the NLabelElement which represents the content of this item.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NGalleryItem.Index">
      <summary>
            Gets the zero-based index of this item in its owner panel items collection.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NGalleryItem.State">
      <summary>
            Gets the current item state.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NTreeListSortData">
      <summary>
            An object which stores information about a sorting process in a NTreeList control.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeListNode.ShouldSerializeText">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListNode.RowHeader">
      <summary>
            Gets the NLightUIItem instance which represents the row header of the node.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListNode.SubItems">
      <summary>
            Gets the collection of sub-items.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListNode.NotesStyle">
      <summary>
            Gets/sets the notes style for this node.
            Specify TreeListNodeNotesStyle.Inherit to obtain the value from the current tree-list host.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListNode.Notes">
      <summary>
            Gets/sets the notes for this node.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListNode.NotesFont">
      <summary>
            Gets/sets the font used to render notes (if any).
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListNode.NotesFormat">
      <summary>
            Gets/sets the structure which holds formatting information about the node's notes.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListNode.NotesFillInfo">
      <summary>
            Gets/sets the NFillInfo object which control the filling of the "Notes" area of the node.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListNode.NotesTextFillInfo">
      <summary>
            Gets/sets the NFillInfo object which control the text filling of the "Notes" area of the node.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListNode.DefaultNotesFormat">
      <summary>
            Gets the default value of the NotesFormat member.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NTreeListColumnHeader">
      <summary>
            Represents a NLightUIItem which visualizes a header of a NTreeListColumn instance.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NTreeListHeaderItem">
      <summary>
            Represents a header of either a column or a row in a NTreeList control.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeListHeaderItem.GetHitCode">
      <summary>
            Gets the header-specific hit code of the item.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListHeaderItem.ItemType">
      <summary>
            Gets the type of the item.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListHeaderItem.CheckStyle">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListHeaderItem.Cursor">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListHeaderItem.SizeMode">
      <summary>
            Gets/sets the sizing modes allowed for this header item.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListColumnHeader.SortedGlyphRect">
      <summary>
            Gets the smallest rectange which encloses the sort glyph (if any).
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListColumnHeader.ItemType">
      <summary>
            Gets the item type of the header.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListColumnHeader.IsVisible">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListColumnHeader.DefaultPadding">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListColumnHeader.DisplaySortGlyph">
      <summary>
            Determines whether the header will display sort glyph depending on its owner column SortMode.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListColumnHeader.Owner">
      <summary>
            Gets the NTreeListColumn instance which owns this header.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NMenuOptions">
      <summary>
            Encapsulates the common options for NMenuWindow objects.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NMenuOptions.ShowEditor">
      <summary>
            Shows a modal dialog to edit this NMenuOptions object visually.
            </summary>
      <returns>The dialog result of the modal window.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NMenuOptions.ShowEditor(Nevron.UI.WinForm.Controls.NPalette)">
      <summary>
            Shows a modal dialog to edit this NMenuOptions object visually.
            </summary>
      <returns>The dialog result of the modal window.</returns>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NMenuOptions.Font">
      <summary>
            Gets/sets the Font to be used for the child menu.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NMenuOptions.ImageAndCheck">
      <summary>
            Gets/sets a value indicating whether the menu window will display both image and checkmark.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NMenuOptions.ColumnOnLeft">
      <summary>
            Gets/sets a value indicating whether the menu window will have a column on its left side.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NMenuOptions.ImageSpace">
      <summary>
            Gets/sets a value indicating whether the menu window will preserve space for displaying images/checkmarks.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NMenuOptions.Shadow">
      <summary>
            Gets/sets a value whether the menu will display shadow.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NMenuOptions.Palette">
      <summary>
            Gets/sets the NPalette object to be applied on the menu.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NMenuOptions.BackgroundImageInfo">
      <summary>
            Gets/sets the image info used to draw background.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NMenuOptions.ImageSize">
      <summary>
            Gets/sets the image size for the the menu window.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NMenuOptions.CommandSize">
      <summary>
            Gets/sets the command size for the the menu window.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NMenuOptions.Alignment">
      <summary>
            Gets/sets the alignment of the menu.
            The menu uses this value to determine its position depending on the display location.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NMenuOptions.FitInWorkingArea">
      <summary>
            Gets/sets a value indicating whether the menu screen bounds will fit the current working area.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NMenuOptions.DisplayTooltips">
      <summary>
            Gets/sets a value indicating whether tooltips will be displayed on the menu.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NCommandUIState">
      <summary>
            Summary description for NCommandUIState.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NCommandBarsManager">
      <summary>
            Will serve as a top level manager for the toolbar docking framework.
            The object will be responsible for creating and manipulating the NToolbarDock objects
            and their children toolbars.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NCommandBarsManager.ShowEditor">
      <summary>
            Provides methos for showing the advanced visual editor of the framework.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NCommandBarsManager.NotifySkinChange">
      <summary>
            Notifies all child and dependent GUI objects for a skin change.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NCommandBarsManager.GetDock(System.Windows.Forms.DockStyle)">
      <summary>
            Gets the toolbar dock with the specified DockStyle.
            </summary>
      <param name="style">The dockstyle to search for</param>
      <returns>The matched dock. Will be null for DockStyle.None and DockStyle.Fill</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NCommandBarsManager.GetShortcutProviders">
      <summary>
            Gets all the objects that provide a NShortcut.
            </summary>
      <returns>An arraylist filled with INShortcutProvider objects.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NCommandBarsManager.Refresh">
      <summary>
            Invalidates and updates the entire framework.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NCommandBarsManager.SmartRefresh">
      <summary>
            Queries all visible commands' uistate and invalidates only those which state has changed.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NCommandBarsManager.Reset">
      <summary>
            Resets the entire state of the manager including imagelists, ranges, contexts and toolbars.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NCommandBarsManager.Clear">
      <summary>
            Clears the state of the entire framework.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NCommandBarsManager.LayoutDocks">
      <summary>
            Performs layout of all the four docks and chidlren toolbars.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NCommandBarsManager.SuspendDocksLayout">
      <summary>
            Suspends resize and layout operations of all the four docks.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NCommandBarsManager.ResumeDocksLayout(System.Boolean)">
      <summary>
            Resumes resize and layout operations of all the four docks and additionally performs layout.
            </summary>
      <param name="performLayout">True to perform layout, false otherwise.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NCommandBarsManager.BeginUpdate">
      <summary>
            Suspend any drawing operation on docks and toolbars.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NCommandBarsManager.EndUpdate(System.Boolean)">
      <summary>
            Resumes drawing from any previous suspend and optionally refreshes the framework.
            </summary>
      <param name="refresh">True to perform refresh, false otherwise.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NCommandBarsManager.Show">
      <summary>
            Shows all the docks and floating toolbars.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NCommandBarsManager.Hide">
      <summary>
            Hides all the docks and floating toolbars.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandBarsManager.EnableSkinning">
      <summary>
            Gets/sets a value indicating whether the control will use skin logic.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandBarsManager.Skin">
      <summary>
            Gets/sets the local NSkin instance to be used when painting this control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandBarsManager.CurrentSkin">
      <summary>
            Gets the current skin to be used by this instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandBarsManager.ImageList">
      <summary>
            Gets/sets the ImageList to apply to contexts.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandBarsManager.PaletteInheritance">
      <summary>
            Gets/sets a value which Palette value will be applied on a higher level Palette change.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandBarsManager.Palette">
      <summary>
            Gets/sets the NPalette to be used for the entire framework.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandBarsManager.Shortcut">
      <summary>
            Gets/sets the keyboard shortcut combination used to trigger the "Customize" editor.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandBarsManager.Description">
      <summary>
            Gets the human readable description of the INShortcutProvider object.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NCommandBarsManager.PreviewKeyDown">
      <summary>
            Fired before the default processing of keyboard events occurs.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NCommandBarsManager.PreviewKeyUp">
      <summary>
            Fired before the default processing of keyboard events occurs.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NCommandBarsManager.CommandContextExecuting">
      <summary>
            Notifies that a command, sharing the specified context is abound to be executed.
            This event is useful if you want to prevent a command from being executed under certain conditions.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NCommandBarsManager.CommandContextExecuted">
      <summary>
            Notifies that a command, sharing the specified context has been executed.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NCommandBarsManager.CommandClicked">
      <summary>
            Notifies that a command has been clicked.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NCommandBarsManager.CommandPopup">
      <summary>
            Notifies that a command is about to show its context menu.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NCommandBarsManager.QueryCommandUIState">
      <summary>
            Fired just before the command is painted. Use this event if you want to dynamically update the command's state.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandBarsManager.CommandManager">
      <summary>
            Gets the NCommandManager for the framework.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandBarsManager.EditorConfig">
      <summary>
            Gets the config object for the visual editor.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandBarsManager.Toolbars">
      <summary>
            Gets the toolbar collection for the framework.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandBarsManager.ParentControl">
      <summary>
            Gets/sets the control the docking framework will be on.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandBarsManager.Contexts">
      <summary>
            Gets the collection of command contexts for the framework.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandBarsManager.Ranges">
      <summary>
            Gets the collection of command context ranges for the framework.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandBarsManager.AllowCustomize">
      <summary>
            Gets/sets a value whether the Manager can enter "Customizing" mode.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandBarsManager.Customizing">
      <summary>
            Gets a value indicating whether the NCommandBarsManager is currently in "Customize" mode.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandBarsManager.ImageLists">
      <summary>
            Gets the collection imagelists used on the entire framework.
            You should register an ImageList here for providing persistency support.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandBarsManager.MenuBarMnemonicsVisibility">
      <summary>
            Gets/sets the mnemonics visibility of the menu bar.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NPaletteColorPane">
      <summary>
            Summary description for NPaletteColorPane.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPaletteColorPane.ColorPalette">
      <summary>
            Gets/sets the current palette for the color pane.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPaletteColorPane.PredefinedPalette">
      <summary>
            Gets/sets the predefined palette to be displayed.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NPaletteColorPane.MinimumColumns">
      <summary>
            Gets/sets the minimum colums in the color picker.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NCalculator">
      <summary>
            The NCalculator is a NShadowDecorator derivative which visualizes a NCalculatorElement instance.
            It may perform simple arithmetical operations like Add, Subtract, Multiply and Divide.
            It may also store an additional value, the so called "Memory".
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NCalculator.SetDisplayValue(System.Decimal)">
      <summary>
            Sets the specified value as current.
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NCalculator.DisplayValueChanged">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCalculator.DisplayValue">
      <summary>
            Gets the current value displayed by the calculator.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCalculator.ShowDisplay">
      <summary>
            Determines whether the calculator will show a display.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCalculator.DigitGroupSeparator">
      <summary>
            Determines whether the display value will be formatted using separator for groups of digits.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCalculator.ButtonFont">
      <summary>
            Gets/sets the Font to be used when rendering buttons' texts.
            </summary>
    </member>
    <member name="T:Nevron.UI.ToolStripParts">
      <summary>
            Summary description for ToolStripParts.
            </summary>
    </member>
    <member name="T:Nevron.UI.ToolStrips.NButtonCommand">
      <summary>
            Summary description for NButtonCommand.
            </summary>
    </member>
    <member name="T:Nevron.UI.CustomProperties">
      <summary>
            Summary description for CustomProperties.
            </summary>
    </member>
    <member name="F:Nevron.UI.CustomProperties.DockStyle">
      <summary>
            Entry key for a DockStyle property. Used by a NDockStyleLayoutEngine.
            </summary>
    </member>
    <member name="F:Nevron.UI.CustomProperties.TooltipInfo">
      <summary>
            Entry key for a TooltipInfo property. Used by a Tootip Service.
            </summary>
    </member>
    <member name="F:Nevron.UI.CustomProperties.User">
      <summary>
            Start for user-defined constants.
            </summary>
    </member>
    <member name="T:Nevron.UI.NImageRenderer">
      <summary>
            Summary description for NImageRenderer.
            </summary>
    </member>
    <member name="T:Nevron.UI.NGlyphRenderer">
      <summary>
            Summary description for NGlyphRenderer.
            </summary>
    </member>
    <member name="T:Nevron.UI.NTextRenderOptions">
      <summary>
            Summary description for NTextRenderOptions.
            </summary>
    </member>
    <member name="P:Nevron.UI.NTextRenderOptions.GdiDrawTextFlags">
      <summary>
            Gets/sets the flags used to draw text when native Gdi is used.
            By default this value equals NGdi32.DT_SINGLELINE | NGdi32.DT_VCENTER
            </summary>
    </member>
    <member name="P:Nevron.UI.NTextRenderOptions.RenderMode">
      <summary>
            Gets/sets the mode used to render text.
            By default set to TextRenderMode.NevronDevice.
            </summary>
    </member>
    <member name="P:Nevron.UI.NTextRenderOptions.StringFormat">
      <summary>
            Gets/sets the StringFormat object to be used when drawing text with GDI+
            </summary>
    </member>
    <member name="P:Nevron.UI.NTextRenderOptions.Font">
      <summary>
            Gets/sets the local Font object to be used when drawing text.
            </summary>
    </member>
    <member name="P:Nevron.UI.NTextRenderOptions.Color">
      <summary>
            Gets/sets the color value used to render text.
            </summary>
    </member>
    <member name="P:Nevron.UI.NTextRenderOptions.TextOrientation">
      <summary>
            Gets/sets the orientation of the text.
            </summary>
    </member>
    <member name="T:Nevron.UI.NImageTextRelationInfo">
      <summary>
            Summary description for NTextImageRelationInfo.
            </summary>
    </member>
    <member name="T:Nevron.SmartShapes.NControlsRow">
      <summary>
            The NControlsRow class represents a formula row, 
            which is used for the formula definition of a control inside a controls sections
            </summary>
    </member>
    <member name="M:Nevron.SmartShapes.NControlsRow.Clone">
      <summary>
            Creates an identical copy of this object
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.SmartShapes.NControlsRow.UpdateControlPoint(Nevron.GraphicsCore.NPointF)">
      <summary>
            Updates the X and Y coordinates of the control point with the specified point
            </summary>
      <param name="point">
      </param>
    </member>
    <member name="M:Nevron.SmartShapes.NControlsRow.GetVerbs">
      <summary>
            Overriden to add remove row, insert row and insert row after verbs
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.SmartShapes.NControlsRow.CellsSealed">
      <summary>
            Overriden to return true
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.SmartShapes.NControlsRow.X">
      <summary>
            Gets a reference to the X formula cell
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NControlsRow.Y">
      <summary>
            Gets a reference to the Y formula cell
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NControlsRow.Visible">
      <summary>
            Gets a reference to the Visible formula cell
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NControlsRow.XBehavior">
      <summary>
            Gets a reference to the X behavior formula cell
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NControlsRow.YBehavior">
      <summary>
            Gets a reference to the Y behavior formula cell
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NControlsRow.Tooltip">
      <summary>
            Gets a reference to the tooltip formula cell
            </summary>
    </member>
    <member name="T:Nevron.NewGraphics.Pdf.lI11lI1I.Keys">
      <summary>
            Predefined keys of this dictionary.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NParentPercentageRelativeUnit">
      <summary>
            Represents the parent percentage relative measurement unit
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NParentPercentageRelativeUnit.ConvertXValueToPixels(Nevron.GraphicsCore.NMeasurementUnitConverter)">
      <summary>
            Converts this measurement unit to its equivalent in pixels along the X direction.
            </summary>
      <param name="converter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NParentPercentageRelativeUnit.ConvertYValueToPixels(Nevron.GraphicsCore.NMeasurementUnitConverter)">
      <summary>
            Converts this measurement unit to its equivalent in pixels along the Y direction.
            </summary>
      <param name="converter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NParentPercentageRelativeUnit.Abbreviation">
      <summary>
            The abbreviation of this measurement unit.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NParentPercentageRelativeUnit.RelativeUnit">
      <summary>
            Gets the relative unit type the object.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NMillimeterGraphicsUnit">
      <summary>
            Represents the Millimeter graphics measurement unit.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NMillimeterGraphicsUnit.ConvertXValueToPixels(Nevron.GraphicsCore.NMeasurementUnitConverter)">
      <summary>
            Converts this measurement unit to its equivalent in pixels along the X direction.
            </summary>
      <param name="converter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NMillimeterGraphicsUnit.ConvertYValueToPixels(Nevron.GraphicsCore.NMeasurementUnitConverter)">
      <summary>
            Converts this measurement unit to its equivalent in pixels along the Y direction.
            </summary>
      <param name="converter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NMillimeterGraphicsUnit.Abbreviation">
      <summary>
            The abbreviation of this measurement unit.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NMillimeterGraphicsUnit.GraphicsUnit">
      <summary>
            Gets the english unit of the object.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NMillimeterGraphicsUnit.UnitType">
      <summary>
            The measurement unit type.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NMillimeterGraphicsUnit.ScaleToInch">
      <summary>
            The scale to inch of this measurement unit.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NRodEnglishUnit">
      <summary>
            Represents the english rod measurement unit.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NRodEnglishUnit.ConvertXValueToPixels(Nevron.GraphicsCore.NMeasurementUnitConverter)">
      <summary>
            Converts this measurement unit to its equivalent in pixels along the X direction.
            </summary>
      <param name="converter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRodEnglishUnit.ConvertYValueToPixels(Nevron.GraphicsCore.NMeasurementUnitConverter)">
      <summary>
            Converts this measurement unit to its equivalent in pixels along the Y direction.
            </summary>
      <param name="converter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NRodEnglishUnit.Abbreviation">
      <summary>
            The abbreviation of this measurement unit.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NRodEnglishUnit.EnglishUnit">
      <summary>
            Gets the english unit of the object.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NRodEnglishUnit.ScaleToInch">
      <summary>
            The scale to inch of this measurement unit.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Text.INStyleable">
      <summary>
            Summary description for INStyleable.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NTiffImageFormat">
      <summary>
            Describes a TIFF image response returned to the client browser.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NTiffImageFormat.MimeType">
      <summary>
            Mime type constant for tiff images
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NTiffImageFormat.GetMimeType">
      <summary>
            Returns the mime type - "image/tiff".
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NTiffImageFormat.GetExtension">
      <summary>
            Returns the file extension - ".tif".
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NTiffImageFormat.GetName">
      <summary>
            Obtains the name of this image format
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NTiffImageFormat.ToString">
      <summary>
            Obtains the String representation of this instance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NTiffImageFormat.GetImageFormat">
      <summary>
            Obtains a Gif ImageFormat.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.GraphicsCore.NGifImageFormat">
      <summary>
            Describes a GIF image response returned to the client browser
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NGifImageFormat.MimeType">
      <summary>
            Mime type constant for gif images
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NGifImageFormat.GetMimeType">
      <summary>
            Returns the mime type - "image/gif".
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NGifImageFormat.GetExtension">
      <summary>
            Returns the file extension - ".gif".
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NGifImageFormat.GetName">
      <summary>
            Obtains the name of this image format
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NGifImageFormat.GetImageFormat">
      <summary>
            Obtains a Gif ImageFormat.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.GraphicsCore.Text.View.INTextView">
      <summary>
            Summary description for INTextView.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Text.NTextDocumentComponent">
      <summary>
            Represents a text document component.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.Text.NTextDocumentComponent.Document">
      <summary>
            Gets/sets the contained text document
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.Text.NTextDocumentComponent.Serializer">
      <summary>
            Constrols the text document serialization
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Text.NNewLineFragment">
      <summary>
            Represents a line break.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Text.NImageFragment">
      <summary>
            Represents an image fragment.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.Text.NImageFragment.Alias">
      <summary>
            The alias of the image to use when showing this text fragement
            </summary>
      <remarks>
            You create an image alias by registering it with the NImageRepository.
            </remarks>
    </member>
    <member name="T:Nevron.GraphicsCore.Text.NImageAtom">
      <summary>
            Summary description for NImageAtom.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Shapes.NHLineShape">
      <summary>
            Summary description for NHLineShape.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Shapes.NDiamondShape">
      <summary>
            Summary description for NDiamondShape.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Shapes.NPathGraphicsNode">
      <summary>
            Summary description for NPathGraphicsNode.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.Shapes.NPathGraphicsNode.Paint(Nevron.GraphicsCore.Shapes.NGraphicsPaintContext)">
      <summary>
            Paints this node.
            </summary>
      <param name="context">
      </param>
    </member>
    <member name="T:Nevron.GraphicsCore.NPolylineF">
      <summary>
            The NPolygonF class represents a polyline in 2D space defined by it's vertices
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NPolylineF.Translate(System.Single,System.Single)">
      <summary>
            Translates the primitive with the specified amounts
            </summary>
      <param name="dx">
      </param>
      <param name="dy">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NPolylineF.Translate(Nevron.GraphicsCore.NPointF)">
      <summary>
            Translates the primitive with the specified offset
            </summary>
      <param name="offset">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NPolylineF.AddToGraphicsPath(System.Drawing.Drawing2D.GraphicsPath)">
      <summary>
            Adds the primitive to the specified graphics path
            </summary>
      <param name="path">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NPolylineF.ContainsOnOutline(Nevron.GraphicsCore.NPointF,System.Single)">
      <summary>
            Determines whether the outline of the polyline contains the specified point
            </summary>
      <param name="point">
      </param>
      <param name="weight">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NPolylineF.OutlineIntersectsWith(Nevron.GraphicsCore.NRectangleF)">
      <summary>
            Determines whether the passed rectange intersects the outline of this polyline
            </summary>
      <param name="rect">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NPolylineF.ContainsOnOutline(Nevron.GraphicsCore.NPointF,System.Drawing.Pen)">
      <summary>
            Determines whether the outline of the polyline contains the specified point
            </summary>
      <param name="point">
      </param>
      <param name="pen">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NPolylineF.InvalidateCache">
      <summary>
            Invalidates any cached information about the polyline.
            </summary>
      <remarks>
            The user is responsible for calling this method, if the polyline vertices have been manually changed.
            </remarks>
    </member>
    <member name="M:Nevron.GraphicsCore.NPolylineF.Simplify(System.Single)">
      <summary>
            Returns a simplified version of this polyline using an improved version
            Douglas and Peucker algorithm (uses path hulls) which improves the worst case running
            time from O(n^2) to O(n * log2(n)). Topology is preserved.
            </summary>
      <param name="tolerance">The tolerance (if all points from i to j are within tolerance
            with the line segment i-j then the chain i, i+1, ..., j is simplified to i, j).</param>
      <returns>Returns a simplified version of this polyline.</returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NPolylineF.Bounds">
      <summary>
            Gets the minimal enclosing rectangle
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NPolylineF.BoundsRange">
      <summary>
            Gets the minimal enclosing 2D range
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NPolylineF.IsFlat">
      <summary>
            Determines whether this is a flat primitive
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NPolylineF.StartPoint">
      <summary>
            Gets/sets the start point of the open figure
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NPolylineF.EndPoint">
      <summary>
            Gets/sets the end point of the open figure
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NPolylineF.Vertices">
      <summary>
            Gets/sets the polyline vertices
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NPolylineF.Length">
      <summary>
            Gets the polyline length
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NFillStyleToGrayScaleConverter">
      <summary>
            The NFillStyleToGrayScaleConverter class represents a converter, which converts all colors of a fill style to grayscale
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NFillStyleToGrayScaleConverter.Convert(System.Object)">
      <summary>
            Overriden to convert a fill style to its gray scale equivalent
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.GraphicsCore.NAngle">
      <summary>
            Represents an angle, defined as a value and angle unit pair
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NAngle.Clone">
      <summary>
            Creates an exact replica of this NAngle object
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NAngle.CompareTo(System.Object)">
      <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NAngle.ConvertTo(Nevron.GraphicsCore.NAngleUnit)">
      <summary>
            Converts the angle to an angle in the specified target unit
            </summary>
      <param name="unit">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NAngle.ToDegrees">
      <summary>
            Returns the angle measured in degrees
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NAngle.ToRadians">
      <summary>
            Returns the angle measured in radians
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NAngle.ToGrads">
      <summary>
            Returns the angle measured in grads
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NAngle.Normalize">
      <summary>
            Normalizes the angle
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NAngle.Equals(System.Object)">
      <summary>
            Determines whether the angles are equal.
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NAngle.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NAngle.ToString">
      <summary>
            Returns the string representation of this NAngle object.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NAngle.Parse(System.String)">
      <summary>
            Converts the string representation of the angle to NAngle
            </summary>
      <param name="str">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NAngle.Value">
      <summary>
            Gets the angle value
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NAngle.AngleUnit">
      <summary>
            Gets the angle unit
            </summary>
    </member>
    <member name="T:Nevron.FormulaSheet.NStronglyTypedCellOption">
      <summary>
            The NStrongTypeOption represents a named value which a strongly typed cell can provide 
            for its enhanced visual editing
            </summary>
    </member>
    <member name="M:Nevron.FormulaSheet.NStronglyTypedCellOption.ToString">
      <summary>
            Overriden to return the option name
            </summary>
      <returns>
      </returns>
    </member>
    <member name="F:Nevron.FormulaSheet.NStronglyTypedCellOption.Name">
      <summary>
            Option name
            </summary>
    </member>
    <member name="F:Nevron.FormulaSheet.NStronglyTypedCellOption.Value">
      <summary>
            Option value
            </summary>
    </member>
    <member name="T:Nevron.FormulaSheet.NStringFormulaCell">
      <summary>
            The NStringFormulaCell is a formula cell, which has a strong type of String
            </summary>
    </member>
    <member name="M:Nevron.FormulaSheet.NStringFormulaCell.Clone">
      <summary>
            Creates an identical copy of this object
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaSheet.NStringFormulaCell.SetVariantValue(Nevron.FormulaEngine.NVariant)">
      <summary>
            Overriden to convert the variant to String and store its value
            </summary>
      <param name="val">
      </param>
    </member>
    <member name="M:Nevron.FormulaSheet.NStringFormulaCell.GetVariantValue">
      <summary>
            Overriden to get the value as a String variant
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.FormulaSheet.NStringFormulaCell.Value">
      <summary>
            Gets/sets the String value of the cell
            </summary>
    </member>
    <member name="P:Nevron.FormulaSheet.NStringFormulaCell.IsStronglyTyped">
      <summary>
            Overriden to return true
            </summary>
    </member>
    <member name="P:Nevron.FormulaSheet.NStringFormulaCell.StrongType">
      <summary>
            Overriden to return VariantType.String
            </summary>
    </member>
    <member name="T:Nevron.Editors.NFillStylePreviewRenderer">
      <summary>
            Summary description for NFillStylePreviewRenderer.
            </summary>
    </member>
    <member name="P:Nevron.Editors.NFillStylePreviewRenderer.Style">
      <summary>
            Sets the NFillStyle used to create the preview.
            </summary>
    </member>
    <member name="T:Nevron.Editors.NShadowStyleButton">
      <summary>
            Represents a button, which is used for the editing of a shadow style. Displays a shadow style preview.
            </summary>
    </member>
    <member name="M:Nevron.Editors.NShadowStyleButton.EditStyle(Nevron.GraphicsCore.NShadowStyle,System.Boolean,Nevron.GraphicsCore.NShadowStyle@)">
      <summary>
            Overriden to show the standard frame style type editor
            </summary>
      <param name="inStyle">
      </param>
      <param name="automatic">
      </param>
      <param name="outStyle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Editors.NShadowStyleButton.CreateDefaultStyle">
      <summary>
            Overriden to create a new shadow style
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.Editors.NBackgroundStyleTypeEditorNoAutomatic">
      <summary>
            Provides facilities for visual editing of NBackgroundStyle objects.
            </summary>
    </member>
    <member name="M:Nevron.Editors.NMeasurementUnitButton.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
    </member>
    <member name="P:Nevron.Editors.NMeasurementUnitButton.MeasurementUnit">
      <summary>
            Returns the currently selected measurement unit
            </summary>
    </member>
    <member name="T:Nevron.Editors.NMarginsTypeEditor">
      <summary>
            Summary description for NMarginEditor.
            </summary>
    </member>
    <member name="T:Nevron.Editors.NDomBrowserHostForm">
      <summary>
            Summary description for NDomBrowserHostForm.
            </summary>
    </member>
    <member name="M:Nevron.Editors.NDomBrowserHostForm.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
    </member>
    <member name="T:Nevron.Editors.NDomListViewEditorUC">
      <summary>
            Summary description for NDomListViewEditorUC.
            </summary>
    </member>
    <member name="M:Nevron.Editors.NDomListViewEditorUC.Dispose(System.Boolean)">
      <summary> 
            Clean up any resources being used.
            </summary>
    </member>
    <member name="E:Nevron.Editors.NDomListViewEditorUC.CompositeChanged">
      <summary>
            Occurs when the selected object has changed
            </summary>
    </member>
    <member name="E:Nevron.Editors.NDomListViewEditorUC.SelectedObjectChanged">
      <summary>
            Occurs when the selected object has changed
            </summary>
    </member>
    <member name="T:Nevron.Editors.NDomTreeNodeBuilder">
      <summary>
            Summary description for NDomTreeNodeBuilder.
            </summary>
    </member>
    <member name="T:Nevron.Editors.NGridInteractivityStyleButton">
      <summary>
            Summary description for NGridInteractivityStyleButton.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.NUIElementHostImpl">
      <summary>
            Summary description for NUIElementHostImpl.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NSpinButton.Bounds">
      <summary>
            Gets the bounding rectangle of the NScrollBarButton.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NSpinButton.ArrowRect">
      <summary>
            Gets the rectangle in which the arrow is rendered.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NSpinButton.Capture">
      <summary>
            Gets a value indicating whether this button has captured the mouse.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NSpinButton.Direction">
      <summary>
            Gets the direction of the button.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NSpinButton.Parent">
      <summary>
            Gets the parent NScrollBar.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NSpinButton.InteractiveState">
      <summary>
            Gets the InteractiveState of the button.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NNumericUpDown">
      <summary>
            Represents a class that provides custom painting of the standard
            NumericUpDown control.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NNumericUpDown.EditTextChanged">
      <summary>
            Notifies that the text in the internal edit control has changed.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NNumericUpDown.EnableSkinning">
      <summary>
            Gets/sets a value indicating whether the control will use skin logic.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NNumericUpDown.Skin">
      <summary>
            Gets/sets the local NSkin instance to be used when painting this control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NNumericUpDown.CurrentSkin">
      <summary>
            Gets the current skin to be used by this instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NNumericUpDown.Renderer">
      <summary>
            Gets/sets the current renderer for the button.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NNumericUpDown.Palette">
      <summary>
            Gets/sets the NPalette used to render the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NNumericUpDown.PaletteInheritance">
      <summary>
            Gets/sets a value which Palette value will be applied on a higher level Palette change.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NNumericUpDown.Border">
      <summary>
            Gets the NControlBorder object that manages the border around the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NNumericUpDown.BorderWidth">
      <summary>
            Gets the preffered width of the border.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NNumericUpDown.IsBorderHot">
      <summary>
            Gets a value indicating whether the border should be drawn in its default state (works only if the border is interactive).
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NNumericUpDown.DefaultBorderStyle">
      <summary>
            Gets the default border style for the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NNumericUpDown.DefaultBaseBorderColor">
      <summary>
            Gets the default base color to use when drawing 3D borders.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NNumericUpDown.PreferredHeight">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NNumericUpDown.CustomText">
      <summary>
            Gets/sets the custom text to be added at the end of the value.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NVScrollInfo">
      <summary>
            Summary description for NVScrollInfo.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NTextBoxRenderer">
      <summary>
            Summary description for NTextBoxRenderer.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NStatusBar">
      <summary>
            Represents a standard Windows.Forms.StatusBar with custom rendering.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NStatusBar.EnableSkinning">
      <summary>
            Gets/sets a value indicating whether the control will use skin logic.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NStatusBar.Skin">
      <summary>
            Gets/sets the local NSkin instance to be used when painting this control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NStatusBar.CurrentSkin">
      <summary>
            Gets the current skin to be used by this instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NStatusBar.Renderer">
      <summary>
            Gets/sets the current renderer for the button.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NStatusBar.Palette">
      <summary>
            Gets/sets the NPalette used to render the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NStatusBar.PaletteInheritance">
      <summary>
            Gets/sets a value which Palette value will be applied on a higher level Palette change.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NStatusBar.ImageList">
      <summary>
            Gets/sets the ImageList that contains the images to be displayed by panels.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NStatusBar.GripperStyle">
      <summary>
            Gets/sets the appearance of the sizing grip.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NStatusBar.Separators">
      <summary>
            Gets/sets a value whether there will be a separator between two panels.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NSkinKey">
      <summary>
            Summary description for NSkinKey.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NSkinColor">
      <summary>
            Summary description for NSkinColorInfo.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NSkinColor.ShouldSerializeBackColor">
      <summary>
            Determines whether the BackColor property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NSkinColor.ShouldSerializeBackColorXML">
      <summary>
            Determines whether the BackColorXML property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NSkinColor.ShouldSerializeForeColor">
      <summary>
            Determines whether the ForeColor property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NSkinColor.ShouldSerializeForeColorXML">
      <summary>
            Determines whether the ForeColorXML property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NSkinColor.ShouldSerializeShadowColor">
      <summary>
            Determines whether the ShadowColor property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NSkinColor.ShouldSerializeShadowColorXML">
      <summary>
            Determines whether the ShadowColorXML property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NSkinColor.ShouldSerializeBorderColor">
      <summary>
            Determines whether the BorderColor property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NSkinColor.ShouldSerializeBorderColorXML">
      <summary>
            Determines whether the BorderColorXML property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NSkinColor.BackColor">
      <summary>
            Gets/sets the default back color to be used.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NSkinColor.ForeColor">
      <summary>
            Gets/sets the default fore color to be used.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NSkinColor.ShadowColor">
      <summary>
            Gets/sets the default shadow color to be used.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NSkinColor.BorderColor">
      <summary>
            Gets/sets the default border color to be used.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.SkinResourceType.Unknown">
      <summary>
            Unknown resource.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.SkinResourceType.EntryAssembly">
      <summary>
            The resource is contained within the entry assembly.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.SkinResourceType.LocalAssembly">
      <summary>
            Local assembly.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.SkinResourceType.GlobalAssembly">
      <summary>
            An assembly which resides in the global assembly cache.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.SkinResourceType.File">
      <summary>
            A skin file.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NProgressBar">
      <summary>
            Represents a custom control that exposes the same functionality of the standard Windows Forms
            ProgressBar and extends the rendering greatly. Use the Palette.ControlLight to specify the
            background of the NProgressBar. Use Palette.PressedDark to specify the progress color.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NProgressBar.PerformStep">
      <summary>
            Advances the current position of the NProgressBar by the amount specified by the Step property.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NProgressBar.Increment(System.Int32)">
      <summary>
            Advances the current position of the NProgressBar by the specified amount.
            </summary>
      <param name="value">The amount to advance with.</param>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NProgressBar.Properties">
      <summary>
            Gets/sets the common NProgressBar properties.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NControlBorder">
      <summary>
            Represents a class that will be responsible for a control border by managing it non-client area.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NControlBorder.Copy(Nevron.UI.WinForm.Controls.NControlBorder)">
      <summary>
            Copies the fields from the specified NControlBorder object.
            </summary>
      <param name="border">The NControlBorder to copy fields from.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NControlBorder.ShowEditor">
      <summary>
            Show a form to visually edit this NControlBorder object.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NControlBorder.Update">
      <summary>
            Updates the border appearance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NControlBorder.PropertyPage">
      <summary>
            Gets the NPropertyPage object to visually edit this object.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NControlBorder.Style">
      <summary>
            Gets/sets the border style to be applied on the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NControlBorder.InteractiveBorder">
      <summary>
            Gets/sets a value indicating whether the border will change when the mouse hovers the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NControlBorder.BaseColor">
      <summary>
            Gets/sets the base Color value to use when drawing 3D border.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NControlBorder.Parent">
      <summary>
            Gets/sets the parent control for this object.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NAboutBox">
      <summary>
            Summary description for NAboutBox.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NListViewStringSorter">
      <summary>
            Summary description for NListViewStringSorter.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NListViewNumericSorter">
      <summary>
            Summary description for NNumericComparer.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.GalleryItemSelectionHint">
      <summary>
            Possible hints about gallery item selection request.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.GalleryItemSelectionHint.User">
      <summary>
            The selected state is altered directly from code.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.GalleryItemSelectionHint.Mouse">
      <summary>
            The selected state is altered through mouse input.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.GalleryItemSelectionHint.Keyboard">
      <summary>
            The selected state is altered through keyboard input.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.GalleryPanelLayout">
      <summary>
            Predefined gallery panel layouts.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.GalleryPanelSelectionMode">
      <summary>
            Specifies the possible selection modes for a NGalleryPanel instance.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NExpanderRenderer">
      <summary>
            A renderer which will handle NExpander instances.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NExpanderRenderer.CreatePaletteCore">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NDataGridComboBoxColumnStyle">
      <summary>
            Combo box column style
            </summary>
      <remarks>
            Implements a drop down list combo with the user specified options.
            This column styles can be applied on columns of type Int32(or Int32 convertible), which holds an index in the user defined string options
            </remarks>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NTreeListGroupByNode">
      <summary>
            A node which will be used to group by certain column in a NTreeList control.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeListGroupByNode.GetPreferredHeight(Nevron.UI.WinForm.Controls.NTreeListPaintContext)">
      <summary>
      </summary>
      <param name="context">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeListGroupByNode.PrePaint(Nevron.UI.WinForm.Controls.NLightUIPaintContext)">
      <summary>
      </summary>
      <param name="context">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeListGroupByNode.PaintGrid(Nevron.UI.WinForm.Controls.NTreeListPaintContext)">
      <summary>
      </summary>
      <param name="context">
      </param>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListGroupByNode.DefaultPreferredHeight">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NComboBoxData">
      <summary>
            Summary description for NComboBoxData.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NListBoxData.ListBox">
      <summary>
            Gets/sets the NListBox object which data is to be saved/loaded
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NComboBoxData.ComboBox">
      <summary>
            Gets/sets the NComboBox which data is to be saved/loaded.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NLuminanceBar">
      <summary>
            Represents a predefined NColorBar for choosing luminance(brightness) value using visual feedback.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NRadioButton">
      <summary>
            Represents a standard RadioButton with custom rendering.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRadioButton.EnableSkinning">
      <summary>
            Gets/sets a value indicating whether the control will use skin logic.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRadioButton.Skin">
      <summary>
            Gets/sets the local NSkin instance to be used when painting this control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRadioButton.CurrentSkin">
      <summary>
            Gets the current skin to be used by this instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRadioButton.Renderer">
      <summary>
            Gets/sets the current renderer for the NCheckBox.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRadioButton.Palette">
      <summary>
            Gets/sets the NPalette used to render the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRadioButton.PaletteInheritance">
      <summary>
            Gets/sets a value which Palette value will be applied on a higher level Palette change.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRadioButton.State">
      <summary>
            Gets/sets the current interactive state of the NButton.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRadioButton.ImageIndex">
      <summary>
            Gets/sets the imagelist index value of the image displayed on the NButton.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRadioButton.Selectable">
      <summary>
            Gets/sets a value whether the button will receive focus when clicked.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRadioButton.ButtonProperties">
      <summary>
            Gets the common NButton properties.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRadioButton.TransparentBackground">
      <summary>
            Gets/sets a value whether the NCheckBox will ask its parent to draw the background.
            </summary>
    </member>
    <member name="T:Nevron.UI.NSmartShapeTypeEditor">
      <summary>
            Summary description for NSmartShapeTypeEditor.
            </summary>
    </member>
    <member name="T:Nevron.UI.NSegmentedImageFrameStyle">
      <summary>
            Summary description for NSegmentedImageFrameStyle.
            </summary>
    </member>
    <member name="P:Nevron.UI.NSegmentedImageFrameStyle.SegmentedImage">
      <summary>
            Gets/sets the wrapped NSegmentedImage instance.
            </summary>
    </member>
    <member name="T:Nevron.UI.NCheckBoxShape">
      <summary>
            Summary description for NCheckBoxShape.
            </summary>
    </member>
    <member name="P:Nevron.UI.NCheckBoxShape.CheckType">
      <summary>
            Gets/sets the CheckType member.
            </summary>
    </member>
    <member name="P:Nevron.UI.NCheckBoxShape.Checked">
      <summary>
            Determines whether the glyph will be drawn "Checked".
            </summary>
    </member>
    <member name="P:Nevron.UI.NCheckBoxShape.GlyphWeight">
      <summary>
            Gets/sets the weight of the glyph.
            </summary>
    </member>
    <member name="T:Nevron.UI.NRendererInfo">
      <summary>
            Summary description for NRendererInfo.
            </summary>
    </member>
    <member name="T:Nevron.UI.CheckBoxStates">
      <summary>
            Summary description for NCheckBoxStates.
            </summary>
    </member>
    <member name="T:Nevron.UI.NHorizontalStackLayoutEngine">
      <summary>
            Summary description for NHorizontalStackLayoutEngine.
            </summary>
    </member>
    <member name="P:Nevron.UI.ToolStrips.UIItemEventArgs.Item">
      <summary>
            Gets the item associated with the event.
            </summary>
    </member>
    <member name="F:Nevron.UI.PopupScreenFitMode.None">
      <summary>
            No screen fitting.
            </summary>
    </member>
    <member name="F:Nevron.UI.PopupScreenFitMode.WorkingArea">
      <summary>
            Popup's bounds are calculated to fit the working area.
            </summary>
    </member>
    <member name="F:Nevron.UI.PopupScreenFitMode.VirtualScreen">
      <summary>
            Popup's bounds are calculated to fit the entire virtual screen.
            </summary>
    </member>
    <member name="T:Nevron.UI.PopupSizeStyle">
      <summary>
            Specifies the possible resize styles for a NPopup instance.
            </summary>
    </member>
    <member name="F:Nevron.UI.PopupSizeStyle.None">
      <summary>
            The popup is not resizable.
            </summary>
    </member>
    <member name="F:Nevron.UI.PopupSizeStyle.Bottom">
      <summary>
            The popup may be resized along the Y axis from its bottom edge.
            </summary>
    </member>
    <member name="F:Nevron.UI.PopupSizeStyle.BottomRight">
      <summary>
            The popup may be resized along its X and Y axises from its bottom-right edge.
            </summary>
    </member>
    <member name="T:Nevron.UI.PopupPlacement">
      <summary>
            Specifies the possible modes to be applied when positioning a NPopup control on the screen.
            </summary>
    </member>
    <member name="F:Nevron.UI.PopupPlacement.Manual">
      <summary>
            The popup's bounds are aligned using the screen.
            </summary>
    </member>
    <member name="F:Nevron.UI.PopupPlacement.Relative">
      <summary>
            The popup's alignment bounding box is the one defined by the Bounds property.
            </summary>
    </member>
    <member name="F:Nevron.UI.PopupPlacement.Target">
      <summary>
            The popup's bounds are aligned with the PlacementTarget one.
            </summary>
    </member>
    <member name="F:Nevron.UI.PopupPlacement.Mouse">
      <summary>
            The popup's bounds are aligned with the cursor's bounding box.
            </summary>
    </member>
    <member name="F:Nevron.UI.PopupPlacement.MousePosition">
      <summary>
            The popup's bounds are aligned with the cursor's position.
            </summary>
    </member>
    <member name="T:Nevron.UI.PopupHAlignment">
      <summary>
            Specifies the predefined horizontal alignment of a NPopup instance.
            </summary>
    </member>
    <member name="F:Nevron.UI.PopupHAlignment.LeftToLeft">
      <summary>
            The popup is aligned with the left edge of the alignment bounds and flows to the left.
            </summary>
    </member>
    <member name="F:Nevron.UI.PopupHAlignment.LeftToRight">
      <summary>
            The popup is aligned with the left edge of the alignment bounds and flows to the right.
            </summary>
    </member>
    <member name="F:Nevron.UI.PopupHAlignment.RightToLeft">
      <summary>
            The popup is aligned with the right edge of the alignment bounds and flows to the left.
            </summary>
    </member>
    <member name="F:Nevron.UI.PopupHAlignment.RightToRight">
      <summary>
            The popup is aligned with the right edge of the alignment bounds and flows to the right.
            </summary>
    </member>
    <member name="T:Nevron.UI.PopupVAlignment">
      <summary>
            Specifies the predefined vertical alignment of a NPopup instance.
            </summary>
    </member>
    <member name="F:Nevron.UI.PopupVAlignment.TopToBottom">
      <summary>
            The popup is aligned with the top edge of the alignment bounds and flows to the bottom.
            </summary>
    </member>
    <member name="F:Nevron.UI.PopupVAlignment.TopToTop">
      <summary>
            The popup is aligned with the top edge of the alignment bounds and flows to the top.
            </summary>
    </member>
    <member name="F:Nevron.UI.PopupVAlignment.BottomToTop">
      <summary>
            The popup is aligned with the bottom edge of the alignment bounds and flows to the top.
            </summary>
    </member>
    <member name="F:Nevron.UI.PopupVAlignment.BottomToBottom">
      <summary>
            The popup is aligned with the bottom edge of the alignment bounds and flows to the bottom.
            </summary>
    </member>
    <member name="T:Nevron.UI.NRadioBoxElement">
      <summary>
            Summary description for NRadioBoxElement.
            </summary>
    </member>
    <member name="T:Nevron.UI.NImageTypeEditorWithSystemIcons">
      <summary>
            Summary description for NImageTypeEditor.
            </summary>
    </member>
    <member name="P:Nevron.UI.NMouseEventArgs.Handled">
      <summary>
            Gets/sets a value whether the event this arguments are associated with is handled.
            </summary>
    </member>
    <member name="P:Nevron.UI.NPropertyChangingEventArgs.Cancel">
      <summary>
            Gets/sets a value whether to cancel the property change.
            </summary>
    </member>
    <member name="P:Nevron.UI.NPropertyChangingEventArgs.PropertyName">
      <summary>
            Gets the name of the property that is changing.
            </summary>
    </member>
    <member name="P:Nevron.UI.NPropertyChangingEventArgs.NewValue">
      <summary>
            Gets/sets the new value that is about to be be assigned to the property.
            </summary>
    </member>
    <member name="T:Nevron.UI.NContextMenuEventArgs">
      <summary>
            An event arguments used with the ContextMenuRequest event.
            </summary>
    </member>
    <member name="P:Nevron.UI.NContextMenuEventArgs.Originator">
      <summary>
            Gets the element which was the first one that received this event.
            </summary>
    </member>
    <member name="P:Nevron.UI.NContextMenuEventArgs.ScreenLocation">
      <summary>
            Gets the mouse position is screen coordinates where the event was generated.
            </summary>
    </member>
    <member name="P:Nevron.UI.NContextMenuEventArgs.ClientLocation">
      <summary>
            Gets the mouse position is client coordinates where the event was generated.
            </summary>
    </member>
    <member name="P:Nevron.UI.NUIItemCancelEventArgs.Cancel">
      <summary>
            Gets/sets a value indicating whether the event should be canceled.
            </summary>
    </member>
    <member name="P:Nevron.UI.NHyperLinkEventArgs.Text">
      <summary>
            Gets the text displayed by the hyperlink.
            </summary>
    </member>
    <member name="P:Nevron.UI.NHyperLinkEventArgs.Url">
      <summary>
            Gets the url of the hyperlink.
            </summary>
    </member>
    <member name="T:Nevron.UI.NMemoryGraphics">
      <summary>
            Creates an off-screen graphics object used for double-buffering
            </summary>
    </member>
    <member name="T:Nevron.UI.NPropertyOwnerObject">
      <summary>
            Summary description for NPropertyOwnerObject.
            </summary>
    </member>
    <member name="E:Nevron.UI.NPropertyOwnerObject.PropertyChanging">
      <summary>
            Notifies for an upcoming property change. Cancelable.
            </summary>
    </member>
    <member name="E:Nevron.UI.NPropertyOwnerObject.PropertyChanged">
      <summary>
            Notifies for a property change.
            </summary>
    </member>
    <member name="T:Nevron.SmartShapes.NUserDefinedCellsSection">
      <summary>
            The NUserDefinedCellsSection class represents a formula section, 
            which inserts an area of nameable cells for entering formulas and constants.
            </summary>
    </member>
    <member name="M:Nevron.SmartShapes.NUserDefinedCellsSection.Clone">
      <summary>
            Creates an identical copy of this object
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.SmartShapes.NUserDefinedCellsSection.GetVerbs">
      <summary>
            Overriden to add the Add Cell and Remove Cell verbs
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.SmartShapes.NUserDefinedCellsSection.AddUserCell(System.String,Nevron.FormulaSheet.NFormulaCell)">
      <summary>
            Adds a user cell 
            </summary>
      <param name="cellName">
      </param>
      <param name="cell">
      </param>
    </member>
    <member name="M:Nevron.SmartShapes.NUserDefinedCellsSection.AddUserCell(System.String,System.String)">
      <summary>
            Adds a user cell
            </summary>
      <param name="cellName">
      </param>
      <param name="formula">
      </param>
    </member>
    <member name="F:Nevron.SmartShapes.NUserDefinedCellsSection.DefaultName">
      <summary>
            Default name for this section  
            </summary>
    </member>
    <member name="F:Nevron.SmartShapes.NUserDefinedCellsSection.DefaultTitle">
      <summary>
            Default title for this section  
            </summary>
    </member>
    <member name="T:Nevron.NewGraphics.Pdf.lI11IIIl.Keys">
      <summary>
            Predefined keys of this dictionary.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NProjection">
      <summary>
            Controls scene view parameters like camera position, zoom, projection type, etc.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NProjection.SetPredefinedProjection(Nevron.GraphicsCore.PredefinedProjection)">
      <summary>
            Sets a predefined projection to the camera.
            </summary>
      <remarks>
            Sometimes modifying the properties of the NView object can be a tedious job, 
            especially when you have to switch from one projection type to another. This is 
            why Nevron has created a set of 14 predefined projections which you can use in 
            order to speed up your development. When you load a predefined projection the 
            control will modify all the properties relevant to the projection type 
            (Perspective or Orthogonal) so you do not need to worry about the previous values 
            of the these properties.
            </remarks>
      <example>
            The following C# example changes the projection using the 
            SetPredefinedProjection method:
            <code lang="VB">
            Dim chartView As NView = (CType(NChartControl.Charts(0), NChart)).View 
            chartView.SetPredefinedProjection(PredefinedProjection.OrthogonalHorizontalLeft)
            </code><code>
            NView chartView = ((NChart)NChartControl.Charts[0]).View;
            chartView.SetPredefinedProjection(PredefinedProjection.OrthogonalHorizontalLeft);
            </code></example>
    </member>
    <member name="M:Nevron.GraphicsCore.NProjection.IsPredefinedProjection(Nevron.GraphicsCore.PredefinedProjection)">
      <summary>
            Determines if the current projection equals the predefined projection.
            </summary>
      <param name="predefinedProjection">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NProjection.GetCurrentPredefinedProjection(Nevron.GraphicsCore.PredefinedProjection@)">
      <summary>
            Determines if the current projection is a predefined projection.
            </summary>
      <param name="predefinedProjection">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NProjection.Equals(System.Object)">
      <summary>
            Determines whether the projections are equal.
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NProjection.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NProjection.Elevation">
      <summary>
            The elevation of the viewpoint in degrees. 
            </summary>
      <remarks>
            The default value is 0 degrees which ensures that the viewer looks at the scene 
            from the top of the Z-axis. To look at the chart from the top you'll have to 
            modify the elevation to 90 degrees. The rotation and elevation properties define 
            the polar coordinates of camera relative to the chart center point.
            </remarks>
      <example>
            The following example modifies the elevation applied on the chart camera:
            <code lang="VB">
            Dim chartView As NView = (CType(NChartControl.Charts(0), NChart)).View 
            chartView.Elevation = 90
            </code><code>
            NView chartView = ((NChart)NChartControl.Charts[0]).View;
            chartView.Elevation = 90;
            </code></example>
    </member>
    <member name="P:Nevron.GraphicsCore.NProjection.Rotation">
      <summary>
            The rotation of the viewpoint in degrees.
            </summary>
      <remarks>
            The default value is 0 degrees ensuring that the chart is not rotated. To look 
            at the chart from the left you'll have to modify the rotation to 90 degrees. 
            The rotation and elevation properties define the polar coordinates of camera 
            relative to the chart center point.
            </remarks>
      <example>
            The following example modifies the rotation applied on the chart camera:
            <code lang="VB">
            Dim chartView As NView = (CType(NChartControl.Charts(0), NChart)).View 
            chartView.Rotation = 90
            </code><code>
            NView chartView = ((NChart)NChartControl.Charts[0]).View;
            chartView.Rotation = 90;
            </code></example>
    </member>
    <member name="P:Nevron.GraphicsCore.NProjection.Zoom">
      <summary>
            The zooming factor applied to the chart camera in percents. 
            </summary>
      <remarks>
            The default value of this property is 100%. In order to zoom the scene twice 
            for example you'll have to modify the value of this property to 200%.
            </remarks>
      <example>
            The following example modifies the zoom applied on the chart camera:
            <code lang="VB">
            Dim chartView As NView = (CType(NChartControl.Charts(0), NChart)).View 
            chartView.Zoom = 200 ' zoom the chart twice
            </code><code>
            NView chartView = ((NChart)NChartControl.Charts[0]).View;
            chartView.Zoom = 200; // zoom the chart twice
            </code></example>
    </member>
    <member name="P:Nevron.GraphicsCore.NProjection.Type">
      <summary>
            Controls the projection type of the camera. Can be ProjectionType.Orthogonal or 
            ProjectionType.Perspective.
            </summary>
      <remarks>
            Perspective projection is more suitable for 3D charts, because it gives you a 
            perception of depth. In this mode you can also control the PerspectiveAngle parameter.
            If you want to display 2D charts you must switch to orthogonal projection which 
            is better for analytical charts like stock for example. In Orthogonal projection 
            you can modify the XDepth and YDepth parameters that allow you to achieve two and a 
            half projection, which is also widely used.
            </remarks>
      <example>
            The following example modifies the projection applied on the chart camera:
            <code lang="VB">
            Dim chartView As NView = (CType(NChartControl.Charts(0), NChart)).View 
            chartView.Projection = ProjectionType.Orthogonal
            chartView.XDepth = 0.4f
            chartView.YDepth = 0.4f
            </code><code>
            NView chartView = ((NChart)NChartControl.Charts[0]).View;
            chartView.Projection = ProjectionType.Orthogonal;
            chartView.XDepth = 0.4f;
            chartView.YDepth = 0.4f;
            </code></example>
    </member>
    <member name="P:Nevron.GraphicsCore.NProjection.PerspectiveAngle">
      <summary>
            The field of view angle, in degrees when the Projection property is set to 
            ProjectionType.Perspective
            </summary>
      <remarks>
            The default perspective angle is 65 degrees. Note that this property will accept 
            only values in the range [0.01, 179.99], because values of 0 and 180 are invalid. 
            Try to avoid setting this property to values close to the range because this may 
            result in a deep viewing frustum with lower depth resolution.
            </remarks>
      <example>
            The following C# example modifies the projection applied on the chart camera and 
            the perspective angle:
            <code lang="VB">
            Dim chartView As NView = (CType(NChartControl.Charts(0), NChart)).View 
            chartView.Projection = ProjectionType.Perspective
            chartView.PerspectiveAngle = 90
            </code><code>
            NView chartView = ((NChart)NChartControl.Charts[0]).View;
            chartView.Projection = ProjectionType.Perspective;
            chartView.PerspectiveAngle = 90;
            </code></example>
    </member>
    <member name="P:Nevron.GraphicsCore.NProjection.ViewerRotation">
      <summary>
            The rotation (or tilting) of the camera. 
            </summary>
      <remarks>
            The ViewerRotation specifies the rotation around the axis defined by the chart 
            center point (0, 0, 0) and the camera coordinates defined by the Elevation, 
            Rotation and Distance(not exposed because it is computed dynamically) properties. 
            You may need to modify the ViewerRotation when you want to display horizontal or 
            top to bottom charts. However for such purposes it is recommended to use the 
            PredefinedChartStyle property of the NChart object, because it also changes the 
            chart axis label positioning and others.
            </remarks>
      <example>
            The following example modifies the ViewerRotation applied on the chart camera 
            to display a left to right horizontal chart.
            <code lang="VB">
            Dim chartView As NView = (CType(NChartControl.Charts(0), NChart)).View 
            xchartView.Projection = ProjectionType.Perspective
            chartView.ViewerRotation = 270
            </code><code>
            NView chartView = ((NChart)NChartControl.Charts[0]).View;
            chartView.Projection = ProjectionType.Perspective;
            chartView.ViewerRotation = 270;
            </code></example>
    </member>
    <member name="P:Nevron.GraphicsCore.NProjection.XDepth">
      <summary>
            The offset of the 3D objects along the X axis depending on their Z depth when 
            the projection is ProjectionType.Orthogonal
            </summary>
      <remarks>
            This property has effect only when the projection type is ProjectionType.Orthogonal. 
            When you use the standard 2D projection the Z coordinate does not influence the 
            projected coordinates, because the depth is not taken into account. To create a 2 
            and a half projection for example you'll need a projection that uses the Z coordinate 
            to generate a positive or negative offset along the X and Y axis of the viewport 
            depending on the Z depth of the object so that you can distingues object with 
            different Z values. The default value of this property is 0.
            </remarks>
      <example>
            The following example creates a 2D Half Orthogonal projection:
            <code lang="VB">
            Dim chartView As NView = (CType(NChartControl.Charts(0), NChart)).View 
            chartView.Projection = ProjectionType.Orthogonal
            chartView.XDepth = 0.5f
            chartView.YDepth = 0.5f
            </code><code>
            NView chartView = ((NChart)NChartControl.Charts[0]).View;
            chartView.Projection = ProjectionType.Orthogonal;
            chartView.XDepth = 0.5f;
            chartView.YDepth = 0.5f;
            </code></example>
    </member>
    <member name="P:Nevron.GraphicsCore.NProjection.YDepth">
      <summary>
            The offset of the 3D objects along the Y axis depending on their Z depth when the 
            projection is ProjectionType.Orthogonal.
            </summary>
      <remarks>
            This property has effect only when the projection type is ProjectionType.Orthogonal. 
            When you use the standard 2D projection the Z coordinate does not influence the 
            projected coordinates, because the depth is not taken into account. To create a 2 
            and a half projection for example you'll need a projection that uses the Z 
            coordinate to generate a positive or negative offset along the X and Y axis of 
            the viewport depending on the Z depth of the object so that you can distingues 
            object with different Z values. The default value of this property is 0.
            </remarks>
      <example>
            The following example creates a 2D Half Orthogonal projection:
            <code lang="VB">
            Dim chartView As NView = (CType(NChartControl.Charts(0), NChart)).View 
            chartView.Projection = ProjectionType.Orthogonal
            chartView.XDepth = 0.5f
            chartView.YDepth = 0.5f
            </code><code>
            NView chartView = ((NChart)NChartControl.Charts[0]).View;
            chartView.Projection = ProjectionType.Orthogonal;
            chartView.XDepth = 0.5f;
            chartView.YDepth = 0.5f;
            </code></example>
    </member>
    <member name="T:Nevron.GraphicsCore.NSpotLightSource">
      <summary>
            Represents a spot light source in a 3D scene. Spot light sources have both position 
            and direction vectors. They illuminate a part of the 3D scene that is enclosed by a cone. 
            A real world example of a spot light is a desk lamp.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NPointLightSource">
      <summary>
            Represents a point light source in a 3D scene. Point light sources have position but no direction, 
            so they emit light equally in all directions. Light intensity can attenuate with distance, so that
            objects located near a point light source get more illuminated than distant objects.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NPointLightSource.Equals(System.Object)">
      <summary>
            Determines whether the light sources are equal.
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NPointLightSource.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NPointLightSource.Position">
      <summary>
            A vector which specifies the position of the light source in 3D space.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NPointLightSource.ConstantAttenuation">
      <summary>
            Specifies the constant attenuation factor for this light. For more 
            information see the "OpenGL Lighting Model" topic in the User's Guide.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NPointLightSource.LinearAttenuation">
      <summary>
            Specifies the linear attenuation factor for this light. For more 
            information see the "OpenGL Lighting Model" topic in the User's Guide.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NPointLightSource.QuadraticAttenuation">
      <summary>
            Specifies the quadratic attenuation factor for this light. For more 
            information see the "OpenGL Lighting Model" topic in the User's Guide.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NSpotLightSource.Equals(System.Object)">
      <summary>
            Determines whether the light sources are equal.
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NSpotLightSource.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NSpotLightSource.Direction">
      <summary>
            A vector which specifies the direction of the light source.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NSpotLightSource.SpotCutoff">
      <summary>
            Gets/sets the value of the spot cutoff angle.
            </summary>
      <remarks>
            The spot cutoff angle is the maximum value of the angle between 
            the vector defined from the light position and the light direction 
            and the vector defined from the light position and the object. 
            If the value of this angle is bigger than the SpotCutoff the light 
            becomes completely masked. With the help of this property you can 
            achieve directed lights. For example a regular torch has a SpotCuttoff 
            angle of around 45 degrees. 
            </remarks>
    </member>
    <member name="P:Nevron.GraphicsCore.NSpotLightSource.SpotExponent">
      <summary>
            The spot exponent specifies the intensity distribution of a spot light. 
            </summary>
      <remarks>
            All values are automatically clamped in the range [0,128]. Effective 
            light intensity is attenuated by the cosine of the angle between the 
            direction of the light and the direction from the light to the vertex 
            being lighted, raised to the power of the spot exponent. Thus, higher 
            spot exponents result in a more focused light source. The default spot 
            exponent is 0, resulting in uniform light distribution. 
            </remarks>
    </member>
    <member name="T:Nevron.GraphicsCore.NUserDataAttribute">
      <summary>
            Represents a serialized custom data that is passed as an attribute to the client when using the
            image map as XML coordinates transport rather than as XHTML.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NUserDataAttribute.Equals(System.Object)">
      <summary>
            Determines whether instances of the same type are equivalent.
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NUserDataAttribute.GetHashCode">
      <summary>
            The hash code for the current object.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NUserDataAttribute.Data">
      <summary>
            Serialized custom data that is passed to the client as an xml attribute.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NBackgroundStyle">
      <summary>
            The NBackgroundStyle class is used to define the background filling and frame applied to objects
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NBackgroundStyle.GetAttributeByName(System.String)">
      <summary>
            Gets a child or descendant attribute by its name
            </summary>
      <param name="attributeName">child name or full attribute name</param>
      <returns>a reference to the attribute</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NBackgroundStyle.GetAttributeName(Nevron.Dom.INAttribute)">
      <summary>
            Gets the name of the specified child attribute
            </summary>
      <param name="attribute">child attribute</param>
      <returns>name of the attribute</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NBackgroundStyle.SetAttributeByName(System.String,Nevron.Dom.INAttribute)">
      <summary>
            Sets a child or descendant attribute by its name
            </summary>
      <param name="attributeName">
      </param>
      <param name="attribute">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NBackgroundStyle.OnDrawPreview(Nevron.GraphicsCore.lIIIIllI,Nevron.GraphicsCore.NSizeF)">
      <summary>
            Draws a preview of the style on the specified device.
            </summary>
      <param name="device">
      </param>
      <param name="size">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NBackgroundStyle.GetDescription">
      <summary>
            Returns a short description of this background style.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NBackgroundStyle.GetPaintableRect(Nevron.GraphicsCore.NRectangleF,Nevron.GraphicsCore.l1IlllI1)">
      <summary>
            Obtains the paintable rectangle associated with this background style.
            </summary>
      <param name="shapeRect">
      </param>
      <param name="lengthConverter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NBackgroundStyle.FrameStyle">
      <summary>
            Controls the style of the background frame. The user can choose between 
            standard and image frame.
            </summary>
      <remarks>
        <para>
            Nevron Chart for .NET supports two types of background frame. The first
            one resembles the standard Windows frame and can show all types of frames 
            specified by the style of the window (raised, sunken, single etc).
            The second type of frame is image (or artistic) and it can come handy for 
            Web or Win XP style applications. 
            </para>
      </remarks>
    </member>
    <member name="P:Nevron.GraphicsCore.NBackgroundStyle.FillStyle">
      <summary>
            Gives you access to the NFillEffect object controlling the fill effect 
            applied on the background.
            </summary>
      <remarks>
            Note that the fill effect applied on the background discards the properties related to lighting and transparency.
            </remarks>
      <example>
            The following example modifies the fill effect applied on the background:
            <code lang="VB">
            NChartControl.BackgroundStyle.FillStyle = new NGradientFillStyle(GradientStyle.Horizontal, GradientVariant.Variant1, Color.White, Color.BlueViolet)
            </code><code>
            NChartControl.BackgroundStyle.FillStyle = new NGradientFillStyle(GradientStyle.Horizontal, GradientVariant.Variant1, Color.White, Color.BlueViolet);
            </code></example>
    </member>
    <member name="P:Nevron.GraphicsCore.NBackgroundStyle.Attributes">
      <summary>
            Gets the list of child attributes of this container
            </summary>
      <returns>attributes of the container</returns>
    </member>
    <member name="T:Nevron.GraphicsCore.NFadeAnimation">
      <summary>
            Changes the transparency of an object over time.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NFadeAnimation.Clone">
      <summary>
            Creates an identical copy of this animation object.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NFadeAnimation.StartAlpha">
      <summary>
            The initial alpha value of the animated object. Must be in the range from 0 to 1
            (inclusively), where 0 means completely transparent and 1 means completely opaque.
            By default set to 0.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NFadeAnimation.EndAlpha">
      <summary>
            The final alpha value of the animated object. Must be in the range from 0 to 1
            (inclusively), where 0 means completely transparent and 1 means completely opaque.
            By default set to 1.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NFadeAnimation.AnimationType">
      <summary>
            Gets the type of this animation.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NGR">
      <summary>
            Namespace class for resources used by the Nevron.GraphicsCore assembly
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NGR.HistoryOperationChangeTransparencyPercent">
      <summary>
            Description for the change transparency percent operation
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NGR.HistoryOperationInitFillStyle">
      <summary>
            Description for the init fill style operation
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Text.INTextCommand">
      <summary>
            Summary description for INTextCommand.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.INGraphicsProvider">
      <summary>
            Implemented by graphics providers.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NPostbackEventArgs">
      <summary>
            Events arguments for postback
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NPostbackEventArgs.Parse(System.String)">
      <summary>
            Initializes the object type and identifier from the specified string
            </summary>
      <param name="str">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NPostbackEventArgs.Format(System.Type,Nevron.Dom.NIdentifier)">
      <summary>
            Packs the object type and the specified identifier in a string
            </summary>
      <param name="objectType">
      </param>
      <param name="id">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NPostbackEventArgs.ToString">
      <summary>
            Overriden to return the object type concatenated with the string representation of the identifier
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NPostbackEventArgs.ObjectType">
      <summary>
            Gets the object type
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NPostbackEventArgs.Id">
      <summary>
            Gets the object identifier
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Text.NTextDocument">
      <summary>
            Represents a text document.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NTextDocument.GetComposedRangeStyle(Nevron.GraphicsCore.NRange1D,Nevron.GraphicsCore.StyleEntry[])">
      <summary>
            Obtains a style based on the common style entries for the specified range in the document.
            </summary>
      <param name="range">
      </param>
      <param name="stylesToCompose">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NTextDocument.IsPositionValid(System.Int32)">
      <summary>
            Returns true if the current position is inside the bounds
            </summary>
      <param name="position">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NTextDocument.IsRangeValid(Nevron.GraphicsCore.NRange1D)">
      <summary>
            Returns true if the range is inside the document
            </summary>
      <param name="range">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NTextDocument.GetTextAtomTypeAt(System.Int32)">
      <summary>
            Returns the text atom type at the specified position
            </summary>
      <param name="position">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NTextDocument.GetFragmentAt(System.Int32)">
      <summary>
            Returns the fragment at the specified position
            </summary>
      <param name="position">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NTextDocument.GetAtomAt(System.Int32)">
      <summary>
            Obtains the text atom at the specified position
            </summary>
      <param name="position">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NTextDocument.AccumulateElementsInRange(Nevron.GraphicsCore.NRange1D,System.Collections.ArrayList,Nevron.Filters.INFilter,Nevron.Filters.INFilter)">
      <summary>
            Returns the elements that fall in the specified document range and match the element and branch filters
            </summary>
      <param name="range">
      </param>
      <param name="elements">
      </param>
      <param name="elementFilter">
      </param>
      <param name="branchFilter">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NTextDocument.GetLineNumber(System.Int32)">
      <summary>
            Obtains the line number of the specified position in the text document
            </summary>
      <param name="position">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NTextDocument.GetColumn(System.Int32)">
      <summary>
            Obtains the column number of the specified position in the document
            </summary>
      <param name="position">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NTextDocument.GetLineBegin(System.Int32)">
      <summary>
            Obtains the begging of the line in the document
            </summary>
      <param name="position">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NTextDocument.GetPosition(System.Int32,System.Int32)">
      <summary>
            Obtains the document position that most closely matches the specified line number and column number
            </summary>
      <param name="line">
      </param>
      <param name="column">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NTextDocument.GetLineEnd(System.Int32)">
      <summary>
            Obtains the begging of the line in the document
            </summary>
      <param name="position">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NTextDocument.ApplyStyleToRange(Nevron.GraphicsCore.NRange1D,Nevron.GraphicsCore.StyleEntry,System.Object)">
      <summary>
            Applies the style to the specified range
            </summary>
      <param name="range">
      </param>
      <param name="styleEntry">
      </param>
      <param name="value">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NTextDocument.AddParagraphSpacingToRange(Nevron.GraphicsCore.NRange1D,Nevron.GraphicsCore.StyleEntry,Nevron.GraphicsCore.NLength)">
      <summary>
            Applies the spacing change to the specified style entry for all paragraph elements that fall in the document range.
            </summary>
      <param name="range">
      </param>
      <param name="styleEntry">
      </param>
      <param name="spacingChange">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NTextDocument.RemoveRange(Nevron.GraphicsCore.NRange1D)">
      <summary>
            Removes the specified range of atoms from the document
            </summary>
      <param name="range">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NTextDocument.GetNextWordIndex(System.Int32)">
      <summary>
            Obtains the next word index after the specified index.
            </summary>
      <param name="startIndex">
      </param>
      <returns>-1 if there is no next word</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NTextDocument.GetPrevWordIndex(System.Int32)">
      <summary>
            Obtains the word index before the specified index.
            </summary>
      <param name="startIndex">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NTextDocument.CanInsertAtom(System.Int32,Nevron.GraphicsCore.Text.NTextAtom)">
      <summary>
            Returns true if the specified atom can be inserted at the specified position
            </summary>
      <param name="position">
      </param>
      <param name="atom">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NTextDocument.InsertAtom(System.Int32,Nevron.GraphicsCore.Text.NTextAtom)">
      <summary>
            Inserts the specified atom at the specified position
            </summary>
      <param name="position">
      </param>
      <param name="atom">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NTextDocument.CanRemoveAtom(System.Int32)">
      <summary>
            Returns true if the atom at the specified position can be removed
            </summary>
      <param name="position">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NTextDocument.RemoveAtom(System.Int32)">
      <summary>
            Removes the text atom at the specified position
            </summary>
      <param name="position">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NTextDocument.GetElementFromId(System.Int32)">
      <summary>
            Obtains an element from its id
            </summary>
      <param name="id">element id</param>
      <returns>reference to the element if it was found, otherwise null</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NTextDocument.GetElementFromUniqueId(System.Guid)">
      <summary>
            Obtains an element from its unique id
            </summary>
      <param name="uid">unique id</param>
      <returns>reference to the element if it was found, otherwise null</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NTextDocument.RegisterElement(Nevron.Dom.INElement)">
      <summary>
            Registers the specified element in the document
            </summary>
      <param name="element">element to register</param>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NTextDocument.UnregisterElement(Nevron.Dom.INElement)">
      <summary>
            Unregisters the specified element from the document
            </summary>
      <param name="element">element to unregister</param>
    </member>
    <member name="M:Nevron.GraphicsCore.Text.NTextDocument.GetServiceOfType(System.Type)">
      <summary>
            Gets a reference to a service of the specified type
            </summary>
      <param name="serviceType">service type</param>
      <returns>service instance or null if a service of this type cannot be located</returns>
    </member>
    <member name="P:Nevron.GraphicsCore.Text.NTextDocument.ServiceManager">
      <summary>
            Obtains the text document service manager
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.Text.NTextDocument.Length">
      <summary>
            Returns the length of the document
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Shapes.NArrowShape">
      <summary>
            Summary description for NArrowShape.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Shapes.NCutEdgeBarShape">
      <summary>
            Summary description for NCutEdgeBarShape.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Shapes.NBezierPathSegment">
      <summary>
            Summary description for NBezierPathSegment.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Shapes.NTextGraphicsNode">
      <summary>
            Summary description for NTextGraphicsNode.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.Shapes.NTextGraphicsNode.Paint(Nevron.GraphicsCore.Shapes.NGraphicsPaintContext)">
      <summary>
            Paints this node.
            </summary>
      <param name="context">
      </param>
    </member>
    <member name="T:Nevron.GraphicsCore.NBitmapGdiRenderSurface">
      <summary>
            Represents a GDI bitmap render surface.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NBitmapGdiRenderSurface.Paint(System.Object,System.Windows.Forms.PaintEventArgs,Nevron.GraphicsCore.l1lllll1I)">
      <summary>
            Called to paint the render surface on the specified args and with the specified content
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
      <param name="contentPainter">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NBitmapGdiRenderSurface.GetBitmapHolder(System.Drawing.Imaging.PixelFormat,Nevron.GraphicsCore.NResolution)">
      <summary>
            Gets a bitmap representing the render surface
            </summary>
      <param name="pixelFormat">
      </param>
      <param name="resolution">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NBitmapGdiRenderSurface.BeforeOverlayPaint(System.Object,System.Windows.Forms.PaintEventArgs)">
      <summary>
            Called before any overlay drawing commands are executed to the device attached to this render surface
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NBitmapGdiRenderSurface.AfterOverlayPaint(System.Object,System.Windows.Forms.PaintEventArgs)">
      <summary>
            Called after any overlay drawing commands are executed to the device attached to this render surface
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NBitmapGdiRenderSurface.DetachFromBitmap">
      <summary>
            Detaches the render surface from the bitmap
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NBitmapGdiRenderSurface.Resize(Nevron.GraphicsCore.NSize)">
      <summary>
            Resizes the render surface
            </summary>
      <param name="newSize">
      </param>
    </member>
    <member name="P:Nevron.GraphicsCore.NBitmapGdiRenderSurface.Bitmap">
      <summary>
            Obtains the bitmap associated with this render surface
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NScaleColorTransform">
      <summary>
            Represents a color transform that can scale color components (channels)
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NScaleColorTransform.TransformColor(Nevron.GraphicsCore.NArgbColorValue)">
      <summary>
            Transforms a color
            </summary>
      <param name="color">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NScaleColorTransform.TransformColor(Nevron.GraphicsCore.NArgbColorValueF@)">
      <summary>
            Transforms a color
            </summary>
      <param name="color">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NScaleColorTransform.TransformBitmap(System.Drawing.Bitmap)">
      <summary>
            Transforms a bitmap
            </summary>
      <param name="bitmap">
      </param>
    </member>
    <member name="P:Nevron.GraphicsCore.NScaleColorTransform.AlphaScale">
      <summary>
            Gets/sets the alpha scale value.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NScaleColorTransform.RedScale">
      <summary>
            Gets/sets the red scale value.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NScaleColorTransform.GreenScale">
      <summary>
            Gets/sets the green scale value.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NScaleColorTransform.BlueScale">
      <summary>
            Gets/sets the blue scale value.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NEllipticalArcToCommand">
      <summary>
            The NEllipticalArcToCommand class represents a command, 
            which draws an elliptical arc from the previus command location to this command location
            </summary>
      <remarks>
            The elliptical arc command has one control point, angle which the ellipse major axis forms with the X axis and ratio between the major and minor ellipse axes
            </remarks>
    </member>
    <member name="M:Nevron.GraphicsCore.NEllipticalArcToCommand.Clone">
      <summary>
            Overriden to create a cloned move to command
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NEllipticalArcToCommand.Translate(System.Single,System.Single)">
      <summary>
            Translates this command with the specified amounts
            </summary>
      <remarks>
            Overriden to translate the control points
            </remarks>
      <param name="dx">
      </param>
      <param name="dy">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NEllipticalArcToCommand.Scale(System.Single,System.Single,Nevron.GraphicsCore.NPointF)">
      <summary>
            Scales this command around the specified pin with the specified scale factors
            </summary>
      <remarks>
            Overriden to scale the control point
            </remarks>
      <param name="scaleX">x scale</param>
      <param name="scaleY">y scale</param>
      <param name="pin">pin</param>
    </member>
    <member name="M:Nevron.GraphicsCore.NEllipticalArcToCommand.AccumulateBounds(Nevron.GraphicsCore.NRange2DF@)">
      <summary>
            Accumulates the bounds of this command in the specified range
            </summary>
      <param name="range">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NEllipticalArcToCommand.AddToGraphicsPath(System.Drawing.Drawing2D.GraphicsPath,Nevron.GraphicsCore.NPathCommand)">
      <summary>
            Overriden to draw a line from the previous command location to this command location
            </summary>
      <param name="path">
      </param>
      <param name="prevCommand">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NEllipticalArcToCommand.CreatePrimitive(Nevron.GraphicsCore.NPathCommand)">
      <summary>
            Overriden to return an instance of the NEllipticalArcF primitive
            </summary>
      <param name="prevCommand">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NEllipticalArcToCommand.Type">
      <summary>
            Overriden to return EllipticalArcTo
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NEllipticalArcToCommand.ControlX">
      <summary>
            Gets/sets the X coordinate of the control point
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NEllipticalArcToCommand.ControlY">
      <summary>
            Gets/sets the Y coordinate of the control point
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NEllipticalArcToCommand.ControlPoint">
      <summary>
            Gets/sets the control point location
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NEllipticalArcToCommand.Angle">
      <summary>
            Gets/sets the angle, which the major axis forms with the X-axis
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NEllipticalArcToCommand.Ratio">
      <summary>
            Gets/sets the ratio between the major and minor ellipse axes. A ratio of 1 produces a circular arc. 
            The value of this property must be larger than 0.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NRange1DD">
      <summary>
            The NRange1DD struct represents a 1D range with double values representing its begin and end.
            </summary>
      <remarks>
            To define a range of date-time values use the DateTime.ToOADate function 
            to convert DateTime values to double.
            </remarks>
    </member>
    <member name="M:Nevron.GraphicsCore.NRange1DD.Combine(Nevron.GraphicsCore.NRange1DD)">
      <summary>
            Combines the the two ranges. 
            </summary>
      <remarks>
            Both ranges must be normalized.
            </remarks>
      <param name="range">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NRange1DD.Inflate(System.Double)">
      <summary>
            Inflates this range with the specified value
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NRange1DD.Translate(System.Double)">
      <summary>
            Translates the range
            </summary>
      <param name="delta">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NRange1DD.GetLength">
      <summary>
            Returns the absolute lenght of this range.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRange1DD.Contains(System.Double)">
      <summary>
            Returns true if the range contains the specified value.
            </summary>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRange1DD.Contains(System.Double,System.Double)">
      <summary>
            Returns true if the range contains the specified value.
            </summary>
      <param name="value">
      </param>
      <param name="epsilon">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRange1DD.Normalize">
      <summary>
            Normalizes the range.
            </summary>
      <remarks>
            A normalized range end value is bigger or equal to the begin value.
            </remarks>
    </member>
    <member name="M:Nevron.GraphicsCore.NRange1DD.Invert">
      <summary>
            Changes the begin and end values of this range.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NRange1DD.IsInverted">
      <summary>
            Returns true if the  range is inverted.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRange1DD.GetOffsetFromValue(System.Double)">
      <summary>
            Returns the distance between the begin or end values of the  range. 
            </summary>
      <param name="value">
      </param>
      <returns>
      </returns>
      <remarks>
            This function return 0 if the value is inside the  range.
            </remarks>
    </member>
    <member name="M:Nevron.GraphicsCore.NRange1DD.FitInRange(Nevron.GraphicsCore.NRange1DD)">
      <summary>
            Tries to fit the passed range into this range.
            </summary>
      <param name="range">
      </param>
      <returns>The amount range was moved in order to fit</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRange1DD.GetBeginValue">
      <summary>
            Gets the normalized begin value
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRange1DD.GetEndValue">
      <summary>
            Gets the normalized end value
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRange1DD.GetValueInRange(System.Double)">
      <summary>
            Returns the nearest value that lies in this range.
            </summary>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRange1DD.GetRangeDisposition(Nevron.GraphicsCore.NRange1DD)">
      <summary>
            Gets the range disposition of this range to another range
            </summary>
      <param name="range">
      </param>
      <returns>
      </returns>
      <remarks>
            Ranges must be normalized
            </remarks>
    </member>
    <member name="M:Nevron.GraphicsCore.NRange1DD.Intersect(Nevron.GraphicsCore.NRange1DD,Nevron.GraphicsCore.NRange1DD@)">
      <summary>
            Calculates the intersection between two ranges
            </summary>
      <param name="range">
      </param>
      <param name="intersection">
      </param>
      <returns>True if intersection exists, False otherwise</returns>
      <remarks>Ranges must be normalized</remarks>
    </member>
    <member name="M:Nevron.GraphicsCore.NRange1DD.Equals(System.Object)">
      <summary>
            Returns true if the objects are equal.
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRange1DD.GetHashCode">
      <summary>
            Returns the hash code of this instance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="F:Nevron.GraphicsCore.NRange1DD.Begin">
      <summary>
            Begin value
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NRange1DD.End">
      <summary>
            End value
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NRange1DD.IsNormalized">
      <summary>
            Returns true if the range is normal.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NPointF">
      <summary>
            The NPointF structure represents a point in 2D space defined by it's X and Y coordinates
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NPointF.Equals(System.Object)">
      <summary>
      </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NPointF.GetHashCode">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NPointF.ToString">
      <summary>
            Returns the string representation of this object
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NPointF.Rotate(System.Single,Nevron.GraphicsCore.NPointF)">
      <summary>
            Rotates the point with the specified angle around the specified pin
            </summary>
      <param name="angle">angle (in radians)</param>
      <param name="pin">pin point</param>
    </member>
    <member name="M:Nevron.GraphicsCore.NPointF.Rotate(System.Single)">
      <summary>
            Rotates the point with the specified angle around the 0,0 point
            </summary>
      <param name="angle">angle (in radians)</param>
    </member>
    <member name="M:Nevron.GraphicsCore.NPointF.Scale(System.Single,System.Single,Nevron.GraphicsCore.NPointF)">
      <summary>
            Scales the point around the specified pin with the specified scale factors
            </summary>
      <param name="scaleX">x scale</param>
      <param name="scaleY">y scale</param>
      <param name="pin">pin</param>
    </member>
    <member name="M:Nevron.GraphicsCore.NPointF.Scale(System.Single,System.Single)">
      <summary>
            Scales the point around the 0,0 point with the specified scale factors
            </summary>
      <param name="scaleX">x scale</param>
      <param name="scaleY">y scale</param>
    </member>
    <member name="M:Nevron.GraphicsCore.NPointF.Translate(System.Single,System.Single)">
      <summary>
            Translates the point with the specified amounts
            </summary>
      <param name="dx">
      </param>
      <param name="dy">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NPointF.Distance(Nevron.GraphicsCore.NPointF)">
      <summary>
            Measures the distance between this point and the specified point.
            </summary>
      <param name="point">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NPointF.GetCompassDirection(Nevron.GraphicsCore.NPointF)">
      <summary>
            Gets the compass direction which corresponds to the vector formed by this point and the specified point
            </summary>
      <param name="point">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NPointF.Round">
      <summary>
            Round this point
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NPointF.ToPointF">
      <summary>
            Converts this point to PointF
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NPointF.ToNVector2DF">
      <summary>
            Converts this point to NVector2DF
            </summary>
      <returns>
      </returns>
    </member>
    <member name="F:Nevron.GraphicsCore.NPointF.X">
      <summary>
            x coordinate
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NPointF.Y">
      <summary>
            y coordinate
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NPointF.Empty">
      <summary>
            The empty point (0, 0)
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NPointF.IsEmpty">
      <summary>
            Determines whether this is an empty point (e.g. x and y are 0)
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NLightModelToGrayScaleConverter">
      <summary>
            The NLightModelToGrayScaleConverter class represents a converter, which converts a light model to its gray scale equivalent
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NLightModelToGrayScaleConverter.Convert(System.Object)">
      <summary>
            Overriden to convert all colors of a lighting model and the light sources it contains to gray scale
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.FormulaSheet.NNamedCell">
      <summary>
            Represents a host for a formula cell, which adds a name to the cell
            </summary>
    </member>
    <member name="M:Nevron.FormulaSheet.NNamedCell.Clone">
      <summary>
            Creates an identical copy of this object
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.FormulaSheet.NNamedCell.Name">
      <summary>
            Gets/sets the cell name in the formula section dictionary
            </summary>
    </member>
    <member name="P:Nevron.FormulaSheet.NNamedCell.Cell">
      <summary>
            Gets/sets the cell
            </summary>
    </member>
    <member name="T:Nevron.FormulaSheet.NFormulaSectionCollection">
      <summary>
            The NFormulaSectionCollection class is a strongly typed collection, containing NFormulaSection instances
            </summary>
      <remarks>
            A reference to this class can be obtained from the Sections property of the NFormulaSheet class.
            This collection does not accept null formula section references.
            </remarks>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaSectionCollection.Clone">
      <summary>
            Creates an identical copy of this object
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaSectionCollection.UpdateReferences(Nevron.INReferenceProvider)">
      <summary>
      </summary>
      <param name="provider">
      </param>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaSectionCollection.CreateNonSerializedObjects">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaSectionCollection.GetReferenceProvider">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaSectionCollection.ProvideReference(System.Type)">
      <summary>
      </summary>
      <param name="parentType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaSectionCollection.Add(Nevron.FormulaSheet.NFormulaSection)">
      <summary>
            Adds the specified section
            </summary>
      <param name="section">section to add</param>
      <returns>index of the section in the collection</returns>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaSectionCollection.IndexOf(Nevron.FormulaSheet.NFormulaSection)">
      <summary>
            Determines the index of the section in the collection
            </summary>
      <param name="section">section</param>
      <returns>index of the section or -1 if it is not in the collection</returns>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaSectionCollection.Insert(System.Int32,Nevron.FormulaSheet.NFormulaSection)">
      <summary>
            Inserts a the specified section at the specified index
            </summary>
      <param name="index">index</param>
      <param name="section">section</param>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaSectionCollection.Remove(Nevron.FormulaSheet.NFormulaSection)">
      <summary>
            Removes the specified section
            </summary>
      <param name="section">section to remove</param>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaSectionCollection.Contains(Nevron.FormulaSheet.NFormulaSection)">
      <summary>
            Determines whether the specified section is contained in this collection
            </summary>
      <param name="section">section</param>
      <returns>true if the section is contained in this collection, otherwise false</returns>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaSectionCollection.GetFirstByName(System.String,System.Int32)">
      <summary>
            Gets the first section with the specified name
            </summary>
      <param name="sectionName">section name</param>
      <param name="startIndex">index to start from</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaSectionCollection.GetFirstByType(System.Type,System.Int32)">
      <summary>
            Gets the section with the specified name
            </summary>
      <param name="type">
      </param>
      <param name="startIndex">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaSectionCollection.Sort(System.Collections.IComparer)">
      <summary>
            Sorts the sections in this collection using the specified comparer
            </summary>
      <param name="comparer">
      </param>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaSectionCollection.OnValidate(System.Object)">
      <summary>
      </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaSectionCollection.OnClear">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaSectionCollection.OnClearComplete">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaSectionCollection.OnInsertComplete(System.Int32,System.Object)">
      <summary>
            Overriden to call the OnChanged method
            </summary>
      <param name="index">
      </param>
      <param name="value">
      </param>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaSectionCollection.OnRemoveComplete(System.Int32,System.Object)">
      <summary>
            Overriden to call the OnChanged method
            </summary>
      <param name="index">
      </param>
      <param name="value">
      </param>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaSectionCollection.OnSetComplete(System.Int32,System.Object,System.Object)">
      <summary>
            Overriden to call the OnChanged method
            </summary>
      <param name="index">
      </param>
      <param name="oldobj">
      </param>
      <param name="newobj">
      </param>
    </member>
    <member name="M:Nevron.FormulaSheet.NFormulaSectionCollection.OnChanged">
      <summary>
            Called when the collection items have changed
            </summary>
      <remarks>
            This implementation calls the OnSectionsChanged method of the sheet
            </remarks>
    </member>
    <member name="P:Nevron.FormulaSheet.NFormulaSectionCollection.Sheet">
      <summary>
            Gets a reference to the formula sheet hosting this collection
            </summary>
    </member>
    <member name="T:Nevron.Editors.NStringFormatStyleEditorNoAutomatic">
      <summary>
            Provides facilities for visual editing of NStringFormatStyle objects.
            </summary>
    </member>
    <member name="T:Nevron.Editors.NImageFiltersStyleTypeEditorNoAutomatic">
      <summary>
            Provides facilities for visual editing of NImageFiltersStyle objects.
            </summary>
    </member>
    <member name="T:Nevron.Editors.NFrameStyleTypeEditor">
      <summary>
            Provides facilities for visual editing of NFrameStyle objects.
            </summary>
    </member>
    <member name="M:Nevron.Editors.NFrameStyleTypeEditor.Edit(Nevron.GraphicsCore.NFrameStyle,Nevron.GraphicsCore.NFrameStyle@)">
      <summary>
            Edits the specified style. 
            </summary>
      <param name="frameStyle">
      </param>
      <param name="frameStyleResult">
      </param>
      <returns>
      </returns>
      <remarks>
            If the function returns true then the out parameter holds a valid style.
            </remarks>
    </member>
    <member name="M:Nevron.Editors.NFrameStyleTypeEditor.Edit(Nevron.GraphicsCore.NFrameStyle,System.Boolean,Nevron.GraphicsCore.NFrameStyle@)">
      <summary>
            Edits the specified style. If automatic is set to true the in parameter must be treated as automatic style.
            </summary>
      <param name="frameStyle">
      </param>
      <param name="automaticStyle">
      </param>
      <param name="frameStyleResult">
      </param>
      <returns>
      </returns>
      <remarks>
            If the function returns true then the out parameter holds a valid style.
            </remarks>
    </member>
    <member name="T:Nevron.Editors.NFontStyleTypeEditor">
      <summary>
            Provides facilities for visual editing of NFontStyle objects.
            </summary>
    </member>
    <member name="M:Nevron.Editors.NFontStyleTypeEditor.Edit(Nevron.GraphicsCore.NFontStyle,Nevron.GraphicsCore.NFontStyle@)">
      <summary>
            Edits the specified style. 
            </summary>
      <param name="fontStyle">
      </param>
      <param name="fontStyleResult">
      </param>
      <returns>
      </returns>
      <remarks>
            If the function returns true then the out parameter holds a valid style.
            </remarks>
    </member>
    <member name="M:Nevron.Editors.NFontStyleTypeEditor.Edit(Nevron.GraphicsCore.NFontStyle,System.Boolean,Nevron.GraphicsCore.NFontStyle@)">
      <summary>
            Edits the specified style. If automatic is set to true the in parameter must be treated as automatic style.
            </summary>
      <param name="fontStyle">
      </param>
      <param name="automaticStyle">
      </param>
      <param name="fontStyleResult">
      </param>
      <returns>
      </returns>
      <remarks>
            If the function returns true then the out parameter holds a valid style.
            </remarks>
    </member>
    <member name="T:Nevron.Editors.NImageFrameStyleButton">
      <summary>
            Represents a button, which is used for the editing of a image frame style. Displays a image frame style preview.
            </summary>
    </member>
    <member name="M:Nevron.Editors.NImageFrameStyleButton.EditStyle(Nevron.GraphicsCore.NImageFrameStyle,System.Boolean,Nevron.GraphicsCore.NImageFrameStyle@)">
      <summary>
            Overriden to show the image frame style type editor
            </summary>
      <param name="inStyle">
      </param>
      <param name="automatic">
      </param>
      <param name="outStyle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Editors.NImageFrameStyleButton.CreateDefaultStyle">
      <summary>
            Overriden to create a new image frame style
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.Editors.NAnimationsStyleTypeEditorNoAutomatic">
      <summary>
            Provides facilities for visual editing of NAnimationsStyle objects.
            </summary>
    </member>
    <member name="T:Nevron.Editors.HandleShape">
      <summary>
            Enumerates the currently available handle shapes 
            </summary>
    </member>
    <member name="F:Nevron.Editors.HandleShape.Rectangle">
      <summary>
            Rectangle
            </summary>
    </member>
    <member name="F:Nevron.Editors.HandleShape.RectanglePlus">
      <summary>
            Rectangle with a plus inside
            </summary>
    </member>
    <member name="F:Nevron.Editors.HandleShape.Diamond">
      <summary>
            Diamond
            </summary>
    </member>
    <member name="F:Nevron.Editors.HandleShape.Ellipse">
      <summary>
            Ellipse
            </summary>
    </member>
    <member name="F:Nevron.Editors.HandleShape.EllipsePlus">
      <summary>
            Ellipse with a plus inside
            </summary>
    </member>
    <member name="T:Nevron.Editors.NCreateObjectInstanceForm">
      <summary>
            Summary description for NCreateObjectInstanceForm.
            </summary>
    </member>
    <member name="M:Nevron.Editors.NCreateObjectInstanceForm.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
    </member>
    <member name="T:Nevron.Editors.NDataGridInteractivityStyleColumnStyle">
      <summary>
            Column style, which can be used for the visual editing of 
            interactivity styles inside a DataGrid
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.NStickyObjectWrapper">
      <summary>
            Summary description for NStickyObject.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NWaitingBarRenderer">
      <summary>
            Summary description for NWaitingBarRenderer.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NProgressBarProperties">
      <summary>
            Encapsulates the common NProgressBar properties.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NProgressBarProperties.Copy(Nevron.UI.WinForm.Controls.NProgressBarProperties)">
      <summary>
            Copies fields from the specified NProgressBarProperties object.
            </summary>
      <param name="props">The NProgressBarProperties object to copy from.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NProgressBarProperties.Dispose">
      <summary>
            Disposes all the resources used by the NProgressBarProperties object.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NProgressBarProperties.PropertyChanged">
      <summary>
            Fired when a property has changed.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NProgressBarProperties.Minimum">
      <summary>
            Gets/sets the minimum value of the range.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NProgressBarProperties.Maximum">
      <summary>
            Gets/sets the maximum value of the range.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NProgressBarProperties.Value">
      <summary>
            Gets/sets the current position of the NProgressBar.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NProgressBarProperties.Step">
      <summary>
            Gets/sets the amount with which to increase the position of the NProgressBar due to a call PerformStep() method.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NProgressBarProperties.SegmentStep">
      <summary>
            Gets/sets the width of a single segment(works if NProgressBar.Style == ProgressBarStyle.Segments).
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NProgressBarProperties.Orientation">
      <summary>
            Gets/sets the orientation of the NProgressBar.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NProgressBarProperties.Style">
      <summary>
            Gets/sets the style of the NProgressBar.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NProgressBarProperties.Segments">
      <summary>
            Gets/sets a value indicating whether the NProgressBar will segmented.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NProgressBarProperties.ShowText">
      <summary>
            Gets/sets a value whether the NProgressBar will display text.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NProgressBarProperties.Text">
      <summary>
            Gets/sets the text to be displayed by the NProgressBar.
            If null and ShowText is true the NProgressBar will display the percentage of ist progress.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NPopupNotifyRenderer">
      <summary>
            Summary description for NPopupNotifyRenderer.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.NPopupNotifyRenderer.Palette">
      <summary>
            Gets/sets the current palette to be used by the renderer.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.NPopupNotifyRenderer.Default">
      <summary>
            An instance of the default renderer.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NUIManager">
      <summary>
            Represents a class that manages the global UI settings.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NUIManager.RegisterComponent(System.ComponentModel.IComponent)">
      <summary>
            Register a global component.
            </summary>
      <param name="component">The IComponent to register.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NUIManager.UnregisterComponent(System.ComponentModel.IComponent)">
      <summary>
            Removes a previously registered component.
            </summary>
      <param name="component">The IComponent to unregister.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NUIManager.GetComponents(System.Type)">
      <summary>
            Gets an arraylist populated with all the components that match the specified type.
            </summary>
      <param name="type">The type to search for.</param>
      <returns>The arraylist.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NUIManager.GetActiveControl">
      <summary>
            Gets the currently active control - that is the toplevel control that contains focus.
            </summary>
      <returns>The active control</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NUIManager.ApplyPalette">
      <summary>
            Applies the current palette to the entire application's GUI.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NUIManager.ApplyPalette(System.Windows.Forms.Control)">
      <summary>
            Applies the current global palette starting from the specified top-level control and searching down in its child controls tree.
            </summary>
      <param name="control">The control to update.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NUIManager.ApplyPalette(System.Windows.Forms.Control,Nevron.UI.WinForm.Controls.NPalette)">
      <summary>
            Applies the specified palette starting from the specified top-level control and searching down in its child controls tree.
            </summary>
      <param name="control">The control to update.</param>
      <param name="palette">The NPalette object to use.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NUIManager.ApplyPalette(System.Windows.Forms.Control,System.Boolean)">
      <summary>
            Applies the current global palette starting from the specified top-level control and searching down in its child controls tree.
            </summary>
      <param name="control">The control to update.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NUIManager.ApplyPalette(System.Windows.Forms.Control,Nevron.UI.WinForm.Controls.NPalette,System.Boolean)">
      <summary>
            Applies the specified palette starting from the specified top-level control and searching down in its child controls tree.
            </summary>
      <param name="control">The control to update.</param>
      <param name="palette">The NPalette object to use.</param>
      <param name="updateBackColor">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NUIManager.ApplyPaletteToChildControls(System.Windows.Forms.Control)">
      <summary>
            Applies current palette to all child controls of the specified control, excluding the control itself.
            </summary>
      <param name="parent">The control which children are to be updated.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NUIManager.ApplyPaletteToChildControls(System.Windows.Forms.Control,Nevron.UI.WinForm.Controls.NPalette)">
      <summary>
      </summary>
      <param name="parent">
      </param>
      <param name="palette">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NUIManager.ApplyPaletteToChildControls(System.Windows.Forms.Control,Nevron.UI.WinForm.Controls.NPalette,System.Boolean)">
      <summary>
            Applies the specified palette to all child controls of the specified control, excluding the control itself.
            </summary>
      <param name="parent">The control which children are to be updated.</param>
      <param name="palette">The NPalette object to use.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NUIManager.NotifyInvalidate(System.Boolean)">
      <summary>
            Forces all popup windows on the thread to invalidate themselves.
            </summary>
      <param name="update">True to force immediate control update, false otherwise.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NUIManager.GetMdiMenuTarget(System.Windows.Forms.Form)">
      <summary>
            Gets/sets an instance which will handle menu update from a NMdiFrame control.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NUIManager.RegisterMdiMenuTarget(Nevron.UI.WinForm.Controls.INMdiMenuTarget)">
      <summary>
            Unregisters an INMdiMenuTarget instance. Each time a NMdiChild is maximized it will search for such a target to update its MDI buttons.
            </summary>
      <param name="target">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NUIManager.UnregisterMdiMenuTarget(Nevron.UI.WinForm.Controls.INMdiMenuTarget)">
      <summary>
            Unregisters an INMdiMenuTarget instance.
            </summary>
      <param name="target">
      </param>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NUIManager.Palette">
      <summary>
            Gets/sets the global NPalette object to be used by the NUIManager and Application.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NUIManager.MenuOptions">
      <summary>
            Gets/sets the NGlobalMenuOptions object to be used by NMenuWindow objects.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NUIManager.ApplicationExitted">
      <summary>
            Gets a value indicating whether the Application is about to be shut down.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NUIManager.AllowThemesUnderWindowBlinds">
      <summary>
            Gets/sets a value indicating whether themes are allowed under WindowBlinds.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NUIManager.MainWindow">
      <summary>
            Gets the main application control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NUIManager.ThreadID">
      <summary>
            Gets the current thread identifier.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NUIManager.PopupWindows">
      <summary>
            Gets an Array of all the popup windows that belong to the current thread.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NUIManager.FrameAppearance">
      <summary>
            Gets/sets the global appearance for all INFrameControl instances.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NUIManager.DefaultColorScheme">
      <summary>
            Gets/sets the default color scheme to be used whenever a new palette is initialized.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NUIManager.VirtualScreen">
      <summary>
            Gets the virtual screen 
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NUIManager.SkinFrameAppearance">
      <summary>
            Gets/sets the skinned frame appearance
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NResizeInfo">
      <summary>
            Provides information for a standard resize operation.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NFileLookup">
      <summary>
            Represents a control which may be used to either enter a file name manually ot to look it up using an OpenFileDialog.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NFileLookup.FileSelected">
      <summary>
            Fired when a file has been selected via the embedded button.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFileLookup.FileFilter">
      <summary>
            Gets/sets the filter to be applied when the OpenFileDialog is displayed.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFileLookup.Title">
      <summary>
            Gets/sets the title of the OpenFileDialog.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFileLookup.InitialDirectory">
      <summary>
            Gets/sets the initial directory when browsing for a file.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFileLookup.CheckFileExists">
      <summary>
            Gets/sets the OpenFileDialog's CheckFileExists property.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFileLookup.CheckPathExists">
      <summary>
            Gets/sets the OpenFileDialog's CheckPathExists property.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFileLookup.RestoreDirectory">
      <summary>
            Gets/sets a value indicating whether the OpenFileDialog will restore initial directory when closed.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFileLookup.DisplayIndex">
      <summary>
            Gets/sets the zero-based index of the editor in its parent collection.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NFontListBoxItem">
      <summary>
            Summary description for NFontListBoxItem.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NFontListBoxItem.SampleText">
      <summary>
            Gets/sets the text displayed next to the font name with the appropriate font. If null "Sample text" will be displayed.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NGroupBox">
      <summary>
            Represents a custom group box with predefined border style.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NGroupBox.EnableSkinning">
      <summary>
            Gets/sets a value indicating whether the control will use skin logic.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NGroupBox.Skin">
      <summary>
            Gets/sets the local NSkin instance to be used when painting this control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NGroupBox.CurrentSkin">
      <summary>
            Gets the current skin to be used by this instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NGroupBox.Palette">
      <summary>
            Gets/sets the NPalette used to render the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NGroupBox.PaletteInheritance">
      <summary>
            Gets/sets a value which Palette value will be applied on a higher level Palette change.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NGroupBox.ImageList">
      <summary>
            Gets/sets the ImageList to use for displaying images.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NGroupBox.Style">
      <summary>
            Gets/sets the style of the group box.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NGroupBox.TextOrigin">
      <summary>
            Gets/sets the origin of the text.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NGroupBox.ImageIndex">
      <summary>
            Gets/sets the image index from the imagelist.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.TaskDialogButtons">
      <summary>
            Enumerates the predefined buttons for a NTaskDialog instance.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.TaskDialogButtons.None">
      <summary>
            No predefined buttons.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.TaskDialogButtons.Ok">
      <summary>
            Button with text OK.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.TaskDialogButtons.Cancel">
      <summary>
            Buttons with text Cancel;
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.TaskDialogButtons.Yes">
      <summary>
            Button with text Yes
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.TaskDialogButtons.No">
      <summary>
            Button with text No
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.TaskDialogButtons.Abort">
      <summary>
            Button with text Abort
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.TaskDialogButtons.Retry">
      <summary>
            Button with text Retry
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.TaskDialogButtons.Ignore">
      <summary>
            Button with text Ignore
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.TaskDialogProgressType">
      <summary>
            Specifies the possible progress bar type in a NTaskDialog.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.TaskDialogProgressType.None">
      <summary>
            No progress.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.TaskDialogProgressType.Standard">
      <summary>
            Standard progress bar is displayed.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.TaskDialogProgressType.Marguee">
      <summary>
            Marquee progress is displayed.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.TaskDialogNotification">
      <summary>
            Specifies the possible notifications sent by a NTaskDialog instance.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.TaskDialogNotification.Load">
      <summary>
            After the dialog has been loaded and before displaying it to the user.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.TaskDialogNotification.Closing">
      <summary>
            Occurs when the dialog is about to be closed. Cancelable.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.TaskDialogNotification.Closed">
      <summary>
            Occurs when the dialog has been closed.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.TaskDialogNotification.ButtonClick">
      <summary>
            A push button is clicked.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.TaskDialogNotification.VerificationCheckedChanged">
      <summary>
            The CheckState of the Verification part has changed.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.TaskDialogNotification.TimerTick">
      <summary>
            A timer tick.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTaskDialogEventArgs.Dialog">
      <summary>
            Gets the NTaskDialog instance associated with the event data.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTaskDialogEventArgs.Notification">
      <summary>
            Gets the notification which generated this event.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTaskDialogEventArgs.Form">
      <summary>
            Gets the internally created NForm object.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NColorDialog">
      <summary>
            Summary description for NColorEditorForm.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NColorDialog.Color">
      <summary>
            Gets/sets the Color to be displayed by the editor.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NShadowInfo">
      <summary>
            Provides common information for rendering shadows.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NShadowInfo.CreateShadowBrush(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Rectangle)">
      <summary>
            Creates a Brush depending on the current settings.
            </summary>
      <param name="path">The original path to create shadow for.</param>
      <param name="r">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NShadowInfo.InitializeDefault">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NShadowInfo.ShouldSerializeOffsetX">
      <summary>
            Determines whether the OffsetX member should be serialized by the designer.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NShadowInfo.ShouldSerializeOffsetY">
      <summary>
            Determines whether the OffsetY member should be serialized by the designer.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NShadowInfo.ShouldSerializeStyle">
      <summary>
            Determines whether the Style member should be serialized by the designer.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NShadowInfo.ShouldSerializeBlurColor">
      <summary>
            Determines whether the BlurColor member should be serialized by the designer.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NShadowInfo.DefaultTransparentColor">
      <summary>
            Gets the default value for the TransparentColor member.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NShadowInfo.DefaultOffsetX">
      <summary>
            Gets the default value for the OffsetX member.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NShadowInfo.DefaultOffsetY">
      <summary>
            Gets the default value for the OffsetY member.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NShadowInfo.DefaultShadowStyle">
      <summary>
            Gets the default value for the Style member.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NShadowInfo.OffsetX">
      <summary>
            Gets/sets the x-offset for the shadow.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NShadowInfo.OffsetY">
      <summary>
            Gets/sets the y-offset for the shadow.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NShadowInfo.Style">
      <summary>
            Gets/sets the style of the shadow.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeListTableData.DetachFromTable">
      <summary>
            Detaches from table's events.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeListTableData.AttachToTable">
      <summary>
            Hooks to the table's events and notifications.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeListTableData.PopulateColumns">
      <summary>
            Creates the NTreeListColumn instances which represent the data columns.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeListTableData.PopulateRows">
      <summary>
            Populates all the rows from the table's data view.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeListTableData.GetNodeFromDataRow(System.Data.DataRow)">
      <summary>
            Creates a NTreeListNode instance which represenst a DataRow object.
            </summary>
      <param name="row">The row to create node for.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeListTableData.PopulateDataCore">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListTableData.Table">
      <summary>
            Gets/sets the table containing raw data.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NListBoxCommandContext">
      <summary>
            Summary description for NUndoRedoCommand.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NListBoxCommand">
      <summary>
            Summary description for NListBoxCommand.
            </summary>
    </member>
    <member name="T:Nevron.UI.NThemeFontInfo">
      <summary>
            Summary description for NFontInfo.
            </summary>
    </member>
    <member name="P:Nevron.UI.NThemeFontInfo.Name">
      <summary>
            Gets/sets the name of the font.
            </summary>
    </member>
    <member name="P:Nevron.UI.NThemeFontInfo.Size">
      <summary>
            Gets/sets the size of the font.
            </summary>
    </member>
    <member name="P:Nevron.UI.NThemeFontInfo.Style">
      <summary>
            Gets/sets the size of the font.
            </summary>
    </member>
    <member name="T:Nevron.UI.NRectShape">
      <summary>
            Summary description for NRectShape.
            </summary>
    </member>
    <member name="P:Nevron.UI.NRectShape.Rounding">
      <summary>
            Gets/sets the rounding of the shape.
            </summary>
    </member>
    <member name="P:Nevron.UI.NRectShape.RoundingEdges">
      <summary>
            Gets/sets the edges to be rounded.
            </summary>
    </member>
    <member name="T:Nevron.UI.NTrackbarThumbShape">
      <summary>
            Summary description for NTrackbarThumbShape.
            </summary>
    </member>
    <member name="T:Nevron.UI.NNavigationGlyphShape">
      <summary>
            Summary description for NCommonGlyphShape.
            </summary>
    </member>
    <member name="M:Nevron.UI.NNavigationGlyphShape.ShouldSerializeGlyph">
      <summary>
            Determines whether the Glyph property needs to be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NNavigationGlyphShape.ShouldSerializeDirection">
      <summary>
            Determines whether the Orientation property needs to be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.NNavigationGlyphShape.Glyph">
      <summary>
            Gets/sets the NavigationGlyph to be displayed.
            </summary>
    </member>
    <member name="P:Nevron.UI.NNavigationGlyphShape.Orientation">
      <summary>
            Gets/sets the orientation of the glyph.
            </summary>
    </member>
    <member name="P:Nevron.UI.NNavigationGlyphShape.DefaultGlyph">
      <summary>
            Gets the default value of the Glyph property.
            </summary>
    </member>
    <member name="P:Nevron.UI.NNavigationGlyphShape.DefaultOrientation">
      <summary>
            Gets the default value of the Glyph property.
            </summary>
    </member>
    <member name="T:Nevron.UI.Themes.System.NUxThemeProgressRenderer">
      <summary>
            Summary description for NUxThemeProgressRenderer.
            </summary>
    </member>
    <member name="T:Nevron.UI.Themes.System.NClassicCalculatorRenderer">
      <summary>
            Summary description for NClassicCalculatorRenderer.
            </summary>
    </member>
    <member name="T:Nevron.UI.NThemeClassEntry">
      <summary>
            Summary description for NThemeClassEntry.
            </summary>
    </member>
    <member name="T:Nevron.UI.NStackLayoutEngine">
      <summary>
            Summary description for NStackLayoutEngine.
            </summary>
    </member>
    <member name="T:Nevron.UI.INUIShape">
      <summary>
            Summary description for INUIShape.
            </summary>
    </member>
    <member name="T:Nevron.UI.NPopupAnimationInfo">
      <summary>
            Summary description for NPopupAnimationInfo.
            </summary>
    </member>
    <member name="P:Nevron.UI.NPopupAnimationInfo.Steps">
      <summary>
            Gets/sets the number of steps the animation will pass through.
            </summary>
    </member>
    <member name="P:Nevron.UI.NPopupAnimationInfo.Interval">
      <summary>
            Gets/sets the interval (in milliseconds) among animation steps.
            </summary>
    </member>
    <member name="P:Nevron.UI.NPopupAnimationInfo.FadeIn">
      <summary>
            Determines whether a fade-in animation will be applied when the popup is displayed.
            </summary>
    </member>
    <member name="P:Nevron.UI.NPopupAnimationInfo.FadeOut">
      <summary>
            Determines whether a fade-out animation will be applied when the popup is closed.
            </summary>
    </member>
    <member name="T:Nevron.UI.NRadioButtonElement">
      <summary>
            Summary description for NRadioButtonElement.
            </summary>
    </member>
    <member name="T:Nevron.UI.NCheckBoxElement">
      <summary>
            Summary description for NCheckBoxElement.
            </summary>
    </member>
    <member name="T:Nevron.UI.NPathHelper">
      <summary>
            Summary description for NPathHelper.
            </summary>
    </member>
    <member name="P:Nevron.UI.NColorHelper.ActiveCaptionGradient">
      <summary>
            Gets the end gradient color of an active caption. Supported in Win2000 and later.
            </summary>
    </member>
    <member name="P:Nevron.UI.NColorHelper.InactiveCaptionGradient">
      <summary>
            Gets the end gradient color of an inactive caption. Supported in Win2000 and later.
            </summary>
    </member>
    <member name="T:Nevron.UI.NAnimation">
      <summary>
            Represents an animation effect which contains animation tasks.
            </summary>
    </member>
    <member name="M:Nevron.UI.NAnimation.StartAnimate(Nevron.UI.NAnimationEventArgs)">
      <summary>
            Starts an animation operation using the specified arguments.
            </summary>
      <param name="e">The animation arguments to be used.</param>
    </member>
    <member name="M:Nevron.UI.NAnimation.EndAnimate">
      <summary>
            Ends currently running animation operation.
            </summary>
    </member>
    <member name="P:Nevron.UI.NAnimation.Taks">
      <summary>
            Gets all the animation tasks registered with this animation.
            </summary>
    </member>
    <member name="P:Nevron.UI.NAnimation.Running">
      <summary>
            Gets a value indicating whether the current instance is running.
            </summary>
    </member>
    <member name="P:Nevron.UI.NAnimation.Interval">
      <summary>
            Gets/sets the interval of the animation.
            </summary>
    </member>
    <member name="P:Nevron.UI.NAnimation.Steps">
      <summary>
            Gets/sets the steps of the animation.
            </summary>
    </member>
    <member name="T:Nevron.SmartShapes.NChangePathCommandTypeVerb">
      <summary>
            The NChangePathCommandTypeVerb verb is used for the visual changing of the path command row type
            </summary>
    </member>
    <member name="M:Nevron.SmartShapes.NChangePathCommandTypeVerb.Execute">
      <summary>
            Overriden to prompt the user to select a new path command type 
            and update the row type if the user clicked the OK button
            </summary>
    </member>
    <member name="F:Nevron.SmartShapes.NChangePathCommandTypeVerb.Row">
      <summary>
            Reference to the path command row whose type must be changed
            </summary>
    </member>
    <member name="T:Nevron.SmartShapes.NBezierCurveToRow">
      <summary>
            The NBezierCurveToRow class represents a path command row, 
            which plots a bezier curve from the previous command (X, Y) cells to this row (X, Y) cells.
            The (A, B) cells define the first control point.
            The (C, D) cells define the second control point.
            </summary>
    </member>
    <member name="M:Nevron.SmartShapes.NBezierCurveToRow.Clone">
      <summary>
            Creates an identical copy of this object
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.SmartShapes.NBezierCurveToRow.CreatePathCommand">
      <summary>
            Creates a path command, which represents this path command row type
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.SmartShapes.NBezierCurveToRow.GetControlPoint(System.Int32)">
      <summary>
            Gets the control point at the specified index
            </summary>
      <param name="index">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.SmartShapes.NBezierCurveToRow.SetControlPoint(System.Int32,Nevron.GraphicsCore.NPointF)">
      <summary>
            Sets the control point at the specified index
            </summary>
      <param name="index">
      </param>
      <param name="point">
      </param>
    </member>
    <member name="P:Nevron.SmartShapes.NBezierCurveToRow.A">
      <summary>
            Gets a reference to the A formula cell
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NBezierCurveToRow.B">
      <summary>
            Gets a reference to the B formula cell
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NBezierCurveToRow.C">
      <summary>
            Gets a reference to the A formula cell
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NBezierCurveToRow.D">
      <summary>
            Gets a reference to the B formula cell
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NBezierCurveToRow.Type">
      <summary>
            Overriden to return BezierCurveTo
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NBezierCurveToRow.ControlsCount">
      <summary>
            Overriden to return 2
            </summary>
    </member>
    <member name="T:Nevron.SmartShapes.NSmartShapeDocument">
      <summary>
            The NSmartShapeDocument class is used for the serialization of smart shapes
            </summary>
    </member>
    <member name="M:Nevron.SmartShapes.NSmartShapeDocument.UpdateReferences(Nevron.INReferenceProvider)">
      <summary>
      </summary>
      <param name="provider">
      </param>
    </member>
    <member name="M:Nevron.SmartShapes.NSmartShapeDocument.CreateNonSerializedObjects">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.SmartShapes.NSmartShapeDocument.GetReferenceProvider">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.SmartShapes.NSmartShapeDocument.Shape">
      <summary>
            Gets/sets the shape serialized with the document
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NLightingImageFilter">
      <summary>
            When present in a ImageFilters collection the NLightingImageFilter class instructs 
            the component to apply a lighting effect on the image. This effect is 
            achieved by creating a bump based on the original image alpha values and then 
            lighting calculations are performed for each pixel in the image.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NLightingImageFilter.Position">
      <summary>
            The Position of the light source.
            </summary>
      <remarks>
            A Position of (0, 0, 1) translates to the center of the image. Positive values for the x coordinate move the light to the right of the image. Positive values for the y coordinate move the light to the bottom of the image.
            </remarks>
    </member>
    <member name="P:Nevron.GraphicsCore.NLightingImageFilter.LightSourceType">
      <summary>
            The type of the light source.
            </summary>
      <remarks>
            When you use LightSourceType.Directional the lighting effect emulates light that is infinitely far from the object (like the Sun). In this case the Positional vector defines the direction where the light rays come from. <br>When the light source is LightSourceType.Positional the lighting effect emulates the light produces by a bulp lit on the coordinates defined by the Position vector.</br></remarks>
    </member>
    <member name="P:Nevron.GraphicsCore.NLightingImageFilter.DiffuseColor">
      <summary>
            The diffuse color of the light source.
            </summary>
      <remarks>
            The default DiffuseColor is DarkGray.
            </remarks>
    </member>
    <member name="P:Nevron.GraphicsCore.NLightingImageFilter.SpecularColor">
      <summary>
            The specular color of the light source.
            </summary>
      <remarks>
            The default SpecularColor is White.
            </remarks>
    </member>
    <member name="P:Nevron.GraphicsCore.NLightingImageFilter.BevelDepth">
      <summary>
            The size of the image bevel in pixels.
            </summary>
      <remarks>
            Defines the size of the convolution to apply in order to create the bump map. It is not recommended to set values higher than 10 for this property.
            </remarks>
    </member>
    <member name="P:Nevron.GraphicsCore.NLightingImageFilter.SurfaceScale">
      <summary>
            The scale of the surface. 
            </summary>
      <remarks>
            Takes effect only when using positional lighting. By default set to 1.
            </remarks>
    </member>
    <member name="P:Nevron.GraphicsCore.NLightingImageFilter.Shininess">
      <summary>
            The Shininess of the material used to cover the surface. 
            </summary>
      <remarks>
            Higher values for this property result in smaller spot light effect. By default set to 10.
            </remarks>
    </member>
    <member name="M:Nevron.GraphicsCore.NMaterialStyle.GetHashCode">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NMaterialStyle.SetAmbientDiffuse(Nevron.GraphicsCore.NArgbColorValue)">
      <summary>
            Sets the ambient and diffuse colors of this material style to the specified color
            </summary>
      <param name="color">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NMaterialStyle.IsTransparent">
      <summary>
            Returns true if this
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NMaterialStyle.Equals(System.Object)">
      <summary>
            Tests whether the specified object is a NMaterialStyle structure and is equivalent to this NMaterialStyle structure.
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NMaterialStyle.ToString">
      <summary>
            Returns the string representation of this object
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NMaterialStyle.FromString(System.String)">
      <summary>
            Creates a new NMaterialStyle object based on it's string representation
            </summary>
      <param name="str">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NMaterialStyle.Diffuse">
      <summary>
            The diffuse color of this material style.
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="P:Nevron.GraphicsCore.NMaterialStyle.Ambient">
      <summary>
            The ambient color of the NFillStyle.
            </summary>
      <remarks>
            The ambient color of the material attached to the fill effect. Note that the 
            SetSolidColor function will always synchronize the value of the Ambient color 
            with the Diffuse color of the material.
            </remarks>
    </member>
    <member name="P:Nevron.GraphicsCore.NMaterialStyle.Specular">
      <summary>
            The specular color of the NFillStyle.
            </summary>
      <remarks>
            By default the specular color is set to White. This ensures that objects will 
            appear brighter when the angle of the light from a particular light source and 
            the normal vector of the surface decreases (or drops to zero). If you want to reduce 
            this effect for a particular scene element you may consider changing this property.
            </remarks>
    </member>
    <member name="P:Nevron.GraphicsCore.NMaterialStyle.Emissive">
      <summary>
            The emissive color of the NFillStyle.
            </summary>
      <remarks>
            This property specifies the diffuse light the object emits as if it was a light 
            source also. You'll rarely need to modify this property, but it can be particularly 
            useful for darks scenes where you want to highlight certain objects.
            </remarks>
    </member>
    <member name="P:Nevron.GraphicsCore.NMaterialStyle.Shininess">
      <summary>
            The shininess of the NFillStyle.
            </summary>
      <remarks>
            This property controls how sharp the specular effects are, because the specular 
            light source contribution is the product of the material specular reflectance, 
            the light's specular intensity, and the dot product of the normalized vertex-to-eye 
            and vertex-to-light vectors, raised to the power of the shininess of the material.
            </remarks>
    </member>
    <member name="T:Nevron.GraphicsCore.NHatchFillStyle">
      <summary>
            Represents a hatch filling.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NHatchFillStyle.Invert">
      <summary>
            Returns the inverted fill style
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NHatchFillStyle.GetHashCode">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NHatchFillStyle.Init(System.Drawing.Drawing2D.HatchStyle,Nevron.GraphicsCore.NColor,Nevron.GraphicsCore.NColor)">
      <summary>
            Use this function . Note that this function will also 
            change the current Mapping.
            </summary>
      <param name="style">The type of the pattern from the HatchStyle enumeration.</param>
      <param name="foregroundColor">The foreground color of the pattern</param>
      <param name="backgroundColor">The background color of the pattern</param>
      <remarks>
            Use this function if you want to modify the properties of the NHatchFillStyle 
            with a single function call. This is the recommended approach if you modify more than
            one property at a time.
            </remarks>
      <example>
            The following example applies an image to the left chart wall:
            <code lang="VB">
            Dim chart As NChart = CType((m_ChartControl.Charts(0)), NChart)
            Dim hatchFillStyle As New NHatchFillStyle
            hatchFillStyle.Init(HatchStyle.DiagonalBrick, Color.White, Color.Black)
            chart.Wall(ChartWallType.Left).FillStyle = hatchFillStyle
            </code><code>
            NChart chart = (NChart)(m_ChartControl.Charts[0]);
            NHatchFillStyle hatchFillStyle = new NHatchFillStyle();
            hatchFillStyle.Init(HatchStyle.DiagonalBrick, Color.White, Color.Black);
            chart.Wall(ChartWallType.Left).FillStyle = hatchFillStyle;
            </code></example>
    </member>
    <member name="M:Nevron.GraphicsCore.NHatchFillStyle.SetTransparencyPercent(System.Single)">
      <summary>
            Sets the transparency percent of the diffuse and ambient material colors.
            </summary>
      <param name="percent">
      </param>
      <remarks>
            Transparency is discarded for the background object fill style. Note that transparent objects slow down the rendering.
            </remarks>
    </member>
    <member name="M:Nevron.GraphicsCore.NHatchFillStyle.Equals(System.Object)">
      <summary>
            Returns true if the objects are equal
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NHatchFillStyle.GetDescription">
      <summary>
            Returns a short description of this NHatchFillStyle object.
            </summary>
      <remarks>
            The default implementation returns a string containing the hatch style name.
            </remarks>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NHatchFillStyle.IsTransparent">
      <summary>
            Returns true if both the Foreground or Background colors of the hatch style are transparent.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NHatchFillStyle.IsTranslucent">
      <summary>
            Returns true if either the Foreground or Background colors of the hatch style are translucent.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NHatchFillStyle.GetPrimaryColor">
      <summary>
            Returns the primary color of this fill style.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NHatchFillStyle.GetBestSize">
      <summary>
            Returns the best visualization size for this fill style.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NHatchFillStyle.Style">
      <summary>
            The hatch style.
            </summary>
      <remarks>
            Nevron Chart for .NET supports 48 hatch types which you may be familiar with if 
            you worked with the Excel built-in chart. Hatch (pattern) fillings are internally rendered as 
            textures. If you change multiple properties it is recommended to use the Init function
            of NHatchFillStyle class in order to save function calls.
            </remarks>
    </member>
    <member name="P:Nevron.GraphicsCore.NHatchFillStyle.ForegroundColor">
      <summary>
            The foreground color of the gradient. 
            </summary>
      <remarks>
            The default value of this property is Color.White.
            </remarks>
    </member>
    <member name="P:Nevron.GraphicsCore.NHatchFillStyle.BackgroundColor">
      <summary>
            The background color of the gradient. 
            </summary>
      <remarks>
            The default value is of this property is Color.Black.
            </remarks>
    </member>
    <member name="P:Nevron.GraphicsCore.NHatchFillStyle.FillStyleType">
      <summary>
            Gets the fill style type.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NHatchFillStyle.Intensity">
      <summary>
            Returns the intensity of this fill style in the range [0, 255].
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NDisplayGraphicsUnit">
      <summary>
            Represents the display graphics measurement unit
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NDisplayGraphicsUnit.ConvertXValueToPixels(Nevron.GraphicsCore.NMeasurementUnitConverter)">
      <summary>
            Converts this measurement unit to its equivalent in pixels along the X direction.
            </summary>
      <param name="converter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NDisplayGraphicsUnit.ConvertYValueToPixels(Nevron.GraphicsCore.NMeasurementUnitConverter)">
      <summary>
            Converts this measurement unit to its equivalent in pixels along the Y direction.
            </summary>
      <param name="converter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NDisplayGraphicsUnit.Abbreviation">
      <summary>
            The abbreviation of this measurement unit.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NDisplayGraphicsUnit.GraphicsUnit">
      <summary>
            Gets the english unit of the object.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NDisplayGraphicsUnit.UnitType">
      <summary>
            The measurement unit type.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NDisplayGraphicsUnit.ScaleToInch">
      <summary>
            The scale to inch of this measurement unit.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NMileEnglishUnit">
      <summary>
            Represents the english mile measurement unit.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NMileEnglishUnit.ConvertXValueToPixels(Nevron.GraphicsCore.NMeasurementUnitConverter)">
      <summary>
            Converts this measurement unit to its equivalent in pixels along the X direction.
            </summary>
      <param name="converter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NMileEnglishUnit.ConvertYValueToPixels(Nevron.GraphicsCore.NMeasurementUnitConverter)">
      <summary>
            Converts this measurement unit to its equivalent in pixels along the Y direction.
            </summary>
      <param name="converter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NMileEnglishUnit.Abbreviation">
      <summary>
            The abbreviation of this measurement unit.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NMileEnglishUnit.EnglishUnit">
      <summary>
            Gets the english unit of the object.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NMileEnglishUnit.ScaleToInch">
      <summary>
            The scale to inch of this measurement unit.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NInchEnglishUnit">
      <summary>
            Represents the english inch measurement unit.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NInchEnglishUnit.ConvertXValueToPixels(Nevron.GraphicsCore.NMeasurementUnitConverter)">
      <summary>
            Converts this measurement unit to its equivalent in pixels along the X direction.
            </summary>
      <param name="converter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NInchEnglishUnit.ConvertYValueToPixels(Nevron.GraphicsCore.NMeasurementUnitConverter)">
      <summary>
            Converts this measurement unit to its equivalent in pixels along the Y direction.
            </summary>
      <param name="converter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NInchEnglishUnit.Abbreviation">
      <summary>
            The abbreviation of this measurement unit.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NInchEnglishUnit.EnglishUnit">
      <summary>
            Gets the english unit of the object.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NInchEnglishUnit.ScaleToInch">
      <summary>
            The scale to inch of this measurement unit.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NRange1DL">
      <summary>
            Represents a point, defined as an ordered pair of lengths (X, Y), which control the point coordinates in two dimensional space.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NRange1DL.Equals(System.Object)">
      <summary>
            Determines whether the ranges are equal.
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRange1DL.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRange1DL.ToString">
      <summary>
            Obtains the string representation of this point.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRange1DL.Parse(System.String@,Nevron.GraphicsCore.NMeasurementSystemManager)">
      <summary>
            Converts the string representation of a point to its NRange1DL equivalent.
            </summary>
      <param name="s">
      </param>
      <param name="measurementSystemManager">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRange1DL.CompareTo(System.Object)">
      <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="F:Nevron.GraphicsCore.NRange1DL.Begin">
      <summary>
            The X coordinate of the point in NLength format.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NRange1DL.End">
      <summary>
            The Y coordinate of the point in NLength format.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NRange1DL.Empty">
      <summary>
            The empty (0, 0) point.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.INMouseCapture">
      <summary>
            Implemented by objects which can capture the mouse
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.INMouseCapture.Capture">
      <summary>
            Captures/releases the mouse
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.INEventProcessor">
      <summary>
            Implemented by objects which can process mouse and keyboard events
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NRasterImage">
      <summary>
            The NRasterImage class represents a raster image
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NRasterImage.ToBase64String(Nevron.GraphicsCore.INRasterImageFormat)">
      <summary>
            Returns the base64 representation of the specified image.
            </summary>
      <param name="rasterImageFormat">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRasterImage.GetBitmapFromBase64String(System.String)">
      <summary>
            Obtains a bitmap from its base64 representation
            </summary>
      <param name="base64EncodedImage">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRasterImage.GetBase64StringFromBitmap(System.Drawing.Bitmap)">
      <summary>
            Obtains the base64 representation of a bitmap
            </summary>
      <param name="bitmap">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRasterImage.FromBase64String(System.String)">
      <summary>
            Returns the image contained in base64 representation.
            </summary>
      <param name="base64EncodedImage">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRasterImage.Dispose">
      <summary>
            Releases all resources used by the object
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NRasterImage.SaveToFile(System.String,Nevron.GraphicsCore.INFileFormat)">
      <summary>
            Saves the image to the file with the specified raster image format.
            </summary>
      <param name="fileName">
      </param>
      <param name="fileFormat">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRasterImage.SaveToStream(System.IO.Stream,Nevron.GraphicsCore.INFileFormat)">
      <summary>
            Obtains an image form the image renderer and saves it to the specified stream.
            </summary>
      <param name="stream">
      </param>
      <param name="fileFormat">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRasterImage.CopyToClipboard">
      <summary>
            Places a bitmap generated from the image renderer on the clipboard.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NRasterImage.Detach">
      <summary>
            Detaches this raster image from the underlying bitmap.
            </summary>
      <returns>Returns the bitmap image</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRasterImage.ConvertToGrayScale">
      <summary>
            Converts the image to grayscale.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NRasterImage.Size">
      <summary>
            Returns the size of the image in pixels.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NRasterImage.Bitmap">
      <summary>
            Gets/sets the represented image
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NSwfImageFormat">
      <summary>
            Represents the SWF (Adobe Flash) image format.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NSwfImageFormat.MimeType">
      <summary>
            Mime type for SWF files.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NSwfImageFormat.GetMimeType">
      <summary>
            Returns the mime type of the image.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NSwfImageFormat.GetExtension">
      <summary>
            Returns the file extension of the image.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NSwfImageFormat.GetName">
      <summary>
            Obtains the name of this image format.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NSwfImageFormat.HtmlTextWriterTag">
      <summary>
            The HTML tag corresponding to this image.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NSwfImageFormat.EmbeddedImagesFormat">
      <summary>
            Gets or sets the image format of the images embedded in this flash document.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NSwfImageFormat.FPS">
      <summary>
            Determines the number of frames per second played by the flash movie. More frames lead to
            smoother animations but also a larger and computationally heavier flash file. The default
            is 24.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Shapes.NPentagramShape">
      <summary>
            Summary description for NPentagramShape.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Shapes.NGramShape">
      <summary>
            Summary description for NGramShape.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Shapes.NEllipseShape">
      <summary>
            Ellipse shape.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Shapes.NPiePathSegment">
      <summary>
            Summary description for NPiePathSegment.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NPolygonF">
      <summary>
            The NPolygonF class represents a polygon in 2D space defined by it's vertices
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NPolygonF.Translate(System.Single,System.Single)">
      <summary>
            Translates the primitive with the specified amounts
            </summary>
      <param name="dx">
      </param>
      <param name="dy">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NPolygonF.Translate(Nevron.GraphicsCore.NPointF)">
      <summary>
            Translates the primitive with the specified offset
            </summary>
      <param name="offset">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NPolygonF.AddToGraphicsPath(System.Drawing.Drawing2D.GraphicsPath)">
      <summary>
            Appends the primitive to the specified graphics path
            </summary>
      <param name="path">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NPolygonF.ContainsOnOutline(Nevron.GraphicsCore.NPointF,System.Single)">
      <summary>
            Determines whether the outline of the polygon contains the specified point
            </summary>
      <param name="point">
      </param>
      <param name="weight">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NPolygonF.ContainsOnOutline(Nevron.GraphicsCore.NPointF,System.Drawing.Pen)">
      <summary>
            Determines whether the outline of the polygon contains the specified point
            </summary>
      <param name="point">
      </param>
      <param name="pen">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NPolygonF.Contains(Nevron.GraphicsCore.NPointF)">
      <summary>
            Determines whether the primitive interior contains the specified point
            </summary>
      <remarks>
            This implementation uses an Alternate fill mode
            </remarks>
      <param name="point">point with which to test</param>
      <returns>true if the interior contains the point, oterwise false</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NPolygonF.Contains(Nevron.GraphicsCore.NPointF,System.Drawing.Drawing2D.FillMode)">
      <summary>
            Determines whether the primitive interior contains the specified point
            </summary>
      <param name="point">point with which to test</param>
      <param name="fillMode">defines the way in which the polygon interior is filled</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NPolygonF.InvalidateCache">
      <summary>
            Invalidates any cached information about the polygon.
            </summary>
      <remarks>
            The user is responsible for calling this method, if the polygon points have been manually changed.
            </remarks>
    </member>
    <member name="M:Nevron.GraphicsCore.NPolygonF.IntersectsWith(Nevron.GraphicsCore.NLineSegmentF)">
      <summary>
            Determines whether this polygon intersects with the specified line.
            </summary>
      <param name="line">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NPolygonF.AreaIntersectsWith(Nevron.GraphicsCore.NRectangleF)">
      <summary>
            Determines whether this polygon area intersects with the specified rectangle area.
            </summary>
      <param name="rect">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NPolygonF.OutlineIntersectsWith(Nevron.GraphicsCore.NRectangleF)">
      <summary>
            /Determines whether this polygon outline intersects with the specified rectangle.
            </summary>
      <param name="rect">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NPolygonF.IntersectsWith(Nevron.GraphicsCore.NPolygonF)">
      <summary>
            Determines whether this polygon intersects with the specified convex polygon.
            </summary>
      <param name="convexPolygon">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NPolygonF.IntersectWith(Nevron.GraphicsCore.NLineSegmentF,Nevron.GraphicsCore.NPointFList@)">
      <summary>
            Checks if this polygon intersect with the given line segment and returns
            the intersection points if it does.
            </summary>
      <param name="line">Line segment with which to intersect.</param>
      <param name="intersectionPoints">Resulting intersection points (valid only if the method returned true.</param>
      <returns>True if this polygon intersects with the line segment, otherwise false.</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NPolygonF.IntersectWith(Nevron.GraphicsCore.NPolygonF,Nevron.GraphicsCore.NPolygonF@)">
      <summary>
            Finds the intersection polygon between this polygon and the specified convex polygon.
            </summary>
      <param name="convexPolygon">The convex polygon to intersect with.</param>
      <param name="intersection">Resulting intersection polygon.</param>
      <returns>True if this polygon intersects with the specified convex polygon, otherwise false.</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NPolygonF.ScanlineCrossingCounts(Nevron.GraphicsCore.NPointF,System.Int32@,System.Int32@)">
      <summary>
            Obtains the number of clockwise and counterwise crossings of a scanline with the polygon segments.
            </summary>
      <param name="point">The point the scanline passes through,</param>
      <param name="clockwise">Resulting number of clockwise intersections.</param>
      <param name="counterwise">Resulting number of counterclockwise intersections.</param>
    </member>
    <member name="M:Nevron.GraphicsCore.NPolygonF.GetConvexHull">
      <summary>
            Computes the convex hull of the polygon using the Graham Scan algorithm. Returns the points
            forming the convex hull in counterclockwise order.
            </summary>
      <remarks>
            The complexity of the algorithm is O(n * log2(n)).
            </remarks>
      <returns>The points forming the convex hull in counterclockwise order.</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NPolygonF.GetMinimumEnclosingCircle">
      <summary>
            Computes the minimal enclosing circle (a.k.a the bomb problem) using the Welzl's algorithm.
            </summary>
      <remarks>
            The complexity of the algorithm is O(n).
            </remarks>
      <returns>The minimal enclosing circle.</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NPolygonF.GetLongestLine">
      <summary>
            Gets the longest horizontal inner line in the polygon.
            </summary>
      <remarks>
            The complexity of the algorithm is O(n * log2(n)).
            </remarks>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NPolygonF.GetLongestLine(System.Single,System.Single,Nevron.GraphicsCore.NLineSegmentF@)">
      <summary>
            Gets the longest horizontal inner line in the polygon that is at least at the
            specified distance from all sides. Returns false if no such line exists.
            </summary>
      <param name="step">The step with which the scan line jumps down.</param>
      <param name="minDistanceToSides">The minimum distance from the found line's center to the sides of the polygon.</param>
      <param name="longestLine">The resulting longest inner line.</param>
      <remarks>
            The complexity of the algorithm is O(n * log2(n)).
            </remarks>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NPolygonF.Simplify(System.Single)">
      <summary>
            Returns a simplified version of this polygon using an improved version
            Douglas and Peucker algorithm (uses path hulls) which improves the worst case running
            time from O(n^2) to O(n * log2(n)). Topology is preserved.
            </summary>
      <param name="tolerance">The tolerance (if all points from i to j are within tolerance
            with the line segment i-j then the chain i, i+1, ..., j is simplified to i, j).</param>
      <returns>Returns a simplified version of this polygon.</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NPolygonF.FromRect(Nevron.GraphicsCore.NRectangleF)">
      <summary>
            Creates a polygon from the given rectangle.
            </summary>
      <param name="rect">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NPolygonF.Bounds">
      <summary>
            Gets the minimal enclosing rectangle
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NPolygonF.BoundsRange">
      <summary>
            Gets the minimal enclosing 2D range
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NPolygonF.IsFlat">
      <summary>
            Determines whether this is a flat primitive.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NPolygonF.Vertices">
      <summary>
            Gets/sets the polygon vertices
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NPolygonF.IsConvex">
      <summary>
            Determines whether this polygon is convex
            </summary>
      <remarks>
            A polygon is convex if the perp dot product of each subsequent pair of edge vectors has the same sign.
            </remarks>
    </member>
    <member name="P:Nevron.GraphicsCore.NPolygonF.Area">
      <summary>
            Gets the area of the polygon.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NPolygonF.AreaSigned">
      <summary>
            Gets the signed area of the polygon.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NPolygonF.Barycenter">
      <summary>
            Gets the barycenter of the polygon.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NPolygonF.Centroid">
      <summary>
            Gets the centroid (that is the center of mass) of the polygon.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NArcToCommand">
      <summary>
            The NArcToCommand class represents a command, 
            which draws an arc from the previus command location to this command location
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NArcToCommand.Clone">
      <summary>
            Overriden to create a cloned move to command
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NArcToCommand.AddToGraphicsPath(System.Drawing.Drawing2D.GraphicsPath,Nevron.GraphicsCore.NPathCommand)">
      <summary>
            Overriden to draw a circular arc from the previous command location to this command location
            </summary>
      <param name="path">
      </param>
      <param name="prevCommand">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NArcToCommand.CreatePrimitive(Nevron.GraphicsCore.NPathCommand)">
      <summary>
            Overriden to return an instance of the NCircleSegmentF primitive
            </summary>
      <param name="prevCommand">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NArcToCommand.Type">
      <summary>
            Overriden to return ArcTo
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NArcToCommand.Bow">
      <summary>
            Gets/sets the bow of the arc
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NVector4DF">
      <summary>
            The NVector4DF struct represents a 4D vector with float coordinates
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NVector4DF.Equals(System.Object)">
      <summary>
            Returns true if the objects are equal.
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NVector4DF.GetHashCode">
      <summary>
            Returns the hash code of this instance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="F:Nevron.GraphicsCore.NVector4DF.X">
      <summary>
            x coordinate
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NVector4DF.Y">
      <summary>
            y coordinate
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NVector4DF.Z">
      <summary>
            z coordinate
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NVector4DF.W">
      <summary>
            normalization
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NFontStyleSizeConverter">
      <summary>
            This class represents a converter, which changes the font size of the processed NFontStyle objects.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NFontStyleConverter">
      <summary>
            Serves as a base class for all converters, which can convert font styles.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NFontStyleConverter.Convert(System.Object)">
      <summary>
            Must override to convert the object.
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NFontStyleConverter.CanConvert(System.Type)">
      <summary>
            Determines whether the converter can convert objects of the specified type 
            </summary>
      <param name="type">object type</param>
      <returns>true if objects of this type can be converted, otherwise false</returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NFontStyleConverter.Converts">
      <summary>
            Returns an array of types converted by this object.
            </summary>
      <remarks>
            This implementation will return all known types of font styles.
            </remarks>
    </member>
    <member name="M:Nevron.GraphicsCore.NFontStyleSizeConverter.Convert(System.Object)">
      <summary>
            Converts the font size of a text style object.
            </summary>
      <param name="obj">the object to be converted</param>
      <returns>returns the converted object</returns>
    </member>
    <member name="T:Nevron.GraphicsCore.NFillStyleColorToHatchConverter">
      <summary>
            The NFillStyleColorToHatchConverter class represents a converter, which converts a color fill style to a hatch fill style
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NFillStyleColorToHatchConverter.Convert(System.Object)">
      <summary>
            Overriden to convert a fill style to gray scale
            </summary>
      <remarks>
            Color fill styles are converted to hatch fill styles. Non color fill styles 
            are converted to their gray scale equivalent.
            </remarks>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NFillStyleColorToHatchConverter.ColorToHatchMode">
      <summary>
            Controls how the converter translates colors to hatch styles
            </summary>
    </member>
    <member name="T:Nevron.Editors.NValueFormatterTypeEditor">
      <summary>
            Provides facilities for visual editing of NValueFormatter objects.
            </summary>
    </member>
    <member name="M:Nevron.Editors.NValueFormatterTypeEditor.Edit(Nevron.Dom.NValueFormatter,Nevron.Dom.NValueFormatter@)">
      <summary>
            Edits the specified value formatter.
            </summary>
      <param name="valueFormatter">
      </param>
      <param name="valueFormatterResult">
      </param>
      <returns>
            If the function returns true then the out parameter holds a 
            valid value formatter.
            </returns>
    </member>
    <member name="T:Nevron.Editors.NStylePreviewUC">
      <summary>
            Summary description for NStylePreviewUC.
            </summary>
    </member>
    <member name="M:Nevron.Editors.NStylePreviewUC.Dispose(System.Boolean)">
      <summary> 
            Clean up any resources being used.
            </summary>
    </member>
    <member name="P:Nevron.Editors.NStylePreviewUC.Style">
      <summary>
            Controls the background style of the preview.
            </summary>
    </member>
    <member name="T:Nevron.Editors.NFontStyleTypeEditorNoAutomatic">
      <summary>
            Provides facilities for visual editing of NFontStyle objects.
            </summary>
    </member>
    <member name="T:Nevron.Editors.NSmartShapeEditorUC">
      <summary>
            The NSmartShapeEditorUC is a user control, which can be used 
            for the visual editing of a smart shape.
            </summary>
    </member>
    <member name="M:Nevron.Editors.NSmartShapeEditorUC.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
    </member>
    <member name="P:Nevron.Editors.NSmartShapeEditorUC.Shape">
      <summary>
            Gets/sets the shape edited by the editor
            </summary>
    </member>
    <member name="P:Nevron.Editors.NSmartShapeEditorUC.PredefinedShapes">
      <summary>
            Gets/sets the shapes categories, from which the user can load a predefined shape
            </summary>
    </member>
    <member name="T:Nevron.Editors.NNodePropertyGridEditorUC">
      <summary>
            Summary description for NNodePropertyGridEditorUC.
            </summary>
    </member>
    <member name="M:Nevron.Editors.NNodePropertyGridEditorUC.Dispose(System.Boolean)">
      <summary> 
            Clean up any resources being used.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.NStickyObjectManager">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.NStickyObjectManager.BeginTrack(Nevron.UI.WinForm.INStickyObjectWrapper[],Nevron.UI.WinForm.StickHint)">
      <summary>
            Informs the manager to begin track operation.
            </summary>
      <param name="objects">Array of INStickyObjectWrapper instances which are to be hit-tested.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.NStickyObjectManager.EndTrack">
      <summary>
            Informs the manager that the Form moving has ended.
            Always call this method after the OnBeginFormMove one in order previous tracking to be ended.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.NStickyObjectManager.GetBounds(System.Object,System.Drawing.Rectangle)">
      <summary>
            Gets the bounds (in screen coordinates) which eventually might be sticked to some Form's edge.
            </summary>
      <param name="proposedBounds">The proposed bounds.</param>
      <returns>The newly calculated bounds. May equal the proposed one.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.NStickyObjectManager.GetBoundsCore(System.Drawing.Rectangle)">
      <summary>
            Performs the core hit-test logic.
            </summary>
      <param name="proposed">The proposed bounds.</param>
      <returns>The newly calculated bounds. May equal the proposed one.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.NStickyObjectManager.GetStickyOptions(Nevron.UI.WinForm.INStickyObjectWrapper)">
      <summary>
            Gets the NStickyOptions instance associated with the specified INStickyObjectWrapper.
            If no explicit options are provided the default ones are used.
            </summary>
      <param name="wrapper">The specified INStickyObjectWrapper instance.</param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.WinForm.NStickyObjectManager.StickedEdges">
      <summary>
            Gets the edges to which the proposed rectangle is sticked.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.NStickyObjectManager.ModifiedEdges">
      <summary>
            Gets the modified edges of the proposed bounds.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.NStickyObjectManager.StickHint">
      <summary>
            Gets the current hint used to calculate the sticked bounds.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.NStickyObjectManager.StickedSize">
      <summary>
            Gets the last sticked edges.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.NStickyObjectManager.Tracking">
      <summary>
            Gets a value whether the manager is currently tracking sticky Forms.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.NStickyObjectManager.DefaultStickyOptions">
      <summary>
            Gets/sets the default sticky options to be used.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NTrackBar">
      <summary>
            Represents a custom control which mimics the standard .NET TrackBar Control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTrackBar.EnableSkinning">
      <summary>
            Gets/sets a value indicating whether the control will use skin logic.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTrackBar.Skin">
      <summary>
            Gets/sets the local NSkin instance to be used when painting this control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTrackBar.CurrentSkin">
      <summary>
            Gets the current skin to be used by this instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTrackBar.DefaultRenderer">
      <summary>
            Retrieves the default renderer used to paint the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTrackBar.TrackBarElement">
      <summary>
            Gets the generic NTrackBar UI element which is hosted on this control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTrackBar.Renderer">
      <summary>
            Gets/sets the renderer which will be used to paint the control.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NRichTextBox">
      <summary>
            Represents a standard RichTextBox with extended border support and context sensitive menu.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRichTextBox.EnableSkinning">
      <summary>
            Gets/sets a value indicating whether the control will use skin logic.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRichTextBox.Skin">
      <summary>
            Gets/sets the local NSkin instance to be used when painting this control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRichTextBox.CurrentSkin">
      <summary>
            Gets the current skin to be used by this instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRichTextBox.ScrollBarRenderer">
      <summary>
            Gets/sets the renderer which handles scrollbar painting.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRichTextBox.UseCustomScrollBars">
      <summary>
            Determines whether to use custom scrollbars or use the default windows ones (better performance).
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRichTextBox.ClientMouse">
      <summary>
            Gets the current mouse position in client coordinates.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRichTextBox.Renderer">
      <summary>
            Gets/sets the renderer for the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRichTextBox.Palette">
      <summary>
            Gets/sets the NPalette used to render the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRichTextBox.PaletteInheritance">
      <summary>
            Gets/sets a value which Palette value will be applied on a higher level Palette change.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRichTextBox.Border">
      <summary>
            Gets the NControlBorder object that manages the border around the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRichTextBox.BorderWidth">
      <summary>
            Gets the preffered width of the border.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRichTextBox.IsBorderHot">
      <summary>
            Gets a value indicating whether the border should be drawn in its default state (works only if the border is interactive).
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRichTextBox.DefaultBorderStyle">
      <summary>
            Gets the default border style for the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRichTextBox.DefaultBaseBorderColor">
      <summary>
            Gets the default base color to use when drawing 3D borders.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NSkinImageShape.ImageIndex">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NSkinImageShape.ImageList">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NRotator">
      <summary>
            Represents a rotator control which swaps frames for a certian amount of time.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NRotator.Start">
      <summary>
            Starts rotating frames.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NRotator.Stop">
      <summary>
            Stops previously started rotating operation.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NRotator.Reset">
      <summary>
            Resets the rotator to its infinite state.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NRotator.SetFrameIntoView(System.Int32)">
      <summary>
            Sets the frame at the specified index as the currently displayed one.
            </summary>
      <param name="index">
      </param>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NRotator.FrameChanging">
      <summary>
            Notifies that the current frame is about to be changed. Cancelable.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NRotator.FrameChanged">
      <summary>
            Notifies that the current frame has changed.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NRotator.RotationStarted">
      <summary>
            Notifies that the rotator started working.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NRotator.RotationEnded">
      <summary>
            Notifies that the rotator ended working.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRotator.FrameBounds">
      <summary>
            Gets the rectangular area where frames are displayed.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRotator.Frames">
      <summary>
            Gets the collection of the frames.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRotator.FrameAnimationSteps">
      <summary>
            Gets/sets the steps used to perform the trasition animation.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRotator.FrameAnimationInterval">
      <summary>
            Gets/sets the interval between animation steps.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRotator.FrameVisibilityDuration">
      <summary>
            Gets/sets the time span (in milliseconds) that a frame stays in view.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRotator.Direction">
      <summary>
            Gets/sets the direction to be used when performing animation.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRotator.DisplayedFrame">
      <summary>
            Gets the currently displayed frame.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRotator.Rotating">
      <summary>
            Determines whether the rotator is currently working.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRotator.Animating">
      <summary>
            Determines whether frames are currently being animated.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NRotator.Repeat">
      <summary>
            Determines whether the rotator will start from the first frame again when reaching the last one.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NUIManagerController">
      <summary>
            Represents a component which allows the fields of the NUIManager singleton instance to be changed using the Visual Studio Designer.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NUIManagerController.Palette">
      <summary>
            Gets/sets the palette of the NUIManager.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NUIManagerController.MenuOptions">
      <summary>
            Gets/sets the NGlobalMenuOptions object which controls the apperance of all menu windows.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NUIManagerController.PredefinedFrame">
      <summary>
            Gets/sets a predefined NFrameAppearance template.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NUIManagerController.SkinResource">
      <summary>
            Gets/sets the NSkinResource which defines the current UI skin.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NListView">
      <summary>
            Represents an extended ListView control with custom borders and scrollbar.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NListView.UpdateBorder">
      <summary>
            Forces an immediate update of the border.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NListView.UpdateHeader">
      <summary>
            Forces an immediate update of the header control.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NListView.Sort(System.Int32)">
      <summary>
            Sorts the list-view by the specified column index.
            </summary>
      <param name="columnIndex">
      </param>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NListView.EnableSkinning">
      <summary>
            Gets/sets a value indicating whether the control will use skin logic.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NListView.Skin">
      <summary>
            Gets/sets the local NSkin instance to be used when painting this control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NListView.CurrentSkin">
      <summary>
            Gets the current skin to be used by this instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NListView.Palette">
      <summary>
            Gets/sets the NPalette used to render control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NListView.PaletteInheritance">
      <summary>
            Gets/sets a value which Palette value will be applied on a higher level Palette change.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NListView.Border">
      <summary>
            Gets the NControlBorder instance which controls the border appearance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NListView.DefaultBorderStyle">
      <summary>
            Gets the border style which is default for this instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NListView.DefaultBaseBorderColor">
      <summary>
            Gets the border color which is considered Default for this instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NListView.IsBorderHot">
      <summary>
            Determines whether the border is Hot (depends on the current instance). 
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NListView.BorderWidth">
      <summary>
            Gets the current width of the border. Depends on the Border.Style value.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NListView.ScrollBarRenderer">
      <summary>
            Gets/sets the renderer which handles scrollbar painting.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NListView.UseCustomScrollBars">
      <summary>
            Determines whether to use custom scrollbars or use the default windows ones (better performance).
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NListView.ClientMouse">
      <summary>
            Gets the current mouse position in client coordinates.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NListView.HeaderCustomDraw">
      <summary>
            Determines whether the header control will use custom painting.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NListView.SortedColumnShading">
      <summary>
            Determines whether the sorted column will be shaded to provide visual feedback.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NListView.ItemCustomDraw">
      <summary>
            Determines whether custom item painting will be performed.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NListView.AlternateRows">
      <summary>
            Determines whether rows will use alternating pattern to be displayed.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NListView.HeaderHeight">
      <summary>
            Gets/sets the height of the header control. Default is 20 pixels.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NListView.ExtendedColumns">
      <summary>
            Gets the collection which stores additional information about header columns.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NListView.SortedColumnBackColor">
      <summary>
            Gets/sets the background color of the sorted column.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NListView.AlternateRowColorBackColor">
      <summary>
            Gets/sets the background color of the alternate row.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NGroupBoxEx">
      <summary>
            Represents an extended groupbox with an UIItem as a caption.
            Based on the NShadowDecorator it inherits all the cool filling, stroke and shadow features.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NGroupBoxEx.OnSizeChanged(System.EventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NGroupBoxEx.GetRenderRect">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NGroupBoxEx.DisplayRectangle">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NEmptyTypeEditor">
      <summary>
            Summary description for NEmptyTypeEditor.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NTreeListNodeNumericSubItem">
      <summary>
            A NTreeListNodeSubItem which stores numeric data.
            Primitive types like Byte, SByte, In16, In32, Int64, Float, Double, etc. will be handled by an instance of that item.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListNodeNumericSubItem.DisplayValue">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListNodeNumericSubItem.Value">
      <summary>
            Gets/sets the value to be displayed.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListNodeNumericSubItem.ItemType">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NTreeListTopLeftHeader">
      <summary>
            Represents a NLightUIItem which visualizes a header which is located in the top-left corner of a NTreeList control.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeListTopLeftHeader.GetHitCode">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListTopLeftHeader.ItemType">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NCommandBarsManagerData.SaveData">
      <summary>
            Saves the command bars manager data
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NCommandBarsManagerData.LoadData">
      <summary>
            Loads the command bars manager data
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NCommandBarsManagerData.CreateObject">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NFontComboBoxRenderer">
      <summary>
            Summary description for NFontComboBoxRenderer.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NColorComboBox">
      <summary>
            Represents a predefined NComboBox for displaying color values as items.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NColorComboBox.Color">
      <summary>
            Gets/sets the currently selected color.
            </summary>
    </member>
    <member name="T:Nevron.UI.NTextShape">
      <summary>
            Summary description for NTextShape.
            </summary>
    </member>
    <member name="M:Nevron.UI.NTextShape.Measure(Nevron.UI.NPaintContext,Nevron.GraphicsCore.NRectangle)">
      <summary>
            Measures the current text using the specified painting context and available bounds.
            </summary>
      <param name="context">
      </param>
      <param name="availableBounds">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.NTextShape.TextRenderingContext">
      <summary>
            Gets the current text rendering context.
            </summary>
    </member>
    <member name="P:Nevron.UI.NTextShape.Orientation">
      <summary>
            Gets/sets the orientation of the text.
            </summary>
    </member>
    <member name="P:Nevron.UI.NTextShape.Text">
      <summary>
            Gets/sets the text to be displayed.
            </summary>
    </member>
    <member name="T:Nevron.UI.TrackbarParts">
      <summary>
            Summary description for TrackbarParts.
            </summary>
    </member>
    <member name="T:Nevron.UI.ThemeStyleEntry">
      <summary>
            Summary description for ThemeStyleEntry.
            </summary>
    </member>
    <member name="T:Nevron.UI.ScrollbarParts">
      <summary>
            Summary description for ScrollbarParts.
            </summary>
    </member>
    <member name="T:Nevron.UI.ButtonParts">
      <summary>
            Summary description for ButtonParts.
            </summary>
    </member>
    <member name="T:Nevron.UI.ToolStrips.NSeparatorItem">
      <summary>
            Summary description for NSeparatorItem.
            </summary>
    </member>
    <member name="T:Nevron.UI.CalculatorButton">
      <summary>
            Summary description for Enumerations.
            </summary>
    </member>
    <member name="T:Nevron.UI.NFontNameTypeEditor">
      <summary>
            Summary description for NFontNameTypeEditor.
            </summary>
    </member>
    <member name="T:Nevron.UI.NUILicenseManager">
      <summary>
            Summary description for NUILicenseManager.
            </summary>
    </member>
    <member name="T:Nevron.UI.NStringHelper">
      <summary>
            Summary description for NStringHelper.
            </summary>
    </member>
    <member name="T:Nevron.UI.NImageRenderOptions">
      <summary>
            Summary description for NImageRenderOptions.
            </summary>
    </member>
    <member name="P:Nevron.UI.NImageRenderOptions.Alpha">
      <summary>
            Gets/sets the transparency (alpha) value to be applied on the rendered image.
            </summary>
    </member>
    <member name="P:Nevron.UI.NImageRenderOptions.GrayScaleIntensity">
      <summary>
            Gets/sets the intensity of the grayscale applied on the image (if GrayScale is true).
            </summary>
    </member>
    <member name="P:Nevron.UI.NImageRenderOptions.Grayscale">
      <summary>
            Gets/sets a boolean value whether the image will be converted to grayscale.
            </summary>
    </member>
    <member name="P:Nevron.UI.NImageRenderOptions.WrapMode">
      <summary>
            Gets/sets the WrapMode to be use when rendering the current image.
            </summary>
    </member>
    <member name="T:Nevron.UI.NImageInfo">
      <summary>
            Summary description for NImageInfo.
            </summary>
    </member>
    <member name="M:Nevron.UI.NImageInfo.UpdateReferences(Nevron.INReferenceProvider)">
      <summary>
      </summary>
      <param name="provider">
      </param>
    </member>
    <member name="P:Nevron.UI.NImageInfo.Image">
      <summary>
            Gets/sets the image for this element.
            </summary>
    </member>
    <member name="P:Nevron.UI.NImageInfo.SourceRect">
      <summary>
            Gets/sets the portion of the image to render.
            By default the entire image is rendered.
            </summary>
    </member>
    <member name="P:Nevron.UI.NImageInfo.ImageList">
      <summary>
            Gets/sets the ImageList which contains the image for the element.
            </summary>
    </member>
    <member name="P:Nevron.UI.NImageInfo.ImageIndex">
      <summary>
            Gets/sets the index to be used from the current image list.
            </summary>
    </member>
    <member name="P:Nevron.UI.NImageInfo.ImageSize">
      <summary>
            Gets/sets the size of the rect where the image will be drawn.
            </summary>
    </member>
    <member name="P:Nevron.UI.NImageInfo.CurrentImage">
      <summary>
            Gets the currently displayed image
            </summary>
    </member>
    <member name="P:Nevron.UI.NImageInfo.RenderOptions">
      <summary>
            Gets the object specifying render option for the current image.
            </summary>
    </member>
    <member name="T:Nevron.SmartShapes.NSmartGroup">
      <summary>
            The NSmartGroup class is a smart shape, which can contain other smart shapes
            </summary>
    </member>
    <member name="T:Nevron.SmartShapes.NSmartShape">
      <summary>
            The NSmartShape class represents a shape, 
            much of which content is defined by an underlying shape sheet. 
            </summary>
    </member>
    <member name="T:Nevron.FormulaSheet.INFormulaSheetContainer">
      <summary>
            Implemented by objects, which host formula sheets
            </summary>
    </member>
    <member name="M:Nevron.FormulaSheet.INFormulaSheetContainer.ResolveSheetReference(System.String)">
      <summary>
            Called by the embedded formula sheet to provide a reference to the formula sheet with the specified name
            </summary>
      <param name="sheetName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.FormulaSheet.INFormulaSheetContainer.InvalidateSlaveFormulaSheetsCache">
      <summary>
            Called by the embedded formula sheet to invalidate the cache of the formula sheets, 
            which can reference the sheet contained in the container
            </summary>
    </member>
    <member name="M:Nevron.SmartShapes.NSmartShape.Clone">
      <summary>
            Creates an identical copy of this object
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.SmartShapes.NSmartShape.UpdateReferences(Nevron.INReferenceProvider)">
      <summary>
      </summary>
      <param name="provider">
      </param>
    </member>
    <member name="M:Nevron.SmartShapes.NSmartShape.CreateNonSerializedObjects">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.SmartShapes.NSmartShape.GetReferenceProvider">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.SmartShapes.NSmartShape.ProvideReference(System.Type)">
      <summary>
      </summary>
      <param name="referenceType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.SmartShapes.NSmartShape.ResolveSheetReference(System.String)">
      <summary>
            Called by the embedded formula sheet to provide a reference to the formula 
            sheet with the specified name
            </summary>
      <param name="sheetName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.SmartShapes.NSmartShape.InvalidateSlaveFormulaSheetsCache">
      <summary>
            Called by the embedded formula sheet to invalidate the cache of the formula sheets, 
            which can reference the sheet contained in the container
            </summary>
    </member>
    <member name="M:Nevron.SmartShapes.NSmartShape.GetBounds">
      <summary>
            Gets a rectangle, which bounds the geometry of this shape in parent coordinates
            </summary>
    </member>
    <member name="M:Nevron.SmartShapes.NSmartShape.HitTest(Nevron.GraphicsCore.NPointF)">
      <summary>
            Hit test the smart shape by point
            </summary>
      <param name="pt">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.SmartShapes.NSmartShape.ComposeFillStyle">
      <summary>
            Gets a reference to the fill style, with which the shape must be displayed
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.SmartShapes.NSmartShape.ComposeStrokeStyle">
      <summary>
            Gets a reference to the stroke style, with which the shape must be displayed
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.SmartShapes.NSmartShape.ComposeShadowStyle">
      <summary>
            Gets a reference to the shadow style, with which the shape must be displayed
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.SmartShapes.NSmartShape.GetControlVisible(System.Int32)">
      <summary>
            Gets the control visibility at the specified index
            </summary>
      <param name="index">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.SmartShapes.NSmartShape.GetControlTooltip(System.Int32)">
      <summary>
            Gets the control tooltip at the specified index
            </summary>
      <param name="index">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.SmartShapes.NSmartShape.GetControlPoint(System.Int32)">
      <summary>
            Gets the control point at the specified index
            Applicable only if the HasControlsSection property is set to true
            </summary>
      <param name="index">control point index</param>
      <returns>control point location (in parent coordinates)</returns>
    </member>
    <member name="M:Nevron.SmartShapes.NSmartShape.SetControlPoint(System.Int32,Nevron.GraphicsCore.NPointF)">
      <summary>
            Sets the control point at the specified index
            Applicable only if the HasControlsSection property is set to true
            </summary>
      <param name="index">control point index</param>
      <param name="point">point (in parent coordinates)</param>
    </member>
    <member name="M:Nevron.SmartShapes.NSmartShape.GetResizeHandle(Nevron.GraphicsCore.CompassDirection)">
      <summary>
            Gets the location of the resize handle, which corresponds to the specified compass direction
            </summary>
      <param name="direction">compass direction</param>
      <returns>resize handle location for the specified compass direction (in parent coordinates)</returns>
    </member>
    <member name="M:Nevron.SmartShapes.NSmartShape.SetResizeHandle(Nevron.GraphicsCore.CompassDirection,Nevron.GraphicsCore.NPointF)">
      <summary>
            Sets the location of the resize handle, which corresponds to the specified compass direction
            </summary>
      <param name="direction">compass direction</param>
      <param name="point">new location of the resize handle (in parent coordinates)</param>
    </member>
    <member name="M:Nevron.SmartShapes.NSmartShape.Translate(System.Single,System.Single)">
      <summary>
            Translates the shape with the specified amounts
            </summary>
      <param name="dx">y amount (in parent units)</param>
      <param name="dy">x amount (in parent units)</param>
    </member>
    <member name="M:Nevron.SmartShapes.NSmartShape.Reposition(Nevron.GraphicsCore.NPointF)">
      <summary>
            Repositions the shape so that its pin point is located on the specified coordinate
            </summary>
      <param name="point">in parent coordinates</param>
    </member>
    <member name="M:Nevron.SmartShapes.NSmartShape.PaintAppearance(Nevron.GraphicsCore.lIIIIllI)">
      <summary>
            Paints the appearance of the shape on the specified device
            </summary>
      <param name="device">
      </param>
    </member>
    <member name="M:Nevron.SmartShapes.NSmartShape.PaintShadow(Nevron.GraphicsCore.IN2DShadowDevice)">
      <summary>
            Paints the shadow of the shape on the specified device
            </summary>
      <param name="device">
      </param>
    </member>
    <member name="M:Nevron.SmartShapes.NSmartShape.PaintAppearanceLocal(Nevron.GraphicsCore.lIIIIllI)">
      <summary>
            Paints the appearance of the shape in local coordinates
            </summary>
      <param name="device">
      </param>
    </member>
    <member name="M:Nevron.SmartShapes.NSmartShape.PaintShadowLocal(Nevron.GraphicsCore.IN2DShadowDevice)">
      <summary>
            Paints the shadow of the shape in local coordinates
            </summary>
      <param name="device">
      </param>
    </member>
    <member name="P:Nevron.SmartShapes.NSmartShape.Name">
      <summary>
            Gets/sets the name of the shape
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NSmartShape.FillStyle">
      <summary>
            Gets/sets the fill style of the shape
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NSmartShape.StrokeStyle">
      <summary>
            Gets/sets the stroke style of the shape
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NSmartShape.ShadowStyle">
      <summary>
            Gets/sets the shadow style of the shape
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NSmartShape.BackgroundImage">
      <summary>
            Gets/sets the background image, which can optionally be displayed behind the shape geometry
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NSmartShape.Sheet">
      <summary>
            Gets/sets the shape sheet, which defines the formulable aspects of this shape
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NSmartShape.IsOneDimensional">
      <summary>
            Determines whether this is a one dimensional shape
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NSmartShape.StartPoint">
      <summary>
            Gets/sets the start point of the shape (only applicable for 1D shapes)
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NSmartShape.EndPoint">
      <summary>
            Gets/sets the end point of the shape (only applicable for 1D shapes)
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NSmartShape.Width">
      <summary>
            Gets/sets the shape width
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NSmartShape.Height">
      <summary>
            Gets/sets the shape height
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NSmartShape.Angle">
      <summary>
            Gets/sets the shape angle
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NSmartShape.LocalPinPoint">
      <summary>
            Gets/sets the shape pin point (in local coordinates)
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NSmartShape.PinPoint">
      <summary>
            Gets/sets the shape pin point (in parent coordinates)
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NSmartShape.FlipX">
      <summary>
            Gets/sets whether the shape coordinate system is X flipped
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NSmartShape.FlipY">
      <summary>
            Gets/sets whether the shape coordinate system is Y flipped
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NSmartShape.ControlsCount">
      <summary>
            Gets the count of control points.
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NSmartShape.Transform">
      <summary>
            Gets a transformation, which converts local shape coordinates to parent coordinates
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NSmartShape.Group">
      <summary>
            Gets a reference to the group containing this shape
            </summary>
    </member>
    <member name="M:Nevron.SmartShapes.NSmartGroup.UpdateReferences(Nevron.INReferenceProvider)">
      <summary>
      </summary>
      <param name="provider">
      </param>
    </member>
    <member name="M:Nevron.SmartShapes.NSmartGroup.CreateNonSerializedObjects">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.SmartShapes.NSmartGroup.InvalidateSlaveFormulaSheetsCache">
      <summary>
            Called by the embedded formula sheet to invalidate the cache of the formula sheets, 
            which can reference the sheet contained in the container
            </summary>
    </member>
    <member name="M:Nevron.SmartShapes.NSmartGroup.PaintAppearanceLocal(Nevron.GraphicsCore.lIIIIllI)">
      <summary>
            Overriden to paint the contained shapes
            </summary>
      <param name="device">
      </param>
    </member>
    <member name="M:Nevron.SmartShapes.NSmartGroup.PaintShadowLocal(Nevron.GraphicsCore.IN2DShadowDevice)">
      <summary>
            Overriden to paint the contained shapes
            </summary>
      <param name="device">
      </param>
    </member>
    <member name="P:Nevron.SmartShapes.NSmartGroup.Shapes">
      <summary>
            Gets a reference the shapes collection of the group
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NLightSourceCollection">
      <summary>
            You can add a light source to a 3D scene by adding an instance of a 
            NLightSource derived type to this collection. Up to eight light sources 
            can be used simultaneously.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NLightSourceCollection.Add(Nevron.GraphicsCore.NLightSource)">
      <summary>
            Adds a light source to the collection.
            </summary>
      <param name="lightSource">The light source object to be added.</param>
    </member>
    <member name="M:Nevron.GraphicsCore.NLightSourceCollection.RemoveAt(System.Int32)">
      <summary>
            Removes the light source at the specified index.
            </summary>
      <param name="index">The index of the light source to be removed.</param>
    </member>
    <member name="M:Nevron.GraphicsCore.NLightSourceCollection.Clear">
      <summary>
            Removes all light sources.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NLightSourceCollection.Clone">
      <summary>
            Creates an identical copy of this object
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NLightSourceCollection.Count">
      <summary>
            Gets the number of light sources in the collection.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NLightSourceCollection.ParentNode">
      <summary>
            Obtains the parent node
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NLightSourceCollection.RootNode">
      <summary>
            Obtains the root of this node
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NTooltipAttribute">
      <summary>
            Represents a tooltip applied on the object.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NTooltipAttribute.Equals(System.Object)">
      <summary>
            Determines whether instances of the same type are equivalent.
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NTooltipAttribute.GetHashCode">
      <summary>
            The hash code for the current object.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NTooltipAttribute.Text">
      <summary>
            The tooltip of the object when the mouse passes over it.
            </summary>
      <remarks>
            For Windows Forms applications you must also add a NTooltipInteractivityOperation 
            object to the InteractivityOperations collection of the control. For 
            Web forms you must use a response type of HTML image map or HMTL 
            postback in order for this property to take effect.
            </remarks>
      <example>
            The following code changes the tooltip of a label:
            <code lang="VB">
            NChartControl.InteractivityOperations.Add(New NTooltipInteractivityOperation())
            
            Dim label As NLabel =  NChartControl.Labels.AddHeader("Cursor hand") 
            label.Interactivity.Tooltip = "There is nothing special about tooltips"
            </code><code>
            NChartControl.InteractivityOperations.Add(new NTooltipInteractivityOperation());
            
            NLabel label = NChartControl.Labels.AddHeader("Cursor hand");
            label.Interactivity.Tooltip = "There is nothing special about tooltips";
            </code></example>
    </member>
    <member name="P:Nevron.GraphicsCore.NTooltipAttribute.GenerateAltTag">
      <summary>
            Gets or sets a value indicating whether this attribute will also generate an Alt tag
            in the resulting image map. 
            </summary>
      <remarks>
            By default set to true in order to generate US Section 508 compliant image map.
            </remarks>
    </member>
    <member name="T:Nevron.GraphicsCore.NMillimeterMetricUnit">
      <summary>
            Represents the millimeter metric measurement unit.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NMillimeterMetricUnit.ConvertXValueToPixels(Nevron.GraphicsCore.NMeasurementUnitConverter)">
      <summary>
            Converts this measurement unit to its equivalent in pixels along the X direction.
            </summary>
      <param name="converter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NMillimeterMetricUnit.ConvertYValueToPixels(Nevron.GraphicsCore.NMeasurementUnitConverter)">
      <summary>
            Converts this measurement unit to its equivalent in pixels along the Y direction.
            </summary>
      <param name="converter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NMillimeterMetricUnit.Abbreviation">
      <summary>
            The abbreviation of this measurement unit.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NMillimeterMetricUnit.MetricUnit">
      <summary>
            Gets the english unit of the object.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NMillimeterMetricUnit.ScaleToInch">
      <summary>
            The scale to inch of this measurement unit.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NMicrometerMetricUnit">
      <summary>
            Represents the micrometer metric measurement unit.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NMicrometerMetricUnit.ConvertXValueToPixels(Nevron.GraphicsCore.NMeasurementUnitConverter)">
      <summary>
            Converts this measurement unit to its equivalent in pixels along the X direction.
            </summary>
      <param name="converter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NMicrometerMetricUnit.ConvertYValueToPixels(Nevron.GraphicsCore.NMeasurementUnitConverter)">
      <summary>
            Converts this measurement unit to its equivalent in pixels along the Y direction.
            </summary>
      <param name="converter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NMicrometerMetricUnit.Abbreviation">
      <summary>
            The abbreviation of this measurement unit.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NMicrometerMetricUnit.MetricUnit">
      <summary>
            Gets the english unit of the object.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NMicrometerMetricUnit.ScaleToInch">
      <summary>
            The scale to inch of this measurement unit.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NMetricMeasurementSystem">
      <summary>
            Represents the Metric measurement unit system
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NMetricMeasurementSystem.InitMeasurementUnits">
      <summary>
            Overriden to initialize the system with the supported Metric measurement units
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NMetricMeasurementSystem.MetricMeasurementSystem">
      <summary>
            The one and only instance of the Metric measurement system
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NMetricMeasurementSystem.Name">
      <summary>
            The name of this measurement system.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NMetricMeasurementSystem.MeasurementSystem">
      <summary>
            The enum value of this measurement system.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NFurlongEnglishUnit">
      <summary>
            Represents the english furlong measurement unit.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NFurlongEnglishUnit.ConvertXValueToPixels(Nevron.GraphicsCore.NMeasurementUnitConverter)">
      <summary>
            Converts this measurement unit to its equivalent in pixels along the X direction.
            </summary>
      <param name="converter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NFurlongEnglishUnit.ConvertYValueToPixels(Nevron.GraphicsCore.NMeasurementUnitConverter)">
      <summary>
            Converts this measurement unit to its equivalent in pixels along the Y direction.
            </summary>
      <param name="converter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NFurlongEnglishUnit.Abbreviation">
      <summary>
            The abbreviation of this measurement unit.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NFurlongEnglishUnit.EnglishUnit">
      <summary>
            Gets the english unit of the object.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NFurlongEnglishUnit.ScaleToInch">
      <summary>
            The scale to inch of this measurement unit.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.INControlStyleControl">
      <summary>
            Implemented by controls that can modify their control styles
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NJpegImageFormat">
      <summary>
            Describes a JPEG image response returned to the client browser.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NJpegImageFormat.MimeType">
      <summary>
            Mime type constant for jpg images
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NJpegImageFormat.GetMimeType">
      <summary>
            Returns the mime type - "image/jpeg".
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NJpegImageFormat.GetExtension">
      <summary>
            Returns the file extension - ".jpg"
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NJpegImageFormat.GetName">
      <summary>
            Obtains the name of this image format
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NJpegImageFormat.GetImageFormat">
      <summary>
            Obtains a Jpeg ImageFormat.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NJpegImageFormat.GetEncoderParameters">
      <summary>
            Returns the encoder parameters associated with this image Format
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NJpegImageFormat.ToString">
      <summary>
            Returns the string representation of this Jpeg format.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NJpegImageFormat.Quality">
      <summary>
            The quality parameter of the JPEG image.
            </summary>
      <remarks>
            This value varies from 0 to 100. The default value is 100 which delivers a 
            JPEG image with best quality.
            </remarks>
    </member>
    <member name="T:Nevron.GraphicsCore.Shapes.NSmoothEdgeRectShape">
      <summary>
            Summary description for NSmoothEdgeRectShape.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Shapes.NInvertedTriangleShape">
      <summary>
            Summary description for NInvertedTriangleShape.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Shapes.NFillStyleCommandNode">
      <summary>
            Summary description for NFillStyleCommandNode.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NXamlRenderSurface.CloseXaml">
      <summary>
            Closes the Xaml file by finilizing the last shape.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NXamlRenderSurface.XamlDocument">
      <summary>
            Gets the xaml document associated with the surface.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NXamlRenderSurface.ImageFormat">
      <summary>
            Gets or sets the format specific settings of the silverlight document rendered on this surface.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NCircleSegmentF">
      <summary>
            Represents a segment of a circle in 2D space, defined by a circle and start and sweep angles
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NCircleSegmentF.Translate(System.Single,System.Single)">
      <summary>
            Translates the primitive with the specified amounts
            </summary>
      <param name="dx">
      </param>
      <param name="dy">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NCircleSegmentF.Translate(Nevron.GraphicsCore.NPointF)">
      <summary>
            Translates the primitive with the specified offset
            </summary>
      <param name="offset">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NCircleSegmentF.AddToGraphicsPath(System.Drawing.Drawing2D.GraphicsPath)">
      <summary>
            Appends the primitive to the specified graphics path
            </summary>
      <param name="path">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NCircleSegmentF.ContainsOnOutline(Nevron.GraphicsCore.NPointF,System.Single)">
      <summary>
            Determines whether the outline of the primitive contains the specified point
            </summary>
      <param name="point">
      </param>
      <param name="weight">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NCircleSegmentF.ContainsOnOutline(Nevron.GraphicsCore.NPointF,System.Drawing.Pen)">
      <summary>
      </summary>
      <param name="point">
      </param>
      <param name="pen">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NCircleSegmentF.Equals(System.Object)">
      <summary>
      </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NCircleSegmentF.GetHashCode">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NCircleSegmentF.ToString">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NCircleSegmentF.ToNCircularArcF">
      <summary>
            Converts this segment to ToNCircularArcF
            </summary>
      <returns>
      </returns>
    </member>
    <member name="F:Nevron.GraphicsCore.NCircleSegmentF.Circle">
      <summary>
            The circle to which the arc belongs
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NCircleSegmentF.StartAngle">
      <summary>
            Starting angle of the arc (in radians)
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NCircleSegmentF.SweepAngle">
      <summary>
            Sweep angle of the arc (in radians)
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NCircleSegmentF.FromThreePoints(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
      <summary>
            Gets the circle segment, which passes throw the tree points
            </summary>
      <param name="start">
      </param>
      <param name="control">
      </param>
      <param name="end">
      </param>
      <returns>
      </returns>
    </member>
    <member name="F:Nevron.GraphicsCore.NCircleSegmentF.Empty">
      <summary>
            The Empty circle segment
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NCircleSegmentF.Bounds">
      <summary>
            Gets the minimal enclosing rectangle
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NCircleSegmentF.BoundsRange">
      <summary>
            Gets the minimal enclosing 2D range
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NCircleSegmentF.IsFlat">
      <summary>
            Determines whether this is a flat primitive
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NCircleSegmentF.StartPoint">
      <summary>
            Gets/sets the start point of the open figure
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NCircleSegmentF.EndPoint">
      <summary>
            Gets/sets the end point of the open figure
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NCircleSegmentF.IsEmpty">
      <summary>
            Determines whether the circle segment is empty (the circle is empty or the sweepAngle is zero)
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NCircleSegmentF.MiddlePoint">
      <summary>
            Gets the middle point of the segment
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NCircleSegmentF.Length">
      <summary>
            Returns the length of the segment
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NPathCommandList">
      <summary>
            Represents a list of NPathCommand objects
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NPathCommandList.Clone">
      <summary>
            Creates an exact replica of this object
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NPathCommandList.Add(Nevron.GraphicsCore.NPathCommand)">
      <summary>
            Adds the command to the end of the collection
            </summary>
      <param name="value">
      </param>
      <returns>The zero-based index at which the new element is inserted</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NPathCommandList.AddRange(Nevron.GraphicsCore.NPathCommand[])">
      <summary>
            Copies the elements of a NPathCommand array to the end of the collection.
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NPathCommandList.AddRange(Nevron.GraphicsCore.NPathCommandList)">
      <summary>
            Copies the elements of a single list to the end of the collection.
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NPathCommandList.Contains(Nevron.GraphicsCore.NPathCommand)">
      <summary>
            Determines whether the specified command is in the collection
            </summary>
      <param name="value">
      </param>
      <returns>if value is found in the collection otherwise, false</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NPathCommandList.CopyTo(Nevron.GraphicsCore.NPathCommand[],System.Int32)">
      <summary>
            Copies the entire collection values to a one-dimensional array of NPathCommands, starting at the specified index of the target array.
            </summary>
      <param name="array">The one-dimensional array of NPathCommands that is the destination of the elements copied from collection. The Array must have zero-based indexing</param>
      <param name="index">The zero-based index in array at which copying begins.</param>
    </member>
    <member name="M:Nevron.GraphicsCore.NPathCommandList.IndexOf(Nevron.GraphicsCore.NPathCommand)">
      <summary>
            Searches for the specified command and returns the zero-based index of the first occurrence within the collection
            </summary>
      <param name="value">the NPathCommand value to locate</param>
      <returns>index of the int value</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NPathCommandList.Insert(System.Int32,Nevron.GraphicsCore.NPathCommand)">
      <summary>
            Inserts the command at the specified index
            </summary>
      <param name="index">index at which value is inserted</param>
      <param name="value">NPathCommand value</param>
    </member>
    <member name="M:Nevron.GraphicsCore.NPathCommandList.Remove(Nevron.GraphicsCore.NPathCommand)">
      <summary>
            Removes the first occurrence of a specific NPathCommand value from the collection
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="T:Nevron.GraphicsCore.NVector3DF">
      <summary>
            The NVector3DD struct represents a 3D vector with float coordinates
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NVector3DF.SetXYZ(System.Single,System.Single,System.Single)">
      <summary>
            Sets the x, y and z coordinates of the vector
            </summary>
      <param name="x">x coordinate</param>
      <param name="y">y coordinate</param>
      <param name="z">z coordinate</param>
    </member>
    <member name="M:Nevron.GraphicsCore.NVector3DF.SetXY(System.Single,System.Single)">
      <summary>
            Sets the x and y coordinates of the vector
            </summary>
      <param name="x">x coordinate</param>
      <param name="y">y coordinate</param>
    </member>
    <member name="M:Nevron.GraphicsCore.NVector3DF.Add(Nevron.GraphicsCore.NVector3DF@,Nevron.GraphicsCore.NVector3DF@)">
      <summary>
            Makes this vector the vector sum of v1 and v2
            </summary>
      <param name="v1">
      </param>
      <param name="v2">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NVector3DF.Subtract(Nevron.GraphicsCore.NVector3DF@,Nevron.GraphicsCore.NVector3DF@)">
      <summary>
            Makes this vector the vector sum of v1 and -v2
            </summary>
      <param name="v1">
      </param>
      <param name="v2">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NVector3DF.Multiply(Nevron.GraphicsCore.NVector3DF@,System.Single)">
      <summary>
            Makes this vector the scalar multiplication of v1 with the specified fMul factor
            </summary>
      <param name="v1">
      </param>
      <param name="fMul">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NVector3DF.Divide(Nevron.GraphicsCore.NVector3DF@,System.Single)">
      <summary>
            Makes this vector the scalar division of v1 with the specified fDiv factor
            </summary>
      <param name="v1">
      </param>
      <param name="fDiv">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NVector3DF.ToString">
      <summary>
            Overriden to provide a string representation of the vector
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NVector3DF.DotProduct(Nevron.GraphicsCore.NVector3DF,Nevron.GraphicsCore.NVector3DF)">
      <summary>
            Computes the dot product of two 3-D vectors
            </summary>
      <param name="a">source vector</param>
      <param name="b">source vector</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NVector3DF.CrossProduct(Nevron.GraphicsCore.NVector3DF,Nevron.GraphicsCore.NVector3DF)">
      <summary>
            Computes the cross product of two 3-D vectors
            </summary>
      <param name="a">source vector</param>
      <param name="b">source vector</param>
      <returns>A NVector3DF structure that is the cross product of two 3-D vectors.</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NVector3DF.Normalize(Nevron.GraphicsCore.NVector3DF)">
      <summary>
            Computes the normalized version of a 3-D vector.
            </summary>
      <param name="vector">Source NVector3DF structure.</param>
      <returns>A NVector3DF structure that is the normalized version of the specified vector.</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NVector3DF.Invert">
      <summary>
            Inverts the vector
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NVector3DF.GetLength">
      <summary>
            Gets the vector length
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NVector3DF.GetLengthSquare">
      <summary>
            Gets the vector length square
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NVector3DF.DotProduct(Nevron.GraphicsCore.NVector3DF@)">
      <summary>
            Computes the dot product of this vector and the specified vector
            </summary>
      <param name="v">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NVector3DF.CrossProduct(Nevron.GraphicsCore.NVector3DF@)">
      <summary>
            Computes the cross product of this vector and the specified vector
            </summary>
      <param name="v">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NVector3DF.CrossProductOf(Nevron.GraphicsCore.NVector3DF@,Nevron.GraphicsCore.NVector3DF@)">
      <summary>
            Makes this vector the cross product of vector A and vector B
            </summary>
      <param name="vA">
      </param>
      <param name="vB">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NVector3DF.CalculateNormal(Nevron.GraphicsCore.NVector3DF@,Nevron.GraphicsCore.NVector3DF@,Nevron.GraphicsCore.NVector3DF@)">
      <summary>
            Makes this vector the nozmalized normal of v1, v2 and v3
            </summary>
      <param name="v1">
      </param>
      <param name="v2">
      </param>
      <param name="v3">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NVector3DF.CalculateNormalNN(Nevron.GraphicsCore.NVector3DF@,Nevron.GraphicsCore.NVector3DF@,Nevron.GraphicsCore.NVector3DF@)">
      <summary>
            Makes this vector the non nozmalized normal of v1, v2 and v3
            </summary>
      <param name="v1">
      </param>
      <param name="v2">
      </param>
      <param name="v3">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NVector3DF.Normalize">
      <summary>
            Normalizes this vector (makes its length equal to 1)
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NVector3DF.Normalize(System.Single)">
      <summary>
            Normalizes this vector (makes its length equal to the specified length)
            </summary>
      <param name="fUnitLength">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NVector3DF.Equals(Nevron.GraphicsCore.NVector3DF)">
      <summary>
            Determines whether this vector is equal to the specified vector
            </summary>
      <param name="vec">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NVector3DF.RotateZ(System.Single)">
      <summary>
      </summary>
      <param name="fAngle">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NVector3DF.RotateZ(Nevron.GraphicsCore.NVector3DF@,System.Single)">
      <summary>
      </summary>
      <param name="v">
      </param>
      <param name="fAngle">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NVector3DF.Equals(System.Object)">
      <summary>
            Returns true if the objects are equal.
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NVector3DF.GetHashCode">
      <summary>
            Returns the hash code of this instance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="F:Nevron.GraphicsCore.NVector3DF.X">
      <summary>
            x coordinate
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NVector3DF.Y">
      <summary>
            y coordinate
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NVector3DF.Z">
      <summary>
            z coordinate
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NVector3DF.Length">
      <summary>
            Gets the vector length
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NVector3DF.LengthSquare">
      <summary>
            Gets the vector length square (length * length)
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NRange1D">
      <summary>
            The NRange1D struct represents a 1D range with integer values representing its begin and end
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NRange1D.Combine(Nevron.GraphicsCore.NRange1D)">
      <summary>
            Combines the the two ranges. 
            </summary>
      <remarks>
            Both ranges must be normalized.
            </remarks>
      <param name="range">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NRange1D.Inflate(System.Int32)">
      <summary>
            Inflates this range with the specified value
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NRange1D.GetLength">
      <summary>
            Returns the absolute lenght of this range.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRange1D.Contains(System.Int32)">
      <summary>
            Returns true if the range contains the specified value.
            </summary>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRange1D.Contains(Nevron.GraphicsCore.NRange1D)">
      <summary>
            Returns true if the range contains the specified range
            </summary>
      <param name="range">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRange1D.Normalize">
      <summary>
            Normalizes the range.
            </summary>
      <remarks>
            A normalized  range end value is bigger or equal to the begin value.
            </remarks>
    </member>
    <member name="M:Nevron.GraphicsCore.NRange1D.Invert">
      <summary>
            Changes the begin and end values of this range.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NRange1D.IsInverted">
      <summary>
            Returns true if the  range is inverted.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRange1D.GetOffsetFromValue(System.Int32)">
      <summary>
            Returns the distance between the begin or end values of the  range. 
            </summary>
      <param name="value">
      </param>
      <returns>
      </returns>
      <remarks>
            This function return 0 if the value is inside the  range.
            </remarks>
    </member>
    <member name="M:Nevron.GraphicsCore.NRange1D.FitInRange(Nevron.GraphicsCore.NRange1D)">
      <summary>
            Tries to fit the passed range into this range.
            </summary>
      <param name="range">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NRange1D.GetBeginValue">
      <summary>
            Gets the normalized begin value
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRange1D.GetEndValue">
      <summary>
            Gets the normalized end value
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRange1D.GetValueInRange(System.Int32)">
      <summary>
            Returns the nearest value that lies in this range.
            </summary>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRange1D.GetRangeDisposition(Nevron.GraphicsCore.NRange1DD)">
      <summary>
            Gets the range disposition of this range to another range
            </summary>
      <param name="range">
      </param>
      <returns>
      </returns>
      <remarks>
            Ranges must be normalized
            </remarks>
    </member>
    <member name="M:Nevron.GraphicsCore.NRange1D.Intersects(Nevron.GraphicsCore.NRange1D)">
      <summary>
            Checks if the ranges intersec each other
            </summary>
      <param name="range">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRange1D.Intersect(Nevron.GraphicsCore.NRange1DF,Nevron.GraphicsCore.NRange1DF@)">
      <summary>
            Interscects the range with another one
            </summary>
      <returns>True if intersection exists, false otherwise</returns>
      <remarks>Ranges must be normalized</remarks>
    </member>
    <member name="M:Nevron.GraphicsCore.NRange1D.Equals(System.Object)">
      <summary>
            Returns true if the objects are equal.
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRange1D.GetHashCode">
      <summary>
            Returns the hash code of this instance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NRange1D.IsNormalized">
      <summary>
            Returns true if the range is normalized.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NPoint">
      <summary>
            The NPoint structure represents a point in 2D space defined by it's X and Y coordinates
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NPoint.Equals(System.Object)">
      <summary>
      </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NPoint.GetHashCode">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NPoint.ToString">
      <summary>
            Returns the string representation of this object
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NPoint.Rotate(System.Int32,Nevron.GraphicsCore.NPoint)">
      <summary>
            Rotates the point with the specified angle around the specified pin
            </summary>
      <param name="angle">angle (in radians)</param>
      <param name="pin">pin point</param>
    </member>
    <member name="M:Nevron.GraphicsCore.NPoint.Rotate(System.Int32)">
      <summary>
            Rotates the point with the specified angle around the 0,0 point
            </summary>
      <param name="angle">angle (in radians)</param>
    </member>
    <member name="M:Nevron.GraphicsCore.NPoint.Scale(System.Int32,System.Int32,Nevron.GraphicsCore.NPoint)">
      <summary>
            Scales the point around the specified pin with the specified scale factors
            </summary>
      <param name="scaleX">x scale</param>
      <param name="scaleY">y scale</param>
      <param name="pin">pin</param>
    </member>
    <member name="M:Nevron.GraphicsCore.NPoint.Scale(System.Int32,System.Int32)">
      <summary>
            Scales the point around the 0,0 point with the specified scale factors
            </summary>
      <param name="scaleX">x scale</param>
      <param name="scaleY">y scale</param>
    </member>
    <member name="M:Nevron.GraphicsCore.NPoint.Translate(System.Int32,System.Int32)">
      <summary>
            Translates the point with the specified amounts
            </summary>
      <param name="dx">
      </param>
      <param name="dy">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NPoint.Distance(Nevron.GraphicsCore.NPoint)">
      <summary>
            Measures the distance between this point and the specified point
            </summary>
      <param name="point">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NPoint.ToPointF">
      <summary>
            Converts this point to PointF
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NPoint.ToNPointF">
      <summary>
            Converts this point to NPointF
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NPoint.ToPoint">
      <summary>
            Converts this point to Point
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NPoint.ToNVector2DF">
      <summary>
            Converts this point to NVector2DF
            </summary>
      <returns>
      </returns>
    </member>
    <member name="F:Nevron.GraphicsCore.NPoint.X">
      <summary>
            x coordinate
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NPoint.Y">
      <summary>
            y coordinate
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NPoint.Empty">
      <summary>
            The empty point (0, 0)
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NPoint.IsEmpty">
      <summary>
            Determines whether this is an empty point (e.g. x and y are 0)
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NMarginsF">
      <summary>
            Represents margins as indents from the left, top, right and bottom sides of a rectangle.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NMarginsF.GetInnerRect(Nevron.GraphicsCore.NRectangleF@)">
      <summary>
            Returns a the inner rectangle with applied margins from the left, top, right and bottom
            </summary>
      <param name="bounds">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NMarginsF.GetOuterRect(Nevron.GraphicsCore.NRectangleF@)">
      <summary>
            Returns a the outer rectangle with applied margins from the left, top, right and bottom
            </summary>
      <param name="bounds">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NMarginsF.Equals(System.Object)">
      <summary>
            Returns true if the objects are equal.
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NMarginsF.GetHashCode">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NMarginsF.Scale(System.Single)">
      <summary>
            Scales the margins with the specified scale factor
            </summary>
      <param name="scale">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NMarginsF.Inflate(System.Single)">
      <summary>
            Inflates the margins with the specified inflate
            </summary>
      <param name="inflate">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NMarginsF.Clamp(Nevron.GraphicsCore.NMarginsF)">
      <summary>
            Clamps the margins to the specified margins
            </summary>
      <param name="margins">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NMarginsF.Round">
      <summary>
            Rounds the margins
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NMarginsF.Left">
      <summary>
            Left margin
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NMarginsF.Top">
      <summary>
            Top margin
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NMarginsF.Right">
      <summary>
            Right margin
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NMarginsF.Bottom">
      <summary>
            Bottom margin
            </summary>
    </member>
    <member name="T:Nevron.Editors.NValueFormatterTypeEditorNoAutomatic">
      <summary>
            Provides facilities for visual editing of NValueFormatter objects.
            </summary>
    </member>
    <member name="T:Nevron.Editors.NTextStyleTypeEditorNoAutomatic">
      <summary>
            Provides facilities for visual editing of NTextStyle objects.
            </summary>
    </member>
    <member name="T:Nevron.Editors.NDashStyleCommand">
      <summary>
            Summary description for NDashStyleCommand.
            </summary>
    </member>
    <member name="T:Nevron.Editors.NFrameStyleTypeEditorNoAutomatic">
      <summary>
            Provides facilities for visual editing of NImageFrameStyle objects.
            </summary>
    </member>
    <member name="T:Nevron.Editors.NStrokeStyleButton">
      <summary>
            Represents a button, which is used for the editing of a stroke style. Displays a stroke style preview.
            </summary>
    </member>
    <member name="M:Nevron.Editors.NStrokeStyleButton.EditStyle(Nevron.GraphicsCore.NStrokeStyle,System.Boolean,Nevron.GraphicsCore.NStrokeStyle@)">
      <summary>
            Overriden to show the stroke type editor
            </summary>
      <param name="inStyle">
      </param>
      <param name="automatic">
      </param>
      <param name="outStyle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Editors.NStrokeStyleButton.CreateDefaultStyle">
      <summary>
            Overriden to create a new stroke style
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.Editors.NSizeTypeEditor">
      <summary>
            Summary description for NSizeEditor.
            </summary>
    </member>
    <member name="T:Nevron.Editors.NDataGridStrokeStyleColumnStyle">
      <summary>
            Column style, which can be used for the visual editing of 
            stroke styles inside a DataGrid
            </summary>
    </member>
    <member name="T:Nevron.Editors.NColorTransformUIEditor">
      <summary>
            Summary description for NColorTransformTypeEditor.
            </summary>
    </member>
    <member name="P:Nevron.Editors.NColorTransformUIEditor.ColorTransform">
      <summary>
            Gets/sets the color transform of the editor.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NSkinPainter">
      <summary>
            Summary description for NSkinPainter.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NSkinPainter.PaintButton(Nevron.UI.WinForm.Controls.NButton,System.Drawing.Graphics,Nevron.UI.WinForm.Controls.NSkin)">
      <summary>
            Paint a NButton control.
            </summary>
      <param name="button">The specified instance.</param>
      <param name="g">The graphics object to paint onto.</param>
      <returns>True if successfully painted, false otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NSkinPainter.PaintCheckControl(System.Windows.Forms.ButtonBase,Nevron.UI.WinForm.Controls.NButtonBaseInfo,System.Drawing.Graphics,Nevron.UI.WinForm.Controls.NSkin)">
      <summary>
            Paint a NCheckBox or a NRadioButton control.
            </summary>
      <param name="control">The specified instance.</param>
      <param name="info">The NButtonBaseInfo which contains common properties.</param>
      <param name="g">The graphics object to paint onto.</param>
      <returns>True if successfully painted, false otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NSkinPainter.PaintScrollbar(Nevron.UI.WinForm.Controls.NScrollBar,System.Drawing.Graphics,Nevron.UI.WinForm.Controls.NSkin)">
      <summary>
            Paints a NScrollBar control.
            </summary>
      <param name="scrollBar">The specified instance.</param>
      <param name="g">The graphics object to paint onto.</param>
      <returns>True if successfully painted, false otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NSkinPainter.PaintRangeSlider(Nevron.UI.WinForm.Controls.NRangeSlider,System.Drawing.Graphics,Nevron.UI.WinForm.Controls.NSkin)">
      <summary>
            Paints a NRangeSlider control.
            </summary>
      <param name="rangeSlider">The specified instance.</param>
      <param name="g">The graphics object to paint onto.</param>
      <returns>True if successfully painted, false otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NSkinPainter.PaintGroupBox(Nevron.UI.WinForm.Controls.NGroupBox,System.Drawing.Graphics,Nevron.UI.WinForm.Controls.NSkin)">
      <summary>
            Paints a NGroupBox control.
            </summary>
      <param name="group">The specified instance.</param>
      <param name="g">The graphics object to paint onto.</param>
      <returns>True if successfully painted, false otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NSkinPainter.PaintComboBox(Nevron.UI.WinForm.Controls.NComboBox,System.Drawing.Graphics,Nevron.UI.WinForm.Controls.NSkin)">
      <summary>
            Paints a NComboBox control.
            </summary>
      <param name="combo">The specified instance.</param>
      <param name="g">The graphics object to paint onto.</param>
      <returns>True if successfully painted, false otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NSkinPainter.PaintNumericUpDown(Nevron.UI.WinForm.Controls.NNumericUpDown,System.Drawing.Graphics,Nevron.UI.WinForm.Controls.NSkin)">
      <summary>
            Paints a NComboBox control.
            </summary>
      <param name="upDown">The specified instance.</param>
      <param name="g">The graphics object to paint onto.</param>
      <returns>True if successfully painted, false otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NSkinPainter.PaintProgressBar(Nevron.UI.WinForm.Controls.NProgressBar,System.Drawing.Graphics,Nevron.UI.WinForm.Controls.NSkin)">
      <summary>
            Paints a NProgressBar control.
            </summary>
      <param name="bar">The specified instance.</param>
      <param name="g">The graphics object to paint onto.</param>
      <returns>True if successfully painted, false otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NSkinPainter.PaintWaitingBar(Nevron.UI.WinForm.Controls.NWaitingBar,System.Drawing.Graphics,Nevron.UI.WinForm.Controls.NSkin)">
      <summary>
            Paints a NWaitingBar control.
            </summary>
      <param name="bar">The specified instance.</param>
      <param name="g">The graphics object to paint onto.</param>
      <returns>True if successfully painted, false otherwise.</returns>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NHScrollBar">
      <summary>
            Represents a custom control that mimics the functionality found in standard ScrollBar.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NBand">
      <summary>
            Represents a band in a NPanelBar object. 
            The band is actually a panel, which can be collapsed or
            expanded. When the band is collapsed only its caption is visible.
            </summary>
      <remarks>
            You can use the Controls property to add controls to a band.
            </remarks>
      <example>
            The following example demonstrates how to add controls to a 
            NBand object and add that band to a NPanelBar object:
            <code lang="VB">
            ' create the band
            Dim band As NBand =  New NBand() 
            
            ' create a label
            Dim testLabel As Label =  New Label() 
            testLabel.Dock = DockStyle.Top
            testLabel.Text = "This is test label"
            
            ' add the label to the band
            band.Controls.Add(testLabel)
            
            ' assume that we have an existing NPanelBar object named nPanelBar1
            nPaneBar1.Bands.Add(band)
            </code><code>
            // create the band
            NBand band = new NBand();
            
            // create a label
            Label testLabel = new Label();
            testLabel.Dock = DockStyle.Top;
            testLabel.Text = "This is test label";
            
            // add the label to the band
            band.Controls.Add(testLabel);
            
            // assume that we have an existing NPanelBar object named nPanelBar1
            nPaneBar1.Bands.Add(band);
            </code></example>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NBand.ImageList">
      <summary>
            Gets the parent tabcontrol imagelist.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NBand.ContainerPanel">
      <summary>
            Gets a container panel, in which you can add controls
            </summary>
      <remarks>
            The container panel is automatically added to the collection of controls for this band. 
            By default the container panel is created with DockStyle.Fill.
            </remarks>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NBand.Description">
      <summary>
            Gets/sets the description for a NBand object.
            The description will appear as a tooltip as the user moves the mouse 
            over the caption of the band.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NBand.State">
      <summary>
            Gets/sets the state of a NBand object.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NBand.Caption">
      <summary>
            Gets/sets the caption of the band.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NBand.CaptionHeight">
      <summary>
            Gets/sets the height of the band caption.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NBand.ImageIndex">
      <summary>
            Image index of the icon, which will be displayed next to NBand caption.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NBand.TextAlign">
      <summary>
            Gets/sets the HorizontalAlignment used to draw caption image and text.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NBand.ImageSize">
      <summary>
            Gets/sets the size used to draw caption image.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NPaletteHelper">
      <summary>
            Summary description for NPaletteHelper.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NFontHelper">
      <summary>
            Summary description for NGdiCache.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NSplash">
      <summary>
            Summary description for NSplash.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NPropertyEditor">
      <summary>
            Summary description for NPropertyEditor.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NDataNavigator">
      <summary>
            Represents a simple editor which may be used to navigate through records of dataset or array.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NDataNavigator.ShouldSerializeDataNavigatorElement">
      <summary>
            Determines whether the DataNavigatorElement property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NDataNavigator.DataNavigatorElement">
      <summary>
            Gets the generic NDataNavigatorElement hosted on this decorator.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NLightUIItemVisualState">
      <summary>
            Contains visual settings for a NLightUIItem instance in a particular state.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItemVisualState.Font">
      <summary>
            Gets/sets the font of the state.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItemVisualState.TextRenderingHint">
      <summary>
            Gets/sets the hint used when rendering text.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItemVisualState.FillInfo">
      <summary>
            Gets the NFillInfo instance which describes the filling.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItemVisualState.StrokeInfo">
      <summary>
            Gets the NStrokeInfo instance which describes the border.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItemVisualState.TextFillInfo">
      <summary>
            Gets the NFillInfo which describes the text filling.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItemVisualState.ImageIndex">
      <summary>
            Gets/sets the image index to be used in this particular state.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItemVisualState.ImageKey">
      <summary>
            Gets/sets the image key to be used in this particular state.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItemVisualState.Image">
      <summary>
            Gets/sets the image to be used in that particular state.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItemVisualState.TextFormat">
      <summary>
            Gets/sets the structure which controls the appearance of GDI+ texts.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItemVisualState.TextFormatFlags">
      <summary>
            Gets/sets the flags which control the appearance of GDI texts.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItemVisualState.DefaultTextFormat">
      <summary>
            Gets the default text format for this state.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLightUIItemVisualState.DefaultTextFormatFlags">
      <summary>
            Gets the default text format flags for this state.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NTreeListNodeSubItemCollection">
      <summary>
            A strongly-typed collection of NTreeListNodeSubItem instances.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeListNodeSubItemCollection.Add(Nevron.UI.WinForm.Controls.NTreeListNodeSubItem)">
      <summary>
            Adds the specified item to the collection.
            </summary>
      <param name="item">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeListNodeSubItemCollection.AddRange(Nevron.UI.WinForm.Controls.NTreeListNodeSubItem[])">
      <summary>
            Adds an array of NTreeListNodeSubItem instances to the collection.
            </summary>
      <param name="items">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeListNodeSubItemCollection.Remove(Nevron.UI.WinForm.Controls.NTreeListNodeSubItem)">
      <summary>
            Removes the specified item from the collection.
            </summary>
      <param name="item">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeListNodeSubItemCollection.Contains(Nevron.UI.WinForm.Controls.NTreeListNodeSubItem)">
      <summary>
            Determines whether the specified item is contained.
            </summary>
      <param name="item">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NTreeListNodeSubItemCollection.IndexOf(Nevron.UI.WinForm.Controls.NTreeListNodeSubItem)">
      <summary>
            Gets the zero-based index of the specified item in the collection.
            </summary>
      <param name="item">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandState.Bounds">
      <summary>
            Gets the bounding rectangle of the NCommand object.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandState.State">
      <summary>
            Gets the current state of the NCommand.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandState.Visible">
      <summary>
            Gets a value indicating whether the command is currently visible (this may differ from the default command visibility).
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandState.TextSize">
      <summary>
            Gets the current text size of the NCommand.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandState.Capture">
      <summary>
            Gets a value whether the NCommand has captured the mouse.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCommandState.Wrapped">
      <summary>
            Gets a value indicating whether the NCommand is wrapped on a new row(column)
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NFontComboBoxCommand">
      <summary>
            Summary description for NFontComboBoxCommand.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NImageListCollection">
      <summary>
            Represents a collection of Windows Forms ImageList objects.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NImageListCollection.Add(System.Windows.Forms.ImageList)">
      <summary>
            Adds an ImageList to the collection.
            </summary>
      <param name="list">The ImageList to add.</param>
      <returns>The index of the ImageList in the collection.</returns>
    </member>
    <member name="T:Nevron.UI.NSegmentedImageTypeEditor">
      <summary>
            Summary description for NSegmentedImageTypeEditor.
            </summary>
    </member>
    <member name="T:Nevron.UI.NThemeStyle">
      <summary>
            Summary description for NThemeState.
            </summary>
    </member>
    <member name="M:Nevron.UI.NThemeStyle.ShouldSerializeBackground">
      <summary>
            Determines whether the Background property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NThemeStyle.ShouldSerializeDecoration">
      <summary>
            Determines whether the Decoration property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NThemeStyle.ShouldSerializeGlyph">
      <summary>
            Determines whether the Glyph property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NThemeStyle.ShouldSerializeFocusCue">
      <summary>
            Determines whether the FocusCue property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NThemeStyle.ShouldSerializeFrameStyle">
      <summary>
            Determines whether the FrameStyle property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NThemeStyle.ShouldSerializeTextSmoothingMode">
      <summary>
            Determines whether the TextSmoothingMode property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NThemeStyle.ShouldSerializeTextFillStyle">
      <summary>
            Determines whether the TextFillStyle property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NThemeStyle.ShouldSerializeTextStrokeStyle">
      <summary>
            Determines whether the TextStrokeStyle property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NThemeStyle.ShouldSerializeTextShadowStyle">
      <summary>
            Determines whether the TextShadowStyle property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NThemeStyle.ShouldSerializeTextListStyle">
      <summary>
            Determines whether the TextListStyle property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NThemeStyle.ShouldSerializeTextOffset">
      <summary>
            Determines whether the TextOffset property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NThemeStyle.ShouldSerializeGlyphOffset">
      <summary>
            Determines whether the GlyphOffset property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NThemeStyle.ShouldSerializeFontInfo">
      <summary>
            Determines whether the FontInfo property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NThemeStyle.ShouldSerializeTextRenderingHint">
      <summary>
            Determines whether the TextRenderingHint property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NThemeStyle.ShouldSerializeTextRenderMode">
      <summary>
            Determines whether the TextRenderMode property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NThemeStyle.ShouldSerializeGdiTextFormat">
      <summary>
            Determines whether the GdiTextFormat property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NThemeStyle.ShouldSerializeGdiPlusTextFormat">
      <summary>
            Determines whether the GdiPlusTextFormat property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NThemeStyle.ShouldSerializeRichTextFormat">
      <summary>
            Determines whether the RichTextFormat property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.NThemeStyle.Background">
      <summary>
            Gets/sets the shape entry for this style.
            </summary>
    </member>
    <member name="P:Nevron.UI.NThemeStyle.Decoration">
      <summary>
            Gets/sets the decoration entry for this style.
            </summary>
    </member>
    <member name="P:Nevron.UI.NThemeStyle.Glyph">
      <summary>
            Gets/sets the glyph entry for this style.
            </summary>
    </member>
    <member name="P:Nevron.UI.NThemeStyle.FocusCue">
      <summary>
            Gets/sets the focus cue entry for this style.
            </summary>
    </member>
    <member name="P:Nevron.UI.NThemeStyle.FrameStyle">
      <summary>
            Gets/sets the FrameStyle entry for this style.
            </summary>
    </member>
    <member name="P:Nevron.UI.NThemeStyle.TextSmoothingMode">
      <summary>
            Gets/sets the Graphics smoothing mode to be used when rendering texts.
            </summary>
    </member>
    <member name="P:Nevron.UI.NThemeStyle.TextFillStyle">
      <summary>
            Gets/sets the text fill style.
            </summary>
    </member>
    <member name="P:Nevron.UI.NThemeStyle.TextStrokeStyle">
      <summary>
            Gets/sets the stroke style.
            </summary>
    </member>
    <member name="P:Nevron.UI.NThemeStyle.TextShadowStyle">
      <summary>
            Gets/sets the text shadow style.
            </summary>
    </member>
    <member name="P:Nevron.UI.NThemeStyle.TextListStyle">
      <summary>
            Gets/sets the style which controls list items in formatted texts.
            </summary>
    </member>
    <member name="P:Nevron.UI.NThemeStyle.FontInfo">
      <summary>
            Gets/sets the font information for this style.
            </summary>
    </member>
    <member name="P:Nevron.UI.NThemeStyle.TextRenderingHint">
      <summary>
            Gets/sets the text rendering hint for this style.
            </summary>
    </member>
    <member name="P:Nevron.UI.NThemeStyle.TextRenderMode">
      <summary>
            Gets/sets the text text render mode for this style.
            </summary>
    </member>
    <member name="P:Nevron.UI.NThemeStyle.TextOffset">
      <summary>
            Gets/sets the offset from the default text bounds.
            </summary>
    </member>
    <member name="P:Nevron.UI.NThemeStyle.GlyphOffset">
      <summary>
            Gets/sets the offset from the default glyph bounds.
            </summary>
    </member>
    <member name="P:Nevron.UI.NThemeStyle.GdiTextFormat">
      <summary>
            Gets/sets the object which controls text formatting for drawing GDI texts.
            </summary>
    </member>
    <member name="P:Nevron.UI.NThemeStyle.GdiPlusTextFormat">
      <summary>
            Gets/sets the object which controls text formatting for drawing GDI+ texts.
            </summary>
    </member>
    <member name="P:Nevron.UI.NThemeStyle.RichTextFormat">
      <summary>
            Gets/sets the object which controls text formatting for drawing rich texts.
            </summary>
    </member>
    <member name="P:Nevron.UI.NThemeStyle.State">
      <summary>
            Gets/sets the XML-formatted string representation of the object.
            </summary>
    </member>
    <member name="T:Nevron.UI.NRichTextFormat">
      <summary>
            Summary description for NRichTextFormat.
            </summary>
    </member>
    <member name="P:Nevron.UI.NRichTextFormat.LineTrimStyle">
      <summary>
            Gets/sets the trimming style of lines.
            </summary>
    </member>
    <member name="P:Nevron.UI.NRichTextFormat.ParagraphAlign">
      <summary>
            Gets/sets the alignment of a paragraph.
            </summary>
    </member>
    <member name="P:Nevron.UI.NRichTextFormat.LineSpacing">
      <summary>
            Gets/sets the spacing among text lines.
            </summary>
    </member>
    <member name="P:Nevron.UI.NRichTextFormat.LeftIndent">
      <summary>
            Gets/sets the left indentation of text.
            </summary>
    </member>
    <member name="P:Nevron.UI.NRichTextFormat.RightIndent">
      <summary>
            Gets/sets the right indentation of text.
            </summary>
    </member>
    <member name="P:Nevron.UI.NRichTextFormat.TopSpacing">
      <summary>
            Gets/sets the spacing from the top edge of text.
            </summary>
    </member>
    <member name="P:Nevron.UI.NRichTextFormat.BottomSpacing">
      <summary>
            Gets/sets the spacing from the bottom edge of text.
            </summary>
    </member>
    <member name="P:Nevron.UI.NRichTextFormat.FirstLineIndent">
      <summary>
            Gets/sets the indentation of the first line of the text.
            </summary>
    </member>
    <member name="P:Nevron.UI.NRichTextFormat.BaseLinePosition">
      <summary>
            Gets/sets the base line position of the text.
            Negative values indicate subscript, while positive - superscript.
            </summary>
    </member>
    <member name="T:Nevron.UI.NUIShapeCollection">
      <summary>
            Summary description for NUIShapeCollection.
            </summary>
    </member>
    <member name="T:Nevron.UI.NSizingGripperShape">
      <summary>
            Summary description for NSizingGripperShape.
            </summary>
    </member>
    <member name="T:Nevron.UI.NGripperShape">
      <summary>
            Summary description for NGripperShape.
            </summary>
    </member>
    <member name="M:Nevron.UI.NGripperShape.ShouldSerializeLightColor">
      <summary>
            Determines whether the LightColor property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NGripperShape.ShouldSerializeDarkColor">
      <summary>
            Determines whether the DarkColor property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.NGripperShape.LightColor">
      <summary>
            Gets/sets the light color of the gripper.
            </summary>
    </member>
    <member name="P:Nevron.UI.NGripperShape.DarkColor">
      <summary>
            Gets/sets the dark color of the gripper.
            </summary>
    </member>
    <member name="P:Nevron.UI.NGripperShape.Orientation">
      <summary>
            Gets/sets the orientation of the gripper.
            </summary>
    </member>
    <member name="P:Nevron.UI.NGripperShape.Style">
      <summary>
            Gets/sets the style of the gripper.
            </summary>
    </member>
    <member name="T:Nevron.UI.NUIShapeViewer">
      <summary>
            Summary description for NUIShapePreview.
            </summary>
    </member>
    <member name="P:Nevron.UI.NUIShapeViewer.Shape">
      <summary>
            Gets/sets the shape which is to be previewed.
            </summary>
    </member>
    <member name="T:Nevron.UI.GenericContainerStates">
      <summary>
            Summary description for ArrowButtonStates.
            </summary>
    </member>
    <member name="T:Nevron.UI.INDropDownOwnerElement">
      <summary>
            Represents an element which contains a drop-down part.
            </summary>
    </member>
    <member name="M:Nevron.UI.INDropDownOwnerElement.ShowDropDown">
      <summary>
            Attempts to display the drop-down part.
            </summary>
      <returns>True if operation was successful, false otherwise.</returns>
    </member>
    <member name="M:Nevron.UI.INDropDownOwnerElement.CloseDropDown">
      <summary>
            Attempts to close the drop-down part.
            </summary>
      <returns>True if operation was successful, false otherwise.</returns>
    </member>
    <member name="P:Nevron.UI.INDropDownOwnerElement.DropDownElement">
      <summary>
            Gets/sets the element which will be displayed in the drop-down part.
            This may be any valid INDropDownContainerElement instance.
            For example a NComboBoxElement will display a NListBoxElement as its drop-down.
            </summary>
    </member>
    <member name="P:Nevron.UI.INDropDownOwnerElement.DropDownDirection">
      <summary>
            Gets/sets the direction of the drop-down.
            </summary>
    </member>
    <member name="P:Nevron.UI.INDropDownOwnerElement.AlignmentEdge">
      <summary>
            Gets/sets a bitwise mask which specifies the alignment of the drop-down.
            </summary>
    </member>
    <member name="P:Nevron.UI.INDropDownOwnerElement.DropDownSize">
      <summary>
            Gets/sets the size of the drop-down portion.
            If empty, the preferred size will be calculated.
            </summary>
    </member>
    <member name="P:Nevron.UI.INDropDownOwnerElement.DropDownLocation">
      <summary>
            Gets/sets the location of the drop-down portion.
            If empty, the preferred location, aligned with the current element's bounds, will be calculated.
            </summary>
    </member>
    <member name="T:Nevron.UI.NVisibleFilter">
      <summary>
            Summary description for NVisibleFilter.
            </summary>
    </member>
    <member name="T:Nevron.UI.ToolStrips.INDropDownToolStrip">
      <summary>
            Summary description for INDropDownToolStrip.
            </summary>
    </member>
    <member name="M:Nevron.UI.ToolStrips.INDropDownToolStrip.Display(System.Drawing.Point)">
      <summary>
            Displays the strip on the screen
            </summary>
      <param name="location">
      </param>
    </member>
    <member name="P:Nevron.UI.ToolStrips.INDropDownToolStrip.Owner">
      <summary>
            Gets the item that owns this strip.
            </summary>
    </member>
    <member name="P:Nevron.UI.ToolStrips.INDropDownToolStrip.TopMostOwner">
      <summary>
            Gets the top-most item that owns this strip.
            </summary>
    </member>
    <member name="T:Nevron.UI.ToolStrips.NSplitButtonCommand">
      <summary>
            Summary description for NSplitButtonCommand.
            </summary>
    </member>
    <member name="T:Nevron.UI.NDataNavigatorElement">
      <summary>
            Summary description for NDataNavigatorElement.
            </summary>
    </member>
    <member name="M:Nevron.UI.NDataNavigatorElement.ShouldSerializeDataSource">
      <summary>
            Detemrines wheter the DataSource property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NDataNavigatorElement.ShouldSerializePageSize">
      <summary>
            Detemrines wheter the PageSize property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.NDataNavigatorElement.ShouldSerializeRepeatInterval">
      <summary>
            Detemrines wheter the RepeatInterval property should be serialized.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="E:Nevron.UI.NDataNavigatorElement.IndexChanged">
      <summary>
            Notifies that the current index has changed.
            </summary>
    </member>
    <member name="P:Nevron.UI.NDataNavigatorElement.Current">
      <summary>
            Gets the object at the current index.
            </summary>
    </member>
    <member name="P:Nevron.UI.NDataNavigatorElement.DataSource">
      <summary>
            Gets/sets an IList or IListSource instance which describes the data to navigate through.
            </summary>
    </member>
    <member name="P:Nevron.UI.NDataNavigatorElement.PageSize">
      <summary>
            Gets/sets the page size. That is how many records will be navigated when a page button is clicked.
            </summary>
    </member>
    <member name="P:Nevron.UI.NDataNavigatorElement.RecordIndex">
      <summary>
            Gets/sets the index of the current record.
            </summary>
    </member>
    <member name="P:Nevron.UI.NDataNavigatorElement.RepeatInterval">
      <summary>
            Gets/sets the repeat interval of the buttons. Specify 0 to prevent auto-repeating.
            </summary>
    </member>
    <member name="P:Nevron.UI.NDataNavigatorElement.DefaultDataSource">
      <summary>
            Gets the default value of the DataSource property.
            </summary>
    </member>
    <member name="P:Nevron.UI.NDataNavigatorElement.DefaultPageSize">
      <summary>
            Gets the default value of the PageSize property.
            </summary>
    </member>
    <member name="P:Nevron.UI.NDataNavigatorElement.DefaultRepeatInterval">
      <summary>
            Gets the default value of the PageSize property.
            </summary>
    </member>
    <member name="T:Nevron.UI.NCalculatorButtonFilter">
      <summary>
            Summary description for NCalculatorButtonFilter.
            </summary>
    </member>
    <member name="T:Nevron.UI.NUISystem">
      <summary>
            Summary description for NUISystem.
            </summary>
    </member>
    <member name="T:Nevron.UI.NImageAnimationInfo">
      <summary>
            Summary description for NImageAnimationInfo.
            </summary>
    </member>
    <member name="P:Nevron.UI.NImageAnimationInfo.Interval">
      <summary>
            Gets/sets the interval between animation steps.
            </summary>
    </member>
    <member name="P:Nevron.UI.NImageAnimationInfo.Steps">
      <summary>
            Gets/sets the animation steps.
            </summary>
    </member>
    <member name="P:Nevron.UI.NImageAnimationInfo.Fade">
      <summary>
            Gets/sets a value whether an alpha effect will be applied on the animation.
            </summary>
    </member>
    <member name="P:Nevron.UI.NImageAnimationInfo.Slide">
      <summary>
            Gets/sets a value whether a slide effect will be applied on the animation.
            </summary>
    </member>
    <member name="P:Nevron.UI.NImageAnimationInfo.Scroll">
      <summary>
            Gets/sets a value whether a scroll effect will be applied on the animation.
            </summary>
    </member>
    <member name="P:Nevron.UI.NImageAnimationInfo.Hide">
      <summary>
            Gets/sets a value whether the operation will hide the animated image.
            </summary>
    </member>
    <member name="P:Nevron.UI.NImageAnimationInfo.Animatable">
      <summary>
            Gets a value indicating whether the current animation flags are not empty.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NColorF.ChangeColorBrightness(System.Single)">
      <summary>
            Changes the brightness of the color.
            </summary>
      <param name="correctionFactor">The brightness correction factor. Must be between -1 and 1. 
            Negative values produce darker colors.</param>
    </member>
    <member name="M:Nevron.GraphicsCore.NColorF.Equals(System.Object)">
      <summary>
            Tests whether the specified object is a NColorF structure and is equivalent to this NColorF structure.
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NColorF.ChangeColorBrightness(System.Drawing.Color,System.Single)">
      <summary>
            Creates color with corrected brightness.
            </summary>
      <param name="color">Color to correct.</param>
      <param name="correctionFactor">The brightness correction factor. Must be between -1 and 1. 
            Negative values produce darker colors.</param>
      <returns>
            Corrected <see cref="P:Nevron.GraphicsCore.NColorF.Color" /> structure.
            </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NColorF.GenerateGradients(System.Drawing.Color,System.Drawing.Color,System.Int32)">
      <summary>
            Calculates the given number of gradients from color1 to color2 (including them both).
            </summary>
      <param name="color1">The start color.</param>
      <param name="color2">The end color.</param>
      <param name="steps">The number of gradient colors to generate.</param>
      <returns>The generated gradiebr colors.</returns>
    </member>
    <member name="T:Nevron.GraphicsCore.NTextureMappingStyle">
      <summary>
            Controls how texture based fillings are mapped on the object
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NTextureMappingStyle.BorderColor">
      <summary>
            The color used to fill the parts of the object not covered by the texture.
            </summary>
      <remarks>
            Certain texture mapping modes like center, stretch to width, stretch to height etc. leave parts of the object that the texture is applied to uncovered. You can control the color of these parts by using the BorderColor property
            </remarks>
    </member>
    <member name="P:Nevron.GraphicsCore.NTextureMappingStyle.MapLayout">
      <summary>
            Controls how the texture is positioned relative to the object.
            </summary>
      <remarks>
            The most commonly used layout types are MapLayout.Stretched and MapLayout.Tiled. 
            </remarks>
    </member>
    <member name="P:Nevron.GraphicsCore.NTextureMappingStyle.MapMode">
      <summary>
            Controls the mapping mode used by the drawing engine.
            </summary>
      <remarks>
            There are three mapping types, but you'll most likely use only the relative to object mapping type (MapMode.RelativeToObject) where texture coordinates are computed relatively to the object position. 
            </remarks>
    </member>
    <member name="P:Nevron.GraphicsCore.NTextureMappingStyle.HorizontalScale">
      <summary>
            An additional scale in the X dimension to be applied to the texture when mapped.
            </summary>
      <remarks>
            The default value is 1.0f meaning no additional scaling. 
            </remarks>
    </member>
    <member name="P:Nevron.GraphicsCore.NTextureMappingStyle.VerticalScale">
      <summary>
            An additional scale in the Y dimension to be applied to the texture when mapped. 
            </summary>
      <remarks>
            The default value is 1.0f meaning no additional scaling. 
            </remarks>
    </member>
    <member name="T:Nevron.GraphicsCore.NColorAnimation">
      <summary>
            Changes the color of an object over time.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NColorAnimation.Clone">
      <summary>
            Creates an identical copy of this animation object.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NColorAnimation.StartColor">
      <summary>
            The initial color of the animated object. By default set to white.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NColorAnimation.EndColor">
      <summary>
            The final color value of the animated object. By default set to black.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NColorAnimation.AnimationType">
      <summary>
            Gets the type of this animation.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NMeasurementSystemManager">
      <summary>
            Represents the measurement system manager
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NMeasurementSystemManager.GetMeasurementSystemFromName(System.String@)">
      <summary>
            Obtains a measurement system by its name
            </summary>
      <param name="name">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NMeasurementSystemManager.GetMeasurementUnitFromAbbreviation(System.String@)">
      <summary>
            Obtains a measurement unit by its abbreviation
            </summary>
      <param name="abbreviation">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NMeasurementSystemManager.GetMeasurementUnitFromName(System.String@)">
      <summary>
            Obtains a measurement unit by its name
            </summary>
      <param name="name">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NMeasurementSystemManager.GetUnitMeasurementSystem(Nevron.GraphicsCore.NMeasurementUnit)">
      <summary>
            Returns the measurement system containing the measurement unit.
            </summary>
      <param name="measurementUnit">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NMeasurementSystemManager.ProvideMeasurementSystemManager(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
            Provides a measurement system manager
            </summary>
      <param name="context">
      </param>
      <returns>
      </returns>
    </member>
    <member name="F:Nevron.GraphicsCore.NMeasurementSystemManager.DefaultMeasurementSystemManager">
      <summary>
            The default measurement system maanager, which is initialized with the predefined measurement unit systems
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NMeasurementSystemManager.MeasurementSystems">
      <summary>
            Gets measurements systems included in this measurement system manager.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NMeasurementSystemManager.GraphicsMeasurementUnits">
      <summary>
            Gets the measurement units used for graphics objects
            of this measurement system manager.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NMeasurementSystemManager.DefaultMeasurementUnit">
      <summary>
            The default measurement unit.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NInchGraphicsUnit">
      <summary>
            Represents the inch graphics measurement unit.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NInchGraphicsUnit.ConvertXValueToPixels(Nevron.GraphicsCore.NMeasurementUnitConverter)">
      <summary>
            Converts this measurement unit to its equivalent in pixels along the X direction.
            </summary>
      <param name="converter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NInchGraphicsUnit.ConvertYValueToPixels(Nevron.GraphicsCore.NMeasurementUnitConverter)">
      <summary>
            Converts this measurement unit to its equivalent in pixels along the Y direction.
            </summary>
      <param name="converter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NInchGraphicsUnit.Abbreviation">
      <summary>
            The abbreviation of this measurement unit.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NInchGraphicsUnit.GraphicsUnit">
      <summary>
            Gets the english unit of the object.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NInchGraphicsUnit.UnitType">
      <summary>
            The measurement unit type.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NInchGraphicsUnit.ScaleToInch">
      <summary>
            The scale to inch of this measurement unit.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NInchGraphicsUnit.DefaultValueFormat">
      <summary>
            The default value format of this measurement unit.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NPointL">
      <summary>
            Represents a point, defined as an ordered pair of lengths (X, Y), which control the point coordinates in two dimensional space.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NPointL.Equals(System.Object)">
      <summary>
            Determines whether the points are equal.
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NPointL.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NPointL.ToString">
      <summary>
            Obtains the string representation of this point.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NPointL.Parse(System.String@,Nevron.GraphicsCore.NMeasurementSystemManager)">
      <summary>
            Converts the string representation of a point to its NPointL equivalent.
            </summary>
      <param name="s">
      </param>
      <param name="measurementSystemManager">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NPointL.CompareTo(System.Object)">
      <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="F:Nevron.GraphicsCore.NPointL.X">
      <summary>
            The X coordinate of the point in NLength format.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NPointL.Y">
      <summary>
            The Y coordinate of the point in NLength format.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NPointL.Empty">
      <summary>
            The empty (0, 0) point.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NRasterImageFormatProvider">
      <summary>
            The NRasterImageFormatProvider class represents a format provider, which 
            serves as base class for all raster image format providers
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NRasterImageFormatProvider.ProvideImage(Nevron.GraphicsCore.NSize,Nevron.GraphicsCore.NResolution,Nevron.GraphicsCore.INImageFormat)">
      <summary>
            Provides a raster image with the specifies dimensions and format.
            </summary>
      <param name="dimensions">
      </param>
      <param name="resolution">
      </param>
      <param name="imageFormat">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRasterImageFormatProvider.UpdateBitmap(System.Drawing.Bitmap,Nevron.GraphicsCore.NResolution)">
      <summary>
            Must override to update the internally created bitmap
            </summary>
      <param name="bitmap">
      </param>
      <param name="resolution">
      </param>
    </member>
    <member name="P:Nevron.GraphicsCore.NRasterImageFormatProvider.ProvidedMimeTypes">
      <summary>
            Obtains an array of the provided mime types
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Text.NTextViewUpdateService">
      <summary>
            Update the view when document elements change
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Text.NTextRepaintService">
      <summary>
            Summary description for NTextRepaintService.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Text.NTextDocumentState">
      <summary>
            Summary description for NTextDocumentState.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Shapes.NRectangleShape">
      <summary>
            Summary description for NRectangleShape.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Shapes.NPolylineGraphicsNode">
      <summary>
            Summary description for NPolylineGraphicsNode.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.Shapes.NPolylineGraphicsNode.Paint(Nevron.GraphicsCore.Shapes.NGraphicsPaintContext)">
      <summary>
            Paints this node.
            </summary>
      <param name="context">
      </param>
    </member>
    <member name="T:Nevron.GraphicsCore.Shapes.NRotateCommandNode">
      <summary>
            Summary description for NRotateCommandNode.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Shapes.NImageFiltersStyleCommandNode">
      <summary>
            Summary description for NImageFiltersStyleGraphicsNode.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NRectangleF">
      <summary>
            The NRectangleF structure represents a rectangle in 2D space defined by it's location and size
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangleF.Translate(System.Single,System.Single)">
      <summary>
            Translates the primitive with the specified amounts
            </summary>
      <param name="dx">
      </param>
      <param name="dy">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangleF.Translate(Nevron.GraphicsCore.NPointF)">
      <summary>
            Translates the primitive with the specified offset
            </summary>
      <param name="offset">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangleF.AddToGraphicsPath(System.Drawing.Drawing2D.GraphicsPath)">
      <summary>
            Appends the primitive to the specified graphics path
            </summary>
      <param name="path">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangleF.ContainsOnOutline(Nevron.GraphicsCore.NPointF,System.Single)">
      <summary>
            Determines whether the outline of the rectangle contains the specified point
            </summary>
      <param name="point">
      </param>
      <param name="weight">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangleF.ContainsOnOutline(Nevron.GraphicsCore.NPointF,System.Drawing.Pen)">
      <summary>
            Determines whether the outline of the rectangle contains the specified point
            </summary>
      <param name="point">
      </param>
      <param name="pen">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangleF.Contains(Nevron.GraphicsCore.NPointF)">
      <summary>
            Determines whether the rectangle contains the specified point
            </summary>
      <param name="point">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangleF.Contains(Nevron.GraphicsCore.NPointF,System.Drawing.Drawing2D.FillMode)">
      <summary>
            Determines whether the primitive interior contains the specified point
            </summary>
      <param name="point">
      </param>
      <param name="fillMode">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangleF.Equals(System.Object)">
      <summary>
      </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangleF.GetHashCode">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangleF.ToString">
      <summary>
            Returns the string representation of this object
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangleF.Inflate(System.Single,System.Single)">
      <summary>
            Inflates the rectangle with the specified amounts
            </summary>
      <param name="x">
      </param>
      <param name="y">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangleF.Inflate(Nevron.GraphicsCore.NSizeF)">
      <summary>
            Inflates the rectangle with the specified size
            </summary>
      <param name="size">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangleF.Scale(System.Single,System.Single)">
      <summary>
            Scales the rectangle with the specified factors
            </summary>
      <param name="scaleX">
      </param>
      <param name="scaleY">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangleF.Contains(System.Single,System.Single)">
      <summary>
            Determines whether the rectangle contains the point with the specified coordinates
            </summary>
      <remarks>
            This method considers the a point on the right and and bottoms sides of the rectangle as an outside point
            </remarks>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangleF.Contains(Nevron.GraphicsCore.NRectangleF)">
      <summary>
            Determines whether the rectangle contains the specified rectangle
            </summary>
      <param name="rect">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangleF.Contains(Nevron.GraphicsCore.NLineSegmentF)">
      <summary>
            Determines whether the rectangle contains the specified line
            </summary>
      <param name="line">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangleF.IncludePoint(Nevron.GraphicsCore.NPointF)">
      <summary>
            Includes the point in this rectangle
            </summary>
      <param name="point">
      </param>
      <returns>
      </returns>
      <remarks>
            Returns the minimum rectangle that bounds the point and this rectangle
            </remarks>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangleF.InclusiveContains(System.Single,System.Single)">
      <summary>
            Determines whether the rectangle contains the point with the specified coordinates
            </summary>
      <remarks>
            This method considers the a point on the right and and bottoms sides of the rectangle as an inside point
            </remarks>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangleF.InclusiveIntersectsWith(Nevron.GraphicsCore.NRectangleF)">
      <summary>
            Determines whether this rectangle intersects with the specified rectangle
            </summary>
      <param name="rect">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangleF.IntersectsWith(Nevron.GraphicsCore.NRectangleF)">
      <summary>
            Determines whether this rectangle intersects with the specified rectangle
            </summary>
      <param name="rect">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangleF.Intersection(Nevron.GraphicsCore.NRectangleF)">
      <summary>
            Returns a third rectangle that represents the intersection of two rectangles.
            If there is no intersection, the Empty rectangle is returned.
            </summary>
      <param name="rect">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangleF.OutlineIntersectsWith(Nevron.GraphicsCore.NRectangleF)">
      <summary>
            Determines whether this rectangle outline intersects with the passed rect
            </summary>
      <param name="rect">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangleF.IntersectsWith(Nevron.GraphicsCore.NLineSegmentF)">
      <summary>
            Determines whether this rectangle intersects with the specified line
            </summary>
      <param name="line">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangleF.AreaIntersectsWith(Nevron.GraphicsCore.NCircleF)">
      <summary>
            Determines whether this rectangle intersects with the specified circle
            </summary>
      <param name="circle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangleF.IntersectWith(Nevron.GraphicsCore.NLineSegmentF,Nevron.GraphicsCore.NPointFList@)">
      <summary>
            Intersects this rectangle with the specified line segment
            </summary>
      <param name="line">line segment with which to intersect</param>
      <param name="intersectionPoints">resulting intersection points (valid only if the method returned true</param>
      <returns>true if this rectangle intersects with the line segment, otherwise false</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangleF.IntersectWithRadianRay(System.Single,System.Int32@)">
      <summary>
            Intersects this rectangle with the ray from the bounds central point
            </summary>
      <param name="angle">in radians</param>
      <param name="sideIndex">side index, for side index numbers check IntersectsWithRadianLine</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangleF.IntersectWithRadianLine(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF@,System.Int32@)">
      <summary>
            Intersects this rectangle with a line connecting the rectangle center and the specified point
            </summary>
      <param name="pt">point which forms a line with the rectangle center</param>
      <param name="intersectionPoint">resulting intersection point (if the method returned true)</param>
      <param name="sideIndex">resulting index of the crossed side (if the method returned true (enumeration is left, top, right, bottom)</param>
      <returns>true if the intersection was successful, otherwise false</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangleF.IntersectionArea(Nevron.GraphicsCore.NRectangleF)">
      <summary>
            Computes the intersection area of this rect with the specified rect
            </summary>
      <param name="rect">
      </param>
      <returns>zero if rects do not intersect, otherwise returns the intersection area</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangleF.Normalize">
      <summary>
            Normalizes this rectangle 
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangleF.GetCompassPoint(Nevron.GraphicsCore.CompassDirection)">
      <summary>
            Obtains the point on the rectangle rim, which corresponds to the specified compass direction
            </summary>
      <param name="direction">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangleF.GetOppositeCompassPoint(Nevron.GraphicsCore.CompassDirection)">
      <summary>
            Obtains the point on the rectangle rim, which corresponds to the specified compass direction
            </summary>
      <param name="direction">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangleF.ToRectangleF">
      <summary>
            Converts this rectangle to RectangleF
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangleF.ToRectangle">
      <summary>
            Converts this rectangle to Rectangle
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangleF.ToNRectangle">
      <summary>
            Converts this rectangle to Rectangle
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangleF.ToNRange2DF">
      <summary>
            Converts this rectangle to NRange2DF
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangleF.Round">
      <summary>
            Round this rectangle
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangleF.Union(Nevron.GraphicsCore.NRectangleF)">
      <summary>
            Creates the smallest possible third rectangle that can contain the two rectangles that form a union.
            </summary>
      <param name="rect">
      </param>
      <returns>
      </returns>
    </member>
    <member name="F:Nevron.GraphicsCore.NRectangleF.X">
      <summary>
            X coordinate of the left top corner
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NRectangleF.Y">
      <summary>
            Y coordinate of the left top corner
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NRectangleF.Width">
      <summary>
            Rectangle width
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NRectangleF.Height">
      <summary>
            Rectangle height
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangleF.ResizeRectangle(Nevron.GraphicsCore.NRectangleF,Nevron.GraphicsCore.CompassDirection,System.Single,System.Single,System.Boolean)">
      <summary>
            Computes a new rect for an expected resize of a rectangle in the specified compass direction
            </summary>
      <param name="rect">rectangle to resize</param>
      <param name="direction">compass direction of the handle, which is resized</param>
      <param name="dx">x handle change</param>
      <param name="dy">y handle change</param>
      <param name="canChangeAspectRatio">indicates whether the change of the aspect ratio is allowed</param>
      <returns>resized rectangle</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangleF.FitRectangle(Nevron.GraphicsCore.NRectangleF,System.Single)">
      <summary>
            Returns the fitted rectangle with the specified orientation (in degrees)
            </summary>
      <param name="rect">
      </param>
      <param name="orientation">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangleF.FromLTRB(System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Gets a rectangle from the coordinates of it's sides
            </summary>
      <param name="left">
      </param>
      <param name="top">
      </param>
      <param name="right">
      </param>
      <param name="bottom">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangleF.FromTwoPoints(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
      <summary>
            Gets a normalized rectangle from two points
            </summary>
      <param name="point1">
      </param>
      <param name="point2">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangleF.FromTwoPoints(System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Gets a normalized rectangle from two points
            </summary>
      <param name="x1">
      </param>
      <param name="y1">
      </param>
      <param name="x2">
      </param>
      <param name="y2">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangleF.FromCenterAndSize(Nevron.GraphicsCore.NPointF,System.Single,System.Single)">
      <summary>
            Gets a rectangle from center and dimensions
            </summary>
      <param name="center">
      </param>
      <param name="width">
      </param>
      <param name="height">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangleF.Union(Nevron.GraphicsCore.NRectangleF,Nevron.GraphicsCore.NRectangleF)">
      <summary>
            Creates the smallest possible third rectangle that can contain the two rectangles that form a union.
            </summary>
      <param name="a">
      </param>
      <param name="b">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangleF.Intersection(Nevron.GraphicsCore.NRectangleF,Nevron.GraphicsCore.NRectangleF)">
      <summary>
            Returns a third rectangle that represents the intersection of two rectangles.
            If there is no intersection, the Empty rectangle is returned.
            </summary>
      <param name="a">
      </param>
      <param name="b">
      </param>
      <returns>
      </returns>
    </member>
    <member name="F:Nevron.GraphicsCore.NRectangleF.Empty">
      <summary>
            The empty rectangle
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NRectangleF.Bounds">
      <summary>
            Gets the minimal enclosing rectangle
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NRectangleF.BoundsRange">
      <summary>
            Gets the minimal enclosing 2D range
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NRectangleF.IsFlat">
      <summary>
            Determines whether this is a flat primitive
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NRectangleF.Vertices">
      <summary>
            Gets an array with the rectangle vertices,
            enumerated in a top, right, bottom and left order.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NRectangleF.Middles">
      <summary>
            Gets an array with the rectangle sides middle points,
            enumerated in a top, right, bottom and left order.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NRectangleF.VerticesAndMiddles">
      <summary>
            Gets an array with the rectangle vertices and middles enumerated clockwise starting from the left-top vertex
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NRectangleF.Right">
      <summary>
            Gets the right side of the rectangle
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NRectangleF.Bottom">
      <summary>
            Gets the bottom side of the rectangle
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NRectangleF.Size">
      <summary>
            Gets/sets the size of this rectangle
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NRectangleF.Location">
      <summary>
            Gets/sets the rectangle location (left-top corner)
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NRectangleF.RightBottom">
      <summary>
            Gets the rectangle right bottom corner
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NRectangleF.RightTop">
      <summary>
            Gets the rectangle right top corner
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NRectangleF.LeftBottom">
      <summary>
            Gets the rectangle left bottom corner
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NRectangleF.Center">
      <summary>
            Gets/Sets the rectangle center.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NRectangleF.Area">
      <summary>
            Obtains the rectangle area (width * Height)
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NRectangleF.Perimeter">
      <summary>
            Obtains the rectangle perimeter (2 * width) + (2 * Height)
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NRectangleF.IsEmpty">
      <summary>
            Determines whether the rectangle is with zero Width or Height
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NRectangleF.IsNormalized">
      <summary>
            Determines whether the rectangle is normalized (both width and height are not negative)
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NEllipticalArcF">
      <summary>
            Represents an arc of an ellipse in 2D space, defined by three points, ellipse angle and ratio between the ellipse major and minor axes
            </summary>
      <remarks>
            The elliptical arc is defined by three points, which lay on an ellipse. The ellipse is defined with three points, angle and ratio.
            The arc starts from the start point, passes through the control point and ends in the end point.
            </remarks>
    </member>
    <member name="M:Nevron.GraphicsCore.NEllipticalArcF.Translate(System.Single,System.Single)">
      <summary>
            Translates the primitive with the specified amounts
            </summary>
      <param name="dx">
      </param>
      <param name="dy">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NEllipticalArcF.Translate(Nevron.GraphicsCore.NPointF)">
      <summary>
            Translates the primitive with the specified offset
            </summary>
      <param name="offset">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NEllipticalArcF.AddToGraphicsPath(System.Drawing.Drawing2D.GraphicsPath)">
      <summary>
            Appends the primitive to the specified graphics path
            </summary>
      <param name="path">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NEllipticalArcF.ContainsOnOutline(Nevron.GraphicsCore.NPointF,System.Single)">
      <summary>
            Determines whether the outline of the primitive contains the specified point
            </summary>
      <param name="point">
      </param>
      <param name="weight">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NEllipticalArcF.ContainsOnOutline(Nevron.GraphicsCore.NPointF,System.Drawing.Pen)">
      <summary>
      </summary>
      <param name="point">
      </param>
      <param name="pen">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NEllipticalArcF.Equals(System.Object)">
      <summary>
      </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NEllipticalArcF.GetHashCode">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NEllipticalArcF.ToString">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NEllipticalArcF.ToNEllipseSegmentF">
      <summary>
            Converts this arc to NEllipseSegmentF
            </summary>
      <returns>
      </returns>
    </member>
    <member name="F:Nevron.GraphicsCore.NEllipticalArcF.Start">
      <summary>
            Start point
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NEllipticalArcF.Control">
      <summary>
            Control point
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NEllipticalArcF.End">
      <summary>
            End point
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NEllipticalArcF.Angle">
      <summary>
            The angle, which the major ellipse axis forms with the X axis
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NEllipticalArcF.Ratio">
      <summary>
            The ratio between the major and minor ellipse axes
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NEllipticalArcF.Empty">
      <summary>
            The Empty elliptical arc
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NEllipticalArcF.Bounds">
      <summary>
            Gets the minimal enclosing rectangle
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NEllipticalArcF.BoundsRange">
      <summary>
            Gets the minimal enclosing 2D range
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NEllipticalArcF.IsFlat">
      <summary>
            Determines whether this is a flat primitive
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NEllipticalArcF.StartPoint">
      <summary>
            Gets/sets the start point of the open figure
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NEllipticalArcF.EndPoint">
      <summary>
            Gets/sets the end point of the open figure
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NEllipticalArcF.StartAngle">
      <summary>
            Obtains the angle, which the start point forms with the center of the circle 
            to which the arc belongs (in degrees)
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NEllipticalArcF.SweepAngle">
      <summary>
            Obtains the angle formed by the lines connecting the arc start and end points 
            with the circle center (in radians)
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NCircularArcToCommand">
      <summary>
            The NCircularArcToCommand class represents a command, 
            which draws a circular arc from the previus command location to this command location
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NCircularArcToCommand.Clone">
      <summary>
            Overriden to create a cloned move to command
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NCircularArcToCommand.Translate(System.Single,System.Single)">
      <summary>
            Translates this command with the specified amounts
            </summary>
      <remarks>
            Overriden to translate the control points
            </remarks>
      <param name="dx">
      </param>
      <param name="dy">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NCircularArcToCommand.Scale(System.Single,System.Single,Nevron.GraphicsCore.NPointF)">
      <summary>
            Scales this command around the specified pin with the specified scale factors
            </summary>
      <remarks>
            Overriden to scale the control point
            </remarks>
      <param name="scaleX">x scale</param>
      <param name="scaleY">y scale</param>
      <param name="pin">pin</param>
    </member>
    <member name="M:Nevron.GraphicsCore.NCircularArcToCommand.AccumulateBounds(Nevron.GraphicsCore.NRange2DF@)">
      <summary>
            Accumulates the bounds of this command in the specified range
            </summary>
      <param name="range">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NCircularArcToCommand.AddToGraphicsPath(System.Drawing.Drawing2D.GraphicsPath,Nevron.GraphicsCore.NPathCommand)">
      <summary>
            Overriden to draw a circular arc from the previous command location to this command location
            </summary>
      <param name="path">
      </param>
      <param name="prevCommand">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NCircularArcToCommand.CreatePrimitive(Nevron.GraphicsCore.NPathCommand)">
      <summary>
            Overriden to return an instance of the NCircleSegmentF primitive
            </summary>
      <param name="prevCommand">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NCircularArcToCommand.Type">
      <summary>
            Overriden to return CircularArcTo
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NCircularArcToCommand.ControlX">
      <summary>
            Gets/sets the X coordinate of the control point
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NCircularArcToCommand.ControlY">
      <summary>
            Gets/sets the Y coordinate of the control point
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NCircularArcToCommand.ControlPoint">
      <summary>
            Gets/sets the control point location
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NBezierCurveToCommand">
      <summary>
            The NBezierCurveToCommand class represents a command, 
            which draws a bezier curve from the previus command location to this command location
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NBezierCurveToCommand.Clone">
      <summary>
            Overriden to create a cloned move to command
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NBezierCurveToCommand.Translate(System.Single,System.Single)">
      <summary>
            Translates this command with the specified amounts
            </summary>
      <remarks>
            Overriden to translate the control points
            </remarks>
      <param name="dx">
      </param>
      <param name="dy">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NBezierCurveToCommand.Scale(System.Single,System.Single,Nevron.GraphicsCore.NPointF)">
      <summary>
            Scales this command around the specified pin with the specified scale factors
            </summary>
      <remarks>
            Overriden to scale the control points
            </remarks>
      <param name="scaleX">x scale</param>
      <param name="scaleY">y scale</param>
      <param name="pin">pin</param>
    </member>
    <member name="M:Nevron.GraphicsCore.NBezierCurveToCommand.AccumulateBounds(Nevron.GraphicsCore.NRange2DF@)">
      <summary>
            Accumulates the bounds of this command in the specified range
            </summary>
      <param name="range">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NBezierCurveToCommand.AddToGraphicsPath(System.Drawing.Drawing2D.GraphicsPath,Nevron.GraphicsCore.NPathCommand)">
      <summary>
            Overriden to draw a line from the previous command location to this command location
            </summary>
      <param name="path">
      </param>
      <param name="prevCommand">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NBezierCurveToCommand.CreatePrimitive(Nevron.GraphicsCore.NPathCommand)">
      <summary>
            Overriden to return an instance of the NBezierCurveF primitive
            </summary>
      <param name="prevCommand">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NBezierCurveToCommand.Type">
      <summary>
            Overriden to return BezierCurveTo
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NBezierCurveToCommand.FirstControlX">
      <summary>
            Gets/sets the X coordinate of the bezier curve first control point
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NBezierCurveToCommand.FirstControlY">
      <summary>
            Gets/sets the Y coordinate of the bezier curve first control point
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NBezierCurveToCommand.FirstControlPoint">
      <summary>
            Gets/sets the first control point location
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NBezierCurveToCommand.SecondControlX">
      <summary>
            Gets/sets the X coordinate of the bezier curve second control point
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NBezierCurveToCommand.SecondControlY">
      <summary>
            Gets/sets the Y coordinate of the bezier curve second control point
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NBezierCurveToCommand.SecondControlPoint">
      <summary>
            Gets/sets the second control point location
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NVector2DF">
      <summary>
            The NVector2DF structure represents a vector in 2D space defined by it's X and Y coordinates
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NVector2DF.Equals(System.Object)">
      <summary>
      </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NVector2DF.GetHashCode">
      <summary>
            Serves as a hash function for a particular type, suitable
            for use in hashing algorithms and data structures like a hash table.
            </summary>
      <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NVector2DF.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NVector2DF.Multiply(System.Single)">
      <summary>
            Performs a scalar multiplication of this vector with the specified scalar and returns the resulting vector
            </summary>
      <param name="scalar">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NVector2DF.Divide(System.Single)">
      <summary>
            Performs a scalar division of a vector
            </summary>
      <param name="scalar">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NVector2DF.DotProduct(Nevron.GraphicsCore.NVector2DF)">
      <summary>
            Computes the dot product of this vector with another vector
            </summary>
      <remarks>
            Geometrically the dot product is |a| * |b| * cos(angle). 
            Where angle is the angle between the two vectors, 
            |a| is the length of this vector  and |b| is the length of the specified vector.
            </remarks>
      <param name="vector">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NVector2DF.PerpDotProduct(Nevron.GraphicsCore.NVector2DF)">
      <summary>
            Computes the perpendicular dot product of this vector with another vector
            </summary>
      <remarks>
            Geometrically the perpendicular dot product is |a| * |b| * sin(angle). 
            Where angle is the angle between the two vectors, 
            |a| is the length of this vector and |b| is the length of the specified vector.
            </remarks>
      <param name="vector">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NVector2DF.Normalize">
      <summary>
            Makes this vector the unit vector (e.g. its length becomes 1)
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NVector2DF.Inverse">
      <summary>
            Inverses this vector (e.g. makes this vector with oposite direction)
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NVector2DF.ToPointF">
      <summary>
            Converts this vector to PointF
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NVector2DF.ToNPointF">
      <summary>
            Converts this vector to NPointF
            </summary>
      <returns>
      </returns>
    </member>
    <member name="F:Nevron.GraphicsCore.NVector2DF.X">
      <summary>
            X coordinate
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NVector2DF.Y">
      <summary>
            Y coordinate
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NVector2DF.Empty">
      <summary>
            The empty (zero) vector
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NVector2DF.UnitX">
      <summary>
            The X unit vector
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NVector2DF.UnitY">
      <summary>
            The Y unit vector
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NVector2DF.Length">
      <summary>
            Gets the vector lenght
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NVector2DF.LengthSquare">
      <summary>
            Gets the vector lenght square (length * length)
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NVector2DF.NormalVector">
      <summary>
            Gets a vector, which is perpendicular to this vector
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NVector2DF.NormalUnitVector">
      <summary>
            Gets the unit vector (with length == 1), which is perpendicular to this vector
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NVector2DF.IsNormalized">
      <summary>
            Determines whether the vector is the unit vector (e.g. Length == 1)
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NVector2DF.IsEmpty">
      <summary>
            Determines whether this is the empty (zero) vector (e.g. x == 0 and y == 0)
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NMatrixD">
      <summary>
            Summary description for NMatrixD.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NMatrixD.GetHashCode">
      <summary>
            The hash code for the current object.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NMatrixD.SetSize(System.Int32,System.Int32)">
      <summary>
      </summary>
      <param name="cols">
      </param>
      <param name="rows">
      </param>
    </member>
    <member name="T:Nevron.GraphicsCore.NDegreeAngleUnit">
      <summary>
            Represents the degree angle unit
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NDegreeAngleUnit.ToDegrees(System.Single)">
      <summary>
            Returns the angle converted to degrees
            </summary>
      <param name="angle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NDegreeAngleUnit.ToRadians(System.Single)">
      <summary>
            Returns the angle converted to radians
            </summary>
      <param name="angle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NDegreeAngleUnit.ToGrads(System.Single)">
      <summary>
            Returns the angle converted to grads
            </summary>
      <param name="angle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NDegreeAngleUnit.GetCycle">
      <summary>
            Gets the anglular cycle for this unit
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NDegreeAngleUnit.Normalize(System.Single)">
      <summary>
            Normalizes an angle measured in degrees
            </summary>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NDegreeAngleUnit.ToString">
      <summary>
            Returns the string representation of this object
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NDegreeAngleUnit.AngleUnit">
      <summary>
            Gets the angle unit 
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NAngleUnitSerializer">
      <summary>
            Implements graphics units serialization
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NAngleUnitSerializer.GetRealObject(System.Runtime.Serialization.StreamingContext)">
      <summary>
            Overriden to return an instance of a metric unit
            </summary>
      <param name="context">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.Editors.NFrameStylePreviewRenderer">
      <summary>
            Summary description for NFrameStylePreviewRenderer.
            </summary>
    </member>
    <member name="P:Nevron.Editors.NFrameStylePreviewRenderer.Style">
      <summary>
            Sets the NBackplaneStyle used to create the preview.
            </summary>
    </member>
    <member name="T:Nevron.Editors.NRadialFrameStyleEditorUC">
      <summary>
            Summary description for NRadialFrameStyleEditorUC.
            </summary>
    </member>
    <member name="M:Nevron.Editors.NRadialFrameStyleEditorUC.Dispose(System.Boolean)">
      <summary> 
            Clean up any resources being used.
            </summary>
    </member>
    <member name="P:Nevron.Editors.NRadialFrameStyleEditorUC.Style">
      <summary>
            Gets/sets NStandardFrameStyle object to edit.
            </summary>
    </member>
    <member name="T:Nevron.Editors.NSmartShapeCanvasSettings">
      <summary>
            The NSmartShapeCanvasSettings class is used to encapsulate the editable and persistent 
            settings of the smart shape canvas
            </summary>
    </member>
    <member name="M:Nevron.Editors.NSmartShapeCanvasSettings.UpdateReferences(Nevron.INReferenceProvider)">
      <summary>
      </summary>
      <param name="provider">
      </param>
    </member>
    <member name="M:Nevron.Editors.NSmartShapeCanvasSettings.CreateNonSerializedObjects">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.Editors.NSmartShapeCanvasSettings.GetReferenceProvider">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Editors.NSmartShapeCanvasSettings.ProvideReference(System.Type)">
      <summary>
      </summary>
      <param name="parentType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Editors.NSmartShapeCanvasSettings.ShowDialog">
      <summary>
            Shows a dialog which can be used for the visual editing of the path sheet canvas settings
            </summary>
    </member>
    <member name="M:Nevron.Editors.NSmartShapeCanvasSettings.OnHandleStyleChanged(Nevron.Editors.NHandleStyle)">
      <summary>
            Called by handles, when the specified handle style has changed
            </summary>
      <param name="style">
      </param>
    </member>
    <member name="M:Nevron.Editors.NSmartShapeCanvasSettings.Invalidate">
      <summary>
            Invalidates the canvas to which the settings belong
            </summary>
    </member>
    <member name="M:Nevron.Editors.NSmartShapeCanvasSettings.InvalidateCache">
      <summary>
            Invalidates the cashe of the canvas to which the settings belong
            </summary>
    </member>
    <member name="M:Nevron.Editors.NSmartShapeCanvasSettings.OnChanged">
      <summary>
            Called when the settings have changed - fires the Changed event
            </summary>
    </member>
    <member name="E:Nevron.Editors.NSmartShapeCanvasSettings.Changed">
      <summary>
            Fired when the settings have changed
            </summary>
    </member>
    <member name="P:Nevron.Editors.NSmartShapeCanvasSettings.ZoomStep">
      <summary>
            Gets/sets the zoom factor with which to zoom in and out
            </summary>
    </member>
    <member name="P:Nevron.Editors.NSmartShapeCanvasSettings.MinZoomFactor">
      <summary>
            Gets/sets the minimal allowed factor for zoom out
            </summary>
    </member>
    <member name="P:Nevron.Editors.NSmartShapeCanvasSettings.MaxZoomFactor">
      <summary>
            Gets/sets the maximum allowed factor for zoom in
            </summary>
    </member>
    <member name="P:Nevron.Editors.NSmartShapeCanvasSettings.EnableAntiAliasing">
      <summary>
            Gets/sets whether the path must be rendered with anti-aliasing in the control
            </summary>
    </member>
    <member name="P:Nevron.Editors.NSmartShapeCanvasSettings.GridSize">
      <summary>
            Gets/sets the grid cell size
            </summary>
    </member>
    <member name="P:Nevron.Editors.NSmartShapeCanvasSettings.GridColor">
      <summary>
            Gets/sets the color of the grid lines
            </summary>
    </member>
    <member name="P:Nevron.Editors.NSmartShapeCanvasSettings.VerticesStyle">
      <summary>
            Gets the style of the vertices
            </summary>
    </member>
    <member name="P:Nevron.Editors.NSmartShapeCanvasSettings.GeometryControlsStyle">
      <summary>
            Gets the style of the geometry control points
            </summary>
    </member>
    <member name="P:Nevron.Editors.NSmartShapeCanvasSettings.ControlPointsStyle">
      <summary>
            Gets the style of the control points
            </summary>
    </member>
    <member name="P:Nevron.Editors.NSmartShapeCanvasSettings.ResizeHandlesStyle">
      <summary>
            Gets the style of the resize handles
            </summary>
    </member>
    <member name="P:Nevron.Editors.NSmartShapeCanvasSettings.StartPointStyle">
      <summary>
            Gets the style of the start point handle
            </summary>
    </member>
    <member name="P:Nevron.Editors.NSmartShapeCanvasSettings.EndPointStyle">
      <summary>
            Gets the style of the end point handle
            </summary>
    </member>
    <member name="P:Nevron.Editors.NSmartShapeCanvasSettings.PinPointStyle">
      <summary>
            Gets the style of the pin point handle
            </summary>
    </member>
    <member name="P:Nevron.Editors.NSmartShapeCanvasSettings.RotatorStyle">
      <summary>
            Gets the style of the rotator handle
            </summary>
    </member>
    <member name="P:Nevron.Editors.NSmartShapeCanvasSettings.HighlightedVertexSize">
      <summary>
            Gets/sets the highlighted vertices size
            </summary>
    </member>
    <member name="T:Nevron.Editors.INDomEditor">
      <summary>
            Implemented by DOM editors
            </summary>
    </member>
    <member name="T:Nevron.Editors.NDomNodeEditorHostUC">
      <summary>
            Summary description for NDomNodeEditorHostUC.
            </summary>
    </member>
    <member name="M:Nevron.Editors.NDomNodeEditorHostUC.Dispose(System.Boolean)">
      <summary> 
            Clean up any resources being used.
            </summary>
    </member>
    <member name="P:Nevron.Editors.NDomNodeEditorHostUC.Style">
      <summary>
            Get or sets the FillStyle displayed by this editor.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.NStickyOptions">
      <summary>
            Summary description for NStickyOptions.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.NStickyOptions.MaxStickyInflate">
      <summary>
            Gets the maximum stiky area.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.NStickyOptions.StickyEdges">
      <summary>
            Gets/sets the edges which will be hittested.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.NStickyOptions.StickyInflate">
      <summary>
            Gets/sets the inflate (in pixels) around sticky edges.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.NStickyOptions.Default">
      <summary>
            Gets a default NStickyOptions instance.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NShortcutTextBox">
      <summary>
            Represents a textbox which can be used by the user to visually select a shortcut combination.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NShortcutTextBox.Shortcut">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NNavigationPane">
      <summary>
            Represents a custom control which mimics the Navigation Pane found in MS Outlook 2003.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NNavigationPane.ApplyPalette(Nevron.UI.WinForm.Controls.NPalette)">
      <summary>
            Updates from the specified palette.
            </summary>
      <param name="palette">The palette to update from.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NNavigationPane.BeginInit">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NNavigationPane.EndInit">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NNavigationPane.ShowEditor">
      <summary>
            Displays the built-in editor which allows for aditing the current collection of bands.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NNavigationPane.ClearBands">
      <summary>
            Clears all the bands available registered in the pane.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NNavigationPane.CreateRendererCore">
      <summary>
            Creates the renderer to be used by this instance.
            </summary>
      <returns>The newly created renderer.</returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NNavigationPane.GetButtonContainerBounds">
      <summary>
            Gets the bounds which the button container should occupy.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NNavigationPane.CanAcceptControl(System.Windows.Forms.Control)">
      <summary>
            Determines whether a child control may be accepted.
            </summary>
      <param name="c">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NNavigationPane.AddBandCore(Nevron.UI.WinForm.Controls.NNavigationPaneBand)">
      <summary>
            Performs the core logic of adding a band.
            </summary>
      <param name="band">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NNavigationPane.RemoveBandCore(Nevron.UI.WinForm.Controls.NNavigationPaneBand)">
      <summary>
            Performs the core logic of remving a band.
            </summary>
      <param name="band">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NNavigationPane.OnSelectedBandChanged(System.EventArgs)">
      <summary>
            Fires the SelectedBandChanged event.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NNavigationPane.ExecuteCommand(System.Int32)">
      <summary>
            Executes a command with the specified id.
            </summary>
      <param name="id">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NNavigationPane.OnStateChanged">
      <summary>
            Notifies for a change in the State member of the pane.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NNavigationPane.PerformDispose(System.Boolean)">
      <summary>
      </summary>
      <param name="disposing">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NNavigationPane.OnPaint(System.Windows.Forms.PaintEventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NNavigationPane.OnLayout(System.Windows.Forms.LayoutEventArgs)">
      <summary>
      </summary>
      <param name="levent">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NNavigationPane.OnControlAdded(System.Windows.Forms.ControlEventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NNavigationPane.OnControlRemoved(System.Windows.Forms.ControlEventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NNavigationPane.InitializeDefault">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NNavigationPane.OnWMContextMenu(System.Windows.Forms.Message@)">
      <summary>
      </summary>
      <param name="m">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NNavigationPane.ShouldSerializeImageSize">
      <summary>
            Determines whether the ImageSize member should be serialized by the designer.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NNavigationPane.ShouldSerializeButtonSize">
      <summary>
            Determines whether the ButtonSize member should be serialized by the designer.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NNavigationPane.ShouldSerializePopupBandSize">
      <summary>
            Determines whether the PopupBandSize member should be serialized by the designer.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NNavigationPane.ShouldSerializeMinClientSize">
      <summary>
            Determines whether the MinClientSize member should be serialized by the designer.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NNavigationPane.ShouldSerializeCaptionFont">
      <summary>
            Determines whether the CaptionFont member should be serialized by the designer.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NNavigationPane.ShouldSerializeButtonFont">
      <summary>
            Determines whether the ButtonFont member should be serialized by the designer.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NNavigationPane.EnableSkinning">
      <summary>
            Gets/sets a value indicating whether the control will use skin logic.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NNavigationPane.Skin">
      <summary>
            Gets/sets the local NSkin instance to be used when painting this control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NNavigationPane.CurrentSkin">
      <summary>
            Gets the current skin to be used by this instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NNavigationPane.Renderer">
      <summary>
            Gets/sets the current renderer for the button.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NNavigationPane.Palette">
      <summary>
            Gets/sets the NPalette used to render the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NNavigationPane.PaletteInheritance">
      <summary>
            Gets/sets a value which Palette value will be applied on a higher level Palette change.
            </summary>
    </member>
    <member name="E:Nevron.UI.WinForm.Controls.NNavigationPane.SelectedBandChanged">
      <summary>
            Fired when the selected band index has changed.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NNavigationPane.DisplayRectangle">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NNavigationPane.MinimumSize">
      <summary>
            Gets the minimum size allowed for the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NNavigationPane.DefaultButtonFont">
      <summary>
            Gets the default font to be used for pane's buttons.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NNavigationPane.DefaultCaptionFont">
      <summary>
            Gets the default font to be used for pane's caption
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NNavigationPane.DefaultSize">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NNavigationPane.PopupBandSize">
      <summary>
            Gets/sets the preferred size to be used when displaying a popup band while in collapsed mode.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NNavigationPane.ImageSize">
      <summary>
            Gets/sets the size to be used when rendering caption's and buttons' images.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NNavigationPane.ButtonSize">
      <summary>
            Gets/sets the size of the pane's buttons.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NNavigationPane.MinClientSize">
      <summary>
            Gets/sets the minimum referred client size.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NNavigationPane.ButtonsPreferredHeight">
      <summary>
            Gets/sets the preffered size for the pane's buttons.
            You may restrict the initial number of buttons displayed by setting this value.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NNavigationPane.Bands">
      <summary>
            Gets an array of NNavigationPaneBand controls currently contained by the Navigation Pane.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NNavigationPane.ButtonFont">
      <summary>
            Gets/sets the font to be used to render buttons' text
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NNavigationPane.CaptionItem">
      <summary>
            Gets the NImageAndTextItem which represents the caption part of the pane.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NNavigationPane.DrawBorder">
      <summary>
            Gets/sets a value whether a border around the control will be rendered.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NNavigationPane.AllowStackResize">
      <summary>
            Gets/sets a value indicating whether the buttons stack may be resized.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NNavigationPane.DisplayOptionsCommand">
      <summary>
            Gets/sets a value whether the "Options" command will be displayed.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NNavigationPane.IsCollapsible">
      <summary>
            Determines whether the pane may be collapsed/expanded using an embedded caption button.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NNavigationPane.HasBandExpander">
      <summary>
            Determines whether the pane may be collapsed/expanded using an embedded caption button.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NNavigationPane.MinCaptionHeight">
      <summary>
            Gets/sets the minimum height of the caption.
            Note that the height of the caption is also controlled by the caption font.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NNavigationPane.State">
      <summary>
            Gets/sets the current state of the pane. If IsCollapsible is false this has no effect.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NNavigationPane.BackColor">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NNavigationPane.ForeColor">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NFontInfo">
      <summary>
            Summary description for NFontInfo.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NSplitter">
      <summary>
            Represents a standard Splitter with professional looking gripper drawn in the middle.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NSplitter.GripperStyle">
      <summary>
            Gets/sets the style used when drawing the gripper.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NSplitter.Orientation">
      <summary>
            Gets the orientation of the splitter depending on its Dock value.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NLineControl">
      <summary>
            Represents a control that serves as a separator.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NLineControl.Orientation">
      <summary>
            Gets/sets the orientation of the NLineControl.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NExplorerBar">
      <summary>
            A custom control which mimics the behavior of the Windows ExplorerBar.
            May contain only NExpander children.
            </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NExplorerBar.BeginInit">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NExplorerBar.ApplyPalette(Nevron.UI.WinForm.Controls.NPalette)">
      <summary>
            Updates from the specified palette.
            </summary>
      <param name="palette">The palette to update from.</param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NExplorerBar.PerformDispose(System.Boolean)">
      <summary>
      </summary>
      <param name="disposing">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NExplorerBar.OnControlAdded(System.Windows.Forms.ControlEventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NExplorerBar.OnLayout(System.Windows.Forms.LayoutEventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NExplorerBar.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
      <summary>
      </summary>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="width">
      </param>
      <param name="height">
      </param>
      <param name="specified">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NExplorerBar.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NExplorerBar.OnScrollBarValueChanged(System.Object,Nevron.UI.WinForm.Controls.ScrollBarEventArgs)">
      <summary>
            Handles the ValueChanged event of the internal scrollbar.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NExplorerBar.ShouldSerializePadding">
      <summary>
            Determines whether the Padding member should be serialized by the designer.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NExplorerBar.ShouldSerializeBackground">
      <summary>
            Determines whether the Background member should be serialized by the designer.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WinForm.Controls.NExplorerBar.ShouldSerializeExpanderOffset">
      <summary>
            Determines whether the ExpanderOffset member should be serialized by the designer.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NExplorerBar.EnableSkinning">
      <summary>
            Gets/sets a value indicating whether the explorer bar will use skinning logic.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NExplorerBar.Skin">
      <summary>
            Gets/sets the local NSkin instance to be used when painting this control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NExplorerBar.CurrentSkin">
      <summary>
            Gets the current skin to be used by this instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NExplorerBar.Palette">
      <summary>
            Gets/sets the NPalette used to render the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NExplorerBar.PaletteInheritance">
      <summary>
            Gets/sets a value which Palette value will be applied on a higher level Palette change.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NExplorerBar.DisplayRectangle">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NExplorerBar.DefaultSize">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NExplorerBar.Scrollable">
      <summary>
            Gets/sets a value whether the control will display a vertical scrollbar when the display rectangle becomes smaller to show all expanders.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NExplorerBar.ClientPadding">
      <summary>
            Gets/sets the NPadding attribute which controls the inner spacing between control's bounds and child expanders.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NExplorerBar.Background">
      <summary>
            Gets the segmented image used to render control's background.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NExplorerBar.ExpanderOffset">
      <summary>
            Gets/sets the offset between each expander's bottom value and the next one top.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NExplorerBar.ScrollPosition">
      <summary>
            Gets/sets the scroll offset.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NTreeListNodeSubItemNotifyData">
      <summary>
            A notify data structure which contains information about a NTreeListNodeSubItem instance.
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.NTreeListNodeSubItemNotifyData.Node">
      <summary>
            The node associated with the notification
            </summary>
    </member>
    <member name="F:Nevron.UI.WinForm.Controls.NTreeListNodeSubItemNotifyData.Item">
      <summary>
            The sub-item associated with the notification
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NTreeListRowHeader">
      <summary>
            Represents a NLightUIItem which visualizes a header of a NTreeListNode instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListRowHeader.ItemType">
      <summary>
            Gets the item type of this instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListGroupByNodeCreateEventArgs.Value">
      <summary>
            Gets the value used for grouping.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListGroupByNodeCreateEventArgs.Item">
      <summary>
            Gets the item associated with the group action.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListGroupByNodeCreateEventArgs.GroupTitle">
      <summary>
            Gets the proposed title of the group.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NTreeListGroupByNodeCreateEventArgs.Node">
      <summary>
            Gets/sets the node. If null a default instance will be created.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NColorButton">
      <summary>
            Represents a predefined NOptionButton that drops a color pane for choosing color.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NColorButton.MenuWindow">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NColorButton.Color">
      <summary>
            Gets/sets the color displayed by the button.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NColorButton.CellSize">
      <summary>
            Gets/sets the size of a single cell.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NColorButton.ColorPaneType">
      <summary>
            Gets/sets the type of the dropped color pane.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NColorButton.ColorPalette">
      <summary>
            Gets/sets the color palette to be applied to the drop-down color pane.
            Note that the ColorPaneType must be Palette so that this will work.
            </summary>
    </member>
    <member name="T:Nevron.UI.WinForm.Controls.NCheckBox">
      <summary>
            Represents a standard Windows Forms checkbox with custom rendering.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCheckBox.EnableSkinning">
      <summary>
            Gets/sets a value indicating whether the control will use skin logic.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCheckBox.Skin">
      <summary>
            Gets/sets the local NSkin instance to be used when painting this control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCheckBox.CurrentSkin">
      <summary>
            Gets the current skin to be used by this instance.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCheckBox.Renderer">
      <summary>
            Gets/sets the current renderer for the NCheckBox.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCheckBox.Palette">
      <summary>
            Gets/sets the NPalette used to render the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCheckBox.PaletteInheritance">
      <summary>
            Gets/sets a value which Palette value will be applied on a higher level Palette change.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCheckBox.State">
      <summary>
            Gets/sets the current interactive state of the NButton.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCheckBox.ImageIndex">
      <summary>
            Gets/sets the imagelist index value of the image displayed on the NButton.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCheckBox.Selectable">
      <summary>
            Gets/sets a value whether the button will receive focus when clicked.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCheckBox.ButtonProperties">
      <summary>
            Gets the common NButton properties.
            </summary>
    </member>
    <member name="P:Nevron.UI.WinForm.Controls.NCheckBox.TransparentBackground">
      <summary>
            Gets/sets a value whether the NCheckBox will ask its parent to draw the background.
            </summary>
    </member>
    <member name="T:Nevron.UI.NEdgeShape">
      <summary>
            Summary description for NEdgeShape.
            </summary>
    </member>
    <member name="P:Nevron.UI.NEdgeShape.Rounding">
      <summary>
            Gets/sets the rounding of the shape.
            </summary>
    </member>
    <member name="P:Nevron.UI.NEdgeShape.Edges">
      <summary>
            Gets/sets the edges 
            </summary>
    </member>
    <member name="P:Nevron.UI.NEdgeShape.StrokeStyle">
      <summary>
            Gets/sets the stroke style used to render the edges.
            </summary>
    </member>
    <member name="T:Nevron.UI.Themes.System.NUxThemeCalculatorRenderer">
      <summary>
            Summary description for NUxThemeCalculatorRenderer.
            </summary>
    </member>
    <member name="T:Nevron.UI.Themes.System.NClassicButtonRenderer">
      <summary>
            Summary description for NClassicButtonRenderer.
            </summary>
    </member>
    <member name="T:Nevron.UI.NImageListXMLRepresentation">
      <summary>
            A XML-serializable representation of the System.Windows.Forms.ImageList component.
            </summary>
    </member>
    <member name="P:Nevron.UI.NImageListXMLRepresentation.Color">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.NImageListXMLRepresentation.ImageSize">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.NImageListXMLRepresentation.ColorDepth">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.NImageListXMLRepresentation.ImageStream">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.UI.NRelatedConstantsTypeAttribute">
      <summary>
            Summary description for NPartConstantsTypeAttribute.
            </summary>
    </member>
    <member name="P:Nevron.UI.NRelatedConstantsTypeAttribute.ConstantsType">
      <summary>
            Gets the type which contains constants.
            </summary>
    </member>
    <member name="T:Nevron.UI.PushButtonStates">
      <summary>
            Summary description for PushButtonStates.
            </summary>
    </member>
    <member name="T:Nevron.UI.NCaptionContent">
      <summary>
            Summary description for NCaptionContent.
            </summary>
    </member>
    <member name="T:Nevron.UI.NFontNameUIEditor">
      <summary>
            Summary description for NFontNameUIEditor.
            </summary>
    </member>
    <member name="T:Nevron.UI.NBitmapTransform">
      <summary>
            Represents a simple ARGB structure whose values are used to scale a bitmap's color channels.
            </summary>
    </member>
    <member name="T:Nevron.SmartShapes.NEndPointsSection">
      <summary>
            The NEndPointsSection class represents a formula section, 
            which is used to expose formula based start and end points
            </summary>
    </member>
    <member name="M:Nevron.SmartShapes.NEndPointsSection.Clone">
      <summary>
            Creates an identical copy of this object
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.SmartShapes.NEndPointsSection.CellsSealed">
      <summary>
            Overriden to return true
            </summary>
      <returns>
      </returns>
    </member>
    <member name="F:Nevron.SmartShapes.NEndPointsSection.DefaultName">
      <summary>
            Default name for this section  
            </summary>
    </member>
    <member name="F:Nevron.SmartShapes.NEndPointsSection.DefaultTitle">
      <summary>
            Default title for this section  
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NEndPointsSection.StartX">
      <summary>
            Gets the StartX formula cell
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NEndPointsSection.StartY">
      <summary>
            Gets the StartY formula cell
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NEndPointsSection.EndX">
      <summary>
            Gets the EndX formula cell
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NEndPointsSection.EndY">
      <summary>
            Gets the EndY formula cell
            </summary>
    </member>
    <member name="T:Nevron.SmartShapes.NScratchRow">
      <summary>
            The NScratchRow class represents a formula row, 
            which is used for the formula definition of a scratch inside a scratch sections
            </summary>
    </member>
    <member name="M:Nevron.SmartShapes.NScratchRow.Clone">
      <summary>
            Creates an identical copy of this object
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.SmartShapes.NScratchRow.GetVerbs">
      <summary>
            Overriden to add remove row, insert row and insert row after verbs
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.SmartShapes.NScratchRow.CellsSealed">
      <summary>
            Overriden to return true
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.SmartShapes.NScratchRow.X">
      <summary>
            Gets a reference to the X formula cell
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NScratchRow.Y">
      <summary>
            Gets a reference to the Y formula cell
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NScratchRow.A">
      <summary>
            Gets a reference to the A formula cell
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NScratchRow.B">
      <summary>
            Gets a reference to the B formula cell
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NScratchRow.C">
      <summary>
            Gets a reference to the C formula cell
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NScratchRow.D">
      <summary>
            Gets a reference to the D formula cell
            </summary>
    </member>
    <member name="T:Nevron.SmartShapes.NEllipticalArcToRow">
      <summary>
            The NEllipticalArcToRow class represents a path command row, 
            which plots an elliptical arc from the previous command (X, Y) cells to this row (X, Y) cells.
            The (A, B) cells define the ellipse control point.
            The C parameter defines the angle of the ellipse major axis.
            The D parameter defines the ratio between the major and minor ellipse axes.
            </summary>
    </member>
    <member name="M:Nevron.SmartShapes.NEllipticalArcToRow.Clone">
      <summary>
            Creates an identical copy of this object
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.SmartShapes.NEllipticalArcToRow.CreatePathCommand">
      <summary>
            Creates a path command, which represents this path command row type
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.SmartShapes.NEllipticalArcToRow.GetControlPoint(System.Int32)">
      <summary>
            Gets the control point at the specified index
            </summary>
      <param name="index">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.SmartShapes.NEllipticalArcToRow.SetControlPoint(System.Int32,Nevron.GraphicsCore.NPointF)">
      <summary>
            Sets the control point at the specified index
            </summary>
      <param name="index">
      </param>
      <param name="point">
      </param>
    </member>
    <member name="P:Nevron.SmartShapes.NEllipticalArcToRow.A">
      <summary>
            Gets a reference to the A formula cell
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NEllipticalArcToRow.B">
      <summary>
            Gets a reference to the B formula cell
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NEllipticalArcToRow.C">
      <summary>
            Gets a reference to the A formula cell
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NEllipticalArcToRow.D">
      <summary>
            Gets a reference to the B formula cell
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NEllipticalArcToRow.Type">
      <summary>
            Overriden to return EllipticalArcTo
            </summary>
    </member>
    <member name="P:Nevron.SmartShapes.NEllipticalArcToRow.ControlsCount">
      <summary>
            Overriden to return 3
            </summary>
    </member>
    <member name="T:Nevron.SmartShapes.N1DSmartShapeFactory">
      <summary>
            Summary description for N1DSmartShapeFactory.
            </summary>
    </member>
    <member name="T:Nevron.Presentation.NPresentationLoadAssemblyType">
      <summary>
            Used to explicitly load the Nevron.Presentation.dll assembly.
            </summary>
    </member>
    <member name="T:Nevron.NewGraphics.ENLineJoin">
      <summary>
            Specifies how to join consecutive line or curve segments in a figure (subpath).
            </summary>
    </member>
    <member name="F:Nevron.NewGraphics.ENLineJoin.Miter">
      <summary>
            Specifies a mitered join. This produces a sharp or a clipped corner,
             depending on whether the length of the miter exceeds the miter limit.
            </summary>
    </member>
    <member name="F:Nevron.NewGraphics.ENLineJoin.Bevel">
      <summary>
            Specifies a beveled join. This produces a diagonal corner.
            </summary>
    </member>
    <member name="F:Nevron.NewGraphics.ENLineJoin.Round">
      <summary>
            Specifies a circular join. This produces a smooth, circular arc between the lines.
            </summary>
    </member>
    <member name="T:Nevron.NewGraphics.ENLineCap">
      <summary>
            Specifies the figure drawn on a line end (start or end)
            </summary>
    </member>
    <member name="F:Nevron.NewGraphics.ENLineCap.Flat">
      <summary>
            Specifies a flat (butt) line cap.
            </summary>
    </member>
    <member name="F:Nevron.NewGraphics.ENLineCap.Square">
      <summary>
            Specifies a square line cap.
            </summary>
    </member>
    <member name="F:Nevron.NewGraphics.ENLineCap.Round">
      <summary>
            Specifies a round line cap.
            </summary>
    </member>
    <member name="F:Nevron.NewGraphics.ENLineCap.Triangle">
      <summary>
            Specifies a triangular line cap.
            </summary>
    </member>
    <member name="T:Nevron.NewGraphics.ENDashStyle">
      <summary>
            Specifies the style of dashed lines of a pen.
            </summary>
    </member>
    <member name="F:Nevron.NewGraphics.ENDashStyle.Solid">
      <summary>
            Specifies a solid line.
            </summary>
    </member>
    <member name="F:Nevron.NewGraphics.ENDashStyle.Dash">
      <summary>
            Specifies a line consisting of dashes.
            </summary>
    </member>
    <member name="F:Nevron.NewGraphics.ENDashStyle.Dot">
      <summary>
            Specifies a line consisting of dots.
            </summary>
    </member>
    <member name="F:Nevron.NewGraphics.ENDashStyle.DashDot">
      <summary>
            Specifies a line consisting of a repeating pattern of dash-dot.
            </summary>
    </member>
    <member name="F:Nevron.NewGraphics.ENDashStyle.DashDotDot">
      <summary>
            Specifies a line consisting of a repeating pattern of dash-dot-dot.
            </summary>
    </member>
    <member name="F:Nevron.NewGraphics.ENDashStyle.Custom">
      <summary>
            Specifies a user-defined custom dash style.
            </summary>
    </member>
    <member name="T:Nevron.NewGraphics.ENBrushType">
      <summary>
            Enumerates brush types.
            </summary>
    </member>
    <member name="T:Nevron.NewGraphics.ENTileMode">
      <summary>
            Enumerates the tile modes for an image brush.
            </summary>
    </member>
    <member name="F:Nevron.NewGraphics.ENTileMode.Tile">
      <summary>
            The base tile is drawn and the remaining area is filled by repeating the base tile.
            </summary>
    </member>
    <member name="F:Nevron.NewGraphics.ENTileMode.FlipX">
      <summary>
            The base tile is drawn and the remaining area is filled by repeating the base tile.
            Alternate columns of tiles are flipped horizontally.
            </summary>
    </member>
    <member name="F:Nevron.NewGraphics.ENTileMode.FlipY">
      <summary>
            The base tile is drawn and the remaining area is filled by repeating the base tile.
            Alternate rows of tiles are flipped vertically.
            </summary>
    </member>
    <member name="F:Nevron.NewGraphics.ENTileMode.FlipXY">
      <summary>
            The combination of FlipX and FlipY.
            </summary>
    </member>
    <member name="F:Nevron.NewGraphics.ENTileMode.None">
      <summary>
            The base tile is drawn but not repeated. The remaining area is not filled.
            </summary>
    </member>
    <member name="T:Nevron.NewGraphics.ENGradientSpreadMode">
      <summary>
            Specifies how to draw the gradient outside a gradient brush's gradient vector.
            </summary>
    </member>
    <member name="F:Nevron.NewGraphics.ENGradientSpreadMode.Pad">
      <summary>
            The color values at the ends of the gradient vector fill the remaining space.
            </summary>
    </member>
    <member name="F:Nevron.NewGraphics.ENGradientSpreadMode.Reflect">
      <summary>
            The gradient is repeated in the reverse direction until the space is filled.
            </summary>
    </member>
    <member name="F:Nevron.NewGraphics.ENGradientSpreadMode.Repeat">
      <summary>
            The gradient is repeated in the original direction until the space is filled.
            </summary>
    </member>
    <member name="T:Nevron.NewGraphics.ENFontStyle">
      <summary>
            Specifies style information applied to text
            Same values as System.Drawing.FontStyle
            </summary>
    </member>
    <member name="F:Nevron.NewGraphics.ENFontStyle.Regular">
      <summary>
            Normal text. 
            </summary>
    </member>
    <member name="F:Nevron.NewGraphics.ENFontStyle.Bold">
      <summary>
            Bold text.
            </summary>
    </member>
    <member name="F:Nevron.NewGraphics.ENFontStyle.Italic">
      <summary>
            Italic text.
            </summary>
    </member>
    <member name="F:Nevron.NewGraphics.ENFontStyle.Underline">
      <summary>
            Underlined text.
            </summary>
    </member>
    <member name="F:Nevron.NewGraphics.ENFontStyle.Strikeout">
      <summary>
            Text with a line through the middle.
            </summary>
    </member>
    <member name="T:Nevron.NewGraphics.Pdf.lIIlII11.Keys">
      <summary>
            Predefined keys of this dictionary.
            </summary>
    </member>
    <member name="T:Nevron.NewGraphics.Pdf.lIIlIII1.Keys">
      <summary>
            Predefined keys of this dictionary.
            </summary>
    </member>
    <member name="T:Nevron.Grid.NCellTextControl">
      <summary>
            Represents a cell text control.
            </summary>
    </member>
    <member name="P:Nevron.Grid.NCellTextControl.TextStyle">
      <summary>
            Gets / sets the text style used to display the text.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NStringFormatStyle">
      <summary>
            Represents a string format style
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NStringFormatStyle.Equals(System.Object)">
      <summary>
            Returns true if the objects are equal
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NStringFormatStyle.GetHashCode">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NStringFormatStyle.StringFormatType">
      <summary>
            The string format type associated with the style.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NStringFormatStyle.TextDirection">
      <summary>
            Defines the text direction ("left to right" or "right to left").
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NStringFormatStyle.HorzAlign">
      <summary>
            The horizontal alignment of the texts relative the text origin point.
            </summary>
      <remarks>
            The possible values are Center, Left and Right.
            </remarks>
      <example>
            The following example creates a label ten pixels away from the left top corner of the control.
            <code lang="VB">
            Dim label As NLabel =  New NLabel() 
            label.Text = "Offset of the origin point 10"
            label.HorizontalMargin = 0
            label.VerticalMargin = 0
            label.TextProps.HorzAlign = HorzAlignNear
            label.TextProps.VertAlign = HorzAlignNear
            label.TextProps.OffsetX = 10
            label.TextProps.OffsetY = 10
            NChartControl.Labels.Add(label)
            </code><code>
            NLabel label = new NLabel();
            label.Text = "Offset of the origin point 10";
            label.HorizontalMargin = 0;
            label.VerticalMargin = 0;
            label.TextProps.HorzAlign = HorzAlignNear;
            label.TextProps.VertAlign = HorzAlignNear;
            label.TextProps.OffsetX = 10;
            label.TextProps.OffsetY = 10;
            NChartControl.Labels.Add(label);
            </code></example>
    </member>
    <member name="P:Nevron.GraphicsCore.NStringFormatStyle.VertAlign">
      <summary>
            The vertical alignment of the texts relative the text origin point.
            </summary>
      <remarks>
            The possible values are Center, Top, Bottom.
            </remarks>
      <example>
            The following example creates a label ten pixels away from the left top corner of the control.
            <code lang="VB">
            Dim label As NLabel =  New NLabel() 
            label.Text = "Offset of the origin point 10"
            label.HorizontalMargin = 0
            label.VerticalMargin = 0
            label.TextProps.HorzAlign = HorzAlignNear
            label.TextProps.VertAlign = HorzAlignNear
            label.TextProps.OffsetX = 10
            label.TextProps.OffsetY = 10
            NChartControl.Labels.Add(label)
            </code><code>
            NLabel label = new NLabel();
            label.Text = "Offset of the origin point 10";
            label.HorizontalMargin = 0;
            label.VerticalMargin = 0;
            label.TextProps.HorzAlign = HorzAlignNear;
            label.TextProps.VertAlign = HorzAlignNear;
            label.TextProps.OffsetX = 10;
            label.TextProps.OffsetY = 10;
            NChartControl.Labels.Add(label);
            </code></example>
    </member>
    <member name="T:Nevron.GraphicsCore.NGradientFillStyle">
      <summary>
            Represents a gradient filling.
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NGradientFillStyle.GetHashCode">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NGradientFillStyle.SetTransparencyPercent(System.Single)">
      <summary>
            Sets the transparency percent of the diffuse and ambient material colors.
            </summary>
      <param name="percent">
      </param>
      <remarks>
            Transparency is discarded for the background object fill style. Note that transparent objects slow down the rendering.
            </remarks>
    </member>
    <member name="M:Nevron.GraphicsCore.NGradientFillStyle.Invert">
      <summary>
            Returns the inverted fill style
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NGradientFillStyle.Equals(System.Object)">
      <summary>
            Returns true if the objects are equal
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NGradientFillStyle.GetDescription">
      <summary>
            Returns a short description of this NGradientFillStyle object.
            </summary>
      <remarks>
            The default implementation returns a string containing the gradient name and variant.
            </remarks>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NGradientFillStyle.IsTransparent">
      <summary>
            Returns true if both the Begin or End colors of the gradient are transparent.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NGradientFillStyle.IsTranslucent">
      <summary>
            Returns true if either the Begin or End colors of the gradient are translucent.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NGradientFillStyle.GetPrimaryColor">
      <summary>
            Returns the primary color of this fill style.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.GraphicsCore.NGradientFillStyle.BeginColor">
      <summary>
            The begin color of the gradient. 
            </summary>
      <remarks>
            The default value of this property is Color.White.
            </remarks>
    </member>
    <member name="P:Nevron.GraphicsCore.NGradientFillStyle.EndColor">
      <summary>
            The end color of the gradient. 
            </summary>
      <remarks>
            The default value is of this property is Color.Black.
            </remarks>
    </member>
    <member name="P:Nevron.GraphicsCore.NGradientFillStyle.Style">
      <summary>
            Controls the gradient style. 
            </summary>
            The possible values are Horizontal, Vertical, DiagonalUp, DiagonalDown, FromCorner 
            and FromCenter. The default value is Horizontal. It is recommended to use the 
            Init function when you modify multiple gradient properties.
            <example>
            The following example applies a black and white diagonal gradient of the right 
            chart wall.
            <code lang="VB">
            Dim chart As NChart = CType((NChartControl.Charts(0)), NChart)
            Dim gradientFillStyle As New NGradientFillStyle
            gradientFillStyle.Style = GradientStyle.DiagonalDown
            gradientFillStyle.Variant = GradientVariant.Variant1
            gradientFillStyle.BeginColor = Color.White
            gradientFillStyle.EndColor = Color.Black
            chart.Wall(ChartWallType.Back).FillStyle = gradientFillStyle
            </code><code>
            NChart chart = (NChart)(NChartControl.Charts[0]);
            NGradientFillStyle gradientFillStyle = new NGradientFillStyle();
            gradientFillStyle.Style = GradientStyle.DiagonalDown;
            gradientFillStyle.Variant = GradientVariant.Variant1;
            gradientFillStyle.BeginColor = Color.White;
            gradientFillStyle.EndColor = Color.Black;
            chart.Wall(ChartWallType.Back).FillStyle = gradientFillStyle
            </code></example></member>
    <member name="P:Nevron.GraphicsCore.NGradientFillStyle.Variant">
      <summary>
            The gradient variant of the NFillStyle.
            </summary>
      <remarks>
            Each gradient style has different sub variants. For example the horizontal gradient 
            style has four variants that indicate how the control will merge the Color1 and 
            Color2 properties. The possible values are Variant1, Variant2, Variant3, Variant4. 
            The default value for this property is Variant1. All gradient styles support four 
            variants except the FromCenter one which supports only two.
            </remarks>
    </member>
    <member name="P:Nevron.GraphicsCore.NGradientFillStyle.FillStyleType">
      <summary>
            Gets the fill style type.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NGradientFillStyle.Intensity">
      <summary>
            Returns the intensity of this fill style in the range [0, 255].
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NRelativeUnitSerializer">
      <summary>
            Implements relative units serialization
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NRelativeUnitSerializer.GetRealObject(System.Runtime.Serialization.StreamingContext)">
      <summary>
            Overriden to return an instance of a relavive unit
            </summary>
      <param name="context">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.GraphicsCore.NEnglishUnitSerializer">
      <summary>
            Implements english units serialization
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NEnglishUnitSerializer.GetRealObject(System.Runtime.Serialization.StreamingContext)">
      <summary>
            Overriden to return an instance of an english unit
            </summary>
      <param name="context">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.GraphicsCore.NXamlImage">
      <summary>
            Represents a Silverlight image.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NPdfImage">
      <summary>
            Represents an image in PDF format
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Text.NParagraphElement">
      <summary>
            Represents a paragraph in the text document.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Text.NCharAtom">
      <summary>
            Represents a character text atom.
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.Text.NCharAtom.Char">
      <summary>
            Gets/sets the character represented by this atom
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Shapes.NLineCrossShape">
      <summary>
            Summary description for NBorderCrossShape.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.Shapes.NCircleShape">
      <summary>
            Represents a circle shape.
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NVector3DD">
      <summary>
            The NVector3DD struct represents a 3D vector with double coordinates
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NVector3DD.SetXYZ(System.Double,System.Double,System.Double)">
      <summary>
            Sets the x, y and z coordinates of the vector
            </summary>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="z">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NVector3DD.Add(Nevron.GraphicsCore.NVector3DD@,Nevron.GraphicsCore.NVector3DD@)">
      <summary>
            Makes this vector the vector sum of v1 and v2
            </summary>
      <param name="v1">
      </param>
      <param name="v2">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NVector3DD.Subtract(Nevron.GraphicsCore.NVector3DD@,Nevron.GraphicsCore.NVector3DD@)">
      <summary>
            Makes this vector the vector sum of v1 and -v2
            </summary>
      <param name="v1">
      </param>
      <param name="v2">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NVector3DD.Multiply(Nevron.GraphicsCore.NVector3DD@,System.Double)">
      <summary>
            Makes this vector the scalar multiplication of v1 with the specified fMul factor
            </summary>
      <param name="v1">
      </param>
      <param name="fMul">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NVector3DD.Divide(Nevron.GraphicsCore.NVector3DD@,System.Double)">
      <summary>
            Makes this vector the scalar division of v1 with the specified fDiv factor
            </summary>
      <param name="v1">
      </param>
      <param name="fDiv">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NVector3DD.ToString">
      <summary>
            Overriden to provide a string representation of the vector
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NVector3DD.DotProduct(Nevron.GraphicsCore.NVector3DD,Nevron.GraphicsCore.NVector3DD)">
      <summary>
            Computes the dot product of two 3-D vectors
            </summary>
      <param name="a">source vector</param>
      <param name="b">source vector</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NVector3DD.CrossProduct(Nevron.GraphicsCore.NVector3DD,Nevron.GraphicsCore.NVector3DD)">
      <summary>
            Computes the cross product of two 3-D vectors
            </summary>
      <param name="a">source vector</param>
      <param name="b">source vector</param>
      <returns>A NVector3DD structure that is the cross product of two 3-D vectors.</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NVector3DD.Normalize(Nevron.GraphicsCore.NVector3DD)">
      <summary>
            Computes the normalized version of a 3-D vector.
            </summary>
      <param name="vector">Source NVector3DF structure.</param>
      <returns>A NVector3DD structure that is the normalized version of the specified vector.</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NVector3DD.Invert">
      <summary>
            Inverts the vector
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NVector3DD.GetLength">
      <summary>
            Gets the vector length
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NVector3DD.GetLengthSquare">
      <summary>
            Gets the vector length square
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NVector3DD.DotProduct(Nevron.GraphicsCore.NVector3DD@)">
      <summary>
            Computes the dot product of this vector and the specified vector
            </summary>
      <param name="v">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NVector3DD.CrossProduct(Nevron.GraphicsCore.NVector3DD@)">
      <summary>
            Computes the cross product of this vector and the specified vector
            </summary>
      <param name="v">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NVector3DD.CrossProductOf(Nevron.GraphicsCore.NVector3DD@,Nevron.GraphicsCore.NVector3DD@)">
      <summary>
            Makes this vector the cross product of vector A and vector B
            </summary>
      <param name="vA">
      </param>
      <param name="vB">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NVector3DD.CalculateNormal(Nevron.GraphicsCore.NVector3DD@,Nevron.GraphicsCore.NVector3DD@,Nevron.GraphicsCore.NVector3DD@)">
      <summary>
            Makes this vector the nozmalized normal of v1, v2 and v3
            </summary>
      <param name="v1">
      </param>
      <param name="v2">
      </param>
      <param name="v3">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NVector3DD.CalculateNormalNN(Nevron.GraphicsCore.NVector3DD@,Nevron.GraphicsCore.NVector3DD@,Nevron.GraphicsCore.NVector3DD@)">
      <summary>
            Makes this vector the non nozmalized normal of v1, v2 and v3
            </summary>
      <param name="v1">
      </param>
      <param name="v2">
      </param>
      <param name="v3">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NVector3DD.Normalize">
      <summary>
            Normalizes this vector (makes its length equal to 1)
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NVector3DD.Normalize(System.Double)">
      <summary>
            Normalizes this vector (makes its length equal to the specified length)
            </summary>
      <param name="fUnitLength">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NVector3DD.Equals(Nevron.GraphicsCore.NVector3DD)">
      <summary>
            Determines whether this vector is equal to the specified vector
            </summary>
      <param name="vec">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NVector3DD.Equals(System.Object)">
      <summary>
            Returns true if the objects are equal.
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NVector3DD.GetHashCode">
      <summary>
            Returns the hash code of this instance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="F:Nevron.GraphicsCore.NVector3DD.X">
      <summary>
            x coordinate
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NVector3DD.Y">
      <summary>
            y coordinate
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NVector3DD.Z">
      <summary>
            z coordinate
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NVector3DD.Length">
      <summary>
            Gets the vector length
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NVector3DD.LengthSquare">
      <summary>
            Gets the vector length square (length * length)
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NSizeF">
      <summary>
            The NSizeF structure represents a size measured with width and height
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NSizeF.Equals(System.Object)">
      <summary>
      </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NSizeF.GetHashCode">
      <summary>
            Serves as a hash function for a particular type, suitable
            for use in hashing algorithms and data structures like a hash table.
            </summary>
      <returns>
            A hash code for the current object"/&gt;.
            </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NSizeF.ToString">
      <summary>
            Returns the string representation of this object
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NSizeF.ToPointF">
      <summary>
            Converts this size to PointF
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NSizeF.ToNPoint2DF">
      <summary>
            Converts this size to NPointF
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NSizeF.ToSizeF">
      <summary>
            Converts this size to SizeF
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NSizeF.Round">
      <summary>
            Round this size
            </summary>
      <returns>
      </returns>
    </member>
    <member name="F:Nevron.GraphicsCore.NSizeF.Width">
      <summary>
            width
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NSizeF.Height">
      <summary>
            height
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NSizeF.Empty">
      <summary>
            The empty size (0, 0)
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NSizeF.IsEmpty">
      <summary>
            Determines whether this is an empty size (e.g. width and height are 0)
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NSize">
      <summary>
            The NSize structure represents a size measured with width and height
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NSize.Equals(System.Object)">
      <summary>
      </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NSize.GetHashCode">
      <summary>
            Serves as a hash function for a particular type, suitable
            for use in hashing algorithms and data structures like a hash table.
            </summary>
      <returns>
            A hash code for the current object"/&gt;.
            </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NSize.ToString">
      <summary>
            Returns the string representation of this object
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NSize.ToPointF">
      <summary>
            Converts this size to PointF
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NSize.ToNPoint2DF">
      <summary>
            Converts this size to NPointF
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NSize.ToSizeF">
      <summary>
            Converts this size to SizeF
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NSize.ToSize">
      <summary>
            Converts this size to Size
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NSize.Flip">
      <summary>
            Flips the Width and Height values.
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NSize.Width">
      <summary>
            width
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NSize.Height">
      <summary>
            height
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NSize.Empty">
      <summary>
            The empty size (0, 0)
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NSize.IsEmpty">
      <summary>
            Determines whether this is an empty size (e.g. width and height are 0)
            </summary>
    </member>
    <member name="T:Nevron.GraphicsCore.NRectangle">
      <summary>
            The NRectangle structure represents a rectangle in 2D space defined by it's location and size
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangle.Translate(System.Single,System.Single)">
      <summary>
            Translates the primitive with the specified amounts
            </summary>
      <param name="dx">
      </param>
      <param name="dy">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangle.Translate(Nevron.GraphicsCore.NPointF)">
      <summary>
            Translates the primitive with the specified offset
            </summary>
      <param name="offset">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangle.AddToGraphicsPath(System.Drawing.Drawing2D.GraphicsPath)">
      <summary>
            Appends the primitive to the specified graphics path
            </summary>
      <param name="path">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangle.ContainsOnOutline(Nevron.GraphicsCore.NPointF,System.Single)">
      <summary>
            Determines whether the outline of the rectangle contains the specified point
            </summary>
      <param name="point">
      </param>
      <param name="weight">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangle.ContainsOnOutline(Nevron.GraphicsCore.NPointF,System.Drawing.Pen)">
      <summary>
            Determines whether the outline of the rectangle contains the specified point
            </summary>
      <param name="point">
      </param>
      <param name="pen">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangle.Contains(Nevron.GraphicsCore.NPointF)">
      <summary>
            Determines whether the rectangle contains the specified point
            </summary>
      <param name="point">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangle.Contains(Nevron.GraphicsCore.NPoint)">
      <summary>
            Determines whether the rectangle contains the specified point
            </summary>
      <param name="point">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangle.Contains(Nevron.GraphicsCore.NPointF,System.Drawing.Drawing2D.FillMode)">
      <summary>
            Determines whether the primitive interior contains the specified point
            </summary>
      <param name="point">
      </param>
      <param name="fillMode">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangle.Equals(System.Object)">
      <summary>
      </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangle.GetHashCode">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangle.ToString">
      <summary>
            Returns the string representation of this object
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangle.Inflate(System.Int32,System.Int32)">
      <summary>
            Inflates the rectangle with the specified amounts
            </summary>
      <param name="x">
      </param>
      <param name="y">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangle.Inflate(Nevron.GraphicsCore.NSize)">
      <summary>
            Inflates the rectangle with the specified size
            </summary>
      <param name="size">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangle.Offset(System.Int32,System.Int32)">
      <summary>
            Offsets the rectangle with the specified x and y amount.
            </summary>
      <param name="x">
      </param>
      <param name="y">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangle.Scale(System.Int32,System.Int32)">
      <summary>
            Scales the rectangle with the specified factors
            </summary>
      <param name="scaleX">
      </param>
      <param name="scaleY">
      </param>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangle.Contains(System.Int32,System.Int32)">
      <summary>
            Determines whether the rectangle contains the point with the specified coordinates
            </summary>
      <remarks>
            This method considers the a point on the right and and bottoms sides of the rectangle as an outside point
            </remarks>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangle.Contains(Nevron.GraphicsCore.NRectangle)">
      <summary>
            Determines whether the rectangle contains the specified rectangle
            </summary>
      <param name="rect">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangle.IncludePoint(Nevron.GraphicsCore.NPoint)">
      <summary>
            Includes the point in this rectangle
            </summary>
      <param name="point">
      </param>
      <returns>
      </returns>
      <remarks>
            Returns the minimum rectangle that bounds the point and this rectangle
            </remarks>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangle.InclusiveContains(System.Int32,System.Int32)">
      <summary>
            Determines whether the rectangle contains the point with the specified coordinates
            </summary>
      <remarks>
            This method considers the a point on the right and and bottoms sides of the rectangle as an inside point
            </remarks>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangle.InclusiveIntersectsWith(Nevron.GraphicsCore.NRectangle)">
      <summary>
            Determines whether this rectangle intersects with the specified rectangle
            </summary>
      <param name="rect">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangle.IntersectsWith(Nevron.GraphicsCore.NRectangle)">
      <summary>
            Determines whether this rectangle intersects with the specified rectangle
            </summary>
      <param name="rect">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangle.IntersectsWith(Nevron.GraphicsCore.NLineSegmentF)">
      <summary>
            Determines whether this rectangle intersects with the specified line
            </summary>
      <param name="line">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangle.AreaIntersectsWith(Nevron.GraphicsCore.NCircleF)">
      <summary>
            Determines whether the area of this rectangle intersects with the area of the specified circle
            </summary>
      <param name="circle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangle.IntersectWith(Nevron.GraphicsCore.NLineSegmentF,Nevron.GraphicsCore.NPointFList@)">
      <summary>
            Intersects this rectangle with the specified line segment
            </summary>
      <param name="line">line segment with which to intersect</param>
      <param name="intersectionPoints">resulting intersection points (valid only if the method returned true</param>
      <returns>true if this rectangle intersects with the line segment, otherwise false</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangle.IntersectWithRadianRay(System.Single,System.Int32@)">
      <summary>
            Intersects this rectangle with the ray from the bounds central point
            </summary>
      <param name="angle">in radians</param>
      <param name="sideIndex">side index, for side index numbers check IntersectsWithRadianLine</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangle.IntersectWithRadianLine(Nevron.GraphicsCore.NPoint,Nevron.GraphicsCore.NPoint@,System.Int32@)">
      <summary>
            Intersects this rectangle with a line connecting the rectangle center and the specified point
            </summary>
      <param name="pt">point which forms a line with the rectangle center</param>
      <param name="intersectionPoint">resulting intersection point (if the method returned true)</param>
      <param name="sideIndex">resulting index of the crossed side (if the method returned true (enumeration is left, top, right, bottom)</param>
      <returns>true if the intersection was successful, otherwise false</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangle.Normalize">
      <summary>
            Normalizes this rectangle 
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangle.GetCompassPoint(Nevron.GraphicsCore.CompassDirection)">
      <summary>
            Obtains the point on the rectangle rim, which corresponds to the specified compass direction
            </summary>
      <param name="direction">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangle.GetOppositeCompassPoint(Nevron.GraphicsCore.CompassDirection)">
      <summary>
            Obtains the point on the rectangle rim, which corresponds to the specified compass direction
            </summary>
      <param name="direction">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangle.ToRectangleF">
      <summary>
            Converts this rectangle to RectangleF
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangle.ToNRectangleF">
      <summary>
            Converts this rectangle to RectangleF
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangle.ToRectangle">
      <summary>
            Converts this rectangle to Rectangle
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangle.ToNRange2DF">
      <summary>
            Converts this rectangle to NRange2DF
            </summary>
      <returns>
      </returns>
    </member>
    <member name="F:Nevron.GraphicsCore.NRectangle.X">
      <summary>
            X coordinate of the left top corner
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NRectangle.Y">
      <summary>
            Y coordinate of the left top corner
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NRectangle.Width">
      <summary>
            Rectangle width
            </summary>
    </member>
    <member name="F:Nevron.GraphicsCore.NRectangle.Height">
      <summary>
            Rectangle height
            </summary>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangle.ResizeRectangle(Nevron.GraphicsCore.NRectangle,Nevron.GraphicsCore.CompassDirection,System.Int32,System.Int32,System.Boolean)">
      <summary>
            Computes a new rect for an expected resize of a rectangle in the specified compass direction
            </summary>
      <param name="rect">rectangle to resize</param>
      <param name="direction">compass direction of the handle, which is resized</param>
      <param name="dx">x handle change</param>
      <param name="dy">y handle change</param>
      <param name="canChangeAspectRatio">indicates whether the change of the aspect ratio is allowed</param>
      <returns>resized rectangle</returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangle.FitRectangle(Nevron.GraphicsCore.NRectangle,System.Single)">
      <summary>
            Returns the fitted rectangle with the specified orientation (in degrees)
            </summary>
      <param name="rect">
      </param>
      <param name="orientation">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangle.FromLTRB(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Gets a rectangle from the coordinates of it's sides
            </summary>
      <param name="left">
      </param>
      <param name="top">
      </param>
      <param name="right">
      </param>
      <param name="bottom">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangle.FromTwoPoints(Nevron.GraphicsCore.NPoint,Nevron.GraphicsCore.NPoint)">
      <summary>
            Gets a normalized rectangle from two points
            </summary>
      <param name="point1">
      </param>
      <param name="point2">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangle.FromTwoPoints(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Gets a normalized rectangle from two points
            </summary>
      <param name="x1">
      </param>
      <param name="y1">
      </param>
      <param name="x2">
      </param>
      <param name="y2">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangle.FromCenterAndSize(Nevron.GraphicsCore.NPoint,System.Int32,System.Int32)">
      <summary>
            Gets a rectangle from center and dimensions
            </summary>
      <param name="center">
      </param>
      <param name="width">
      </param>
      <param name="height">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangle.Union(Nevron.GraphicsCore.NRectangle,Nevron.GraphicsCore.NRectangle)">
      <summary>
            Creates the smallest possible third rectangle that can contain the two rectangles that form a union
            </summary>
      <param name="a">
      </param>
      <param name="b">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.GraphicsCore.NRectangle.Intersection(Nevron.GraphicsCore.NRectangle,Nevron.GraphicsCore.NRectangle)">
      <summary>
            Returns a third rectangle that represents the intersection of two rectangles. If there is no intersection, the Empty rectangle is returned
            </summary>
      <param name="a">
      </param>
      <param name="b">
      </param>
      <returns>
      </returns>
    </member>
    <member name="F:Nevron.GraphicsCore.NRectangle.Empty">
      <summary>
            The empty rectangle
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NRectangle.Bounds">
      <summary>
            Gets the minimal enclosing rectangle
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NRectangle.BoundsRange">
      <summary>
            Gets the minimal enclosing 2D range
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NRectangle.IsFlat">
      <summary>
            Determines whether this is a flat primitive
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NRectangle.Vertices">
      <summary>
            Gets an array with the rectangle vertices
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NRectangle.Middles">
      <summary>
            Gets an array with the rectangle sides middle points
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NRectangle.VerticesAndMiddles">
      <summary>
            Gets an array with the rectangle vertices and middles enumerated clockwise starting from the left-top vertex
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NRectangle.Right">
      <summary>
            Gets the right side of the rectangle
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NRectangle.Bottom">
      <summary>
            Gets the bottom side of the rectangle
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NRectangle.Location">
      <summary>
            Gets/sets the rectangle location (left-top corner)
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NRectangle.Size">
      <summary>
            Gets/sets the size of this rectangle
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NRectangle.RightBottom">
      <summary>
            Gets the rectangle right bottom corner
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NRectangle.RightTop">
      <summary>
            Gets the rectangle right top corner
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NRectangle.LeftBottom">
      <summary>
            Gets the rectangle left bottom corner
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NRectangle.Center">
      <summary>
            Gets the rectangle center
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NRectangle.Area">
      <summary>
            Obtains the rectangle area (width * Height)
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NRectangle.Perimeter">
      <summary>
            Obtains the rectangle perimeter (2 * width) + (2 * Height)
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NRectangle.IsEmpty">
      <summary>
            Determines whether the rectangle is with zero width or Height
            </summary>
    </member>
    <member name="P:Nevron.GraphicsCore.NRectangle.IsNormalized">
      <summary>
            Determines whether the rectangle is normalized (both width and height are not negative)
            </summary>
    </member>
    <member name="T:Nevron.FormulaSheet.NAddCellVerb">
      <summary>
            The NAddCellVerb verb is used for the visual insertion of a named cell in a formula section
            </summary>
    </member>
    <member name="M:Nevron.FormulaSheet.NAddCellVerb.Execute">
      <summary>
            Overriden to prompt the user to specify a valid cell name and cell type. 
            Adds the cell in the section if the user clicked the OK button.
            </summary>
    </member>
    <member name="F:Nevron.FormulaSheet.NAddCellVerb.Section">
      <summary>
            Reference to the formula section in which to add the cell
            </summary>
    </member>
    <member name="T:Nevron.FormulaSheet.FormulaSheetViewStyle">
      <summary>
            Defines the possible ways in which a formula sheet can be viewed
            </summary>
    </member>
    <member name="F:Nevron.FormulaSheet.FormulaSheetViewStyle.Values">
      <summary>
            View the sheet as values
            </summary>
    </member>
    <member name="F:Nevron.FormulaSheet.FormulaSheetViewStyle.Formulas">
      <summary>
            View the sheet as formulas
            </summary>
    </member>
    <member name="T:Nevron.Editors.NImageFrameStyleTypeEditorNoAutomatic">
      <summary>
            Provides facilities for visual editing of NImageFrameStyle objects.
            </summary>
    </member>
    <member name="T:Nevron.Editors.NStyleEditor">
      <summary>
            Summary description for NStyleEditor.
            </summary>
    </member>
    <member name="M:Nevron.Editors.NStyleEditor.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
    </member>
    <member name="M:Nevron.Editors.NStyleEditor.PrepareToEditType(System.Type)">
      <summary>
            Prepares the editor to edit attributes from the specified type
            </summary>
      <param name="attributeType">
      </param>
    </member>
    <member name="M:Nevron.Editors.NStyleEditor.SetAutomaticAttribute(Nevron.Dom.INAttribute)">
      <summary>
            Sets the style editor in automatic mode
            </summary>
      <param name="style">
      </param>
    </member>
    <member name="P:Nevron.Editors.NStyleEditor.Attribute">
      <summary>
            Gets/sets the style edited by the editor.
            </summary>
    </member>
    <member name="P:Nevron.Editors.NStyleEditor.AllowAutomatic">
      <summary>
            Gets/sets the style to edit.
            </summary>
    </member>
    <member name="T:Nevron.Editors.NBackgroundStyleButton">
      <summary>
            Represents a button, which is used for the editing of a stroke style. Displays a stroke style preview.
            </summary>
    </member>
    <member name="M:Nevron.Editors.NBackgroundStyleButton.EditStyle(Nevron.GraphicsCore.NBackgroundStyle,System.Boolean,Nevron.GraphicsCore.NBackgroundStyle@)">
      <summary>
            Overriden to show the background style type editor
            </summary>
      <param name="inStyle">
      </param>
      <param name="automatic">
      </param>
      <param name="outStyle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.Editors.NBackgroundStyleButton.CreateDefaultStyle">
      <summary>
            Overriden to create a new background style
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.Editors.NSizeEditor">
      <summary>
            Summary description for NSizeEditor.
            </summary>
    </member>
    <member name="M:Nevron.Editors.NSizeEditor.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
    </member>
    <member name="P:Nevron.Editors.NSizeEditor.SizeL">
      <summary>
            Gets/sets the NSizeL to edit
            </summary>
    </member>
    <member name="T:Nevron.Editors.NNodeCompositeTreeEditorUC">
      <summary>
            Summary description for NNodeCompositeTreeEditorUC.
            </summary>
    </member>
    <member name="M:Nevron.Editors.NNodeCompositeTreeEditorUC.Dispose(System.Boolean)">
      <summary> 
            Clean up any resources being used.
            </summary>
    </member>
    <member name="T:Nevron.Editors.NDomTreeBrowserUC">
      <summary>
            Shows a tree representation of a passed DOM container
            </summary>
    </member>
    <member name="M:Nevron.Editors.NDomTreeBrowserUC.RebuildNodeView">
      <summary>
            Rebuilds the DOM tree
            </summary>
    </member>
    <member name="M:Nevron.Editors.NDomTreeBrowserUC.Dispose(System.Boolean)">
      <summary> 
            Clean up any resources being used.
            </summary>
    </member>
  </members>
</doc>