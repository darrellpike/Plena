<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Nevron.UI.WebForm.Controls</name>
  </assembly>
  <members>
    <member name="T:Nevron.UI.WebForm.Controls.NAjaxTechnologyHelper">
      <summary>
            NAjaxTechnologyHelper provides the common functonality for all AJAX echnology
            implementations.
            </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.NAjaxTechnologyHelper.MinAsyncEventPriority">
      <summary>
            The lowest value for event priority.
            </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.NAjaxTechnologyHelper.MinAsyncEventQueueLength">
      <summary>
            The lowest value for event queue length.
            </summary>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NAjaxTechnologyHelper.EnumerateFrameworkScriptIncludes(Nevron.UI.WebForm.Controls.NWebControl)">
      <summary>
            Enumerates all JavaScript files, implementing Nevron AJAX Framework
            </summary>
      <returns>A list of relative file paths</returns>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NAjaxTechnologyHelper.IsAjaxTechnologyAplicable(Nevron.UI.WebForm.Controls.NWebControl,System.Boolean)">
      <summary>
            At run time, when in Microsoft Callback mode, tests if the browser, 
            from which the current request originates, supports callbacks.
            </summary>
      <param name="webControl">The web control</param>
      <param name="designMode">Is in design mode</param>
      <returns>False, if tested at run time, in Microsoft Callback mode and the web browser does not support callbacks. Else returns true. </returns>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NAjaxTechnologyHelper.RenderAjaxControlToXhtml(Nevron.UI.WebForm.Controls.NClientServerTechnology,Nevron.UI.WebForm.Controls.NStateObject,System.String,System.String,System.Web.UI.HtmlTextWriter)">
      <summary>
            Generates the XHTML and JavaScript, required for a web control to run in AJAX mode on the client browser.
            </summary>
      <param name="technology">The instance of the client-server technology, used by the web control.</param>
      <param name="state">The session state object that contains the state of the web control.</param>
      <param name="jsCallbackServiceClassName">NChartCallbackService or NDiagramCallbackService.</param>
      <param name="altText">The text to be inserted as ALT-attribute of the XHTML image element, produced by the web control.</param>
      <param name="output">HTML writer to write the generated XHTML source to.</param>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NAjaxTechnologyHelper.GetAjaxCallbackResult(Nevron.UI.WebForm.Controls.NClientServerTechnology,Nevron.UI.WebForm.Controls.NCallbackCommand,System.Boolean)">
      <summary>
            Builds the result from the AJAX callback processing.
            </summary>
      <param name="technology">The instance of the client-server technology, used by the web control.</param>
      <param name="command">The command that was executed.</param>
      <param name="isReincarnating">True if the callback request required recreation of the session state object.</param>
      <returns>A result string to be returned to the client.</returns>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NAjaxTechnologyHelper.ProcessAjaxCallbackEvent(Nevron.UI.WebForm.Controls.NClientServerTechnology,System.String,Nevron.UI.WebForm.Controls.NCallbackCommand,Nevron.UI.WebForm.Controls.NStateObject,System.Int32@,System.Int32@)">
      <summary>
            Parses the client side event data and fires the corresponding server side event of the web control.
            </summary>
      <param name="technology">The instance of the client-server technology, used by the web control.</param>
      <param name="eventArgument">The client side event data</param>
      <param name="command">A command objecto to be initialized with the event data</param>
      <param name="state">The session state object that contains the state of the web control.</param>
      <param name="mouseXPos">For mouse events is initialized by this method with the x coordinate of the mouse</param>
      <param name="mouseYPos">For mouse events is initialized by this method with the y coordinate of the mouse</param>
    </member>
    <member name="T:Nevron.UI.WebForm.Controls.INWebImageControl">
      <summary>
            Implemented by web image controls
            </summary>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.INWebImageControl.CreateImage(Nevron.GraphicsCore.INImageFormat)">
      <summary>
            Returns an image in the specified format.
            </summary>
      <param name="format">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.INWebImageControl.WriteHtmlMap(Nevron.GraphicsCore.NHtmlMapContext,System.IO.TextWriter)">
      <summary>
            Writes an image map to the specified text writer.
            </summary>
      <param name="context">
      </param>
      <param name="textWriter">
      </param>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.INWebImageControl.MapPath(System.String)">
      <summary>
            Retrieves the physical path that a virtual path, either absolute or relative, maps to.
            </summary>
      <param name="path">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.INWebImageControl.HandleExceptions">
      <summary>
            Gets / sets a value indicating whether the control should handle exceptions
            </summary>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.INWebImageControl.Dimensions">
      <summary>
            Obtains the dimensions of the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.INWebImageControl.ServerConfigSectionName">
      <summary>
            Obtains the server configuration section name corresponding to this control.
            </summary>
    </member>
    <member name="T:Nevron.UI.WebForm.Controls.NViewStateRepository">
      <summary>
            Serializes the control state in the view state.
            </summary>
    </member>
    <member name="T:Nevron.UI.WebForm.Controls.NWebControlStateRepository">
      <summary>
            Summary description for NStateRepository.
            </summary>
    </member>
    <member name="T:Nevron.UI.WebForm.Controls.NConfigurationNode">
      <summary>
            Base for all server control settings objects.
            </summary>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NConfigurationNode.Clone">
      <summary>
            Creates an exact replica of this node
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NConfigurationNode.ProvideReference(System.Type)">
      <summary>
      </summary>
      <param name="parentType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NConfigurationNode.GetWebImageControl">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NConfigurationNode.GetNWebControl">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NConfigurationNode.GetWebControl">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NConfigurationNode.GetServerSettings">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.NConfigurationNode.m_Provider">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.UI.WebForm.Controls.INWebControlStateRepository">
      <summary>
            Implemented by web control state repositories.
            </summary>
    </member>
    <member name="T:Nevron.UI.WebForm.Controls.INTemporaryFileCreator">
      <summary>
            Implemented by classes that create temporary files on the server
            </summary>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.INTemporaryFileCreator.HasCreatedTemporaryFile">
      <summary>
            Returns true if the object has created a temporary file on the server.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NWebControlStateRepository.Load(System.Object)">
      <summary>
            Loads the control state from the repository using the specified key.
            </summary>
      <param name="key">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NWebControlStateRepository.Save">
      <summary>
            Saves the control state in the repository and returns a key to it.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NWebControlStateRepository.HasCreatedTemporaryFile">
      <summary>
            Returns true if the repository creates temporary files on the server.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NViewStateRepository.Load(System.Object)">
      <summary>
            Loads the object from the repository using the specified key.
            </summary>
      <param name="key">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NViewStateRepository.Save">
      <summary>
            Saves the object in the repository and returns a key to it.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NViewStateRepository.HasCreatedTemporaryFile">
      <summary>
            Returns true if the repository creates temporary files on the server.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.UI.WebForm.Controls.Obsolete.NImageDesigner">
      <summary>
            Summary description for NImageDesigner.
            </summary>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.Obsolete.NImageDesigner.Finalize">
      <summary>
            Destructor
            </summary>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.Obsolete.NImageDesigner.Dispose(System.Boolean)">
      <summary>
      </summary>
      <param name="disposing">
      </param>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.Obsolete.NImageDesigner.DeleteTempFile">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.Obsolete.NImageDesigner.m_TempFileName">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.Obsolete.NImageDesigner.m_ImageFormat">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.Obsolete.NImageDesigner.m_Image">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.UI.WebForm.Controls.NStateObject">
      <summary>
            Base class of session state object classes to keep the state of the Nevron web controls
            over subsequent callback requests and between postback requests and the HTTP handler image generation.
            </summary>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NStateObject.ViewSize">
      <summary>
            Gets the size of the view.
            </summary>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NStateObject.HttpHandlerCallback">
      <summary>
            Gets / sets the Nevron image resource HTTP handler callback.
            </summary>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NStateObject.StateId">
      <summary>
            Gets / sets a string that uniquely identifies the specific instance of the state of a web control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NStateObject.SnapshotGuid">
      <summary>
            Gets / sets a guid that uniquely identifies a specific image snapshot of the web control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NStateObject.ImageFormat">
      <summary>
            Gets / sets the image format of the rendered image. Can be null for controls that do not generate an image.
            </summary>
    </member>
    <member name="T:Nevron.UI.WebForm.Controls.NUIWebFormsControlsLoadAssemblyType">
      <summary>
            Used to explicitly load the Nevron.UI.WebForm.Controls.dll assembly.
            </summary>
    </member>
    <member name="T:Nevron.UI.WebForm.Controls.NPredefined">
      <summary>
            A repository of constants and static readonly objects
            </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.NPredefined.XSEN_AjaxXmlTransport">
      <summary>
            The name of the NAjaxXmlTransport root element when serialized as XML.
            The value is "ajaxXmlTransport".
            </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.NPredefined.XSEN_Command">
      <summary>
            The name of the NAjaxXmlTransport command data section element when serialized as XML.
            The value is "command".
            </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.NPredefined.XSAN_Name">
      <summary>
            The name of the name attribute of an XML element.
            The value is "name".
            </summary>
    </member>
    <member name="T:Nevron.UI.WebForm.Controls.NClientServerTechnologyFactory">
      <summary>
            NClientServerTechnologyFactory is the base class for NClientServerTechnology factories.
            </summary>
      <remarks>
            A NClientServerTechnology factory is used by the <see cref="T:Nevron.UI.WebForm.Controls.NWebControl" /> class
            to create different NClientServerTechnology instances based on a <see cref="T:Nevron.UI.WebForm.Controls.WebControlTechnologyType" />
            control parameter. The factory, used by a <see cref="T:Nevron.UI.WebForm.Controls.NWebControl" /> instance is initialized
            once in the control's constructor. Later, when the Technology property of a <see cref="T:Nevron.UI.WebForm.Controls.NWebControl" />
            instance is changed, the factory replaces the current NClientServerTechnology instance, exposed by the  ClientServerTechnology property of the 
            <see cref="T:Nevron.UI.WebForm.Controls.NWebControl" /> object with a new instance of a different NClientServerTechnology implementation.
            <para>
            Implement a derived class of the NClientServerTechnologyFactory base class so that the factory 
            will create an instance of your AJAX implementation of your NClientServerTechnology for your particular 
            web control, when the type parameter of the Create method is set to WebControlTechnologyType.Ajax
            and an instance of your postback implementation of your NClientServerTechnology for your particular 
            web control, when the type parameter of the Create method is set to WebControlTechnologyType.Postback.
            </para></remarks>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NClientServerTechnologyFactory.Create(Nevron.UI.WebForm.Controls.WebControlTechnologyType,Nevron.UI.WebForm.Controls.NWebControl)">
      <summary>
            Creates a new instance of a class, derived from the NClientServerTechnology base class.
            </summary>
      <param name="type">
            The type of the technology that determines which class, derived from the NClientServerTechnology base class, to use for the new instance.
            </param>
      <param name="webControl">
            The web control to associate the new NClientServerTechnology  object with.
            </param>
      <returns>A new instance of a class, derived from the NClientServerTechnology base class.</returns>
    </member>
    <member name="T:Nevron.UI.WebForm.Controls.NAjaxMouseDoubleClickCallbackTool">
      <summary>
            Provides configuration for the client side NAjaxMouseDoubleClickCallbackTool tool
            </summary>
    </member>
    <member name="T:Nevron.UI.WebForm.Controls.NAjaxCallbackToolDefinition">
      <summary>
            A base class for all server side AJAX callback tools, which represent the configuration
            of client side JavaScript tools.
            </summary>
    </member>
    <member name="T:Nevron.UI.WebForm.Controls.NAjaxToolDefinition">
      <summary>
            A base class for all server side AJAX tools, which represent the configuration
            of client side JavaScript tools.
            </summary>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NAjaxToolDefinition.GetJavaScript">
      <summary>
            Generates JavaScript that will create a new tool configuration object at the client.
            </summary>
      <returns>Returns a JavaScript that will create a new tool configuration object at the client.</returns>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NAjaxToolDefinition.GetConfigurationObjectJavaScript">
      <summary>
            Override this method to provide JavaScript code, creating a new object that
            carries custom configuration information for the tool. The output must look like
            this: "new NMyToolCustomconfiguration('my data', 12, 'more data')"
            </summary>
      <returns>JavaScript code or null if no custom configuration is to be used.</returns>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NAjaxToolDefinition.Equals(System.Object)">
      <summary>
            Determines whether the specified Object is equal to the current Object. 
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NAjaxToolDefinition.GetHashCode">
      <summary>
            Serves as a hash function for a particular type. GetHashCode is suitable for use in hashing algorithms and data structures like a hash table. 
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NAjaxToolDefinition.ToolId">
      <summary>
            Gets / sets the id of the tool.
            </summary>
      <remarks>
            Must be equal to the id of the corresponding client side JavaScript tool.
            </remarks>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NAjaxToolDefinition.DefaultEnabled">
      <summary>
            Gets / sets the raw initial enabled state of the tool.
            </summary>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NAjaxCallbackToolDefinition.GetConfigurationObjectJavaScript">
      <summary>
            Generates JavaScript that will create a new tool configuration object at the client.
            </summary>
      <returns>Returns a JavaScript that will create a new tool configuration object at the client.</returns>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NAjaxCallbackToolDefinition.UseImageMapFilter">
      <summary>
            Gets / sets a value, indicating whether to filter client side events, based on client side
            image map hot-testing.
            When set to true, this property causes the client side events to be forwarded
            via callback to the server only if the event coordinates are hit-tested to an
            image map object. If no image map is present, this value is ignored and all
            events are forwarded to the server.
            </summary>
    </member>
    <member name="T:Nevron.UI.WebForm.Controls.NHttpHandlerCallback">
      <summary>
            Provides basic implementation for the INHttpHandlerCallback interface
            </summary>
    </member>
    <member name="T:Nevron.UI.WebForm.Controls.INHttpHandlerCallback">
      <summary>
            INHttpHandlerCallback provides interface for classes to handle AJAX events in Nevron Instant Callback mode
            </summary>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.INHttpHandlerCallback.OnCallbackExecuting(System.String,System.Web.HttpContext,Nevron.UI.WebForm.Controls.NStateObject,Nevron.UI.WebForm.Controls.NCallbackArgs)">
      <summary>
            Occurs when Nevron AJAX Framework is about to process an instant callback.
            </summary>
      <param name="webControlId">The id of the web control that fired the event.</param>
      <param name="context">The context of the current request.</param>
      <param name="state">The state of the web control that fired the event.</param>
      <param name="args">An NCallbackArgs that contains the event data.</param>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.INHttpHandlerCallback.OnCallbackExecuted(System.String,System.Web.HttpContext,Nevron.UI.WebForm.Controls.NStateObject,Nevron.UI.WebForm.Controls.NCallbackArgs)">
      <summary>
            Occurs when Nevron AJAX Framework has processed an instant callback.
            </summary>
      <param name="webControlId">The id of the web control that fired the event.</param>
      <param name="context">The context of the current request.</param>
      <param name="state">The state of the web control that fired the event.</param>
      <param name="args">An NCallbackArgs that contains the event data.</param>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.INHttpHandlerCallback.OnAsyncCustomCommand(System.String,System.Web.HttpContext,Nevron.UI.WebForm.Controls.NStateObject,Nevron.UI.WebForm.Controls.NCallbackCustomCommandArgs)">
      <summary>
            Handles a custom HTTP handler command.
            </summary>
      <param name="webControlId">The id of the web control that fired the event.</param>
      <param name="context">The context of the current request.</param>
      <param name="state">The state of the web control that fired the event.</param>
      <param name="args">An NCallbackCustomCommandArgs that contains the event data.</param>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.INHttpHandlerCallback.OnAsyncClick(System.String,System.Web.HttpContext,Nevron.UI.WebForm.Controls.NStateObject,Nevron.UI.WebForm.Controls.NCallbackMouseEventArgs)">
      <summary>
            Handles the click HTTP handler command.
            </summary>
      <param name="webControlId">The id of the web control that fired the event.</param>
      <param name="context">The context of the current request.</param>
      <param name="state">The state of the web control that fired the event.</param>
      <param name="args">An NCallbackMouseEventArgs that contains the event data.</param>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.INHttpHandlerCallback.OnAsyncDoubleClick(System.String,System.Web.HttpContext,Nevron.UI.WebForm.Controls.NStateObject,Nevron.UI.WebForm.Controls.NCallbackMouseEventArgs)">
      <summary>
            Handles the double click HTTP handler command.
            </summary>
      <param name="webControlId">The id of the web control that fired the event.</param>
      <param name="context">The context of the current request.</param>
      <param name="state">The state of the web control that fired the event.</param>
      <param name="args">An NCallbackMouseEventArgs that contains the event data.</param>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.INHttpHandlerCallback.OnAsyncMouseMove(System.String,System.Web.HttpContext,Nevron.UI.WebForm.Controls.NStateObject,Nevron.UI.WebForm.Controls.NCallbackMouseEventArgs)">
      <summary>
            Handles the mouse move HTTP handler command.
            </summary>
      <param name="webControlId">The id of the web control that fired the event.</param>
      <param name="context">The context of the current request.</param>
      <param name="state">The state of the web control that fired the event.</param>
      <param name="args">An NCallbackMouseEventArgs that contains the event data.</param>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.INHttpHandlerCallback.OnAsyncMouseDown(System.String,System.Web.HttpContext,Nevron.UI.WebForm.Controls.NStateObject,Nevron.UI.WebForm.Controls.NCallbackMouseEventArgs)">
      <summary>
            Handles the mouse down HTTP handler command.
            </summary>
      <param name="webControlId">The id of the web control that fired the event.</param>
      <param name="context">The context of the current request.</param>
      <param name="state">The state of the web control that fired the event.</param>
      <param name="args">An NCallbackMouseEventArgs that contains the event data.</param>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.INHttpHandlerCallback.OnAsyncMouseUp(System.String,System.Web.HttpContext,Nevron.UI.WebForm.Controls.NStateObject,Nevron.UI.WebForm.Controls.NCallbackMouseEventArgs)">
      <summary>
            Handles the mouse up HTTP handler command.
            </summary>
      <param name="webControlId">The id of the web control that fired the event.</param>
      <param name="context">The context of the current request.</param>
      <param name="state">The state of the web control that fired the event.</param>
      <param name="args">An NCallbackMouseEventArgs that contains the event data.</param>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.INHttpHandlerCallback.OnAsyncMouseOver(System.String,System.Web.HttpContext,Nevron.UI.WebForm.Controls.NStateObject,Nevron.UI.WebForm.Controls.NCallbackMouseEventArgs)">
      <summary>
            Handles the mouse over HTTP handler command.
            </summary>
      <param name="webControlId">The id of the web control that fired the event.</param>
      <param name="context">The context of the current request.</param>
      <param name="state">The state of the web control that fired the event.</param>
      <param name="args">An NCallbackMouseEventArgs that contains the event data.</param>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.INHttpHandlerCallback.OnAsyncMouseOut(System.String,System.Web.HttpContext,Nevron.UI.WebForm.Controls.NStateObject,Nevron.UI.WebForm.Controls.NCallbackMouseEventArgs)">
      <summary>
            Handles the mouse out HTTP handler command.
            </summary>
      <param name="webControlId">The id of the web control that fired the event.</param>
      <param name="context">The context of the current request.</param>
      <param name="state">The state of the web control that fired the event.</param>
      <param name="args">An NCallbackMouseEventArgs that contains the event data.</param>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.INHttpHandlerCallback.OnAsyncRefresh(System.String,System.Web.HttpContext,Nevron.UI.WebForm.Controls.NStateObject,System.EventArgs)">
      <summary>
            Handles the refresh and auto refresh HTTP handler commands.
            </summary>
      <param name="webControlId">The id of the web control that fired the event.</param>
      <param name="context">The context of the current request.</param>
      <param name="state">The state of the web control that fired the event.</param>
      <param name="args">An EventArgs that contains the event data.</param>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NHttpHandlerCallback.OnCallbackExecuting(System.String,System.Web.HttpContext,Nevron.UI.WebForm.Controls.NStateObject,Nevron.UI.WebForm.Controls.NCallbackArgs)">
      <summary>
            Occurs when Nevron AJAX Framework is about to process an instant callback.
            </summary>
      <param name="webControlId">The id of the web control that fired the event.</param>
      <param name="context">The context of the current request.</param>
      <param name="state">The state of the web control that fired the event.</param>
      <param name="args">An NCallbackArgs that contains the event data.</param>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NHttpHandlerCallback.OnCallbackExecuted(System.String,System.Web.HttpContext,Nevron.UI.WebForm.Controls.NStateObject,Nevron.UI.WebForm.Controls.NCallbackArgs)">
      <summary>
            Occurs when Nevron AJAX Framework has processed an instant callback.
            </summary>
      <param name="webControlId">The id of the web control that fired the event.</param>
      <param name="context">The context of the current request.</param>
      <param name="state">The state of the web control that fired the event.</param>
      <param name="args">An NCallbackArgs that contains the event data.</param>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NHttpHandlerCallback.OnAsyncCustomCommand(System.String,System.Web.HttpContext,Nevron.UI.WebForm.Controls.NStateObject,Nevron.UI.WebForm.Controls.NCallbackCustomCommandArgs)">
      <summary>
            Handles a custom HTTP handler command.
            </summary>
      <param name="webControlId">The id of the web control that fired the event.</param>
      <param name="context">The context of the current request.</param>
      <param name="state">The state of the web control that fired the event.</param>
      <param name="args">An NCallbackCustomCommandArgs that contains the event data.</param>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NHttpHandlerCallback.OnAsyncClick(System.String,System.Web.HttpContext,Nevron.UI.WebForm.Controls.NStateObject,Nevron.UI.WebForm.Controls.NCallbackMouseEventArgs)">
      <summary>
            Handles the click HTTP handler command.
            </summary>
      <param name="webControlId">The id of the web control that fired the event.</param>
      <param name="context">The context of the current request.</param>
      <param name="state">The state of the web control that fired the event.</param>
      <param name="args">An NCallbackMouseEventArgs that contains the event data.</param>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NHttpHandlerCallback.OnAsyncDoubleClick(System.String,System.Web.HttpContext,Nevron.UI.WebForm.Controls.NStateObject,Nevron.UI.WebForm.Controls.NCallbackMouseEventArgs)">
      <summary>
            Handles the double click HTTP handler command.
            </summary>
      <param name="webControlId">The id of the web control that fired the event.</param>
      <param name="context">The context of the current request.</param>
      <param name="state">The state of the web control that fired the event.</param>
      <param name="args">An NCallbackMouseEventArgs that contains the event data.</param>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NHttpHandlerCallback.OnAsyncMouseMove(System.String,System.Web.HttpContext,Nevron.UI.WebForm.Controls.NStateObject,Nevron.UI.WebForm.Controls.NCallbackMouseEventArgs)">
      <summary>
            Handles the mouse move HTTP handler command.
            </summary>
      <param name="webControlId">The id of the web control that fired the event.</param>
      <param name="context">The context of the current request.</param>
      <param name="state">The state of the web control that fired the event.</param>
      <param name="args">An NCallbackMouseEventArgs that contains the event data.</param>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NHttpHandlerCallback.OnAsyncMouseDown(System.String,System.Web.HttpContext,Nevron.UI.WebForm.Controls.NStateObject,Nevron.UI.WebForm.Controls.NCallbackMouseEventArgs)">
      <summary>
            Handles the mouse down HTTP handler command.
            </summary>
      <param name="webControlId">The id of the web control that fired the event.</param>
      <param name="context">The context of the current request.</param>
      <param name="state">The state of the web control that fired the event.</param>
      <param name="args">An NCallbackMouseEventArgs that contains the event data.</param>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NHttpHandlerCallback.OnAsyncMouseUp(System.String,System.Web.HttpContext,Nevron.UI.WebForm.Controls.NStateObject,Nevron.UI.WebForm.Controls.NCallbackMouseEventArgs)">
      <summary>
            Handles the mouse up HTTP handler command.
            </summary>
      <param name="webControlId">The id of the web control that fired the event.</param>
      <param name="context">The context of the current request.</param>
      <param name="state">The state of the web control that fired the event.</param>
      <param name="args">An NCallbackMouseEventArgs that contains the event data.</param>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NHttpHandlerCallback.OnAsyncMouseOver(System.String,System.Web.HttpContext,Nevron.UI.WebForm.Controls.NStateObject,Nevron.UI.WebForm.Controls.NCallbackMouseEventArgs)">
      <summary>
            Handles the mouse over HTTP handler command.
            </summary>
      <param name="webControlId">The id of the web control that fired the event.</param>
      <param name="context">The context of the current request.</param>
      <param name="state">The state of the web control that fired the event.</param>
      <param name="args">An NCallbackMouseEventArgs that contains the event data.</param>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NHttpHandlerCallback.OnAsyncMouseOut(System.String,System.Web.HttpContext,Nevron.UI.WebForm.Controls.NStateObject,Nevron.UI.WebForm.Controls.NCallbackMouseEventArgs)">
      <summary>
            Handles the mouse out HTTP handler command.
            </summary>
      <param name="webControlId">The id of the web control that fired the event.</param>
      <param name="context">The context of the current request.</param>
      <param name="state">The state of the web control that fired the event.</param>
      <param name="args">An NCallbackMouseEventArgs that contains the event data.</param>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NHttpHandlerCallback.OnAsyncRefresh(System.String,System.Web.HttpContext,Nevron.UI.WebForm.Controls.NStateObject,System.EventArgs)">
      <summary>
            Handles the refresh and auto refresh HTTP handler commands.
            </summary>
      <param name="webControlId">The id of the web control that fired the event.</param>
      <param name="context">The context of the current request.</param>
      <param name="state">The state of the web control that fired the event.</param>
      <param name="args">An EventArgs that contains the event data.</param>
    </member>
    <member name="T:Nevron.UI.WebForm.Controls.ResponseType">
      <summary>
            The possible response types generated by the component.
            </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.ResponseType.Image">
      <summary>
            Static image is send to the client browser
            </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.ResponseType.HTMLImageMap">
      <summary>
            HTML Image map is send to the client browser
            </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.ResponseType.SVG">
      <summary>
            SVG content is send to the client browser
            </summary>
    </member>
    <member name="T:Nevron.UI.WebForm.Controls.AjaxImageMapMode">
      <summary>
            The possible modes for generating an image map in AJAX mode
            </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.AjaxImageMapMode.Never">
      <summary>
            An image map is never generated.
            </summary>
      <remarks>
        <para>
            This is the recommended image map mode in the case when no client side interactivity
            is required (for Ex. for simple self refreshing charts) or when no image map filtering 
            is required for mouse events that are routed via callback to the server.
            </para>
        <para>
            Use this mode whenever it is possible. It will optimize the performance of your web application.
            </para>
      </remarks>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.AjaxImageMapMode.Auto">
      <summary>
            An image map is automatically generated for all built-in commands, but only if there are elements that will produce image map areas.
            For user defined commands the image map must be added manually (See <see cref="E:Nevron.UI.WebForm.Controls.NWebControl.AsyncQueryCommandResult" />).
            </summary>
      <remarks>
        <para>
            This is the recommended image map mode in the case when an image map is required for client 
            side hit testing, for miscellaneous interactivity styles like tooltips, browser redirection 
            and dynamic cursrors and in case when mouse events will be routed via callback to the 
            server, but only for selected interactive document elements.
            </para>
        <para>
            Use this mode when you have interactive charts.
            </para>
      </remarks>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.AjaxImageMapMode.Manual">
      <summary>
            The image map must be added manually (See <see cref="E:Nevron.UI.WebForm.Controls.NWebControl.AsyncQueryCommandResult" />)
            and will be generated and sent to the client only if there are elements which produce image map areas.
            </summary>
      <remarks>
        <para>
            This image map mode is recommended for custom scenarios and can be used for fine tuning
            the performance of the web application.
            </para>
        <para>
            Use this mode when you need to optimize performance.
            </para>
      </remarks>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.AjaxImageMapMode.Always">
      <summary>
            An image map is allways generated, even when it's empty, for both built-in and user
            defined commands.
            </summary>
      <remarks>
        <para>
            This image map mode is provided mainly for testing purposes. It will always generate
            an image map and deliver it to the client, but implies reduced performance.
            </para>
        <para>
            Use this mode for testing purposes only.
            </para>
      </remarks>
    </member>
    <member name="T:Nevron.UI.WebForm.Controls.ExpirationCheckReason">
      <summary>
            Specifies the reason why an expiration check is forced to a state manager
            </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.ExpirationCheckReason.ImageRendering">
      <summary>
            The control image is being redered.
            </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.ExpirationCheckReason.ControlRendering">
      <summary>
            The control HTML is being redered.
            </summary>
    </member>
    <member name="T:Nevron.UI.WebForm.Controls.AjaxScriptBuild">
      <summary>
            Enumerates the possible builds of the Nevron JavaScript Framework.
            </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.AjaxScriptBuild.Debug">
      <summary>
            The debug build of the Nevron JavaScript Framework.
            </summary>
      <remarks>
            The debug build of the Nevron JavaScript Framework is provided
            in order to simplify the diagnostics of any possible errors that
            the script could generate internally. Select this build explicitly, only 
            if it is recommended by Nevron during a support case.
            </remarks>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.AjaxScriptBuild.Release">
      <summary>
            The release build of the Nevron JavaScript Framework.
            </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.AjaxScriptBuild.Auto">
      <summary>
            Always selects the Release build. This value is recommended.
            </summary>
    </member>
    <member name="T:Nevron.UI.WebForm.Controls.AjaxDebugConsoleMode">
      <summary>
            Enumerates the possible display modes of the JavaScript client side debug console.
            </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.AjaxDebugConsoleMode.Embedded">
      <summary>
            The debug console us displayed as a top-most div within the current document.
            </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.AjaxDebugConsoleMode.PopUp">
      <summary>
            The debug console us displayed as a pop-up window.
            </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.AjaxDebugConsoleMode.Auto">
      <summary>
            Same as PopUp. Can be changed to Embedded in the future.
            </summary>
    </member>
    <member name="T:Nevron.UI.WebForm.Controls.ClientSideImageAcquisitionMode">
      <summary>
            ClientSideImageAcquisitionMode is used to change the way a rendered is streamline to the client
            </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.ClientSideImageAcquisitionMode.TempFile">
      <summary>
            Indicates that the image will be rendered and saved to a temporary file on the server.
            The image is displayed at the client (the web browser page) from an image tag with source referencing the temporary image file.
            </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.ClientSideImageAcquisitionMode.HttpHandler">
      <summary>
            Indicates that the image will be rendered dynamically via a <see cref="T:System.Web.IHttpHandler" /> implementation.
            The image is displayed at the client (the web browser page) from an image tag with source referencing a virtual *.axd file
            which returns a binary image stream to the browser.
            </summary>
    </member>
    <member name="T:Nevron.UI.WebForm.Controls.WebControlTechnologyType">
      <summary>
            WebControlTechnologyType is used to change the client-server communication technology
            programatically at design- and at run-time.
            </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.WebControlTechnologyType.Postback">
      <summary>
            When set to the Technology property of a <see cref="T:Nevron.UI.WebForm.Controls.NWebControl" /> object,
            this value causes the <see cref="T:Nevron.UI.WebForm.Controls.NWebControl" /> object to behave as a post-back control.
            </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.WebControlTechnologyType.Ajax">
      <summary>
            When set to the Technology property of a <see cref="T:Nevron.UI.WebForm.Controls.NWebControl" /> object,
            this value causes the <see cref="T:Nevron.UI.WebForm.Controls.NWebControl" /> object to behave as an AJAX control.
            </summary>
    </member>
    <member name="T:Nevron.UI.WebForm.Controls.NControlStateSettings">
      <summary>
            Controls the settings related to the persistence of the control in the page view state.
            </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.NControlStateSettings.defaultPersistControlState">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.NControlStateSettings.defaultPersistencyFormat">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NControlStateSettings.SaveControlState">
      <summary>
            Saves the control state in the repository if PersistControlState is set to true.
            </summary>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NControlStateSettings.LoadControlState(System.Object)">
      <summary>
            Loads the control state from the repository if PersistControlState is set to true.
            </summary>
      <param name="key">
      </param>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NControlStateSettings.HasCreatedTemporaryFile">
      <summary>
            Returns true if the object has created a temporary file on the server.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.NControlStateSettings.m_PersistControlState">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.NControlStateSettings.m_PersistencyFormat">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.NControlStateSettings.m_SerializationFilter">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.NControlStateSettings.m_Repository">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NControlStateSettings.PersistControlState">
      <summary>
            Whether or not the control should persist its state across roundtrips.
            </summary>
      <remarks>
            By default the control will not save the state. If you enable this property the control state will be serialized in the specified repository.
            </remarks>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NControlStateSettings.PersistencyFormat">
      <summary>
            Gets / sets the persistency format for the control state (XML, Binary, CustomXML, CustomBinary).
            </summary>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NControlStateSettings.Repository">
      <summary>
            Gets sets the repository holding the control state
            </summary>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NControlStateSettings.SerializationFilter">
      <summary>
            Gets/sets the serialization filter controlling what parts of the state should be serialzed.
            </summary>
    </member>
    <member name="T:Nevron.UI.WebForm.Controls.NBrowserResponseSettings">
      <summary>
            Holds the browser response configuration of the control.
            </summary>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NBrowserResponseSettings.FindResponse(System.Web.HttpBrowserCapabilities)">
      <summary>
            Finds a response matching the specified browser capabilities
            </summary>
      <param name="browserCapabilities">
      </param>
      <returns>
      </returns>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.NBrowserResponseSettings.m_DefaultResponse">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.NBrowserResponseSettings.m_BrowserResponsePairs">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NBrowserResponseSettings.DefaultResponse">
      <summary>
            The response generated by the component when no browser match occured.
            </summary>
      <remarks>
            You must not pass to this property objects of type NResponse directly. Instead you must use objects from classes that derive from NResponse like NImageResponse, NHtmlImageMapResponse or NHtmlImageMapResponsePostback.
            </remarks>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NBrowserResponseSettings.BrowserResponsePairs">
      <summary>
            A collection of NBrowserResponsePair objects linking a browser to an object derived from NResponse.
            </summary>
      <remarks>
            The component checks the browser description in each NBrowserResponsePair object and tries to match it to the current browser accessing the page. If a match occurs than
            the associated response is generated. If not the response specified by the DefaultResponse property is generated. By default this collection is empty which means that the 
            component will always generate the response type specified by the DefaultResponse property. For more information on browser detection check out the Integration in WebForms book in the 
            documentation.
            </remarks>
    </member>
    <member name="T:Nevron.UI.WebForm.Controls.NAjaxXmlTransport">
      <summary>
            Represents a collection of structured XML data represented by the 
            NAjaxXmlDataSection class. Provides serialization and deserialization
            capabilities.
            </summary>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NAjaxXmlTransport.Serialize">
      <summary>
            Serializes the instance to a structured XML string.
            </summary>
      <returns>
            XML string.
            </returns>
      <remarks>
            The following sample XML can be used to understand the serialization schema of a NAjaxXmlTransport object:
            <code>
            	&lt;ajaxXmlTransport&gt;
            		&lt;mySection attrib1="value1" attrib2="value2"&gt;
            		&lt;![CDATA[
            			some raw data
            		]]&gt;
            		&lt;/mySection&gt;
            	&lt;/ajaxXmlTransport&gt;
            </code>
            Data sections are serialized in random order.
            </remarks>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NAjaxXmlTransport.Deserialize(System.String)">
      <summary>
            Initializes the state of this instance from a structured XML string.
            </summary>
      <param name="xml">The source XML string.</param>
      <remarks>
            The following sample XML can be used to understand the serialization schema of a NAjaxXmlTransport object:
            <code>
            	&lt;ajaxXmlTransport&gt;
            		&lt;mySection attrib1="value1" attrib2="value2"&gt;
            		&lt;![CDATA[
            			some raw data
            		]]&gt;
            		&lt;/mySection&gt;
            	&lt;/ajaxXmlTransport&gt;
            </code></remarks>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NAjaxXmlTransport.AddDataSection(Nevron.UI.WebForm.Controls.NAjaxXmlDataSection)">
      <summary>
            Adds a new data section to the collection of data sections of the object.
            </summary>
      <param name="dataSection">
            The data section to add. The Name property of the section 
            must not be null and must be unique to the NAjaxXmlTrasport object.
            </param>
      <exception cref="T:System.ArgumentNullException">The Name property of the dataSection object is null.</exception>
      <exception cref="T:System.ArgumentException">The NAjaxXmlTransport object already contains a section with a Name property value same as the value of the Name property of the dataSection object.</exception>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NAjaxXmlTransport.ReadXmlElement(System.Xml.XmlTextReader)">
      <summary>
            This method is called on NAjaxXmlTransport deserialization when an XML element is
            found and needs to be deserialized. This specific implementation
            deserializes the element and its inner XML as a NAjaxXmlDataSection
            object.
            </summary>
      <param name="xmlReader">The XML reader used as XML source.</param>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NAjaxXmlTransport.LocateRootElement(System.Xml.XmlTextReader)">
      <summary>
            Scans the XML tree until an element with name "ajaxXmlTransport" is
            located, then returns.
            </summary>
      <param name="xmlReader">The XML reader used as XML source.</param>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NAjaxXmlTransport.ExtractCDataContent(System.Xml.XmlTextReader)">
      <summary>
            Collects all CDATA blocks, located in the inner XML of the current
            XML element and concatenates them in the result string.
            </summary>
      <param name="xmlReader">
            The XML reader used as XML source.
            </param>
      <returns>
            Concatenated text, extracted from all CDATA sections, found in
            current element's inner XML. If the current elemen is an empty element
            or does not contain any CDATA sections, an empty string is returned.
            </returns>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NAjaxXmlTransport.ReadCompleteXml(System.Xml.XmlTextWriter)">
      <summary>
            Reads as string all XML collected by an XmlWriter.
            </summary>
      <param name="xmlWriter">
            The XML writer used as XML source.
            </param>
      <returns>All XML collected by an XmlWriter as a string.</returns>
      <remarks>
            The XML writer is flushed; after the read operation, the underlying
            stream of the XML writer is positioned at the end and is ready for new
            XML data to be appended.
            </remarks>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NAjaxXmlTransport.DataSections">
      <summary>
            A Hashtable object containing the index of NAjaxXmlDataSection objects aggregated by the NAjaxXmlTransport object.
            </summary>
    </member>
    <member name="T:Nevron.UI.WebForm.Controls.INAjaxControl">
      <summary>
            INAjaxControl provides the common interface of all Nevron web controls
            which support the AJAX technology.
            </summary>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.INAjaxControl.OnQueryAjaxTools">
      <summary>
            Raises the QueryAjaxTools event.
            </summary>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.INAjaxControl.OnCallbackExecuting(Nevron.UI.WebForm.Controls.NCallbackArgs)">
      <summary>
            Raises the CallbackExecuting event.
            </summary>
      <param name="args">An NCallbackArgs that contains the event data.</param>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.INAjaxControl.OnCallbackExecuted(Nevron.UI.WebForm.Controls.NCallbackArgs)">
      <summary>
            Raises the CallbackExecuted event.
            </summary>
      <param name="args">An NCallbackArgs that contains the event data.</param>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.INAjaxControl.OnAsyncCustomCommand(Nevron.UI.WebForm.Controls.NCallbackCustomCommandArgs)">
      <summary>
            Raises the AsyncCustomCommand event.
            </summary>
      <param name="args">An NCallbackCustomCommandArgs that contains the event data.</param>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.INAjaxControl.OnAsyncClick(Nevron.UI.WebForm.Controls.NCallbackMouseEventArgs)">
      <summary>
            Raises the AsyncClick event.
            </summary>
      <param name="args">An NCallbackMouseEventArgs that contains the event data.</param>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.INAjaxControl.OnAsyncDoubleClick(Nevron.UI.WebForm.Controls.NCallbackMouseEventArgs)">
      <summary>
            Raises the AsyncDoubleClick event.
            </summary>
      <param name="args">An NCallbackMouseEventArgs that contains the event data.</param>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.INAjaxControl.OnAsyncMouseMove(Nevron.UI.WebForm.Controls.NCallbackMouseEventArgs)">
      <summary>
            Raises the AsyncMouseMove event.
            </summary>
      <param name="args">An NCallbackMouseEventArgs that contains the event data.</param>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.INAjaxControl.OnAsyncMouseDown(Nevron.UI.WebForm.Controls.NCallbackMouseEventArgs)">
      <summary>
            Raises the AsyncMouseDown event.
            </summary>
      <param name="args">An NCallbackMouseEventArgs that contains the event data.</param>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.INAjaxControl.OnAsyncMouseUp(Nevron.UI.WebForm.Controls.NCallbackMouseEventArgs)">
      <summary>
            Raises the AsyncMouseUp event.
            </summary>
      <param name="args">An NCallbackMouseEventArgs that contains the event data.</param>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.INAjaxControl.OnAsyncMouseOver(Nevron.UI.WebForm.Controls.NCallbackMouseEventArgs)">
      <summary>
            Raises the AsyncMouseOver event.
            </summary>
      <param name="args">An NCallbackMouseEventArgs that contains the event data.</param>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.INAjaxControl.OnAsyncMouseOut(Nevron.UI.WebForm.Controls.NCallbackMouseEventArgs)">
      <summary>
            Raises the AsyncMouseOut event.
            </summary>
      <param name="args">An NCallbackMouseEventArgs that contains the event data.</param>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.INAjaxControl.OnAsyncRefresh(System.EventArgs)">
      <summary>
            Raises the AsyncRefresh event.
            </summary>
      <param name="args">An EventArgs that contains the event data.</param>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.INAjaxControl.OnAsyncQueryCommandResult(Nevron.UI.WebForm.Controls.NCallbackQueryCommandResultArgs)">
      <summary>
            Raises the AsyncQueryCommandResult event.
            </summary>
      <param name="args">An NCallbackQueryCommandResultArgs that contains the event data.</param>
    </member>
    <member name="E:Nevron.UI.WebForm.Controls.INAjaxControl.QueryAjaxTools">
      <summary>
            Occurs when the web control is collecting tool definitions for the client side controller.
            </summary>
      <remarks>
            This event is fired when the web control is being loaded. Handle this event to register the tools,
            required that will run in the client in AJAX mode. Adding the tools at other place
            like the Page_Load event may cause postback events to occur before the tools
            were added to the controller.
            </remarks>
    </member>
    <member name="E:Nevron.UI.WebForm.Controls.INAjaxControl.CallbackExecuting">
      <summary>
            Occurs when Nevron AJAX Framework is about to process an asynchronous callback.
            </summary>
    </member>
    <member name="E:Nevron.UI.WebForm.Controls.INAjaxControl.CallbackExecuted">
      <summary>
            Occurs when Nevron AJAX Framework has processed an asynchronous callback.
            </summary>
    </member>
    <member name="E:Nevron.UI.WebForm.Controls.INAjaxControl.AsyncCustomCommand">
      <summary>
            Occurs when a custom command event is fired on the client side.
            </summary>
    </member>
    <member name="E:Nevron.UI.WebForm.Controls.INAjaxControl.AsyncClick">
      <summary>
            Occurs when the control is clicked on the client side.
            </summary>
      <remarks>
            After the control is once rendered and displayed at client side, the event can be enabled and disabled through client side scripting.
            For more details regarding the client side manipulation of Nevron AJAX-enabled controls, please refer the User's Guide for the specific Nevron control.
            </remarks>
    </member>
    <member name="E:Nevron.UI.WebForm.Controls.INAjaxControl.AsyncDoubleClick">
      <summary>
            Occurs when the control is double clicked on the client side.
            </summary>
      <remarks>
            After the control is once rendered and displayed at client side, the event can be enabled and disabled through client side scripting.
            For more details regarding the client side manipulation of Nevron AJAX-enabled controls, please refer the User's Guide for the specific Nevron control.
            </remarks>
    </member>
    <member name="E:Nevron.UI.WebForm.Controls.INAjaxControl.AsyncMouseMove">
      <summary>
            Occurs when the mouse is moved over the control on the client side.
            </summary>
      <remarks>
            After the control is once rendered and displayed at client side, the event can be enabled and disabled through client side scripting.
            For more details regarding the client side manipulation of Nevron AJAX-enabled controls, please refer the User's Guide for the specific Nevron control.
            </remarks>
    </member>
    <member name="E:Nevron.UI.WebForm.Controls.INAjaxControl.AsyncMouseDown">
      <summary>
            Occurs when the left mouse button is pressed down on the control on the client side.
            </summary>
      <remarks>
            After the control is once rendered and displayed at client side, the event can be enabled and disabled through client side scripting.
            For more details regarding the client side manipulation of Nevron AJAX-enabled controls, please refer the User's Guide for the specific Nevron control.
            </remarks>
    </member>
    <member name="E:Nevron.UI.WebForm.Controls.INAjaxControl.AsyncMouseUp">
      <summary>
            Occurs when the left mouse button is up after a click on the control on the client side.
            </summary>
      <remarks>
            After the control is once rendered and displayed at client side, the event can be enabled and disabled through client side scripting.
            For more details regarding the client side manipulation of Nevron AJAX-enabled controls, please refer the User's Guide for the specific Nevron control.
            </remarks>
    </member>
    <member name="E:Nevron.UI.WebForm.Controls.INAjaxControl.AsyncMouseOver">
      <summary>
            Occurs when the mouse enters on the client side the area of a visual object with image map interctivity style.
            </summary>
      <remarks>
            After the control is once rendered and displayed at client side, the event can be enabled and disabled through client side scripting.
            For more details regarding the client side manipulation of Nevron AJAX-enabled controls, please refer the User's Guide for the specific Nevron control.
            </remarks>
    </member>
    <member name="E:Nevron.UI.WebForm.Controls.INAjaxControl.AsyncMouseOut">
      <summary>
            Occurs when the mouse leaves on the client side the area of a visual object with image map interctivity style.
            </summary>
      <remarks>
            After the control is once rendered and displayed at client side, the event can be enabled and disabled through client side scripting.
            For more details regarding the client side manipulation of Nevron AJAX-enabled controls, please refer the User's Guide for the specific Nevron control.
            </remarks>
    </member>
    <member name="E:Nevron.UI.WebForm.Controls.INAjaxControl.AsyncRefresh">
      <summary>
            Occurs when the control is refreshed at client side. This event can be fired either when calling the Refresh() method of the control client side javascript callback object
            or when an auto-refresh event occurs at client side and the AsyncAutoRefreshEnabled property of the control is set to true.
            </summary>
      <remarks>
            After the control is once rendered and displayed at client side, the event can be enabled and disabled through client side scripting.
            For more details regarding the client side manipulation of Nevron AJAX-enabled controls, please refer the User's Guide for the specific Nevron control.
            </remarks>
    </member>
    <member name="E:Nevron.UI.WebForm.Controls.INAjaxControl.AsyncQueryCommandResult">
      <summary>
            Occurs after a callback was processed, when collecting data for the result to be returned to the client.
            </summary>
      <remarks>
            Uset the property ResultBuilder of the event argument of type <see cref="T:Nevron.UI.WebForm.Controls.NCallbackQueryCommandResultArgs" />
            to add data sections to the result xml that will be delivered to the client.
            </remarks>
      <seealso cref="T:Nevron.UI.WebForm.Controls.NCallbackQueryCommandResultArgs" />
      <seealso cref="T:Nevron.UI.WebForm.Controls.NAjaxXmlTransportBuilder" />
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.INAjaxControl.InstanceGuid">
      <summary>
            Gets an id that identifies the control to the image resource HTTP handler.
            </summary>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.INAjaxControl.AjaxEnabled">
      <summary>
            Gets / sets a value indicating if the AJAX functionality of the control is enabled.
            When set to false, the control behaves as a standard postback control. Else, no postback
            functionality is present and all supported client side events are handled using AJAX.
            </summary>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.INAjaxControl.AjaxScriptBuild">
      <summary>
            Gets/sets a value, indicating whether the debug script build or the release script build
            must be loaded in AJAX mode.
            </summary>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.INAjaxControl.AjaxDebugConsoleMode">
      <summary>
            Gets/sets a value, indicating the display mode of the JavaScript client side 
            debug console.
            </summary>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.INAjaxControl.AjaxTools">
      <summary>
            Gets a list of server side AJAX tool definitions that will be sent to the client.
            Based on these definitions the client side tool factory will create and configure
            tools that will be running at client side.
            </summary>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.INAjaxControl.AjaxToolsFactoryType">
      <summary>
            Gets or sets the name of the client side JavaScript class that is used to
            create instances of client side tools.
            </summary>
      <remarks>
        <para>
            Set this property to the name of your own custom tool-factory JavaScript class.
            You may need to do this when you implement custom AJAX tools.
            </para>
        <para>
            Your custom class must derive from the Nevron JavaScript NToolFactory class. The script
            resource that contains the code of your custom class must be registered with the
            ScriptManager component on your web page. For more details on implementing custom tools,
            please read the User's Guide documentation topics under Framework/WebForm/AJAX.
            </para>
      </remarks>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.INAjaxControl.AjaxImageMapMode">
      <summary>
            Gets / sets a value indicating wheather to genrate automatically an image map in AJAX mode.
            </summary>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.INAjaxControl.AsyncClickEventPriority">
      <summary>
            Gets / sets a value indicating the priority of the event in the client side event pool.
            </summary>
      <remarks>
            After the control is once rendered and displayed at client side, this value can be modified through client side scripting.
            For more details regarding the client side manipulation of Nevron AJAX-enabled controls, please refer the User's Guide for the specific Nevron control.
            </remarks>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.INAjaxControl.AsyncClickEventQueueLength">
      <summary>
            Gets / sets a value indicating the length of the event queue in the client side event pool.
            </summary>
      <remarks>
            After the control is once rendered and displayed at client side, this value can be modified through client side scripting.
            For more details regarding the client side manipulation of Nevron AJAX-enabled controls, please refer the User's Guide for the specific Nevron control.
            </remarks>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.INAjaxControl.AsyncDoubleClickEventPriority">
      <summary>
            Gets / sets a value indicating the priority of the event in the client side event pool.
            </summary>
      <remarks>
            After the control is once rendered and displayed at client side, this value can be modified through client side scripting.
            For more details regarding the client side manipulation of Nevron AJAX-enabled controls, please refer the User's Guide for the specific Nevron control.
            </remarks>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.INAjaxControl.AsyncDoubleClickEventQueueLength">
      <summary>
            Gets / sets a value indicating the length of the event queue in the client side event pool.
            </summary>
      <remarks>
            After the control is once rendered and displayed at client side, this value can be modified through client side scripting.
            For more details regarding the client side manipulation of Nevron AJAX-enabled controls, please refer the User's Guide for the specific Nevron control.
            </remarks>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.INAjaxControl.AsyncMouseMoveEventPriority">
      <summary>
            Gets / sets a value indicating the priority of the event in the client side event pool.
            </summary>
      <remarks>
            After the control is once rendered and displayed at client side, this value can be modified through client side scripting.
            For more details regarding the client side manipulation of Nevron AJAX-enabled controls, please refer the User's Guide for the specific Nevron control.
            </remarks>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.INAjaxControl.AsyncMouseMoveEventQueueLength">
      <summary>
            Gets / sets a value indicating the length of the event queue in the client side event pool.
            </summary>
      <remarks>
            After the control is once rendered and displayed at client side, this value can be modified through client side scripting.
            For more details regarding the client side manipulation of Nevron AJAX-enabled controls, please refer the User's Guide for the specific Nevron control.
            </remarks>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.INAjaxControl.AsyncMouseDownEventPriority">
      <summary>
            Gets / sets a value indicating the priority of the event in the client side event pool.
            </summary>
      <remarks>
            After the control is once rendered and displayed at client side, this value can be modified through client side scripting.
            For more details regarding the client side manipulation of Nevron AJAX-enabled controls, please refer the User's Guide for the specific Nevron control.
            </remarks>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.INAjaxControl.AsyncMouseDownEventQueueLength">
      <summary>
            Gets / sets a value indicating the length of the event queue in the client side event pool.
            </summary>
      <remarks>
            After the control is once rendered and displayed at client side, this value can be modified through client side scripting.
            For more details regarding the client side manipulation of Nevron AJAX-enabled controls, please refer the User's Guide for the specific Nevron control.
            </remarks>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.INAjaxControl.AsyncMouseUpEventPriority">
      <summary>
            Gets / sets a value indicating the priority of the event in the client side event pool.
            </summary>
      <remarks>
            After the control is once rendered and displayed at client side, this value can be modified through client side scripting.
            For more details regarding the client side manipulation of Nevron AJAX-enabled controls, please refer the User's Guide for the specific Nevron control.
            </remarks>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.INAjaxControl.AsyncMouseUpEventQueueLength">
      <summary>
            Gets / sets a value indicating the length of the event queue in the client side event pool.
            </summary>
      <remarks>
            After the control is once rendered and displayed at client side, this value can be modified through client side scripting.
            For more details regarding the client side manipulation of Nevron AJAX-enabled controls, please refer the User's Guide for the specific Nevron control.
            </remarks>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.INAjaxControl.AsyncAutoRefreshEnabled">
      <summary>
            Gets / sets a value indicating if the client side auto-refresh event must be handled by the control and processed via AJAX callback. When set to false the client side event is ignored.
            </summary>
      <remarks>
            This property does not affect the behavior of the Refresh() method of the control client side javascript callback object.
            After the control is once rendered and displayed at client side, the event can be enabled and disabled through client side scripting.
            For more details regarding the client side manipulation of Nevron AJAX-enabled controls, please refer the User's Guide for the specific Nevron control.
            </remarks>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.INAjaxControl.AsyncAutoRefreshEventPriority">
      <summary>
            Gets a value indicating the priority of the auto refresh event in the client side event pool. It is always set to the lowest possible value, which is 0.
            </summary>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.INAjaxControl.AsyncAutoRefreshEventQueueLength">
      <summary>
            Gets a value indicating the length of the event queue of the auto refresh event in the client side event pool. It is always set to the lowest possible value, which is 0. This means that auto refresh events are never queued.
            </summary>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.INAjaxControl.AsyncRefreshEnabled">
      <summary>
            Gets / sets a value indicating if the client side forced refresh event must be handled by the control and processed via AJAX callback. When set to false the client side event is ignored.
            </summary>
      <remarks>
            After the control is once rendered and displayed at client side, the event can be enabled and disabled through client side scripting.
            For more details regarding the client side manipulation of Nevron AJAX-enabled controls, please refer the User's Guide for the specific Nevron control.
            </remarks>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.INAjaxControl.AsyncRefreshPriority">
      <summary>
            Gets / sets a value indicating the priority of the event in the client side event pool.
            </summary>
      <remarks>
            After the control is once rendered and displayed at client side, this value can be modified through client side scripting.
            For more details regarding the client side manipulation of Nevron AJAX-enabled controls, please refer the User's Guide for the specific Nevron control.
            </remarks>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.INAjaxControl.AsyncRefreshQueueLength">
      <summary>
            Gets / sets a value indicating the length of the event queue in the client side event pool.
            </summary>
      <remarks>
            After the control is once rendered and displayed at client side, this value can be modified through client side scripting.
            For more details regarding the client side manipulation of Nevron AJAX-enabled controls, please refer the User's Guide for the specific Nevron control.
            </remarks>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.INAjaxControl.AsyncRequestWaitCursorEnabled">
      <summary>
            Gets / sets a value indicating if at client side a wait cursor must be displayed over the control while a callback http request is pending.
            </summary>
      <remarks>
            After the control is once rendered and displayed at client side, the behavior, which is modified by the property, can be enabled and disabled through client side scripting.
            For more details regarding the client side manipulation of Nevron AJAX-enabled controls, please refer the User's Guide for the specific Nevron control.
            </remarks>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.INAjaxControl.AsyncImageLoadTimeout">
      <summary>
            Gets / sets a value in milliseconds that determines how long will the control wait for an image to load in the background before it is displayed on the web page.
            </summary>
      <remarks>
            This property is provided to avoid the possibility of unexpected web-browser behavior during background image loading.
            The reason to handle unexpected failures is that the client environment can vary greatly and not all factors affecting the web-browser, which displays the component, can be foreseen.
            </remarks>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.INAjaxControl.AsyncImageLoadIePollingInterval">
      <summary>
            Gets / sets a value in milliseconds that determines the is-image-loaded polling interval for Internet Explorer.
            </summary>
      <remarks>
            Because under certain conditions Internet Explorer fails to fire an event when an image is completely loaded,
            a client side timer is initialized to test periodically the images being loaded in the background.
            It is not recommended to modify the default value of this property.
            </remarks>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.INAjaxControl.AsyncRefreshInterval">
      <summary>
            Gets / sets a value in milliseconds that determines how often the control will automatically update its content at client side, reading data from the server using AJAX http requests.
            </summary>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.INAjaxControl.AsyncCallbackTimeout">
      <summary>
            Gets / sets a value in milliseconds that determines how long will the control wait before canceling an AJAX callback due to timeout.
            </summary>
      <remarks>
            This property is provided to avoid the possibility of unexpected web-browser behavior during AJAX http requests.
            The reason to handle unexpected failures is that the client environment can vary greatly and not all factors affecting the web-browser, which displays the component, can be foreseen.
            </remarks>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.INAjaxControl.AsyncAdaptiveRefreshIntervalFactor">
      <summary>
            Gets / sets a multiplier that is used to automatically slow down the auto-refresh rate of the control when an AJAX callback time-outs.
            </summary>
      <remarks>
            On a Windows machine, every time an AJAX http request is made to the server, at the client a new TCP connection is opened by the web-browser.
            By default the TCP connection has an extended life which can last for Ex. 5 minutes. If an AJAX control has a faster refresh rate than
            the rate at which TCP connections are disposed, within a limited period of time the operating system at the client can run out of
            TCP connection resources and refuse to create new TCP connections which results in AJAX http request time-outs. To prevent a constant "TCP-connection flood",
            Nevron AJAX components are designed to slow down the auto-refresh ratio by multiplying the auto-refresh interval by a flood-protection factor.
            In the practice, setting this property value to 1.5 (which is its default value) will slow down the refresh rate and resume normal operation of the control
            within a reasonable time after the first callback timeout is detected.
            </remarks>
    </member>
    <member name="T:Nevron.UI.WebForm.Controls.NAjaxMouseOverCallbackTool">
      <summary>
            Provides configuration for the client side NAjaxMouseOverCallbackTool tool
            </summary>
    </member>
    <member name="T:Nevron.UI.WebForm.Controls.NAjaxMouseClickCallbackTool">
      <summary>
            Provides configuration for the client side NAjaxMouseClickCallbackTool tool
            </summary>
    </member>
    <member name="T:Nevron.UI.WebForm.Controls.NServerRespository">
      <summary>
            Serializes the control state on the server as a temporary file.
            </summary>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NServerRespository.Load(System.Object)">
      <summary>
            Loads the object from the repository using the specified key.
            </summary>
      <param name="key">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NServerRespository.Save">
      <summary>
            Saves the object in the repository and returns a key to it.
            </summary>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NServerRespository.HasCreatedTemporaryFile">
      <summary>
            Returns true if the repository creates temporary files on the server.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.UI.WebForm.Controls.NImage">
      <summary>
            Summary description for NImage.
            </summary>
    </member>
    <member name="T:Nevron.UI.WebForm.Controls.NWebControl">
      <summary>
            NWebControl is the base class for all Nevron web controls.
            Its purpose is to implement the pluggable architecture for client-server communication
            technologies, which are represented by the <see cref="T:Nevron.UI.WebForm.Controls.NClientServerTechnology" /> class.
            </summary>
      <remarks>
            NWebControl delegates all steps from the web control's life-cycle, which are significant to the 
            client-server communication, to an instance of a class, derived from the <see cref="T:Nevron.UI.WebForm.Controls.NClientServerTechnology" />
            class. 
            This way, the AJAX client-server communication and the post-back client-server communication are
            implemented in separate classes, each class specialized per web control and client-server technology.
            E.g. Nevron Chart implements a <see cref="T:Nevron.UI.WebForm.Controls.NClientServerTechnology" /> for AJAX
            and another <see cref="T:Nevron.UI.WebForm.Controls.NClientServerTechnology" /> for post-back and Nevron Diagram
            implements another <see cref="T:Nevron.UI.WebForm.Controls.NClientServerTechnology" /> for AJAX
            and another <see cref="T:Nevron.UI.WebForm.Controls.NClientServerTechnology" /> for post-back. 
            Within a single web control, different technologies can be switched dynamically at design time and at run-time, 
            providing great flexibility in web control development.
            </remarks>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NWebControl.OnQueryAjaxTools">
      <summary>
            Raises the QueryAjaxTools event.
            </summary>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NWebControl.OnCallbackExecuting(Nevron.UI.WebForm.Controls.NCallbackArgs)">
      <summary>
            Raises the CallbackExecuting event.
            </summary>
      <param name="args">An NCallbackArgs that contains the event data.</param>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NWebControl.OnCallbackExecuted(Nevron.UI.WebForm.Controls.NCallbackArgs)">
      <summary>
            Raises the CallbackExecuted event.
            </summary>
      <param name="args">An NCallbackArgs that contains the event data.</param>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NWebControl.OnAsyncCustomCommand(Nevron.UI.WebForm.Controls.NCallbackCustomCommandArgs)">
      <summary>
            Raises the AsyncCustomCommand event.
            </summary>
      <param name="args">An NCallbackCustomCommandArgs that contains the event data.</param>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NWebControl.OnAsyncClick(Nevron.UI.WebForm.Controls.NCallbackMouseEventArgs)">
      <summary>
            Raises the AsyncClick event.
            </summary>
      <param name="args">An NCallbackMouseEventArgs that contains the event data.</param>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NWebControl.OnAsyncDoubleClick(Nevron.UI.WebForm.Controls.NCallbackMouseEventArgs)">
      <summary>
            Raises the AsyncDoubleClick event.
            </summary>
      <param name="args">An NCallbackMouseEventArgs that contains the event data.</param>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NWebControl.OnAsyncMouseMove(Nevron.UI.WebForm.Controls.NCallbackMouseEventArgs)">
      <summary>
            Raises the AsyncMouseMove event.
            </summary>
      <param name="args">An NCallbackMouseEventArgs that contains the event data.</param>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NWebControl.OnAsyncMouseDown(Nevron.UI.WebForm.Controls.NCallbackMouseEventArgs)">
      <summary>
            Raises the AsyncMouseDown event.
            </summary>
      <param name="args">An NCallbackMouseEventArgs that contains the event data.</param>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NWebControl.OnAsyncMouseUp(Nevron.UI.WebForm.Controls.NCallbackMouseEventArgs)">
      <summary>
            Raises the AsyncMouseUp event.
            </summary>
      <param name="args">An NCallbackMouseEventArgs that contains the event data.</param>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NWebControl.OnAsyncMouseOver(Nevron.UI.WebForm.Controls.NCallbackMouseEventArgs)">
      <summary>
            Raises the AsyncMouseOver event.
            </summary>
      <param name="args">An NCallbackMouseEventArgs that contains the event data.</param>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NWebControl.OnAsyncMouseOut(Nevron.UI.WebForm.Controls.NCallbackMouseEventArgs)">
      <summary>
            Raises the AsyncMouseOut event.
            </summary>
      <param name="args">An NCallbackMouseEventArgs that contains the event data.</param>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NWebControl.OnAsyncRefresh(System.EventArgs)">
      <summary>
            Raises the AsyncRefresh event.
            </summary>
      <param name="args">An EventArgs that contains the event data.</param>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NWebControl.OnAsyncQueryCommandResult(Nevron.UI.WebForm.Controls.NCallbackQueryCommandResultArgs)">
      <summary>
            Raises the AsyncQueryCommandResult event.
            </summary>
      <param name="args">An NCallbackQueryCommandResultArgs that contains the event data.</param>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NWebControl.OnPreRender(System.EventArgs)">
      <summary>
            Queries the active <see cref="T:Nevron.UI.WebForm.Controls.NClientServerTechnology" /> instance,
            stored in the ClientServerTechnology property of the web control, for
            script includes by calling its method EnumerateScriptIncludes() and delegates the event processing
            to its OnWebControlPreRender method.
            </summary>
      <param name="e">
            An <see cref="T:System.EventArgs" /> object that contains the event data.
            </param>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NWebControl.Render(System.Web.UI.HtmlTextWriter)">
      <summary>
            Delegates the rendering to the OnWebControlRender method of the active <see cref="T:Nevron.UI.WebForm.Controls.NClientServerTechnology" /> instance,
            stored in the ClientServerTechnology property of the web control.
            </summary>
      <param name="output">
            The System.Web.UI.HtmlTextWriter object that receives the control content.
            </param>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NWebControl.UpdateClientSideBounds">
      <summary>
            When used with AJAX mode, this method enforces the client side
            image size to be updated accordingly to the currently specified
            control dimensions.
            </summary>
      <remarks>
            Call this method after modifying the Width and/or Height properties
            of the web control from within an asynchronous event handler.
            </remarks>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NWebControl.InstanceGuid">
      <summary>
            Gets an id that identifies the control to the image resource HTTP handler.
            </summary>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NWebControl.AjaxEnabled">
      <summary>
            Gets / sets a value indicating if the AJAX functionality of the control is enabled.
            When set to false, the control behaves as a standard postback control. Else, no postback
            functionality is present and all supported client side events are handled using AJAX.
            </summary>
      <remarks>
            Changing the value of this control also changes the values of the 
            ClientServerTechnology and Technology properties of the web control.
            </remarks>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NWebControl.AjaxScriptBuild">
      <summary>
            Gets/sets a value, indicating whether the debug script build or the release script build
            must be loaded in AJAX mode.
            </summary>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NWebControl.AjaxDebugConsoleMode">
      <summary>
            Gets/sets a value, indicating the display mode of the JavaScript client side 
            debug console.
            </summary>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NWebControl.AjaxTools">
      <summary>
            Gets a list of server side AJAX tool definitions that will be sent to the client.
            Based on these definitions the client side tool factory will create and configure
            tools that will be added to the client side controller.
            </summary>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NWebControl.AjaxToolsFactoryType">
      <summary>
            Gets or sets the name of the client side JavaScript class that is used to
            create instances of client side tools. The default value is "NToolFactory".
            </summary>
      <remarks>
        <para>
            Set this property to the name of your own custom tool-factory JavaScript class.
            You may need to do this when you implement custom AJAX tools.
            </para>
        <para>
            Your custom class must derive from the Nevron JavaScript NToolFactory class. The script
            resource that contains the code of your custom class must be registered with the
            ScriptManager component on your web page. For more details on implementing custom tools,
            please read the User's Guide documentation topics under Framework/WebForm/AJAX.
            </para>
      </remarks>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NWebControl.AjaxImageMapMode">
      <summary>
            Gets / sets a value indicating wheather to genrate automatically an image map in AJAX mode.
            The value of this property is ignored if the the HttpHandlerCallback property of the
            web control is initialized. AjaxImageMapMode.Never is used instead.
            </summary>
      <remarks>
        <para>
            If following behavior is to be expected for the different possible values of this property:
            </para>
        <para>
            Never - an image map is never generated.
            </para>
        <para>
            Auto - an image map is automatically generated for all built-in async commands (like "refresh" and "autoRefresh") and is sent to the client, but only if there are elements that will produce image map areas.
            </para>
        <para>
            Manual - no image map is automatically generated; a manually added image map will be sent to the client only if there are elements that will produce image map areas. See <see cref="E:Nevron.UI.WebForm.Controls.NWebControl.AsyncQueryCommandResult" /> for details how to add an image map manually to the result of an async command.
            </para>
        <para>
            Always - an image map is allways generated and sent to the client - for all commands and regardless of whether image map areas are generated or not.
            </para>
        <para>
            For all values, except Never, an image map is generated once every time the web control
            is initially rendered. This image map is available at the client immediatly after the
            Nevron JavaScript callback service has been initialized.
            </para>
        <para>
            To add areas to the image map, initialize the InteractivityStyle property of the Style object
            of visual elements with an instance of the <see cref="T:Nevron.GraphicsCore.NInteractivityStyle" /> class.
            </para>
      </remarks>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NWebControl.AsyncClickEventPriority">
      <summary>
            Gets / sets a value indicating the priority of the event in the client side event pool.
            </summary>
      <remarks>
            After the control is once rendered and displayed at client side, this value can be modified through client side scripting.
            For more details regarding the client side manipulation of Nevron AJAX-enabled controls, please refer the User's Guide for the specific Nevron control.
            </remarks>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NWebControl.AsyncClickEventQueueLength">
      <summary>
            Gets / sets a value indicating the length of the event queue in the client side event pool.
            </summary>
      <remarks>
            After the control is once rendered and displayed at client side, this value can be modified through client side scripting.
            For more details regarding the client side manipulation of Nevron AJAX-enabled controls, please refer the User's Guide for the specific Nevron control.
            </remarks>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NWebControl.AsyncDoubleClickEventPriority">
      <summary>
            Gets / sets a value indicating the priority of the event in the client side event pool.
            </summary>
      <remarks>
            After the control is once rendered and displayed at client side, this value can be modified through client side scripting.
            For more details regarding the client side manipulation of Nevron AJAX-enabled controls, please refer the User's Guide for the specific Nevron control.
            </remarks>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NWebControl.AsyncDoubleClickEventQueueLength">
      <summary>
            Gets / sets a value indicating the length of the event queue in the client side event pool.
            </summary>
      <remarks>
            After the control is once rendered and displayed at client side, this value can be modified through client side scripting.
            For more details regarding the client side manipulation of Nevron AJAX-enabled controls, please refer the User's Guide for the specific Nevron control.
            </remarks>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NWebControl.AsyncMouseMoveEventPriority">
      <summary>
            Gets / sets a value indicating the priority of the event in the client side event pool.
            </summary>
      <remarks>
            After the control is once rendered and displayed at client side, this value can be modified through client side scripting.
            For more details regarding the client side manipulation of Nevron AJAX-enabled controls, please refer the User's Guide for the specific Nevron control.
            </remarks>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NWebControl.AsyncMouseMoveEventQueueLength">
      <summary>
            Gets / sets a value indicating the length of the event queue in the client side event pool.
            </summary>
      <remarks>
            After the control is once rendered and displayed at client side, this value can be modified through client side scripting.
            For more details regarding the client side manipulation of Nevron AJAX-enabled controls, please refer the User's Guide for the specific Nevron control.
            </remarks>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NWebControl.AsyncMouseDownEventPriority">
      <summary>
            Gets / sets a value indicating the priority of the event in the client side event pool.
            </summary>
      <remarks>
            After the control is once rendered and displayed at client side, this value can be modified through client side scripting.
            For more details regarding the client side manipulation of Nevron AJAX-enabled controls, please refer the User's Guide for the specific Nevron control.
            </remarks>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NWebControl.AsyncMouseDownEventQueueLength">
      <summary>
            Gets / sets a value indicating the length of the event queue in the client side event pool.
            </summary>
      <remarks>
            After the control is once rendered and displayed at client side, this value can be modified through client side scripting.
            For more details regarding the client side manipulation of Nevron AJAX-enabled controls, please refer the User's Guide for the specific Nevron control.
            </remarks>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NWebControl.AsyncMouseUpEventPriority">
      <summary>
            Gets / sets a value indicating the priority of the event in the client side event pool.
            </summary>
      <remarks>
            After the control is once rendered and displayed at client side, this value can be modified through client side scripting.
            For more details regarding the client side manipulation of Nevron AJAX-enabled controls, please refer the User's Guide for the specific Nevron control.
            </remarks>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NWebControl.AsyncMouseUpEventQueueLength">
      <summary>
            Gets / sets a value indicating the length of the event queue in the client side event pool.
            </summary>
      <remarks>
            After the control is once rendered and displayed at client side, this value can be modified through client side scripting.
            For more details regarding the client side manipulation of Nevron AJAX-enabled controls, please refer the User's Guide for the specific Nevron control.
            </remarks>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NWebControl.AsyncAutoRefreshEnabled">
      <summary>
            Gets / sets a value indicating if the client side auto-refresh event must be handled by the control and processed via AJAX callback. When set to false the client side event is ignored.
            </summary>
      <remarks>
            This property does not affect the behavior of the Refresh() method of the control client side javascript callback object.
            After the control is once rendered and displayed at client side, the event can be enabled and disabled through client side scripting.
            For more details regarding the client side manipulation of Nevron AJAX-enabled controls, please refer the User's Guide for the specific Nevron control.
            </remarks>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NWebControl.AsyncAutoRefreshEventPriority">
      <summary>
            Gets a value indicating the priority of the auto refresh event in the client side event pool. It is always set to the lowest possible value, which is 0.
            </summary>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NWebControl.AsyncAutoRefreshEventQueueLength">
      <summary>
            Gets a value indicating the length of the event queue of the auto refresh event in the client side event pool. It is always set to the lowest possible value, which is 0. This means that auto refresh events are never queued.
            </summary>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NWebControl.AsyncRefreshEnabled">
      <summary>
            Gets / sets a value indicating if the client side forced refresh event must be handled by the control and processed via AJAX callback. When set to false the client side event is ignored.
            </summary>
      <remarks>
            After the control is once rendered and displayed at client side, the event can be enabled and disabled through client side scripting.
            For more details regarding the client side manipulation of Nevron AJAX-enabled controls, please refer the User's Guide for the specific Nevron control.
            </remarks>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NWebControl.AsyncRefreshPriority">
      <summary>
            Gets / sets a value indicating the priority of the event in the client side event pool.
            </summary>
      <remarks>
            After the control is once rendered and displayed at client side, this value can be modified through client side scripting.
            For more details regarding the client side manipulation of Nevron AJAX-enabled controls, please refer the User's Guide for the specific Nevron control.
            </remarks>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NWebControl.AsyncRefreshQueueLength">
      <summary>
            Gets / sets a value indicating the length of the event queue in the client side event pool.
            </summary>
      <remarks>
            After the control is once rendered and displayed at client side, this value can be modified through client side scripting.
            For more details regarding the client side manipulation of Nevron AJAX-enabled controls, please refer the User's Guide for the specific Nevron control.
            </remarks>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NWebControl.AsyncRequestWaitCursorEnabled">
      <summary>
            Gets / sets a value indicating if at client side a wait cursor must be displayed over the control while a callback http request is pending.
            </summary>
      <remarks>
            After the control is once rendered and displayed at client side, the behavior, which is modified by the property, can be enabled and disabled through client side scripting.
            For more details regarding the client side manipulation of Nevron AJAX-enabled controls, please refer the User's Guide for the specific Nevron control.
            </remarks>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NWebControl.AsyncImageLoadTimeout">
      <summary>
            Gets / sets a value in milliseconds that determines how long will the control wait for an image to load in the background before it is displayed on the web page.
            </summary>
      <remarks>
            This property is provided to avoid the possibility of unexpected web-browser behavior during background image loading.
            The reason to handle unexpected failures is that the client environment can vary greatly and not all factors affecting the web-browser, which displays the component, can be foreseen.
            Set to 0 to disable.
            </remarks>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NWebControl.AsyncImageLoadIePollingInterval">
      <summary>
            Gets / sets a value in milliseconds that determines the is-image-loaded polling interval for Internet Explorer.
            </summary>
      <remarks>
            Because under certain conditions Internet Explorer fails to fire an event when an image is completely loaded,
            a client side timer is initialized to test periodically the images being loaded in the background.
            It is not recommended to modify the default value of this property.
            </remarks>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NWebControl.AsyncRefreshInterval">
      <summary>
            Gets / sets a value in milliseconds that determines how often the control will automatically update its content at client side, reading data from the server using AJAX http requests.
            </summary>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NWebControl.AsyncCallbackTimeout">
      <summary>
            Gets / sets a value in milliseconds that determines how long will the control wait before canceling an AJAX callback due to timeout.
            </summary>
      <remarks>
            This property is provided to avoid the possibility of unexpected web-browser behavior during AJAX http requests.
            The reason to handle unexpected failures is that the client environment can vary greatly and not all factors affecting the web-browser, which displays the component, can be foreseen.
            </remarks>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NWebControl.AsyncAdaptiveRefreshIntervalFactor">
      <summary>
            Gets / sets a multiplier that is used to automatically slow down the auto-refresh rate of the control when an AJAX callback time-outs.
            </summary>
      <remarks>
        <para>
            By preference, Nevron AJAX components are designed to slow down the auto-refresh on refresh timeout
            by multiplying the auto-refresh interval by a flood-protection factor. 
            In the practice, setting this property value to 1.5 will slow down the refresh 
            rate and resume normal operation of the control within a reasonable time after 
            the first callback timeout is detected.
            </para>
        <para>
            By default the AsyncAdaptiveRefreshIntervalFactor property is 1, which turns off the
            adaprive refresh.
            </para>
      </remarks>
    </member>
    <member name="E:Nevron.UI.WebForm.Controls.NWebControl.QueryAjaxTools">
      <summary>
            Occurs when the web control is collecting tool definitions for the client side controller.
            </summary>
      <remarks>
            This event is fired when the web control is being loaded. Handle this event to register the tools,
            required that will run in the client in AJAX mode. Adding the tools at other place
            like the Page_Load event may cause postback events to occur before the tools
            were added to the controller.
            </remarks>
    </member>
    <member name="E:Nevron.UI.WebForm.Controls.NWebControl.CallbackExecuting">
      <summary>
            Occurs when Nevron AJAX Framework is about to process an asynchronous callback.
            </summary>
    </member>
    <member name="E:Nevron.UI.WebForm.Controls.NWebControl.CallbackExecuted">
      <summary>
            Occurs when Nevron AJAX Framework has processed an asynchronous callback.
            </summary>
    </member>
    <member name="E:Nevron.UI.WebForm.Controls.NWebControl.AsyncCustomCommand">
      <summary>
            Occurs when a custom command event is fired on the client side.
            </summary>
    </member>
    <member name="E:Nevron.UI.WebForm.Controls.NWebControl.AsyncClick">
      <summary>
            Occurs when the control is clicked on the client side and the AsyncClickEventEnabled property of the control is set to true.
            </summary>
      <remarks>
            After the control is once rendered and displayed at client side, the event can be enabled and disabled through client side scripting.
            For more details regarding the client side manipulation of Nevron AJAX-enabled controls, please refer the User's Guide for the specific Nevron control.
            </remarks>
    </member>
    <member name="E:Nevron.UI.WebForm.Controls.NWebControl.AsyncDoubleClick">
      <summary>
            Occurs when the control is double clicked on the client side and the AsyncDoubleClickEventEnabled property of the control is set to true.
            </summary>
      <remarks>
            After the control is once rendered and displayed at client side, the event can be enabled and disabled through client side scripting.
            For more details regarding the client side manipulation of Nevron AJAX-enabled controls, please refer the User's Guide for the specific Nevron control.
            </remarks>
    </member>
    <member name="E:Nevron.UI.WebForm.Controls.NWebControl.AsyncMouseMove">
      <summary>
            Occurs when the mouse is moved over the control on the client side and the AsyncMouseMoveEventEnabled property of the control is set to true.
            </summary>
      <remarks>
            After the control is once rendered and displayed at client side, the event can be enabled and disabled through client side scripting.
            For more details regarding the client side manipulation of Nevron AJAX-enabled controls, please refer the User's Guide for the specific Nevron control.
            </remarks>
    </member>
    <member name="E:Nevron.UI.WebForm.Controls.NWebControl.AsyncMouseDown">
      <summary>
            Occurs when the left mouse button is pressed down on the control on the client side and the AsyncMouseDownEventEnabled property of the control is set to true.
            </summary>
      <remarks>
            After the control is once rendered and displayed at client side, the event can be enabled and disabled through client side scripting.
            For more details regarding the client side manipulation of Nevron AJAX-enabled controls, please refer the User's Guide for the specific Nevron control.
            </remarks>
    </member>
    <member name="E:Nevron.UI.WebForm.Controls.NWebControl.AsyncMouseUp">
      <summary>
            Occurs when the left mouse button is up after a click on the control on the client side and the AsyncMouseUpEventEnabled property of the control is set to true.
            </summary>
      <remarks>
            After the control is once rendered and displayed at client side, the event can be enabled and disabled through client side scripting.
            For more details regarding the client side manipulation of Nevron AJAX-enabled controls, please refer the User's Guide for the specific Nevron control.
            </remarks>
    </member>
    <member name="E:Nevron.UI.WebForm.Controls.NWebControl.AsyncMouseOver">
      <summary>
            Occurs when the mouse enters on the client side the area of a visual object with image map interctivity style.
            </summary>
      <remarks>
            After the control is once rendered and displayed at client side, the event can be enabled and disabled through client side scripting.
            For more details regarding the client side manipulation of Nevron AJAX-enabled controls, please refer the User's Guide for the specific Nevron control.
            </remarks>
    </member>
    <member name="E:Nevron.UI.WebForm.Controls.NWebControl.AsyncMouseOut">
      <summary>
            Occurs when the mouse leaves on the client side the area of a visual object with image map interctivity style.
            </summary>
      <remarks>
            After the control is once rendered and displayed at client side, the event can be enabled and disabled through client side scripting.
            For more details regarding the client side manipulation of Nevron AJAX-enabled controls, please refer the User's Guide for the specific Nevron control.
            </remarks>
    </member>
    <member name="E:Nevron.UI.WebForm.Controls.NWebControl.AsyncRefresh">
      <summary>
            Occurs when the control is refreshed at client side. This event can be fired either when calling the Refresh() method of the control client side javascript callback object
            or when an auto-refresh event occurs at client side and the AsyncAutoRefreshEnabled property of the control is set to true.
            </summary>
      <remarks>
            After the control is once rendered and displayed at client side, the event can be enabled and disabled through client side scripting.
            For more details regarding the client side manipulation of Nevron AJAX-enabled controls, please refer the User's Guide for the specific Nevron control.
            </remarks>
    </member>
    <member name="E:Nevron.UI.WebForm.Controls.NWebControl.AsyncQueryCommandResult">
      <summary>
            Occurs after a callback was processed, when collecting data for the result to be returned to the client.
            </summary>
      <remarks>
            Uset the property ResultBuilder of the event argument of type <see cref="T:Nevron.UI.WebForm.Controls.NCallbackQueryCommandResultArgs" />
            to add data sections to the result xml that will be delivered to the client. To add a image map data section manually for Ex., code
            like this could be used:
            <code>
            protected void nChartControl1_AsyncQueryCommandResult(object sender, EventArgs e)
            {
            	NCallbackQueryCommandResultArgs args = e as NCallbackQueryCommandResultArgs;
            	NCallbackCommand command = args.Command;
            	NAjaxXmlTransportBuilder resultBuilder = args.ResultBuilder;
            
            	switch (command.Name)
            	{
            		case @"autoRefresh":
            			//	add a built-in data section that will be initialized with the cuurent image map
            			if (!resultBuilder.ContainsImageMapDataSection())
            				resultBuilder.AddImageMapDataSection(this.nChartControl1);
            			break;
            	}
            }
            </code></remarks>
      <seealso cref="T:Nevron.UI.WebForm.Controls.NCallbackQueryCommandResultArgs" />
      <seealso cref="T:Nevron.UI.WebForm.Controls.NAjaxXmlTransportBuilder" />
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NWebControl.CurrentSnapshotGuid">
      <summary>
            Gets / sets a guid that uniquely identifies a specific image snapshot of the web control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NWebControl.ClientServerTechnology">
      <summary>
            Gets the active client-server technology.
            </summary>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NWebControl.Technology">
      <summary>
            Gets / sets the active client-server technology type. 
            </summary>
      <remarks>
            Changing the value of this control also changes the values of the 
            ClientServerTechnology and AjaxEnabled properties of the web control.
            </remarks>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NWebControl.ImageAcquisitionMode">
      <summary>
            Gets / sets the client side image acquisition mode.
            </summary>
      <remarks>
            For details, please see the documentation on 
            <see cref="T:Nevron.UI.WebForm.Controls.ClientSideImageAcquisitionMode" />.
            </remarks>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NWebControl.HttpHandlerCallback">
      <summary>
            Gets / sets an instance of a class that processes client side events routed to the server
            </summary>
      <remarks>
            When this property is null, the standard Microsoft AJAX callbacks are used for client-server communication
            and all events are processed by the subscribers of the web control events.
            When this property is initialized, the Nevron Instant Callback technology is used instead.
            All events are processed by the INHttpHandlerCallback instance, provided as property value.
            </remarks>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NWebControl.IsReincarnating">
      <summary>
            Gets a value, indicating if the control is required to recreate the
            session state object, used to store the control's state over continuos callback requests.
            </summary>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NWebControl.RequiresInitialization">
      <summary>
            Gets a value, indicating if the web control requires its document to be
            completeley reinitialized.
            </summary>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NWebControl.StateManager">
      <summary>
            Gets / sets a state manager object, controlling the creation, life span and disposal
            of state objects.
            </summary>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NWebControl.AutoHTTPHandlerRegistration">
      <summary>
            Get/sets a value, controlling if Nevron HTTP handlers must be registered automatically
            in web.config, when a Nevron web control is dropped inside the web designer.
            </summary>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NImage.CreateImage(Nevron.GraphicsCore.INImageFormat)">
      <summary>
            Returns an image in the specified format.
            </summary>
      <param name="imageFormat">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NImage.WriteHtmlMap(Nevron.GraphicsCore.NHtmlMapContext,System.IO.TextWriter)">
      <summary>
            Writes an image map to the specified text writer.
            </summary>
      <param name="context">
      </param>
      <param name="textWriter">
      </param>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NImage.MapPath(System.String)">
      <summary>
            Retrieves the physical path that a virtual path, either absolute or relative, maps to.
            </summary>
      <param name="path">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NImage.LoadViewState(System.Object)">
      <summary>
            Loads the view state of the control.
            </summary>
      <param name="savedState">
      </param>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NImage.SaveViewState">
      <summary>
            Saves the view state of the control.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.NImage.m_ServerSettings">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.NImage.m_FormatProviders">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NImage.HandleExceptions">
      <summary>
            Gets / sets a value indicating whether the control should handle exceptions
            </summary>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NImage.ServerSettings">
      <summary>
            Obtains the server settings of the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NImage.State">
      <summary>
            Gets/sets a base 64 encoded string representing the state of the component.
            </summary>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NImage.ImageFormat">
      <summary>
            Retreives the image format that is used for image rendering.
            </summary>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NImage.Serializer">
      <summary>
            Controls the serialization and deserialization of the image control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NImage.Dimensions">
      <summary>
            Obtains the dimensions of the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NImage.ServerConfigSectionName">
      <summary>
            Obtains the server configuration section name corresponding to this control.
            </summary>
    </member>
    <member name="T:Nevron.UI.WebForm.Controls.NImageResponse">
      <summary>
            Describes an image response type. The generated image can be BMP, JPEG, PNG, GIF, TIFF or SVG.
            </summary>
    </member>
    <member name="T:Nevron.UI.WebForm.Controls.NResponse">
      <summary>
            The base class for the NImageResponse and NHtmlImageMapResponse classes. 
            </summary>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NResponse.HasCreatedTemporaryFile">
      <summary>
            Returns true if the response writes to the temporary directory.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NResponse.Render(System.Web.UI.HtmlTextWriter,Nevron.UI.WebForm.Controls.ClientSideImageAcquisitionMode)">
      <summary>
            Writes HTML to the passed HtmlTextWriter
            </summary>
      <param name="output">
      </param>
      <param name="ImageAcquisitionMode">
      </param>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NResponse.RenderImageControl(System.Web.UI.HtmlTextWriter,Nevron.GraphicsCore.INImage,Nevron.GraphicsCore.INImageFormat,System.Collections.Hashtable)">
      <summary>
      </summary>
      <param name="output">
      </param>
      <param name="image">
      </param>
      <param name="imageFormat">
      </param>
      <param name="attributes">
      </param>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NResponse.RenderAxdImageControl(System.Web.UI.HtmlTextWriter,Nevron.GraphicsCore.NSize,Nevron.GraphicsCore.INImageFormat,System.Collections.Hashtable)">
      <summary>
      </summary>
      <param name="output">
      </param>
      <param name="size">
      </param>
      <param name="imageFormat">
      </param>
      <param name="attributes">
      </param>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NResponse.GetFullFileName(System.String,Nevron.GraphicsCore.INImageFormat)">
      <summary>
      </summary>
      <param name="fileName">
      </param>
      <param name="imageFormat">
      </param>
      <returns>
      </returns>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.NImageResponse.defaultStreamImageToBrowser">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NImageResponse.HasCreatedTemporaryFile">
      <summary>
            Returns true if the response generates temporary files on the server.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NImageResponse.Render(System.Web.UI.HtmlTextWriter,Nevron.UI.WebForm.Controls.ClientSideImageAcquisitionMode)">
      <summary>
            Renders Html to the specified html text writer.
            </summary>
      <param name="output">
      </param>
      <param name="ImageAcquisitionMode">
      </param>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.NImageResponse.m_bStreamImageToBrowser">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.NImageResponse.m_ImageFormat">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NImageResponse.StreamImageToBrowser">
      <summary>
            OBSOLETE. Use the Nevron HTTP handlers instead. The Nevron HTTP handlers are automatically regisered in web.config. See the documentation on Nevron HTTP handlers for details.
            <br />
            Whether or not the control must send the image directly to the browser.
            </summary>
      <remarks>
            When set to true the control will not generate a temporary file name but instead 
            will change the current response type using the MIME type of the image and stream 
            the image directly in the Response output buffer. Take a look at the Binary streaming 
            image example to see how to use this feature in practice.
            </remarks>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NImageResponse.ImageFormat">
      <summary>
            The image format used to generate the image.
            </summary>
    </member>
    <member name="T:Nevron.UI.WebForm.Controls.NPrintPreviewHttpHandler">
      <summary>
            This class writes to the HTTP response an HTML table, which layouts the image of a Nevron 
            web component in tiles in a way that is suitable for client side priting from the web browser.
            </summary>
    </member>
    <member name="T:Nevron.UI.WebForm.Controls.NCallbackMouseEventArgs">
      <summary>
            Provides data for the AsyncClick, AsyncDoubleClick, AsyncMouseMove, 
            AsyncMouseDown and AsyncMouseUp events of the <see cref="T:Nevron.UI.WebForm.Controls.INAjaxControl" />
            interface.
            </summary>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NCallbackMouseEventArgs.Point">
      <summary>
            Gets the coordinates of the mouse event.
            </summary>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NCallbackMouseEventArgs.ItemId">
      <summary>
            Gets the id of the image map item, associated with over and out mouse events.
            </summary>
    </member>
    <member name="T:Nevron.UI.WebForm.Controls.NImageResponseHttpHandler">
      <summary>
            This class is the base class for all Nevron http handlers with image response type.
            </summary>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NImageResponseHttpHandler.ProcessRequest(System.Web.HttpContext)">
      <summary>
            Renders the specific web control to an image and sends the response to the browser. 
            </summary>
      <param name="context">
            An HttpContext object that provides references to the intrinsic server objects (for example, Request, Response, Session, and Server) used to service HTTP requests.
            </param>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NImageResponseHttpHandler.EnumerateFormatProviders(Nevron.UI.WebForm.Controls.NStateObject)">
      <summary>
            Enumerates all image providers, supported by the web control.
            </summary>
      <param name="stateTransport">The session state, associated with the web control</param>
      <returns>A container, aggregating format providers.</returns>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NImageResponseHttpHandler.ReadViewportDefinition(System.Web.HttpContext,Nevron.UI.WebForm.Controls.NStateObject)">
      <summary>
            Reads the viewport definition from the current request fields. Clips the viewport if
            its rectangle exceeds the bounds of the image.
            </summary>
      <param name="context">
      </param>
      <param name="state">
      </param>
      <returns>Returns the current viewport rectangle or null if no viewport is defined.</returns>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NImageResponseHttpHandler.CreateZeroImage(System.Web.HttpContext)">
      <summary>
            Creates an image with size 1x1 to be used as a response in case that the session state of the
            web control being rendered has been expired and thus no meaningful image can be produced.
            </summary>
      <param name="context">
            An HttpContext object that provides references to the intrinsic server objects (for example, Request, Response, Session, and Server) used to service HTTP requests.
            </param>
      <remarks>
            The zero image has size 1x1 because no image with size 0x0 can be created. The zero image is
            used to signal the client side JavaScript AJAX framework that the web-control must be refreshed
            and web-control's session state must be recreated.
            </remarks>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NImageResponseHttpHandler.DoCallback(System.Web.HttpContext,Nevron.UI.WebForm.Controls.NStateObject)">
      <summary>
      </summary>
      <param name="context">
      </param>
      <param name="state">
      </param>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NImageResponseHttpHandler.RenderWaitForServerImage(System.Web.HttpContext,System.Int32,System.Int32)">
      <summary>
      </summary>
      <param name="context">
      </param>
      <param name="width">
      </param>
      <param name="height">
      </param>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NImageResponseHttpHandler.LogEnvironmentStats">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NImageResponseHttpHandler.IsReusable">
      <summary>
            Gets a value indicating whether another request can use the IHttpHandler instance.
            </summary>
      <remarks>
            Returns true.
            </remarks>
    </member>
    <member name="T:Nevron.UI.WebForm.Controls.NAjaxMouseMoveCallbackTool">
      <summary>
            Provides configuration for the client side NAjaxMouseMoveCallbackTool tool
            </summary>
    </member>
    <member name="T:Nevron.UI.WebForm.Controls.NCallbackQueryCommandResultArgs">
      <summary>
            Provides data for the AsyncQueryCommandResult event of the <see cref="T:Nevron.UI.WebForm.Controls.INAjaxControl" />
            interface.
            </summary>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NCallbackQueryCommandResultArgs.Command">
      <summary>
            Gets / sets the command to be processed.
            </summary>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NCallbackQueryCommandResultArgs.ResultBuilder">
      <summary>
            Gets / sets the command to be processed.
            </summary>
    </member>
    <member name="T:Nevron.UI.WebForm.Controls.NPermanentSessionStateManager">
      <summary>
            NPermanentSessionStateAgent maintains a permanent state in the session state.
            </summary>
    </member>
    <member name="T:Nevron.UI.WebForm.Controls.NStateManager">
      <summary>
            NStateAgent is a base class for all state agents.
            A state manager is a class, controlling the creation, life span and disposal
            of state objects.
            </summary>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NStateManager.ExpirationCheck(System.Int32)">
      <summary>
            Override this method to implement the expiration logic.
            </summary>
      <param name="reason">
            This parameter determines the execution point, at which the expiration point is performed.
            </param>
      <returns>
            This method must return true, if the state object has been removed and false otherwise.
            </returns>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NStateManager.StoreState(Nevron.UI.WebForm.Controls.NImage)">
      <summary>
            Override this method to implement the state storage logic.
            </summary>
      <param name="imageControl">
            The web control, which state to store.
            </param>
      <returns>
            The state object, generated for state storage.
            </returns>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NStateManager.AcquireState">
      <summary>
            Override this method to implement the state lookup logic.
            </summary>
      <returns>
            The state object.
            </returns>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NStateManager.BuildIdQueryString">
      <summary>
            Provides a query string part for state identification transport over http.
            </summary>
      <returns>A query string part.</returns>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NStateManager.CleanUp">
      <summary>
            Removes an existing state object, stored by this state manager.
            </summary>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NStateManager.CreateStateObject(System.String,Nevron.UI.WebForm.Controls.NImage)">
      <summary>
            Creates a new state instance.
            </summary>
      <param name="stateId">
            The id of the new state.
            </param>
      <param name="imageControl">
            The image control to be stored into the state.
            </param>
      <returns>
            The state object.
            </returns>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NStateManager.Equals(System.Object)">
      <summary>
      </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NStateManager.GetHashCode">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NStateManager.StateId">
      <summary>
            Gets/sets the state object id.
            </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.NPermanentSessionStateManager.QueryStringField">
      <summary>
            The name of the query string filed that is used to pass the state identification
            through HTTP requests. The value is "SessionGuid".
            </summary>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NPermanentSessionStateManager.ExpirationCheck(System.Int32)">
      <summary>
            Implements the expiration logic.
            </summary>
      <param name="reason">
            This parameter determines the execution point, at which the xpiration point is performed.
            </param>
      <returns>
            This method returns true, if the state object has been removed and false otherwise.
            </returns>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NPermanentSessionStateManager.StoreState(Nevron.UI.WebForm.Controls.NImage)">
      <summary>
            Override this method to implement the state storage logic.
            </summary>
      <param name="imageControl">
            The web control, which state to store.
            </param>
      <returns>
            The state object, generated for state storage.
            </returns>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NPermanentSessionStateManager.AcquireState">
      <summary>
            Override this method to implement the state lookup logic.
            </summary>
      <returns>
            The state object.
            </returns>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NPermanentSessionStateManager.BuildIdQueryString">
      <summary>
            Provides a query string part for state identification transport over http.
            </summary>
      <returns>A query string part.</returns>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NPermanentSessionStateManager.CleanUp">
      <summary>
            Removes an existing state object, stored by this state manager.
            </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.NPermanentSessionStateManager.m_HttpContext">
      <summary>
            Cached HTTP Context.
            </summary>
    </member>
    <member name="T:Nevron.UI.WebForm.Controls.NServerSettingsSectionHandler">
      <summary>
            This class is used by the .NET framework and is not indended for direct use in web applications.
            </summary>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NServerSettingsSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
      <summary>
            Initializes the server configuration of the control from the web.config file.
            </summary>
      <param name="parent">
      </param>
      <param name="configContext">
      </param>
      <param name="section">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Nevron.UI.WebForm.Controls.NEventLogSettings">
      <summary>
            Summary description for NEventLogSettings.
            </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.NEventLogSettings.defaultCreateEventLogMessages">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NEventLogSettings.CreateErrorMessage(System.String)">
      <summary>
            Stores an error message in the system log
            </summary>
      <param name="errorMessage">
      </param>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NEventLogSettings.CreateEventLogMessages">
      <summary>
            Whether event log messages should be created 
            </summary>
    </member>
    <member name="T:Nevron.UI.WebForm.Controls.NRenderSessionStateManager">
      <summary>
            NRenderSessionStateAgent maintains a state between the HTML render phase and the image render phase.
            When an image is rendered, the state object, stored into the session state, is removed.
            </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.NRenderSessionStateManager.QueryStringField">
      <summary>
            The name of the query string filed that is used to pass the state identification
            through HTTP requests. The value is "InstanceGuid".
            </summary>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NRenderSessionStateManager.ExpirationCheck(System.Int32)">
      <summary>
            Implements the expiration logic.
            </summary>
      <param name="reason">
            This parameter determines the execution point, at which the xpiration point is performed.
            </param>
      <returns>
            This method returns true, if the state object has been removed and false otherwise.
            </returns>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NRenderSessionStateManager.StoreState(Nevron.UI.WebForm.Controls.NImage)">
      <summary>
            Override this method to implement the state storage logic.
            </summary>
      <param name="imageControl">
            The web control, which state to store.
            </param>
      <returns>
            The state object, generated for state storage.
            </returns>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NRenderSessionStateManager.AcquireState">
      <summary>
            Override this method to implement the state lookup logic.
            </summary>
      <returns>
            The state object.
            </returns>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NRenderSessionStateManager.BuildIdQueryString">
      <summary>
            Provides a query string part for state identification transport over http.
            </summary>
      <returns>A query string part.</returns>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NRenderSessionStateManager.CleanUp">
      <summary>
            Removes an existing state object, stored by this state manager.
            </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.NRenderSessionStateManager.m_HttpContext">
      <summary>
            Cached HTTP Context.
            </summary>
    </member>
    <member name="T:Nevron.UI.WebForm.Controls.NAjaxMouseUpCallbackTool">
      <summary>
            Provides configuration for the client side NAjaxMouseUpCallbackTool tool
            </summary>
    </member>
    <member name="T:Nevron.UI.WebForm.Controls.NAjaxMouseOutCallbackTool">
      <summary>
            Provides configuration for the client side NAjaxMouseOutCallbackTool tool
            </summary>
    </member>
    <member name="T:Nevron.UI.WebForm.Controls.NServerSettings">
      <summary>
            Contains all settings related to the operation of the control on the server.
            </summary>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NServerSettings.SaveToFile(System.String,System.String)">
      <summary>
            Saves the server configuration state to a web.config file pointed by file.
            </summary>
      <param name="file">
      </param>
      <param name="serverConfigSectionName">
      </param>
      <remarks>
            This function will throw an exception if it is unable to create or open the file.
            </remarks>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NServerSettings.LoadFromFile(System.String,System.String)">
      <summary>
            Loads the server configuration state from a web.config file pointed by file.
            </summary>
      <param name="file">
      </param>
      <param name="serverConfigSectionName">
      </param>
      <remarks>
            This function will throw an exception if it is unable to open the file or the web.congig file is invalid
            </remarks>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.NServerSettings.m_TemporaryFileSettings">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.NServerSettings.m_BrowserResposeSettings">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.NServerSettings.m_EventLogSettings">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.NServerSettings.m_ControlStateSettings">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NServerSettings.TemporaryFileSettings">
      <summary>
            Gets or sets the temporary file settings of the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NServerSettings.BrowserResponseSettings">
      <summary>
            Gets or sets the browser response settings of the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NServerSettings.EventLogSettings">
      <summary>
            Gets or sets the event log settings of the control.
            </summary>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NServerSettings.ControlStateSettings">
      <summary>
            Controls the settings related to the persistence of the control in the page view state.
            </summary>
    </member>
    <member name="T:Nevron.UI.WebForm.Controls.NHtmlImageMapResponse">
      <summary>
            Describes and HTML image map generated by the server control.
            </summary>
      <remarks>
            Nevron Chart for .NET can generate client side HTML image maps with tooltips, cursor 
            change and browser redirection. For more information please take a look at the 
            Building Internet and Intranet applications in the Users Guide.
            </remarks>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.NHtmlImageMapResponse.defaultClientScript">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.NHtmlImageMapResponse.defaultGridCellSize">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.NHtmlImageMapResponse.defaultCreateImageFile">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.NHtmlImageMapResponse.defaultImageMapID">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.NHtmlImageMapResponse.defaultImagefileName">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NHtmlImageMapResponse.HasCreatedTemporaryFile">
      <summary>
            Returns true if the response generates temporary files on the server.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NHtmlImageMapResponse.Render(System.Web.UI.HtmlTextWriter,Nevron.UI.WebForm.Controls.ClientSideImageAcquisitionMode)">
      <summary>
            Renders Html to the specified html text writer.
            </summary>
      <param name="output">
      </param>
      <param name="ImageAcquisitionMode">
      </param>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NHtmlImageMapResponse.GetFileName">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NHtmlImageMapResponse.GetMapName(System.String)">
      <summary>
      </summary>
      <param name="fileName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.NHtmlImageMapResponse.m_nGridCellSize">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.NHtmlImageMapResponse.m_nClientScript">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.NHtmlImageMapResponse.m_CreateImageFile">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.NHtmlImageMapResponse.m_ImageMapName">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.NHtmlImageMapResponse.m_ImageFileName">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.NHtmlImageMapResponse.m_RasterImageFormat">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.NHtmlImageMapResponse.m_HasGeneratedArea">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.NHtmlImageMapResponse.m_GenerateEmptyAreas">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NHtmlImageMapResponse.ClientScript">
      <summary>
            The client side script used to encode the HTML image map.
            </summary>
      <remarks>
            When the control generates an image map you can choose the script language 
            used to encode the image map. Possible values are ClientScript.VBScript 
            and ClientScript.JScript. The default value for this property is 
            ClientScript.JScript.
            </remarks>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NHtmlImageMapResponse.GridCellSize">
      <summary>
            The size of the image map grid cell.
            </summary>
      <remarks>
            This property defines the size of the image map grid cell in pixels. When you 
            increase the value of this property the image map will be generated faster but 
            will be less accurate.
            </remarks>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NHtmlImageMapResponse.CreateImageFile">
      <summary>
            Whether or not the control must create a temporary image file when generating the HTML map.
            </summary>
      <remarks>
            When set to false the control will create a temporary image file and the corresponding image map will be injected in the generated HTML sent to the client. When set to false the control will inject an image map corresponding to the dimensions of the control without generating an image file on the server. This property can be useful when you use the direct image stream to browser feature and want to have interactive chart on the client side.
            </remarks>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NHtmlImageMapResponse.ImageMapName">
      <summary>
            The id of the image map.
            </summary>
      <remarks>
            When empty the control will automatically generate the image map name. Note that you muse assign a value to this property if CreateImageFile is set to false.
            </remarks>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NHtmlImageMapResponse.ImageFileName">
      <summary>
            The id of the image file.
            </summary>
      <remarks>
            When empty the control will automatically generate the image file id. Note that you muse assign a value to this property if CreateImageFile is set to false.
            </remarks>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NHtmlImageMapResponse.RasterImageFormat">
      <summary>
            Returns a reference to a NRasterImageFormat object describing the the type of image generated by the control when using this response type.
            </summary>
      <remarks>
            This can be a reference to a NBitmapImageFormat, NGIFImageFormat, NJPEGImageFormat, NPNGImageFormat or NTIFFImageFormat object.a
            </remarks>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NHtmlImageMapResponse.GenerateEmptyAreas">
      <summary>
            Gets or sets a value indicating whether the control will generate empty areas.
            </summary>
      <remarks>
            Empty area are useful when you want the image map to follow exactly the visual appearance
            of the control, however they can result in bulky HTML. This property is set to false by default.
            </remarks>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NHtmlImageMapResponse.HasGeneratedArea">
      <summary>
            Returns a value, indicating if the image map generation produced at least one image map area.
            </summary>
    </member>
    <member name="T:Nevron.UI.WebForm.Controls.NAjaxMouseDownCallbackTool">
      <summary>
            Provides configuration for the client side NAjaxMouseDownCallbackTool tool
            </summary>
    </member>
    <member name="T:Nevron.UI.WebForm.Controls.NAjaxDynamicCursorTool">
      <summary>
            Provides configuration for the client side NAjaxDynamicCursorTool tool.
            </summary>
      <remarks>
            Because older versions of Opera do not support dynamic change of the cursor CSS
            property, this tool may not work well under the Opera web browser.<br /></remarks>
    </member>
    <member name="T:Nevron.UI.WebForm.Controls.NBrowserResponsePair">
      <summary>
            Defines an association between a browser matching rule (NBrowser object) and a 
            response type to be generated when the match is successful.
            </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.NBrowserResponsePair.m_Browser">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.NBrowserResponsePair.m_Response">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NBrowserResponsePair.Browser">
      <summary>
            The browser detection rule described by the NBrowser object.
            </summary>
      <remarks>
            The NBrowser object represent a browser detection rule by using a .NET regular 
            expression and version matching.
            </remarks>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NBrowserResponsePair.Response">
      <summary>
            The response description.
            </summary>
      <remarks>
            The response associated with the browser.
            </remarks>
    </member>
    <member name="T:Nevron.UI.WebForm.Controls.NAjaxTooltipTool">
      <summary>
            Provides configuration for the client side NAjaxTooltipTool tool.
            </summary>
      <remarks>
            Because older versions of Opera do not support dynamic change of the cursor CSS
            property, this tool may not work well under the Opera web browser.<br /></remarks>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NAjaxTooltipTool.GetConfigurationObjectJavaScript">
      <summary>
            Generates JavaScript that will create a new tool configuration object at the client.
            </summary>
      <returns>Returns a JavaScript that will create a new tool configuration object at the client.</returns>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NAjaxTooltipTool.TooltipDivClassName">
      <summary>
            Gets or sets a class name for the DIV element that displays the tooltip. Use null for none.
            </summary>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NAjaxTooltipTool.OffsetLeft">
      <summary>
            Gets or sets the horizontal distance from the cursor pointer to the tooltip div.
            </summary>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NAjaxTooltipTool.OffsetBottom">
      <summary>
            Gets or sets the vertical distance from the cursor pointer to the tooltip div.
            </summary>
    </member>
    <member name="T:Nevron.UI.WebForm.Controls.NCallbackRefreshArgs">
      <summary>
            Provides data for the AsyncRefresh event of the <see cref="T:Nevron.UI.WebForm.Controls.INAjaxControl" />
            interface.
            </summary>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NCallbackRefreshArgs.IsAutoRefresh">
      <summary>
            Gets a value that indicates if the event was invoked by the auto-refresh feature of
            the Nevron AJAX-enabled control. If set to false this property indicates that the event was invoked by
            calling the Refresh() method of the client side callback service javascript object.
            </summary>
      <remarks>
            For more details regarding the client side manipulation of Nevron AJAX-enabled controls, please refer the User's Guide for the specific Nevron control.
            </remarks>
    </member>
    <member name="T:Nevron.UI.WebForm.Controls.NCallbackArgs">
      <summary>
            Provides data for the CallbackExecuting and CallbackExecuted events of the <see cref="T:Nevron.UI.WebForm.Controls.INAjaxControl" />
            interface.
            </summary>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NCallbackArgs.Transport">
      <summary>
            Gets / sets the command to be processed.
            </summary>
    </member>
    <member name="T:Nevron.UI.WebForm.Controls.NTemporaryFileSettings">
      <summary>
            Holds properties related to the temporary file management on the server.
            </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.NTemporaryFileSettings.defaultEnableAutoDelete">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.NTemporaryFileSettings.defaultFileNamePrefix">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.NTemporaryFileSettings.defaultTempDirectory">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.NTemporaryFileSettings.defaultMaxTempFilesCount">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.NTemporaryFileSettings.defaultMaxTempDirectorySize">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NTemporaryFileSettings.MakeFileNameRelative(System.String)">
      <summary>
            Returns the relative file name from the physical file name.
            </summary>
      <param name="physicalFileName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NTemporaryFileSettings.GenerateTemporaryFileName">
      <summary>
            Generates a temporary file name.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NTemporaryFileSettings.GetVirtualFileName(System.String)">
      <summary>
            Returns the full virtual path fro the specified fileName.
            </summary>
      <param name="fileName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NTemporaryFileSettings.GetPhysicalFileName(System.String)">
      <summary>
            Returns the full physsical path on the server for the specified fileName.
            </summary>
      <param name="fileName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NTemporaryFileSettings.RemoveExpiredTemporaryFiles">
      <summary>
            Removes all expired temporary files.
            </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.NTemporaryFileSettings.m_EnableAutoDelete">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.NTemporaryFileSettings.m_ExpireSpan">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.NTemporaryFileSettings.m_MaxTempFilesCount">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.NTemporaryFileSettings.m_MaxTempDirectorySize">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.NTemporaryFileSettings.m_FileNamePrefix">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.NTemporaryFileSettings.m_TempDirectory">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NTemporaryFileSettings.EnableAutoDelete">
      <summary>
            Instructs the control to check for and delete expired files.
            </summary>
      <remarks>
            A file is considered expired if [current time] - [file creation time] &gt; [expire span].
            </remarks>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NTemporaryFileSettings.ExpireSpan">
      <summary>
            The time span after which a temporary file is considered expired.
            </summary>
      <remarks>
            A file is considered expired if [current time] - [file creation time] &gt; [expire span].
            </remarks>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NTemporaryFileSettings.ExpireSpanXML">
      <summary>
            The time span after which a temporary file is considered expired, formatted for XML. See <see cref="P:Nevron.UI.WebForm.Controls.NTemporaryFileSettings.ExpireSpan" /></summary>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NTemporaryFileSettings.PhysicalRoolDirectory">
      <summary>
            Returns the full path to the root web server directory on the server.
            </summary>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NTemporaryFileSettings.PhysicalTempDirectory">
      <summary>
            Returns the full path to the temp directory on the server.
            </summary>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NTemporaryFileSettings.VirtualTempDirectory">
      <summary>
            Gets/sets the virtual path to the temp directory on the server.
            </summary>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NTemporaryFileSettings.MaxTempDirectorySize">
      <summary>
            The maximum temporary directory size in KB.
            </summary>
      <remarks>
            When EnableAutoDelete is set to true the control will ensure that the size of temporary directory in KB does not exceed the MaxTempDirectorySize property. The default value is 2048.
            </remarks>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NTemporaryFileSettings.MaxTempFilesCount">
      <summary>
            The maximum number of files in the temporary directory.
            </summary>
      <remarks>
            When EnableAutoDelete is set to true the control will ensure that the number of files in the temporary directory does not exceed the MaxTempFilesCount property. The default value is 100.
            </remarks>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NTemporaryFileSettings.FileNamePrefix">
      <summary>
            The prefix used for the temporary file names.
            </summary>
      <remarks>
            When the control generates temporary files on the server it appends the prefix before the unique GUID string. The default value of this property is \“Nevron_\”.
            </remarks>
    </member>
    <member name="T:Nevron.UI.WebForm.Controls.NStringHolderCollection">
      <summary>
            Summary description for NStringHolderCollection.
            </summary>
    </member>
    <member name="T:Nevron.UI.WebForm.Controls.NImageHostPage">
      <summary>
            Summary description for NImageHostPage.
            </summary>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NImageHostPage.OnInit(System.EventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="T:Nevron.UI.WebForm.Controls.NCallbackCommand">
      <summary>
            Represents a callback command to be sent to the server by the AJAX callback object, which is 
            located at the client web-browser.
            </summary>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NCallbackCommand.ReadFromString(System.String)">
      <summary>
            Initializes this instance of the NCallbackCommand class from a formatted string.
            </summary>
      <param name="text">
            A text in the form: commandName:name1="\"value\"'1'", name2='\'value\'"2"'.
            The quotes and double quotes in the value strings are introduced to demonstrate how quotes and double quotes can be included in values.
            The following escape sequences are supported: \r, \n, \\, \" and \'.
            </param>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NCallbackCommand.ReadFromAjaxXmlTransport(Nevron.UI.WebForm.Controls.NAjaxXmlTransport)">
      <summary>
            Initializes this instance of the NCallbackCommand class from a NAjaxXmlTransport object.
            </summary>
      <param name="transport">A NAjaxXmlTransport object which contains a data section with name "command".</param>
      <remarks>
            If the transport parameter does not contain a data section with name "command",
            the initialization of this instance is not performed.
            If the instance of this NCallbackCommand object already contains data, it
            is replaced by the data, provided by the transport NAjaxXmlTransport object.
            </remarks>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NCallbackCommand.ParseArguments(System.String,System.Boolean)">
      <summary>
            Parses a formatted text, containing command arguments.
            </summary>
      <param name="arguments">
            A text in the form: name1="\"value\"'1'", name2='\'value\'"2"'. The quotes and double quotes in the value strings are introduced to demonstrate how quotes and double quotes can be included in values.
            </param>
      <param name="urlDecode">
            If this value is true, the values extracted from the formatted text are decoded with the HttpUtility.UrlDecode() method.
            Else, the following escape sequences are supported for the values extracted from the formatted text : \r, \n, \\, \" and \'.</param>
      <returns>
            A Hashtable with argument names as keys and argument values as values.
            </returns>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NCallbackCommand.Name">
      <summary>
            Gets the name of the command.
            </summary>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NCallbackCommand.Arguments">
      <summary>
            Gets a Hashtable object containing all command arguments with argument string name set as key and argument string value set as value.
            </summary>
    </member>
    <member name="T:Nevron.UI.WebForm.Controls.NAjaxRedirectTool">
      <summary>
            Provides configuration for the client side NAjaxRedirectTool tool
            </summary>
    </member>
    <member name="T:Nevron.UI.WebForm.Controls.NCallbackCustomCommandArgs">
      <summary>
            Provides data for the AsyncCustomCommand event of the <see cref="T:Nevron.UI.WebForm.Controls.INAjaxControl" />
            interface.
            </summary>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NCallbackCustomCommandArgs.Command">
      <summary>
            Gets / sets the command to be processed.
            </summary>
    </member>
    <member name="T:Nevron.UI.WebForm.Controls.NStringHolder">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.UI.WebForm.Controls.NWebControlDesigner">
      <summary>
            Provides design time support for all web controls, which derive from the <see cref="T:Nevron.UI.WebForm.Controls.NWebControl" /> class.
            </summary>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NWebControlDesigner.OnComponentChanged(System.Object,System.ComponentModel.Design.ComponentChangedEventArgs)">
      <summary>
            Delegates the event processing to the OnWebControlDesignTimeChanged method of the active 
            <see cref="T:Nevron.UI.WebForm.Controls.NClientServerTechnology" /> instance,
            stored in the ClientServerTechnology property of the web control that is being designed.
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="ce">A System.ComponentModel.Design.ComponentChangedEventArgs that contains the event data.</param>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NWebControlDesigner.GetDesignTimeHtml">
      <summary>
            Delegates the rendering to the OnWebControlDesignTimeRender method of the active 
            <see cref="T:Nevron.UI.WebForm.Controls.NClientServerTechnology" /> instance,
            stored in the ClientServerTechnology property of the web control that is being designed.
            </summary>
      <returns>The design-time HTML of the rendered web control.</returns>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NWebControlDesigner.WebControl">
      <summary>
            Gets the NWebControl object that is being designed.
            </summary>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NWebControlDesigner.ClientServerTechnology">
      <summary>
            Gets the active client-server used by the NWebControl object that is being designed.
            </summary>
    </member>
    <member name="T:Nevron.UI.WebForm.Controls.NAjaxXmlTransportBuilder">
      <summary>
            Provides storage for building AJAX XML transport that will deliver structured data to the
            client after an AJAX request has been handled.
            </summary>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NAjaxXmlTransportBuilder.ContainsDataSection(System.String)">
      <summary>
            Tests if a data section with the given name already exists in the data sections collection of the object.
            </summary>
      <param name="name">The name of the section to test for.</param>
      <returns>true if the section exists in the data sections collection of the object; otherwise false.</returns>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NAjaxXmlTransportBuilder.ContainsRedrawDataSection">
      <summary>
            Tests if the built-in "redraw" data section already exists in the data sections collection of the object.
            </summary>
      <returns>true if the section exists in the data sections collection of the object; otherwise false.</returns>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NAjaxXmlTransportBuilder.ContainsReincarnateDataSection">
      <summary>
            Tests if the built-in "reincarnate" data section already exists in the data sections collection of the object.
            </summary>
      <returns>true if the section exists in the data sections collection of the object; otherwise false.</returns>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NAjaxXmlTransportBuilder.ContainsImageMapDataSection">
      <summary>
            Tests if the built-in "imageMap" data section already exists in the data sections collection of the object.
            </summary>
      <returns>true if the section exists in the data sections collection of the object; otherwise false.</returns>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NAjaxXmlTransportBuilder.AddDataSection(Nevron.UI.WebForm.Controls.NAjaxXmlDataSection)">
      <summary>
            Adds a data section to the data sections collection of the object.
            </summary>
      <param name="dataSection">The data section to add.</param>
      <remarks>
            Will throw an ArgumentException if a data section with the same name already exists 
            in the data sections collection of the object.
            </remarks>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NAjaxXmlTransportBuilder.AddRedrawDataSection(Nevron.UI.WebForm.Controls.NWebControl)">
      <summary>
            Adds the built-in "redraw" data section to the data sections collection of the object.
            </summary>
      <param name="webControl">The web control, related with the AJAX request.</param>
      <remarks>
            Will throw an ArgumentException if a data section with name "redraw" already exists 
            in the data sections collection of the object.
            </remarks>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NAjaxXmlTransportBuilder.AddReincarnateDataSection(Nevron.UI.WebForm.Controls.NWebControl)">
      <summary>
            Adds the built-in "reincarnate" data section to the data sections collection of the object.
            </summary>
      <param name="webControl">The web control, related with the AJAX request.</param>
      <remarks>
            Will throw an ArgumentException if a data section with name "reincarnate" already exists 
            in the data sections collection of the object.
            </remarks>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NAjaxXmlTransportBuilder.AddImageMapDataSection(Nevron.UI.WebForm.Controls.NWebControl)">
      <summary>
            Adds the built-in "imageMap" data section to the data sections collection of the object.
            The behavior of this method depends on the value of the AjaxImageMapMode property of 
            the web control.
            </summary>
      <param name="webControl">The web control, related with the AJAX request.</param>
      <returns>
        <para>
            If the value of the AjaxImageMapMode property of the web control is set to Never, always returns false.
            </para>
        <para>
            If the value of the AjaxImageMapMode property of the web control is set to Auto or Manual, returns true, if there are image map areas generated; else returns false.
            </para>
        <para>
            If the value of the AjaxImageMapMode property of the web control is set to Always, always returns true.
            </para>
      </returns>
      <remarks>
        <para>
            Will throw an ArgumentException if a data section with name "imageMap" already exists 
            in the data sections collection of the object.
            </para>
        <para>
            If the value of the AjaxImageMapMode property of the web control is set to Never, this
            method immediately returns. If the value of the AjaxImageMapMode property of the web control 
            is set to Auto or Manual, and if there is no area generated by the image map writer, the "imageMap" 
            data section will not be added to the builder. If the value of the AjaxImageMapMode property 
            of the web control is set to Always, the "imageMap" data section will always be added to 
            the builder.
            </para>
      </remarks>
    </member>
    <member name="T:Nevron.UI.WebForm.Controls.NBrowser">
      <summary>
            Describes a browser detection rule. 
            </summary>
      <remarks>
            Nevron Chart for .NET has build in browser detection that uses a combination of a regular 
            expression match and version number match that can virtually distinguish any type of 
            browser. This feature allows you to modify the default response type depending on the 
            type of browser accessing the page. For example consider that you want the control to 
            generate an HTML image map and attached PNG image in the case of IE and an HTML image 
            map and jpg in the case of Netscape. In this case you should configure your default 
            response to HTML image map and attached PNG and define a browser match rule assigning 
            an HTML image map with jpg to Netscape browsers.
            </remarks>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.NBrowser.defaultMatchExpression">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.NBrowser.defaultNoMatchExpression">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.NBrowser.defaultMatchIfBiggerVersion">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.NBrowser.defaultFromMajorVersion">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.NBrowser.defaultFromMinorVersion">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.NBrowser.defaultToMajorVersion">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.NBrowser.defaultToMinorVersion">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NBrowser.GetBrowserDescription">
      <summary>
            Returns a short description of the browsers recognized by this object.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NBrowser.Match(System.Web.HttpBrowserCapabilities)">
      <summary>
            Determines whether the browser description matches the browser.
            </summary>
      <param name="BrowserCaps">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NBrowser.VersionCheck(System.Int32,System.Double,System.Int32,System.Double)">
      <summary>
      </summary>
      <param name="nMajor">
      </param>
      <param name="fMinor">
      </param>
      <param name="nMajor2">
      </param>
      <param name="fMinor2">
      </param>
      <returns>
      </returns>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.NBrowser.m_MatchExpression">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.NBrowser.m_NoMatchExpression">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.NBrowser.m_FromMajorVersion">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.NBrowser.m_FromMinorVersion">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.NBrowser.m_ToMajorVersion">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.NBrowser.m_ToMinorVersion">
      <summary>
      </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.NBrowser.m_MatchIfBiggerVersion">
      <summary>
      </summary>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NBrowser.MatchExpression">
      <summary>
            A .NET regular expression that must match the browser HTTP User Agent header.
            </summary>
      <remarks>
            If the MatchExpression contains an empty string no match is performed. For more 
            information of working with regular expressions please refer to the .NET SDK 
            documentation.
            </remarks>
      <example>
            The following example constructs a NBrowser object that evaluates to IE browsers 
            5.0 and above.
            <code lang="VB">
            Dim browser As NBrowser =  New NBrowser() 
            browser.MatchExpression = ".*MSIE.*"
            browser.FromMajorVersion = 5
            browser.FromMinorVersion = 0
            
            Dim respose As NResponse =  New NImageResponse() 
             
            Dim browserResponsePair As NBrowserResponsePair =  New NBrowserResponsePair() 
             
            browserResponsePair.Response = respose
            browserResponsePair.Browser = browser
            NChartControl1.ServerConfiguration.Responses.Add(browserResponsePair)
            </code><code>
            NBrowser browser = new NBrowser();
            browser.MatchExpression = ".*MSIE.*";
            browser.FromMajorVersion = 5;
            browser.FromMinorVersion = 0;
            
            NResponse respose = new NImageResponse();
            
            NBrowserResponsePair browserResponsePair = new NBrowserResponsePair();
            
            browserResponsePair.Response = respose;
            browserResponsePair.Browser = browser;
            NChartControl1.ServerConfiguration.Responses.Add(browserResponsePair);
            </code></example>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NBrowser.NoMatchExpression">
      <summary>
            A .NET regular expression that must not match the browser HTTP User Agent header.
            </summary>
      <remarks>
            If the NoMatchExpression contains an empty string no match is performed. For more 
            information of working with regular expressions please refer to the .NET SDK 
            documentation.
            </remarks>
      <example>
            The following example constructs a NBrowser object that evaluates to Netscape 
            browsers 5.0 and above.
            <code lang="VB">
            Dim browser As NBrowser =  New NBrowser() 
            browser.MatchExpression = ".*Mozilla.*"
            browser.NoMatchExpression = ".*compatible.*" ' all other browser must have compatible.
            browser.FromMajorVersion = 5
            browser.FromMinorVersion = 0
            
            Dim respose As NResponse =  New NImageResponse() 
            
            Dim browserResponsePair As NBrowserResponsePair =  New NBrowserResponsePair() 
             
            browserResponsePair.Response = respose
            browserResponsePair.Browser = browser
            NChartControl1.ServerConfiguration.Responses.Add(browserResponsePair)
            </code><code>
            NBrowser browser = new NBrowser();
            browser.MatchExpression = ".*Mozilla.*";
            browser.NoMatchExpression = ".*compatible.*"; // all other browser must have compatible.
            browser.FromMajorVersion = 5;
            browser.FromMinorVersion = 0;
            
            NResponse respose = new NImageResponse();
            
            NBrowserResponsePair browserResponsePair = new NBrowserResponsePair();
            
            browserResponsePair.Response = respose;
            browserResponsePair.Browser = browser;
            NChartControl1.ServerConfiguration.Responses.Add(browserResponsePair);
            </code></example>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NBrowser.FromMajorVersion">
      <summary>
            The major version of the browser to start the match from.
            </summary>
      <remarks>
            A browser match occurs when the browser version is in the interval 
            [FromMajorVersion.FromMinorVersion, ToMajorVersion.ToMinorVersion] in the case 
            when MatchIfBiggerVersion if false or 
            [FromMajorVersion.FromMinorVersion, infinity) otherwise.
            </remarks>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NBrowser.FromMinorVersion">
      <summary>
            The minor version of the browser to start the match from.
            </summary>
      <remarks>
            A browser match occurs when the browser version is between the interval 
            [FromMajorVersion.FromMinorVersion, ToMajorVersion.ToMinorVersion] in the case 
            when MatchIfBiggerVersion if false or 
            [FromMajorVersion.FromMinorVersion, infinity) otherwise.
            </remarks>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NBrowser.ToMajorVersion">
      <summary>
            The major version of the browser to end the match.
            </summary>
      <remarks>
            A browser match occurs when the browser version is between the interval 
            [FromMajorVersion.FromMinorVersion, ToMajorVersion.ToMinorVersion] in the case 
            when MatchIfBiggerVersion if false or [FromMajorVersion.FromMinorVersion, infinity) 
            otherwise.
            </remarks>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NBrowser.ToMinorVersion">
      <summary>
            The minor version of the browser to end the match.
            </summary>
      <remarks>
            A browser match occurs when the browser version is between the interval 
            [FromMajorVersion.FromMinorVersion, ToMajorVersion.ToMinorVersion] in the case 
            when MatchIfBiggerVersion if false or [FromMajorVersion.FromMinorVersion, infinity) 
            otherwise.
            </remarks>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NBrowser.MatchIfBiggerVersion">
      <summary>
            Whether or not to use the upper browser version boundary.
            </summary>
      <remarks>
            When set to false the upper browser version boundary is discarded and the match 
            is successfully when the regular expression in the Name string generates a match 
            and the browser version is greater or equal to FromMajorVersion.FromMinorVersion.
            </remarks>
    </member>
    <member name="T:Nevron.UI.WebForm.Controls.NStringHolderCount">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.UI.WebForm.Controls.NevronScriptManager">
      <summary>
      </summary>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NevronScriptManager.ProcessRequest(System.Web.HttpContext)">
      <summary>
      </summary>
      <param name="context">
      </param>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NevronScriptManager.IsReusable">
      <summary>
      </summary>
    </member>
    <member name="T:Nevron.UI.WebForm.Controls.NStateManagerFactory">
      <summary>
            Creates state agents.
            </summary>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NStateManagerFactory.CreateInstance(System.Web.HttpContext)">
      <summary>
            Creates a state manager from the specified HTTP context.
            </summary>
      <param name="context">
            HTTP Context.
            </param>
      <returns>
            A state manager.
            </returns>
    </member>
    <member name="T:Nevron.UI.WebForm.Controls.NClientServerTechnology">
      <summary>
            NClientServerTechnology is the base class for classes representing a technology
            for client-server communication between the web-browser and the IIS.
            All derived classes of the NClientServerTechnology class must be stateless, because
            the NClientServerTechnology instance can be replaced by a <see cref="T:Nevron.UI.WebForm.Controls.NClientServerTechnologyFactory" />
            at any time without notification.
            </summary>
      <remarks>
            The NClientServerTechnology class is designed to plug into significant steps
            from the life-cycle of a <see cref="T:Nevron.UI.WebForm.Controls.NWebControl" /> instance.
            A <see cref="T:Nevron.UI.WebForm.Controls.NWebControl" /> object will call the corresponding
            methods of a selected NClientServerTechnology instance rather than implement
            its own methods, e.g. Form_Load of the <see cref="T:Nevron.UI.WebForm.Controls.NWebControl" />
            will delegate the execution the OnWebControlLoad of the NClientServerTechnology object.
            <para>
            This architecture is provided to allow a simple way to switch from post-back to AJAX modes
            in design mode. It also encapsulates the code required for post-back and for AJAX in
            separate classes.
            </para></remarks>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NClientServerTechnology.EnumerateScriptIncludes">
      <summary>
            Provides a list of web resources containing client side JavaScript include files.
            </summary>
      <returns>
            A list of web resources containing client side JavaScript include files.
            The default implementation returns null (do not register any scripts).
            </returns>
      <remarks>
            This method is called by the framework to determine, which JavaScript web resources
            must be registered with the web page script manager, if one is present.
            The single web resource must be specified in the following form:
            "Assembly.Full.Name/Optional/Folders/Path/ScriptFileName.js". Please notice the
            slashes that separate the assembly name, the folder path parts and the file name.
            The JavaScript web resource can be located in any assembly that can
            be loaded by the application.
            <para>
            To add a JavaScript file as a web resource and load it by the AJAX-enabled control, do the following:
            <list><item>To the project of the assembly that will host the web resource add the JavaScript file and set its Build Action property to "Embedded Resource";</item><item>To the AssemblyInfo.cs file in the assembly that will host the web resource ensure using System.Web.UI; is present;</item><item>
            		To the AssemblyInfo.cs file in the assembly that will host the web resource add an assembly attribute like this:
            		<code>
            		[assembly: WebResource("Assembly.Full.Name.Optional.Folders.Path.ScriptFileName.js", "application/x-javascript")]
            		</code></item><item>
            		In the implementation of the EnumerateScriptIncludes() method add the web resource to the returned list like this:
            		<code>
            		public override string[] EnumerateScriptIncludes()
            		{
            			string[] scriptFiles = 
            			{
            				...
            				"Assembly.Full.Name/Optional/Folders/Path/ScriptFileName.js",
            				...
            			};
            		
            			return scriptFiles;
            		}
            		</code></item></list></para></remarks>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NClientServerTechnology.ProvideDefaultStateManager(Nevron.UI.WebForm.Controls.NWebControl)">
      <summary>
            Provides an instance of the default state manager.
            </summary>
      <returns>
            An instance of the default state manager.
            </returns>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NClientServerTechnology.EnumerateStateManagers(Nevron.UI.WebForm.Controls.NWebControl)">
      <summary>
            Enumerates all state agents, applicable to this client-server technology.
            </summary>
      <returns>
            A generic dictionary, containing all applicable state managers.
            </returns>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NClientServerTechnology.IsApplicable(System.Boolean)">
      <summary>
            Provides a value which indicates if the technology can be used with the web
            control that was provided to the NClientServerTechnology contructor.
            </summary>
      <param name="DesignMode">
            Indicates if the NClientServerTechnology is being tested in design mode.
            </param>
      <returns>True if the NClientServerTechnology object can be used; else returns false. The default implementation returns true.</returns>
      <remarks>
            Override this method if there is a specific configuration of the web control using the
            NClientServerTechnology object for which the technology is not applicable.
            </remarks>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NClientServerTechnology.OnWebControlLoad(System.EventArgs)">
      <summary>
            This method is invoked from the Load event handler of the <see cref="T:Nevron.UI.WebForm.Controls.NWebControl" /> class.
            By default does nothing.
            </summary>
      <param name="e">
            An <see cref="T:System.EventArgs" /> that contains the event data.
            </param>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NClientServerTechnology.OnWebControlPreRender(System.EventArgs,System.Collections.ArrayList)">
      <summary>
            This method is invoked from the overridden OnPreRender method of the <see cref="T:Nevron.UI.WebForm.Controls.NWebControl" /> class.
            The default implementation of this method registers the script files as provided by the EnumerateScriptIncludes() method.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <param name="scriptIncludeFiles">The script include files as provided by the EnumerateScriptIncludes() method.</param>
      <remarks>
            It is recommended that the whole implementation of this method is encapsulated in a try-catch block like this:
            <code>
            	try
            	{
            		// implementation
            
            		base.OnWebControlPreRender(e, scriptIncludeFiles);
            	}
            	catch (Exception ex)
            	{
            		RememberHtmlExceptionMessage(ex);
            	}
            </code>
            The RememberHtmlExceptionMessage(Exception) method will store any error data and
            provide it later for formatted output to the client. Using the RememberHtmlExceptionMessage(Exception) method
            also allows to collect multiple errors' data in order to diagnose possible problems
            more easily.
            </remarks>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NClientServerTechnology.OnWebControlRender(System.Web.UI.HtmlTextWriter)">
      <summary>
            This method is invoked from the overridden Render method of the <see cref="T:Nevron.UI.WebForm.Controls.NWebControl" /> class.
            By default does nothing.
            </summary>
      <param name="output">The System.Web.UI.HtmlTextWriter object that receives the control content.</param>
      <remarks>
            It is recommended that the whole implementation of this method is encapsulated in a try-catch block like this:
            <code>
            	try
            	{
            		// implementation 
            	}
            	catch (Exception ex)
            	{
            		RememberHtmlExceptionMessage(ex);
            	}
            </code>
            The RememberHtmlExceptionMessage(Exception) method will store any error data and
            provide it later for formatted output to the client. Using the RememberHtmlExceptionMessage(Exception) method
            also allows to collect multiple errors' data in order to diagnose possible problems
            more easily.
            </remarks>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NClientServerTechnology.OnWebControlDesignTimeRender(Nevron.UI.WebForm.Controls.NWebControlDesigner)">
      <summary>
            This method is invoked from the overridden GetDesignTimeHtml method of the <see cref="T:Nevron.UI.WebForm.Controls.NWebControlDesigner" /> class.
            By default does nothing.
            </summary>
      <param name="designer">
            The instance of the <see cref="T:Nevron.UI.WebForm.Controls.NWebControlDesigner" /> object that invoked the method.
            </param>
      <returns>The HMTL code of the component used for design-time rendering. The default implementation of this method returns null.</returns>
      <remarks>
            It is recommended that the whole implementation of this method is encapsulated in a try-catch block like this:
            <code>
            	try
            	{
            		// implementation 
            	}
            	catch (Exception ex)
            	{
            		RememberHtmlExceptionMessage(ex);
            	}
            </code>
            The RememberHtmlExceptionMessage(Exception) method will store any error data and
            provide it later for formatted output to the client. Using the RememberHtmlExceptionMessage(Exception) method
            also allows to collect multiple errors' data in order to diagnose possible problems
            more easily.
            </remarks>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NClientServerTechnology.OnWebControlDesignTimeChanged(Nevron.UI.WebForm.Controls.NWebControlDesigner,System.ComponentModel.Design.ComponentChangedEventArgs)">
      <summary>
            This method is invoked from the overridden OnComponentChanged method of the <see cref="T:Nevron.UI.WebForm.Controls.NWebControlDesigner" /> class.
            By default does nothing.
            </summary>
      <param name="designer">
            The instance of the <see cref="T:Nevron.UI.WebForm.Controls.NWebControlDesigner" /> object that invoked the method.
            </param>
      <param name="ce">
            A System.ComponentModel.Design.ComponentChangedEventArgs that contains the event data.
            </param>
      <remarks>
            It is recommended that the whole implementation of this method is encapsulated in a try-catch block like this:
            <code>
            	try
            	{
            		// implementation 
            	}
            	catch (Exception ex)
            	{
            		RememberHtmlExceptionMessage(ex);
            	}
            </code>
            The RememberHtmlExceptionMessage(Exception) method will store any error data and
            provide it later for formatted output to the client. Using the RememberHtmlExceptionMessage(Exception) method
            also allows to collect multiple errors' data in order to diagnose possible problems
            more easily.
            </remarks>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NClientServerTechnology.OnCallbackEventHandlerGetCallbackResult">
      <summary>
            This method is invoked from the GetCallbackResult method of the <see cref="T:Nevron.UI.WebForm.Controls.NWebControl" /> class (GetCallbackResult is a part of the implementation of ICallbackEventHandler).
            By default does nothing.
            </summary>
      <returns>The result of the callback command execution. The client side Nevron AJAX framework expects either a serialized NAjaxXmlTransport object or a text error message.</returns>
      <remarks>
            The default implementation of this method returns null.
            </remarks>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NClientServerTechnology.OnCallbackEventHandlerRaiseCallbackEvent(System.String)">
      <summary>
            This method is invoked from the RaiseCallbackEvent method of the <see cref="T:Nevron.UI.WebForm.Controls.NWebControl" /> class (RaiseCallbackEvent is a part of the implementation of ICallbackEventHandler).
            By default does nothing.
            </summary>
      <param name="eventArgument">
            The client side Nevron AJAX framework provides as eventArgument a serialized NAjaxXmlTransport object with a NAjaxXmlDataSection named "command".
            </param>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NClientServerTechnology.OnPostbackEventHandlerRaisePostbackEvent(System.String)">
      <summary>
            This method is invoked from the RaisePostBackEvent method of the <see cref="T:Nevron.UI.WebForm.Controls.NWebControl" /> class (RaiseCallbackEvent is a part of the implementation of IPostBackEventHandler).
            By default does nothing.
            </summary>
      <param name="eventArgument">A string that represents an optional event argument to be passed to the event handler.</param>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NClientServerTechnology.GetAction">
      <summary>
            Creates a new instance of a Nevron image HTTP handler.
            </summary>
      <returns>
            A new instance of a Nevron image HTTP handler.
            </returns>
      <remarks>
            The value, returned by this function is used to register 
            a Nevron image HTTP handler in web.config.
            </remarks>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NClientServerTechnology.GetScriptsAction">
      <summary>
            Creates a new instance of a Nevron scripts HTTP handler.
            </summary>
      <returns>
            A new instance of a Nevron image HTTP handler.
            </returns>
      <remarks>
            The value, returned by this function is used to register 
            a Nevron scripts HTTP handler in web.config.
            </remarks>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NClientServerTechnology.CreateDesignTimeTempFile">
      <summary>
            Creates a temp image file with the rendered chart, which can be
            used at design-time to display the chart image in designer.
            </summary>
      <remarks>
            Deletes the current temp file, if one is present. The path of the
            current temp file can be accessed through the DesignTimeTempFileName
            property. The value of the DesignTimeTempFileName property is 
            reinitialized every time the CreateDesignTimeTempFile method is called.
            </remarks>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NClientServerTechnology.DeleteDesignTimeTempFile">
      <summary>
            Deletes the current temp image file 
            used at design-time to display the chart image in designer, 
            if one is present.
            </summary>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NClientServerTechnology.IsHttpHandlerRegistered(System.Web.Configuration.HttpHandlerAction)">
      <summary>
            Tests if an HTTP handler is registered in the web.config file 
            under the configuration section system.web/httpHandlers.
            </summary>
      <param name="Action">The HTTP handler to test upon.</param>
      <returns>True if the HTTP handler is registered, otherwise false.</returns>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NClientServerTechnology.RegisterImageHttpHandler(System.Web.Configuration.HttpHandlerAction)">
      <summary>
            Registers an HTTP handler is the web.config file under the configuration section system.web/httpHandlers.
            </summary>
      <param name="Action">The HTTP handler to register.</param>
      <returns>
            True if the HTTP handler was registered successfully, 
            false if the method fails to obtain an IWebApplication object from the site of the page
            or fails to obtain a Configuration object from the web application.
            </returns>
      <remarks>
            Does not check if the handler has been already registered. Please use the IsHttpHandlerRegistered
            method of the NClientServerTechnology class to determine if the HTTP handler exists in the web.config file.
            </remarks>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NClientServerTechnology.IsHttpHandlerRegisteredIIS7(System.Web.Configuration.HttpHandlerAction)">
      <summary>
            Tests if an HTTP handler is registered in the web.config file 
            under the configuration section system.webServer/handlers.
            </summary>
      <param name="Action">The HTTP handler to test upon.</param>
      <returns>True if the HTTP handler is registered, otherwise false.</returns>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NClientServerTechnology.RegisterImageHttpHandlerIIS7(System.Web.Configuration.HttpHandlerAction)">
      <summary>
            Registers an HTTP handler is the web.config file under the configuration 
            section system.webServer/handlers.
            </summary>
      <param name="Action">The HTTP handler to register.</param>
      <returns>
            True if the HTTP handler was registered successfully, 
            false if the method fails to obtain an IWebApplication object from the site of the page
            or fails to obtain a Configuration object from the web application.
            </returns>
      <remarks>
            Does not check if the handler has been already registered. Please use the IsHttpHandlerRegisteredIIS7
            method of the NClientServerTechnology class to determine if the HTTP handler exists in the web.config file.
            </remarks>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NClientServerTechnology.WebControl">
      <summary>
            Gets the web control, associated by this instance of the NClientServerTechnology class.
            This property is initialized from the NClientServerTechnology constructor.
            </summary>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NClientServerTechnology.HasErrors">
      <summary>
            Gets a value that indicates if there are error exceptions collected at the moment of reading the value.
            Errors a are collected by calling the RememberHtmlExceptionMessage method of the NClientServerTechnology class.
            </summary>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NClientServerTechnology.DesignTimeTempFileName">
      <summary>
            Gets the path of the current temp image file with the rendered chart, 
            which is used at design-time to display the chart image in designer.
            </summary>
      <remarks>
            To initialize the value of this property, call the CreateDesignTimeTempFile
            method of this class.
            </remarks>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NClientServerTechnology.ImageFormat">
      <summary>
            Gets the image format, used to render the chart both at
            design- and run-time. Currently The value of this property is
            fiexed to an instance of the <see cref="T:Nevron.GraphicsCore.NPngImageFormat" />
            class and cannot be modified.
            </summary>
    </member>
    <member name="T:Nevron.UI.WebForm.Controls.NAjaxToolList">
      <summary>
            List of server side AJAX tools that is used to create and configure
            tools at the client side.
            </summary>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NAjaxToolList.GetToolById(System.String)">
      <summary>
            Lookups the tool with the specified tool id.
            </summary>
      <param name="toolId">The id of the tool to lookup. The client side JavaScript class name of the tool class is used.</param>
      <returns>The tool with the specified tool id or null if no tool was found.</returns>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NAjaxToolList.GetToolByType(System.Type)">
      <summary>
            Lookups the tool of a specified type.
            </summary>
      <param name="type">The C# type of the tool to lookup.</param>
      <returns>The tool of the specified type or null if no tool was found.</returns>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NAjaxToolList.IndexOf(Nevron.UI.WebForm.Controls.NAjaxToolDefinition)">
      <summary>
            Determines the index of a specific item in the IList. 
            </summary>
      <param name="item">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NAjaxToolList.Insert(System.Int32,Nevron.UI.WebForm.Controls.NAjaxToolDefinition)">
      <summary>
            Inserts an item to the IList at the specified index.  
            </summary>
      <param name="index">
      </param>
      <param name="item">
      </param>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NAjaxToolList.RemoveAt(System.Int32)">
      <summary>
            Removes the IList item at the specified index.
            </summary>
      <param name="index">
      </param>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NAjaxToolList.Add(Nevron.UI.WebForm.Controls.NAjaxToolDefinition)">
      <summary>
            Adds an item to the ICollection. 
            </summary>
      <param name="item">
      </param>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NAjaxToolList.Clear">
      <summary>
            Removes all items from the ICollection. 
            </summary>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NAjaxToolList.Contains(Nevron.UI.WebForm.Controls.NAjaxToolDefinition)">
      <summary>
            Determines whether the ICollection contains a specific value. 
            </summary>
      <param name="item">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NAjaxToolList.CopyTo(Nevron.UI.WebForm.Controls.NAjaxToolDefinition[],System.Int32)">
      <summary>
            Copies the elements of the ICollection to an Array, starting at a particular Array index. 
            </summary>
      <param name="array">
      </param>
      <param name="arrayIndex">
      </param>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NAjaxToolList.Remove(Nevron.UI.WebForm.Controls.NAjaxToolDefinition)">
      <summary>
            Removes the first occurrence of a specific object from the ICollection. 
            </summary>
      <param name="item">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NAjaxToolList.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection. 
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NAjaxToolList.Count">
      <summary>
            Gets the number of elements contained in the ICollection.
            </summary>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NAjaxToolList.IsReadOnly">
      <summary>
            Gets a value indicating whether the ICollection is read-only.
            </summary>
    </member>
    <member name="T:Nevron.UI.WebForm.Controls.NBatonSessionStateManager">
      <summary>
            NBatonSessionStateAgent maintains a state between two postbacks.
            On every postback the manager checks if a prevoius state exists and if yes
            removes it, prior to storing a new one.
            </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.NBatonSessionStateManager.QueryStringField">
      <summary>
            The name of the query string filed that is used to pass the state identification
            through HTTP requests. The value is "ControlId".
            </summary>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NBatonSessionStateManager.ExpirationCheck(System.Int32)">
      <summary>
            Implements the expiration logic.
            </summary>
      <param name="reason">
            This parameter determines the execution point, at which the xpiration point is performed.
            </param>
      <returns>
            This method returns true, if the state object has been removed and false otherwise.
            </returns>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NBatonSessionStateManager.StoreState(Nevron.UI.WebForm.Controls.NImage)">
      <summary>
            Override this method to implement the state storage logic.
            </summary>
      <param name="imageControl">
            The web control, which state to store.
            </param>
      <returns>
            The state object, generated for state storage.
            </returns>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NBatonSessionStateManager.AcquireState">
      <summary>
            Override this method to implement the state lookup logic.
            </summary>
      <returns>
            The state object.
            </returns>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NBatonSessionStateManager.BuildIdQueryString">
      <summary>
            Provides a query string part for state identification transport over http.
            </summary>
      <returns>A query string part.</returns>
    </member>
    <member name="M:Nevron.UI.WebForm.Controls.NBatonSessionStateManager.CleanUp">
      <summary>
            Removes an existing state object, stored by this state manager.
            </summary>
    </member>
    <member name="F:Nevron.UI.WebForm.Controls.NBatonSessionStateManager.m_HttpContext">
      <summary>
            Cached HTTP Context.
            </summary>
    </member>
    <member name="T:Nevron.UI.WebForm.Controls.NAjaxXmlDataSection">
      <summary>
            Represents a single entity of structured XML data aggregated in a collection
            by the NAjaxXmlTransport class.
            </summary>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NAjaxXmlDataSection.Name">
      <summary>
            Gets / sets the name of the section.
            </summary>
      <remarks>
            The name must be unique within a single NAjaxXmlTransport object.
            In the XML representation of the NAjaxXmlTransport object
            this property is serialized as the tag name of the section XML element.
            </remarks>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NAjaxXmlDataSection.Attributes">
      <summary>
            Name-value pairs with attribute data for the section.
            </summary>
      <remarks>
            In the XML representation of the NAjaxXmlTransport object
            this property is serialized as the attributes of the section XML element.
            </remarks>
    </member>
    <member name="P:Nevron.UI.WebForm.Controls.NAjaxXmlDataSection.Data">
      <summary>
            Gets / sets the raw data of the section.
            </summary>
      <remarks>
            In the XML representation of the NAjaxXmlTransport object
            this property is serialized as CDATA inner XML of the section XML element.
            </remarks>
    </member>
  </members>
</doc>