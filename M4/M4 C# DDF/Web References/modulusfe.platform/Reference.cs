//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18052.
// 
#pragma warning disable 1591

namespace M4.modulusfe.platform {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ServiceSoap", Namespace="http://tempuri.org/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(object[]))]
    public partial class Service : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback CreateLicenseKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback ActivateLicenseKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeincrementLicenseKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetActivationsRemainingOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsTrialModeOperationCompleted;
        
        private System.Threading.SendOrPostCallback MarkLicenseAsPaidOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidateLicenseKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback ListUserDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetUserDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback ClearAlertsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAlertsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPublicDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback ListPublicDataOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Service() {
            this.Url = global::M4.Properties.Settings.Default.M4_modulusfe_platform_Service;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event CreateLicenseKeyCompletedEventHandler CreateLicenseKeyCompleted;
        
        /// <remarks/>
        public event ActivateLicenseKeyCompletedEventHandler ActivateLicenseKeyCompleted;
        
        /// <remarks/>
        public event DeincrementLicenseKeyCompletedEventHandler DeincrementLicenseKeyCompleted;
        
        /// <remarks/>
        public event GetActivationsRemainingCompletedEventHandler GetActivationsRemainingCompleted;
        
        /// <remarks/>
        public event IsTrialModeCompletedEventHandler IsTrialModeCompleted;
        
        /// <remarks/>
        public event MarkLicenseAsPaidCompletedEventHandler MarkLicenseAsPaidCompleted;
        
        /// <remarks/>
        public event ValidateLicenseKeyCompletedEventHandler ValidateLicenseKeyCompleted;
        
        /// <remarks/>
        public event RemoveUserCompletedEventHandler RemoveUserCompleted;
        
        /// <remarks/>
        public event ListUserDataCompletedEventHandler ListUserDataCompleted;
        
        /// <remarks/>
        public event GetUserDataCompletedEventHandler GetUserDataCompleted;
        
        /// <remarks/>
        public event SetUserDataCompletedEventHandler SetUserDataCompleted;
        
        /// <remarks/>
        public event ClearAlertsCompletedEventHandler ClearAlertsCompleted;
        
        /// <remarks/>
        public event GetAlertsCompletedEventHandler GetAlertsCompleted;
        
        /// <remarks/>
        public event GetPublicDataCompletedEventHandler GetPublicDataCompleted;
        
        /// <remarks/>
        public event ListPublicDataCompletedEventHandler ListPublicDataCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateLicenseKey", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateLicenseKey(string ClientID, string ClientPassword, int DaysExpires) {
            object[] results = this.Invoke("CreateLicenseKey", new object[] {
                        ClientID,
                        ClientPassword,
                        DaysExpires});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateLicenseKeyAsync(string ClientID, string ClientPassword, int DaysExpires) {
            this.CreateLicenseKeyAsync(ClientID, ClientPassword, DaysExpires, null);
        }
        
        /// <remarks/>
        public void CreateLicenseKeyAsync(string ClientID, string ClientPassword, int DaysExpires, object userState) {
            if ((this.CreateLicenseKeyOperationCompleted == null)) {
                this.CreateLicenseKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateLicenseKeyOperationCompleted);
            }
            this.InvokeAsync("CreateLicenseKey", new object[] {
                        ClientID,
                        ClientPassword,
                        DaysExpires}, this.CreateLicenseKeyOperationCompleted, userState);
        }
        
        private void OnCreateLicenseKeyOperationCompleted(object arg) {
            if ((this.CreateLicenseKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateLicenseKeyCompleted(this, new CreateLicenseKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ActivateLicenseKey", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ActivateLicenseKey(string ClientID, string ClientPassword, string LicenseKey) {
            object[] results = this.Invoke("ActivateLicenseKey", new object[] {
                        ClientID,
                        ClientPassword,
                        LicenseKey});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ActivateLicenseKeyAsync(string ClientID, string ClientPassword, string LicenseKey) {
            this.ActivateLicenseKeyAsync(ClientID, ClientPassword, LicenseKey, null);
        }
        
        /// <remarks/>
        public void ActivateLicenseKeyAsync(string ClientID, string ClientPassword, string LicenseKey, object userState) {
            if ((this.ActivateLicenseKeyOperationCompleted == null)) {
                this.ActivateLicenseKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnActivateLicenseKeyOperationCompleted);
            }
            this.InvokeAsync("ActivateLicenseKey", new object[] {
                        ClientID,
                        ClientPassword,
                        LicenseKey}, this.ActivateLicenseKeyOperationCompleted, userState);
        }
        
        private void OnActivateLicenseKeyOperationCompleted(object arg) {
            if ((this.ActivateLicenseKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ActivateLicenseKeyCompleted(this, new ActivateLicenseKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeincrementLicenseKey", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DeincrementLicenseKey(string ClientID, string ClientPassword, string LicenseKey) {
            object[] results = this.Invoke("DeincrementLicenseKey", new object[] {
                        ClientID,
                        ClientPassword,
                        LicenseKey});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DeincrementLicenseKeyAsync(string ClientID, string ClientPassword, string LicenseKey) {
            this.DeincrementLicenseKeyAsync(ClientID, ClientPassword, LicenseKey, null);
        }
        
        /// <remarks/>
        public void DeincrementLicenseKeyAsync(string ClientID, string ClientPassword, string LicenseKey, object userState) {
            if ((this.DeincrementLicenseKeyOperationCompleted == null)) {
                this.DeincrementLicenseKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeincrementLicenseKeyOperationCompleted);
            }
            this.InvokeAsync("DeincrementLicenseKey", new object[] {
                        ClientID,
                        ClientPassword,
                        LicenseKey}, this.DeincrementLicenseKeyOperationCompleted, userState);
        }
        
        private void OnDeincrementLicenseKeyOperationCompleted(object arg) {
            if ((this.DeincrementLicenseKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeincrementLicenseKeyCompleted(this, new DeincrementLicenseKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetActivationsRemaining", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetActivationsRemaining(string ClientID, string ClientPassword, string LicenseKey) {
            object[] results = this.Invoke("GetActivationsRemaining", new object[] {
                        ClientID,
                        ClientPassword,
                        LicenseKey});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetActivationsRemainingAsync(string ClientID, string ClientPassword, string LicenseKey) {
            this.GetActivationsRemainingAsync(ClientID, ClientPassword, LicenseKey, null);
        }
        
        /// <remarks/>
        public void GetActivationsRemainingAsync(string ClientID, string ClientPassword, string LicenseKey, object userState) {
            if ((this.GetActivationsRemainingOperationCompleted == null)) {
                this.GetActivationsRemainingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetActivationsRemainingOperationCompleted);
            }
            this.InvokeAsync("GetActivationsRemaining", new object[] {
                        ClientID,
                        ClientPassword,
                        LicenseKey}, this.GetActivationsRemainingOperationCompleted, userState);
        }
        
        private void OnGetActivationsRemainingOperationCompleted(object arg) {
            if ((this.GetActivationsRemainingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetActivationsRemainingCompleted(this, new GetActivationsRemainingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IsTrialMode", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsTrialMode(string ClientID, string ClientPassword, string LicenseKey) {
            object[] results = this.Invoke("IsTrialMode", new object[] {
                        ClientID,
                        ClientPassword,
                        LicenseKey});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsTrialModeAsync(string ClientID, string ClientPassword, string LicenseKey) {
            this.IsTrialModeAsync(ClientID, ClientPassword, LicenseKey, null);
        }
        
        /// <remarks/>
        public void IsTrialModeAsync(string ClientID, string ClientPassword, string LicenseKey, object userState) {
            if ((this.IsTrialModeOperationCompleted == null)) {
                this.IsTrialModeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsTrialModeOperationCompleted);
            }
            this.InvokeAsync("IsTrialMode", new object[] {
                        ClientID,
                        ClientPassword,
                        LicenseKey}, this.IsTrialModeOperationCompleted, userState);
        }
        
        private void OnIsTrialModeOperationCompleted(object arg) {
            if ((this.IsTrialModeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsTrialModeCompleted(this, new IsTrialModeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/MarkLicenseAsPaid", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool MarkLicenseAsPaid(string ClientID, string ClientPassword, string LicenseKey) {
            object[] results = this.Invoke("MarkLicenseAsPaid", new object[] {
                        ClientID,
                        ClientPassword,
                        LicenseKey});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void MarkLicenseAsPaidAsync(string ClientID, string ClientPassword, string LicenseKey) {
            this.MarkLicenseAsPaidAsync(ClientID, ClientPassword, LicenseKey, null);
        }
        
        /// <remarks/>
        public void MarkLicenseAsPaidAsync(string ClientID, string ClientPassword, string LicenseKey, object userState) {
            if ((this.MarkLicenseAsPaidOperationCompleted == null)) {
                this.MarkLicenseAsPaidOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMarkLicenseAsPaidOperationCompleted);
            }
            this.InvokeAsync("MarkLicenseAsPaid", new object[] {
                        ClientID,
                        ClientPassword,
                        LicenseKey}, this.MarkLicenseAsPaidOperationCompleted, userState);
        }
        
        private void OnMarkLicenseAsPaidOperationCompleted(object arg) {
            if ((this.MarkLicenseAsPaidCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MarkLicenseAsPaidCompleted(this, new MarkLicenseAsPaidCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ValidateLicenseKey", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ValidateLicenseKey(string ClientID, string ClientPassword, string LicenseKey) {
            object[] results = this.Invoke("ValidateLicenseKey", new object[] {
                        ClientID,
                        ClientPassword,
                        LicenseKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ValidateLicenseKeyAsync(string ClientID, string ClientPassword, string LicenseKey) {
            this.ValidateLicenseKeyAsync(ClientID, ClientPassword, LicenseKey, null);
        }
        
        /// <remarks/>
        public void ValidateLicenseKeyAsync(string ClientID, string ClientPassword, string LicenseKey, object userState) {
            if ((this.ValidateLicenseKeyOperationCompleted == null)) {
                this.ValidateLicenseKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateLicenseKeyOperationCompleted);
            }
            this.InvokeAsync("ValidateLicenseKey", new object[] {
                        ClientID,
                        ClientPassword,
                        LicenseKey}, this.ValidateLicenseKeyOperationCompleted, userState);
        }
        
        private void OnValidateLicenseKeyOperationCompleted(object arg) {
            if ((this.ValidateLicenseKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateLicenseKeyCompleted(this, new ValidateLicenseKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RemoveUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RemoveUser(string ClientID, string ClientPassword, string LicenseKey) {
            object[] results = this.Invoke("RemoveUser", new object[] {
                        ClientID,
                        ClientPassword,
                        LicenseKey});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveUserAsync(string ClientID, string ClientPassword, string LicenseKey) {
            this.RemoveUserAsync(ClientID, ClientPassword, LicenseKey, null);
        }
        
        /// <remarks/>
        public void RemoveUserAsync(string ClientID, string ClientPassword, string LicenseKey, object userState) {
            if ((this.RemoveUserOperationCompleted == null)) {
                this.RemoveUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveUserOperationCompleted);
            }
            this.InvokeAsync("RemoveUser", new object[] {
                        ClientID,
                        ClientPassword,
                        LicenseKey}, this.RemoveUserOperationCompleted, userState);
        }
        
        private void OnRemoveUserOperationCompleted(object arg) {
            if ((this.RemoveUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveUserCompleted(this, new RemoveUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ListUserData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object[] ListUserData(string ClientID, string ClientPassword, string LicenseKey) {
            object[] results = this.Invoke("ListUserData", new object[] {
                        ClientID,
                        ClientPassword,
                        LicenseKey});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void ListUserDataAsync(string ClientID, string ClientPassword, string LicenseKey) {
            this.ListUserDataAsync(ClientID, ClientPassword, LicenseKey, null);
        }
        
        /// <remarks/>
        public void ListUserDataAsync(string ClientID, string ClientPassword, string LicenseKey, object userState) {
            if ((this.ListUserDataOperationCompleted == null)) {
                this.ListUserDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnListUserDataOperationCompleted);
            }
            this.InvokeAsync("ListUserData", new object[] {
                        ClientID,
                        ClientPassword,
                        LicenseKey}, this.ListUserDataOperationCompleted, userState);
        }
        
        private void OnListUserDataOperationCompleted(object arg) {
            if ((this.ListUserDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ListUserDataCompleted(this, new ListUserDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUserData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetUserData(string ClientID, string ClientPassword, string LicenseKey, string DataKey) {
            object[] results = this.Invoke("GetUserData", new object[] {
                        ClientID,
                        ClientPassword,
                        LicenseKey,
                        DataKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserDataAsync(string ClientID, string ClientPassword, string LicenseKey, string DataKey) {
            this.GetUserDataAsync(ClientID, ClientPassword, LicenseKey, DataKey, null);
        }
        
        /// <remarks/>
        public void GetUserDataAsync(string ClientID, string ClientPassword, string LicenseKey, string DataKey, object userState) {
            if ((this.GetUserDataOperationCompleted == null)) {
                this.GetUserDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserDataOperationCompleted);
            }
            this.InvokeAsync("GetUserData", new object[] {
                        ClientID,
                        ClientPassword,
                        LicenseKey,
                        DataKey}, this.GetUserDataOperationCompleted, userState);
        }
        
        private void OnGetUserDataOperationCompleted(object arg) {
            if ((this.GetUserDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserDataCompleted(this, new GetUserDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetUserData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetUserData(string ClientID, string ClientPassword, string LicenseKey, string DataKey, string Data) {
            object[] results = this.Invoke("SetUserData", new object[] {
                        ClientID,
                        ClientPassword,
                        LicenseKey,
                        DataKey,
                        Data});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetUserDataAsync(string ClientID, string ClientPassword, string LicenseKey, string DataKey, string Data) {
            this.SetUserDataAsync(ClientID, ClientPassword, LicenseKey, DataKey, Data, null);
        }
        
        /// <remarks/>
        public void SetUserDataAsync(string ClientID, string ClientPassword, string LicenseKey, string DataKey, string Data, object userState) {
            if ((this.SetUserDataOperationCompleted == null)) {
                this.SetUserDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetUserDataOperationCompleted);
            }
            this.InvokeAsync("SetUserData", new object[] {
                        ClientID,
                        ClientPassword,
                        LicenseKey,
                        DataKey,
                        Data}, this.SetUserDataOperationCompleted, userState);
        }
        
        private void OnSetUserDataOperationCompleted(object arg) {
            if ((this.SetUserDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetUserDataCompleted(this, new SetUserDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ClearAlerts", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ClearAlerts(string ClientID, string ClientPassword, string LicenseKey) {
            object[] results = this.Invoke("ClearAlerts", new object[] {
                        ClientID,
                        ClientPassword,
                        LicenseKey});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ClearAlertsAsync(string ClientID, string ClientPassword, string LicenseKey) {
            this.ClearAlertsAsync(ClientID, ClientPassword, LicenseKey, null);
        }
        
        /// <remarks/>
        public void ClearAlertsAsync(string ClientID, string ClientPassword, string LicenseKey, object userState) {
            if ((this.ClearAlertsOperationCompleted == null)) {
                this.ClearAlertsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnClearAlertsOperationCompleted);
            }
            this.InvokeAsync("ClearAlerts", new object[] {
                        ClientID,
                        ClientPassword,
                        LicenseKey}, this.ClearAlertsOperationCompleted, userState);
        }
        
        private void OnClearAlertsOperationCompleted(object arg) {
            if ((this.ClearAlertsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ClearAlertsCompleted(this, new ClearAlertsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAlerts", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetAlerts(string ClientID, string ClientPassword, string LicenseKey) {
            object[] results = this.Invoke("GetAlerts", new object[] {
                        ClientID,
                        ClientPassword,
                        LicenseKey});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetAlertsAsync(string ClientID, string ClientPassword, string LicenseKey) {
            this.GetAlertsAsync(ClientID, ClientPassword, LicenseKey, null);
        }
        
        /// <remarks/>
        public void GetAlertsAsync(string ClientID, string ClientPassword, string LicenseKey, object userState) {
            if ((this.GetAlertsOperationCompleted == null)) {
                this.GetAlertsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAlertsOperationCompleted);
            }
            this.InvokeAsync("GetAlerts", new object[] {
                        ClientID,
                        ClientPassword,
                        LicenseKey}, this.GetAlertsOperationCompleted, userState);
        }
        
        private void OnGetAlertsOperationCompleted(object arg) {
            if ((this.GetAlertsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAlertsCompleted(this, new GetAlertsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPublicData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPublicData(string DataKey) {
            object[] results = this.Invoke("GetPublicData", new object[] {
                        DataKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPublicDataAsync(string DataKey) {
            this.GetPublicDataAsync(DataKey, null);
        }
        
        /// <remarks/>
        public void GetPublicDataAsync(string DataKey, object userState) {
            if ((this.GetPublicDataOperationCompleted == null)) {
                this.GetPublicDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPublicDataOperationCompleted);
            }
            this.InvokeAsync("GetPublicData", new object[] {
                        DataKey}, this.GetPublicDataOperationCompleted, userState);
        }
        
        private void OnGetPublicDataOperationCompleted(object arg) {
            if ((this.GetPublicDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPublicDataCompleted(this, new GetPublicDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ListPublicData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object[] ListPublicData(string Contains) {
            object[] results = this.Invoke("ListPublicData", new object[] {
                        Contains});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void ListPublicDataAsync(string Contains) {
            this.ListPublicDataAsync(Contains, null);
        }
        
        /// <remarks/>
        public void ListPublicDataAsync(string Contains, object userState) {
            if ((this.ListPublicDataOperationCompleted == null)) {
                this.ListPublicDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnListPublicDataOperationCompleted);
            }
            this.InvokeAsync("ListPublicData", new object[] {
                        Contains}, this.ListPublicDataOperationCompleted, userState);
        }
        
        private void OnListPublicDataOperationCompleted(object arg) {
            if ((this.ListPublicDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ListPublicDataCompleted(this, new ListPublicDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void CreateLicenseKeyCompletedEventHandler(object sender, CreateLicenseKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateLicenseKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateLicenseKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void ActivateLicenseKeyCompletedEventHandler(object sender, ActivateLicenseKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ActivateLicenseKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ActivateLicenseKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DeincrementLicenseKeyCompletedEventHandler(object sender, DeincrementLicenseKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeincrementLicenseKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeincrementLicenseKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetActivationsRemainingCompletedEventHandler(object sender, GetActivationsRemainingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetActivationsRemainingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetActivationsRemainingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void IsTrialModeCompletedEventHandler(object sender, IsTrialModeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsTrialModeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsTrialModeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void MarkLicenseAsPaidCompletedEventHandler(object sender, MarkLicenseAsPaidCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MarkLicenseAsPaidCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MarkLicenseAsPaidCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void ValidateLicenseKeyCompletedEventHandler(object sender, ValidateLicenseKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateLicenseKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidateLicenseKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void RemoveUserCompletedEventHandler(object sender, RemoveUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void ListUserDataCompletedEventHandler(object sender, ListUserDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ListUserDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ListUserDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetUserDataCompletedEventHandler(object sender, GetUserDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SetUserDataCompletedEventHandler(object sender, SetUserDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetUserDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetUserDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void ClearAlertsCompletedEventHandler(object sender, ClearAlertsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ClearAlertsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ClearAlertsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAlertsCompletedEventHandler(object sender, GetAlertsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAlertsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAlertsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetPublicDataCompletedEventHandler(object sender, GetPublicDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPublicDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPublicDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void ListPublicDataCompletedEventHandler(object sender, ListPublicDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ListPublicDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ListPublicDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591