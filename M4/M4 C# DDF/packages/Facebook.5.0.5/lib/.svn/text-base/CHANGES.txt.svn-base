FACEBOOK C# SDK CHANGE LIST
---------------------------

SDK consumers : developers using this SDK.
SDK developers: developers writing this SDK.

=========================================================================
v5.0.50 (RTW)
=========================================================================
1. Renamed v5.0.46 BETA to RTW.
2. fixed issu #5887
   throws non-generic webexception for batch request errors due to different 
   json error message from fb

=========================================================================
v5.0.46 (BETA)
=========================================================================
1. properties of ActionFilterAttribute in Facebook.Web.Mvc marked as virtual (issue #5873)
2. DELETE fix for Silverlight (issue #5885)
3. UTF32 surrogate pair bug fix in SimpleJson (issue #5878) updated to SimpleJson v0.7.0

=========================================================================
v5.0.45 (BETA)
=========================================================================
1. support uploading video using graph api.

   If the path ends with "/videos" and is a POST, it uses 
   https://graph-video.facebook.com instead of https://graph.facebook.com
   More details on this can be found at https://developers.facebook.com/blog/post/515/

	dynamic parameters = new ExpandoObject();
	parameters.title = "video title";
	parameters.description = "video description";
	parameters.file = new FacebookMediaObject 
			{ 
				ContentType = "video/3gpp", 
				FileName = "do-beer-not-drugs.3gp" 
			}
			.SetValue(File.ReadAllBytes(@"C:\do-beer-not-drugs.3gp"));
	dynamic result = fb.Post("/me/videos", parameters);
2. fixed issue #5882
	ParseQueryParametersToDictionary now decodes values that are part of querystring.
3. parallel build with rake
4. fixed issue #5883
	Batch Request NullReferenceException when omit_response_on_success = true 

=========================================================================
v5.0.40 (RTW)
=========================================================================

renamed v5.0.35 (BETA) to v5.0.40 (RTW)

=========================================================================
v5.0.35 (BETA)
=========================================================================

1. FacebookMediaObject.SetValue returns FacebookMediaObject instead of void.
2. Support for multiple FacebookMediaObjects in one request.
3. Marked methods/properties in FacebookClient, FacebookOAuthClient and 
   FacebookOAuthResult as virtual methods for easier unit testing.
4. Removed 'sealed' from FacebookOAuthResult and added a protected empty ctor.
5. Added in FacebookOAuthClient
	a. public virtual FacebookOAuthResult ParseResult(string uriString);
	b. public virtual FacebookOAuthResult ParseResult(Uri uri);
	c. public virtual bool TryParseResult(string uriString, out FacebookOAuthResult result);
	d. public virtual bool TryParseResult(Uri uri, out FacebookOAuthResult result);
6. official dropped support for Cassini (Visual Studio inbuilt Web Server).
   use either IIS or IIS express.
7. updated SimpleJson to v0.6
	a. fixed serialization when an object overrides ToString method to serialize itself. (v0.1.3)
	b. support for deserialize list of poco (v0.5)
	c. support for deserializing to IDictionary<string,T>  (v0.6)	
    

=========================================================================
v5.0.26 (RTW)
=========================================================================

1. Bug fix for silverlight when using Delete method.
2. Bug fix for PostAsync methods when parameter is a dynamic object.
3. Bug fix for ParseUserIdFromAccessToken when userid from accessToken 
   has 2 or more hyphens in idParts (issue #5874)

=========================================================================
v5.0.25 (RTW)
=========================================================================

1. Renamed RC1 to RTW

=========================================================================
v5.0.11 (RC1)
=========================================================================

1. Updated SimpleJson to v0.1.2 (supports Dictionary<string,string>)
2. bug fix for VB dynamic objects for Post. and optimizations for Post
   when parameter passed is object.

=========================================================================
v5.0.10 (RC)
=========================================================================

1. Use SimpleJson (http://simplejson.codeplex.com) instead of Newtonsoft.Json

=========================================================================
v5.0.9 (BETA)
=========================================================================

1. bug fix for WP7/SL4 FacebookMediaObject upload
2. added support for creating NuGet packages for SymbolSource in build script.

=========================================================================
v5.0.8 (BETA)
=========================================================================

1. support for Batch requests.
	a. Facebook.FacebookBatchParameter
	b. added Batch and BatchAsync methods in FacebookClient
		public object Batch(params FacebookBatchParameter[] batchParameters);
		public void BatchAsync(FacebookBatchParameter[] batchParameters, object userToken);
		public void BatchAsync(FacebookBatchParameter[] batchParameters);

=========================================================================
v5.0.7 (BETA)
=========================================================================

1. added extension methods to generate CanvasPageUrl and CanvasUrl for webforms
	a. public static string ResolveCanvasPageUrl(this Control control, string relativeUrl)
	a. public static string ResolveCanvasUrl(this Control control, string relativeUrl);

2. marked FacebookApp as obsolete.

=========================================================================
v5.0.6 (BETA)
=========================================================================

(support for https and beta.facebook.com)

1. Facebook.Web.FacebookWebContext
	Added in FacebookWebContext.
		a. public bool IsSecureConnection { get; }

2. Facebook.Web.CanvasUrlBuilder
	
	Added in CanvasUrlBuilder
		a. public bool IsSecureConnection { get; set; }
		b. public bool UseFacebookBeta { get; set; }
	(NOTE: The SDK sets the IsSecureConnection and UseFacebookBeta depending on the HttpRequest.
		   You can override these two properties by using the setter.)
		   
3. CSASPNETSecureCanvas sample

4. Removed Facebook.Web.CanvasContext (features moved to FacebookWebContext)

5. added FacebookWebContext.SignedRequest


=========================================================================
v5.0.4 and v5.0.5 (BETA)
=========================================================================
1. all setter properties in FacebookSession changed to private.

2. removed FacebookClientBase (features moved to FacebookClient)

3. added Perms in FacebookAuthorizeAttributeBase to make it easer for sdk consumers to migrate from v4.
   (user Permissions instead)

4. FacebookApp contains the old callback methods while FacebookClient includes event driven programming model.
	(FacebookApp is used for compatibility for v4).
   (NOTE: FOR THOSE MIGRATION FROM v5.0.3 or v4.x make sure to change your existing FacebookClient to FacebookApp. This is a major breaking change.)

5. FacebookOAuthClient includes some additoinal static helper methods to make generating login url easier.
	
	NOTE: 	if the redirectUri is null, it defaults to http://www.facebook.com/connect/login_success.html
		by default the response_type=code for security reasons and display=popup (for wp7 builds display=touch)
	a. public static Uri GetLoginUrl(string appId, Uri redirectUri, string[] extendedPermissions, IDictionary<string, object> loginParameters);
	b. public static Uri GetLoginUrl(string appId, Uri redirectUri, string[] extendedPermissions, bool logout, IDictionary<string, object> loginParameters);
	c. public static Uri GetLoginUrl(string appId, Uri redirectUri, string[] extendedPermissions);
	d. public static Uri GetLoginUrl(string appId, Uri redirectUri);

6. Moved FacebookApp from Facebook.dll for net 3.5 and net 4.0 projects only to Facebook.Web.dll to maintain compatibility with v4.
   (FacebookApp in Facebook.dll is present only for SL4 and WP7 builds)

7. Removed helper methods for DateTime from FacebookUtils and moved to Facebook.DateTimeConvert public class for compatibility with v4.

9. Facebook.FacebookUtils changed to internal from public.

9. added Facebook.DefaultFacebookApplication with EditorBrowsableState.Never attribute

10. (internal/private methods visible to SDK developers)
	a. added IWebClient, webclientWrapper, WebExceptionWrapper, UploadDataCompletedEventArgsWrapper, DownloadDataCompletedEventArgsWrapper to be able to write unit testable codes for FacebookClient and FacebookOAuthclient by mocking the WebClient.
	b. FacebookApp internally makes use of FacebookClient.

11. added Facebook.IFacebookSettings and marked as obsolete to maintain compatibility with v4. (use Facebook.IFacebookApplication instead)

12. added Facebook.IJsonSerializer for serializing and deserializing JSON objects/strings.

13. Facebook.JsonSerializer made public from internal.

14. Facebook.JsonSerializer contains additional methods/properties which allows to get and change the default JSON serializer use by the SDK.
	a. public static IJsonSerializer Current { get; }
	b. public static void SetJsonSerializer(IJsonSerializer jsonSerializer);
	c. public static void SetJsonSerializer(Func<IJsonSerializer> getJsonSerializer);

15. (internal/private methods visible to SDK developers)
	a. private class Facebook.JsonSerializer.JsonNetSerializer;  (default serializer is Newtonsoft.Json)

16. FacebookApp (for net 3.5 and .net 4.0 projects) in Facebook.Web.dll behaves similar to that of v4 which allows easier migrations from v4.

17. FacebookApp contains Session and SignedRequest properties to easily access the current facebook session and the current signed request.

18. renamed Authorizer to FacebookWebAuthorizer.

19. added FacebookWebClient (derives from FacebookClient but is meant to be used by web applications)

20. added FacebookWebContext

21. added FacebookCanvasContext

22. 
	a. removed FacebookWebUtils
	b. moved subscription related helper methods to inernal class FacebookSubscriptionVerifier
	

=========================================================================
v5.0.3 (BETA)
=========================================================================
1. added in FacebookWebUtils

	(internal/private methods visible to SDK developers)
		a. internal static bool VerifyPostSubscription(HttpRequestBase request, string secret, string jsonString, out string errorMessage);
		b. internal static bool VerifyGetSubscription(HttpRequestBase request, string verifyToken, out string errorMessage);

2. moved FacebookSession and FacebookSignedRequest to Facebook.Web

=========================================================================
v5.0.2 (BETA)
=========================================================================
1. added method to convert object to IDictionary<string,object> in FacebookUtils
	a. internal static IDictionary<string, object> ToDictionary(object parameters);

2. added overload methods in FacebookClientBase to set object as parameter for Post
	a. public object Post(object parameters);
	b. public object Post(string path, object parameters);
	c. public void PostAsync(object parameters, FacebookAsyncCallback callback, object state);
	d. public void PostAsync(object parameters, FacebookAsyncCallback callback);
	e. public void PostAsync(string path, object parameters, FacebookAsyncCallback callback, object state);
	f. public void PostAsync(string path, object parameters, FacebookAsyncCallback callback);

3. added support for Facebook subscriptions - Facebook.Web.FacebookSubscriptionsHttpHandler

4. exposed the original property of Facebook Signed Request as Data.
   This allows the sdk consumers to access any value of the SignedRequest by accessing 
   the Data property.

   A new sample called CSASPNETWebsiteRegistrationForm contains an example on how to use it.

   This enables the sdk consumers to write application that use Registration form or any new
   value that will be added by Facebook in the signed request.
	
5. removed FacebookSignedRequestUser

6. updated xunit to v1.7

=========================================================================
v5.0.1 (BETA)
=========================================================================
1. Renamed FacebookApp to FacebookClient

2. Renamed FacebookAppBase to FacebookClientBase

3. added helper methods to get the application access token in FacebookOAuthClient
	a. public object GetApplicationAccessToken();
	b. public void GetApplicationAccessTokenAsync(FacebookAsyncCallback callback, object state);
	c. public void GetApplicationAccessTokenAsync(FacebookAsyncCallback callback);

4. removed obsolete Fql extension methods.

5. moved Query extension methods to FacebookClient.

6. async versions of Query methods.
    a. public void QueryAsync(string fql, FacebookAsyncCallback callback, object state);
	b. public void QueryAsync(string fql, FacebookAsyncCallback callback);
	c. public void QueryAsync(string[] fql, FacebookAsyncCallback callback, object state);
	d. public void QueryAsync(string[] fql, FacebookAsyncCallback callback);

=========================================================================
v5.0.0 (BETA)
=========================================================================
1. added new 'FacebookUtils' class which contains all the helper methods.

	(public methods visible to SDK consumers)

	  Date and Time helper methods:
		a. public static DateTime Epoch { get; }
		b. public static DateTime FromUnixTime(double unixTime);
		c. public static DateTime FromUnixTime(string unixTime);
		d. public static double ToUnixTime(DateTime dateTime);
		e. public static double ToUnixTime(DateTimeOffset dateTime);
		f. public static string ToIso8601FormattedDateTime(DateTime dateTime);
		g. public static DateTime FromIso8601FormattedDateTime(string iso8601DateTime);

	(internal/private methods visible to SDK developers)
		
	  Dictionary helper methods:
		a. internal static IDictionary<string, object> Merge(IDictionary<string, object> first, IDictionary<string, object> second);
		b. internal static string ToJsonQueryString(IDictionary<string, object> dictionary);
		c. internal static string ToJsonQueryString(IDictionary<string, string> dictionary);
		d. internal static string ToJsonQueryString(System.Collections.Specialized.NameValueCollection collection); 
		   (for non-sliverlight builds only)
	  
	  String helper methods:
		a. internal static string ConvertToString(HttpMethod httpMethod);

	  Html Encoding/Decoding helper methods:
		a. internal static string HtmlDecode(string input);
		b. internal static string HtmlEncode(string input);

	  Url Encoding/Decoding and misc helper methods:
		a. internal static string UrlDecode(string input);
		b. internal static string UrlEncode(string input);
		c. internal static string RemoveTrailingSlash(string url);
		d. internal static Uri RemoveTrailingSlash(Uri url);

	  Base64 Url Encoding/Decoding helper methods:
		a. internal static byte[] Base64UrlDecode(string base64UrlSafeString);
		b. internal static string Base64UrlEncode(byte[] input);

	  QueryString helper methods:
		a. internal static IDictionary<string, object> ParseUrlQueryString(string query)

	  Encryption/Decryption helper methods:
		a. internal static byte[] ComputeHmacSha256Hash(byte[] data, byte[] key);
		   (for non-sliverlight builds only)
		b. internal static string DecryptAes256CBCNoPadding(byte[] encryptedData, byte[] key, byte[] iv);
		   (for non-sliverlight builds only)
		c. internal static byte[] ComputerMd5Hash(byte[] data);
		   (for non-sliverlight builds only)

2. FacebookSignedRequest.Parse
	(for non-sliverlight builds only)
	This method is now capable of parsing both old and new encrypted signed requests.
	http://developers.facebook.com/docs/authentication/canvas
	http://developers.facebook.com/docs/authentication/canvas/encryption_proposal

	There are overload for the Parse method.
	For the old one this overload would most likely be used.
		public static FacebookSignedRequest Parse(string secret, string signedRequestValue);

	For the new one this overload has to be used.
		public static FacebookSignedRequest Parse(string secret, string signedRequestValue, int maxAge);

	There is also a third overload which is marked as internal and used for unit testing only.
		internal static FacebookSignedRequest Parse(string secret, string signedRequestValue, int maxAge, double currentTime);

3. Facebook.dll InternalsVisibleTo Facebook.Web and Facebook.Web.Mvc

4. FacebookWebUtils added to Facebook.Web.dll

	(internal/private methods visible to SDK developers)

		a. internal static FacebookSignedRequest GetSignedRequest(string appSecret, HttpRequestBase httpRequest);
		b. internal static string GetSessionCookieName(string appId);
		c. internal static FacebookSession GetSession(string appId, string appSecret, HttpRequestBase httpRequest);

	  Extended Permission helper methods
		a. internal static string[] HasPermissions(string appId, string appSecret, long userId, string[] permissions);
		b. internal static bool HasPermission(string appId, string appSecret, long userId, string permission);

5. FacebookSession
	
   (internal/private methods visible to SDK developers)

		a. internal static string GenerateSessionSignature(string secret, IDictionary<string, object> dictionary);
		   (for non-sliverlight builds only)
		b. internal static FacebookSession ParseCookieValue(string appSecret, string cookieValue);
		   (for non-sliverlight builds only)

6. removed ICanvasSettings and IFacebookSettings.
   added IFacebookApplication

   ICanvasSettings and IFacebookSettings have been merged to IFacebookApplication.
   IFacebookApplication contains the most of the settings of the Facebook Application
   such as AppId, AppSecret, CanvasPage and CanvasUrl.

7. removed CanvasConfigurationSettings
   FacebookConfigurationSection derives from IFacebookApplication hence contains configurations
   from both ICanvasSettings and IFacebookSettings which was in v4.

8. Migrated Facebook.dll to client only profile.

9. IOAuthClientAuthorizer and FacebookOAuthClientAuthorizer
	a. added Uri GetLoginUrl(IDictionary<string, object> parameters);
	b. added Uri GetLogoutUrl(IDictionary<string, object> parameters);

	Note: by default the redirect uri is http://www.facebook.com/connect/login_success.html
		  for windows phone 7 builds (only) the display mode is "touch" by default.

	All library uses the new Facebook OAuth dialog (http://developers.facebook.com/docs/reference/dialogs/oauth)
	for authorization.

10. FacebookAuthenticationResult can now parse urls that does not start with 
    http://www.facebook.com/connect/login_success.html

11. added FacebookContext
	This is used to get the current facebook application settings.
	It can be set using the web.config or app.config files as well as programmatically by calling
	FacebookContext.SetApplication method.
	
12. Renamed FacebookOAuthClientAuthorizer to FacebookOAuthClient, Renamed FacebookAuthenticationResult to 
	FacebookOAuthResult. Removed IFacebookOAuthClientAuthorizer interface.
	
13. Renamed FacebookApp to FacebookClient

14. Renamed FacebookAppBase to FacebookClientBase
