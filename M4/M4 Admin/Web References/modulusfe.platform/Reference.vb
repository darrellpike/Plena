'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18052
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18052.
'
Namespace modulusfe.platform
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="ServiceSoap", [Namespace]:="http://tempuri.org/"),  _
     System.Xml.Serialization.XmlIncludeAttribute(GetType(Object()))>  _
    Partial Public Class Service
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private ListAllUserKeysOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateLicenseKeyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ActivateLicenseKeyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeincrementLicenseKeyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetActivationsRemainingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private IsTrialModeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MarkLicenseAsPaidOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ValidateLicenseKeyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RemoveUserOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ListUserDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUserDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetUserDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ClearAlertsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAlertsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPublicDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ListPublicDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.M4Admin.My.MySettings.Default.M4Admin_modulusfe_platform_Service
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event ListAllUserKeysCompleted As ListAllUserKeysCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateLicenseKeyCompleted As CreateLicenseKeyCompletedEventHandler
        
        '''<remarks/>
        Public Event ActivateLicenseKeyCompleted As ActivateLicenseKeyCompletedEventHandler
        
        '''<remarks/>
        Public Event DeincrementLicenseKeyCompleted As DeincrementLicenseKeyCompletedEventHandler
        
        '''<remarks/>
        Public Event GetActivationsRemainingCompleted As GetActivationsRemainingCompletedEventHandler
        
        '''<remarks/>
        Public Event IsTrialModeCompleted As IsTrialModeCompletedEventHandler
        
        '''<remarks/>
        Public Event MarkLicenseAsPaidCompleted As MarkLicenseAsPaidCompletedEventHandler
        
        '''<remarks/>
        Public Event ValidateLicenseKeyCompleted As ValidateLicenseKeyCompletedEventHandler
        
        '''<remarks/>
        Public Event RemoveUserCompleted As RemoveUserCompletedEventHandler
        
        '''<remarks/>
        Public Event ListUserDataCompleted As ListUserDataCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUserDataCompleted As GetUserDataCompletedEventHandler
        
        '''<remarks/>
        Public Event SetUserDataCompleted As SetUserDataCompletedEventHandler
        
        '''<remarks/>
        Public Event ClearAlertsCompleted As ClearAlertsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAlertsCompleted As GetAlertsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPublicDataCompleted As GetPublicDataCompletedEventHandler
        
        '''<remarks/>
        Public Event ListPublicDataCompleted As ListPublicDataCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ListAllUserKeys", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ListAllUserKeys(ByVal ClientID As String, ByVal ClientPassword As String) As Object()
            Dim results() As Object = Me.Invoke("ListAllUserKeys", New Object() {ClientID, ClientPassword})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub ListAllUserKeysAsync(ByVal ClientID As String, ByVal ClientPassword As String)
            Me.ListAllUserKeysAsync(ClientID, ClientPassword, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ListAllUserKeysAsync(ByVal ClientID As String, ByVal ClientPassword As String, ByVal userState As Object)
            If (Me.ListAllUserKeysOperationCompleted Is Nothing) Then
                Me.ListAllUserKeysOperationCompleted = AddressOf Me.OnListAllUserKeysOperationCompleted
            End If
            Me.InvokeAsync("ListAllUserKeys", New Object() {ClientID, ClientPassword}, Me.ListAllUserKeysOperationCompleted, userState)
        End Sub
        
        Private Sub OnListAllUserKeysOperationCompleted(ByVal arg As Object)
            If (Not (Me.ListAllUserKeysCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ListAllUserKeysCompleted(Me, New ListAllUserKeysCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateLicenseKey", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateLicenseKey(ByVal ClientID As String, ByVal ClientPassword As String, ByVal DaysExpires As Integer) As String
            Dim results() As Object = Me.Invoke("CreateLicenseKey", New Object() {ClientID, ClientPassword, DaysExpires})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateLicenseKeyAsync(ByVal ClientID As String, ByVal ClientPassword As String, ByVal DaysExpires As Integer)
            Me.CreateLicenseKeyAsync(ClientID, ClientPassword, DaysExpires, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateLicenseKeyAsync(ByVal ClientID As String, ByVal ClientPassword As String, ByVal DaysExpires As Integer, ByVal userState As Object)
            If (Me.CreateLicenseKeyOperationCompleted Is Nothing) Then
                Me.CreateLicenseKeyOperationCompleted = AddressOf Me.OnCreateLicenseKeyOperationCompleted
            End If
            Me.InvokeAsync("CreateLicenseKey", New Object() {ClientID, ClientPassword, DaysExpires}, Me.CreateLicenseKeyOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateLicenseKeyOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateLicenseKeyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateLicenseKeyCompleted(Me, New CreateLicenseKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ActivateLicenseKey", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ActivateLicenseKey(ByVal ClientID As String, ByVal ClientPassword As String, ByVal LicenseKey As String) As Boolean
            Dim results() As Object = Me.Invoke("ActivateLicenseKey", New Object() {ClientID, ClientPassword, LicenseKey})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ActivateLicenseKeyAsync(ByVal ClientID As String, ByVal ClientPassword As String, ByVal LicenseKey As String)
            Me.ActivateLicenseKeyAsync(ClientID, ClientPassword, LicenseKey, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ActivateLicenseKeyAsync(ByVal ClientID As String, ByVal ClientPassword As String, ByVal LicenseKey As String, ByVal userState As Object)
            If (Me.ActivateLicenseKeyOperationCompleted Is Nothing) Then
                Me.ActivateLicenseKeyOperationCompleted = AddressOf Me.OnActivateLicenseKeyOperationCompleted
            End If
            Me.InvokeAsync("ActivateLicenseKey", New Object() {ClientID, ClientPassword, LicenseKey}, Me.ActivateLicenseKeyOperationCompleted, userState)
        End Sub
        
        Private Sub OnActivateLicenseKeyOperationCompleted(ByVal arg As Object)
            If (Not (Me.ActivateLicenseKeyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ActivateLicenseKeyCompleted(Me, New ActivateLicenseKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeincrementLicenseKey", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeincrementLicenseKey(ByVal ClientID As String, ByVal ClientPassword As String, ByVal LicenseKey As String) As Boolean
            Dim results() As Object = Me.Invoke("DeincrementLicenseKey", New Object() {ClientID, ClientPassword, LicenseKey})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeincrementLicenseKeyAsync(ByVal ClientID As String, ByVal ClientPassword As String, ByVal LicenseKey As String)
            Me.DeincrementLicenseKeyAsync(ClientID, ClientPassword, LicenseKey, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeincrementLicenseKeyAsync(ByVal ClientID As String, ByVal ClientPassword As String, ByVal LicenseKey As String, ByVal userState As Object)
            If (Me.DeincrementLicenseKeyOperationCompleted Is Nothing) Then
                Me.DeincrementLicenseKeyOperationCompleted = AddressOf Me.OnDeincrementLicenseKeyOperationCompleted
            End If
            Me.InvokeAsync("DeincrementLicenseKey", New Object() {ClientID, ClientPassword, LicenseKey}, Me.DeincrementLicenseKeyOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeincrementLicenseKeyOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeincrementLicenseKeyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeincrementLicenseKeyCompleted(Me, New DeincrementLicenseKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetActivationsRemaining", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetActivationsRemaining(ByVal ClientID As String, ByVal ClientPassword As String, ByVal LicenseKey As String) As Integer
            Dim results() As Object = Me.Invoke("GetActivationsRemaining", New Object() {ClientID, ClientPassword, LicenseKey})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetActivationsRemainingAsync(ByVal ClientID As String, ByVal ClientPassword As String, ByVal LicenseKey As String)
            Me.GetActivationsRemainingAsync(ClientID, ClientPassword, LicenseKey, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetActivationsRemainingAsync(ByVal ClientID As String, ByVal ClientPassword As String, ByVal LicenseKey As String, ByVal userState As Object)
            If (Me.GetActivationsRemainingOperationCompleted Is Nothing) Then
                Me.GetActivationsRemainingOperationCompleted = AddressOf Me.OnGetActivationsRemainingOperationCompleted
            End If
            Me.InvokeAsync("GetActivationsRemaining", New Object() {ClientID, ClientPassword, LicenseKey}, Me.GetActivationsRemainingOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetActivationsRemainingOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetActivationsRemainingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetActivationsRemainingCompleted(Me, New GetActivationsRemainingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IsTrialMode", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function IsTrialMode(ByVal ClientID As String, ByVal ClientPassword As String, ByVal LicenseKey As String) As Boolean
            Dim results() As Object = Me.Invoke("IsTrialMode", New Object() {ClientID, ClientPassword, LicenseKey})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IsTrialModeAsync(ByVal ClientID As String, ByVal ClientPassword As String, ByVal LicenseKey As String)
            Me.IsTrialModeAsync(ClientID, ClientPassword, LicenseKey, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IsTrialModeAsync(ByVal ClientID As String, ByVal ClientPassword As String, ByVal LicenseKey As String, ByVal userState As Object)
            If (Me.IsTrialModeOperationCompleted Is Nothing) Then
                Me.IsTrialModeOperationCompleted = AddressOf Me.OnIsTrialModeOperationCompleted
            End If
            Me.InvokeAsync("IsTrialMode", New Object() {ClientID, ClientPassword, LicenseKey}, Me.IsTrialModeOperationCompleted, userState)
        End Sub
        
        Private Sub OnIsTrialModeOperationCompleted(ByVal arg As Object)
            If (Not (Me.IsTrialModeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IsTrialModeCompleted(Me, New IsTrialModeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/MarkLicenseAsPaid", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function MarkLicenseAsPaid(ByVal ClientID As String, ByVal ClientPassword As String, ByVal LicenseKey As String) As Boolean
            Dim results() As Object = Me.Invoke("MarkLicenseAsPaid", New Object() {ClientID, ClientPassword, LicenseKey})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub MarkLicenseAsPaidAsync(ByVal ClientID As String, ByVal ClientPassword As String, ByVal LicenseKey As String)
            Me.MarkLicenseAsPaidAsync(ClientID, ClientPassword, LicenseKey, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MarkLicenseAsPaidAsync(ByVal ClientID As String, ByVal ClientPassword As String, ByVal LicenseKey As String, ByVal userState As Object)
            If (Me.MarkLicenseAsPaidOperationCompleted Is Nothing) Then
                Me.MarkLicenseAsPaidOperationCompleted = AddressOf Me.OnMarkLicenseAsPaidOperationCompleted
            End If
            Me.InvokeAsync("MarkLicenseAsPaid", New Object() {ClientID, ClientPassword, LicenseKey}, Me.MarkLicenseAsPaidOperationCompleted, userState)
        End Sub
        
        Private Sub OnMarkLicenseAsPaidOperationCompleted(ByVal arg As Object)
            If (Not (Me.MarkLicenseAsPaidCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MarkLicenseAsPaidCompleted(Me, New MarkLicenseAsPaidCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ValidateLicenseKey", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ValidateLicenseKey(ByVal ClientID As String, ByVal ClientPassword As String, ByVal LicenseKey As String) As String
            Dim results() As Object = Me.Invoke("ValidateLicenseKey", New Object() {ClientID, ClientPassword, LicenseKey})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ValidateLicenseKeyAsync(ByVal ClientID As String, ByVal ClientPassword As String, ByVal LicenseKey As String)
            Me.ValidateLicenseKeyAsync(ClientID, ClientPassword, LicenseKey, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ValidateLicenseKeyAsync(ByVal ClientID As String, ByVal ClientPassword As String, ByVal LicenseKey As String, ByVal userState As Object)
            If (Me.ValidateLicenseKeyOperationCompleted Is Nothing) Then
                Me.ValidateLicenseKeyOperationCompleted = AddressOf Me.OnValidateLicenseKeyOperationCompleted
            End If
            Me.InvokeAsync("ValidateLicenseKey", New Object() {ClientID, ClientPassword, LicenseKey}, Me.ValidateLicenseKeyOperationCompleted, userState)
        End Sub
        
        Private Sub OnValidateLicenseKeyOperationCompleted(ByVal arg As Object)
            If (Not (Me.ValidateLicenseKeyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ValidateLicenseKeyCompleted(Me, New ValidateLicenseKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RemoveUser", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RemoveUser(ByVal ClientID As String, ByVal ClientPassword As String, ByVal LicenseKey As String) As Boolean
            Dim results() As Object = Me.Invoke("RemoveUser", New Object() {ClientID, ClientPassword, LicenseKey})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RemoveUserAsync(ByVal ClientID As String, ByVal ClientPassword As String, ByVal LicenseKey As String)
            Me.RemoveUserAsync(ClientID, ClientPassword, LicenseKey, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RemoveUserAsync(ByVal ClientID As String, ByVal ClientPassword As String, ByVal LicenseKey As String, ByVal userState As Object)
            If (Me.RemoveUserOperationCompleted Is Nothing) Then
                Me.RemoveUserOperationCompleted = AddressOf Me.OnRemoveUserOperationCompleted
            End If
            Me.InvokeAsync("RemoveUser", New Object() {ClientID, ClientPassword, LicenseKey}, Me.RemoveUserOperationCompleted, userState)
        End Sub
        
        Private Sub OnRemoveUserOperationCompleted(ByVal arg As Object)
            If (Not (Me.RemoveUserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RemoveUserCompleted(Me, New RemoveUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ListUserData", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ListUserData(ByVal ClientID As String, ByVal ClientPassword As String, ByVal LicenseKey As String) As Object()
            Dim results() As Object = Me.Invoke("ListUserData", New Object() {ClientID, ClientPassword, LicenseKey})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub ListUserDataAsync(ByVal ClientID As String, ByVal ClientPassword As String, ByVal LicenseKey As String)
            Me.ListUserDataAsync(ClientID, ClientPassword, LicenseKey, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ListUserDataAsync(ByVal ClientID As String, ByVal ClientPassword As String, ByVal LicenseKey As String, ByVal userState As Object)
            If (Me.ListUserDataOperationCompleted Is Nothing) Then
                Me.ListUserDataOperationCompleted = AddressOf Me.OnListUserDataOperationCompleted
            End If
            Me.InvokeAsync("ListUserData", New Object() {ClientID, ClientPassword, LicenseKey}, Me.ListUserDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnListUserDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.ListUserDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ListUserDataCompleted(Me, New ListUserDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUserData", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUserData(ByVal ClientID As String, ByVal ClientPassword As String, ByVal LicenseKey As String, ByVal DataKey As String) As String
            Dim results() As Object = Me.Invoke("GetUserData", New Object() {ClientID, ClientPassword, LicenseKey, DataKey})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUserDataAsync(ByVal ClientID As String, ByVal ClientPassword As String, ByVal LicenseKey As String, ByVal DataKey As String)
            Me.GetUserDataAsync(ClientID, ClientPassword, LicenseKey, DataKey, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUserDataAsync(ByVal ClientID As String, ByVal ClientPassword As String, ByVal LicenseKey As String, ByVal DataKey As String, ByVal userState As Object)
            If (Me.GetUserDataOperationCompleted Is Nothing) Then
                Me.GetUserDataOperationCompleted = AddressOf Me.OnGetUserDataOperationCompleted
            End If
            Me.InvokeAsync("GetUserData", New Object() {ClientID, ClientPassword, LicenseKey, DataKey}, Me.GetUserDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUserDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUserDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUserDataCompleted(Me, New GetUserDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetUserData", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SetUserData(ByVal ClientID As String, ByVal ClientPassword As String, ByVal LicenseKey As String, ByVal DataKey As String, ByVal Data As String) As Boolean
            Dim results() As Object = Me.Invoke("SetUserData", New Object() {ClientID, ClientPassword, LicenseKey, DataKey, Data})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SetUserDataAsync(ByVal ClientID As String, ByVal ClientPassword As String, ByVal LicenseKey As String, ByVal DataKey As String, ByVal Data As String)
            Me.SetUserDataAsync(ClientID, ClientPassword, LicenseKey, DataKey, Data, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetUserDataAsync(ByVal ClientID As String, ByVal ClientPassword As String, ByVal LicenseKey As String, ByVal DataKey As String, ByVal Data As String, ByVal userState As Object)
            If (Me.SetUserDataOperationCompleted Is Nothing) Then
                Me.SetUserDataOperationCompleted = AddressOf Me.OnSetUserDataOperationCompleted
            End If
            Me.InvokeAsync("SetUserData", New Object() {ClientID, ClientPassword, LicenseKey, DataKey, Data}, Me.SetUserDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetUserDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetUserDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetUserDataCompleted(Me, New SetUserDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ClearAlerts", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ClearAlerts(ByVal ClientID As String, ByVal ClientPassword As String, ByVal LicenseKey As String) As Boolean
            Dim results() As Object = Me.Invoke("ClearAlerts", New Object() {ClientID, ClientPassword, LicenseKey})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ClearAlertsAsync(ByVal ClientID As String, ByVal ClientPassword As String, ByVal LicenseKey As String)
            Me.ClearAlertsAsync(ClientID, ClientPassword, LicenseKey, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ClearAlertsAsync(ByVal ClientID As String, ByVal ClientPassword As String, ByVal LicenseKey As String, ByVal userState As Object)
            If (Me.ClearAlertsOperationCompleted Is Nothing) Then
                Me.ClearAlertsOperationCompleted = AddressOf Me.OnClearAlertsOperationCompleted
            End If
            Me.InvokeAsync("ClearAlerts", New Object() {ClientID, ClientPassword, LicenseKey}, Me.ClearAlertsOperationCompleted, userState)
        End Sub
        
        Private Sub OnClearAlertsOperationCompleted(ByVal arg As Object)
            If (Not (Me.ClearAlertsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ClearAlertsCompleted(Me, New ClearAlertsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAlerts", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAlerts(ByVal ClientID As String, ByVal ClientPassword As String, ByVal LicenseKey As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetAlerts", New Object() {ClientID, ClientPassword, LicenseKey})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAlertsAsync(ByVal ClientID As String, ByVal ClientPassword As String, ByVal LicenseKey As String)
            Me.GetAlertsAsync(ClientID, ClientPassword, LicenseKey, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAlertsAsync(ByVal ClientID As String, ByVal ClientPassword As String, ByVal LicenseKey As String, ByVal userState As Object)
            If (Me.GetAlertsOperationCompleted Is Nothing) Then
                Me.GetAlertsOperationCompleted = AddressOf Me.OnGetAlertsOperationCompleted
            End If
            Me.InvokeAsync("GetAlerts", New Object() {ClientID, ClientPassword, LicenseKey}, Me.GetAlertsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAlertsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAlertsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAlertsCompleted(Me, New GetAlertsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPublicData", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPublicData(ByVal DataKey As String) As String
            Dim results() As Object = Me.Invoke("GetPublicData", New Object() {DataKey})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPublicDataAsync(ByVal DataKey As String)
            Me.GetPublicDataAsync(DataKey, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPublicDataAsync(ByVal DataKey As String, ByVal userState As Object)
            If (Me.GetPublicDataOperationCompleted Is Nothing) Then
                Me.GetPublicDataOperationCompleted = AddressOf Me.OnGetPublicDataOperationCompleted
            End If
            Me.InvokeAsync("GetPublicData", New Object() {DataKey}, Me.GetPublicDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPublicDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPublicDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPublicDataCompleted(Me, New GetPublicDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ListPublicData", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ListPublicData(ByVal Contains As String) As Object()
            Dim results() As Object = Me.Invoke("ListPublicData", New Object() {Contains})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub ListPublicDataAsync(ByVal Contains As String)
            Me.ListPublicDataAsync(Contains, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ListPublicDataAsync(ByVal Contains As String, ByVal userState As Object)
            If (Me.ListPublicDataOperationCompleted Is Nothing) Then
                Me.ListPublicDataOperationCompleted = AddressOf Me.OnListPublicDataOperationCompleted
            End If
            Me.InvokeAsync("ListPublicData", New Object() {Contains}, Me.ListPublicDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnListPublicDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.ListPublicDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ListPublicDataCompleted(Me, New ListPublicDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub ListAllUserKeysCompletedEventHandler(ByVal sender As Object, ByVal e As ListAllUserKeysCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ListAllUserKeysCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub CreateLicenseKeyCompletedEventHandler(ByVal sender As Object, ByVal e As CreateLicenseKeyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateLicenseKeyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub ActivateLicenseKeyCompletedEventHandler(ByVal sender As Object, ByVal e As ActivateLicenseKeyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ActivateLicenseKeyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub DeincrementLicenseKeyCompletedEventHandler(ByVal sender As Object, ByVal e As DeincrementLicenseKeyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeincrementLicenseKeyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub GetActivationsRemainingCompletedEventHandler(ByVal sender As Object, ByVal e As GetActivationsRemainingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetActivationsRemainingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub IsTrialModeCompletedEventHandler(ByVal sender As Object, ByVal e As IsTrialModeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IsTrialModeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub MarkLicenseAsPaidCompletedEventHandler(ByVal sender As Object, ByVal e As MarkLicenseAsPaidCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class MarkLicenseAsPaidCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub ValidateLicenseKeyCompletedEventHandler(ByVal sender As Object, ByVal e As ValidateLicenseKeyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ValidateLicenseKeyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub RemoveUserCompletedEventHandler(ByVal sender As Object, ByVal e As RemoveUserCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RemoveUserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub ListUserDataCompletedEventHandler(ByVal sender As Object, ByVal e As ListUserDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ListUserDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub GetUserDataCompletedEventHandler(ByVal sender As Object, ByVal e As GetUserDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUserDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub SetUserDataCompletedEventHandler(ByVal sender As Object, ByVal e As SetUserDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SetUserDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub ClearAlertsCompletedEventHandler(ByVal sender As Object, ByVal e As ClearAlertsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ClearAlertsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub GetAlertsCompletedEventHandler(ByVal sender As Object, ByVal e As GetAlertsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAlertsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub GetPublicDataCompletedEventHandler(ByVal sender As Object, ByVal e As GetPublicDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPublicDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub ListPublicDataCompletedEventHandler(ByVal sender As Object, ByVal e As ListPublicDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ListPublicDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
End Namespace
